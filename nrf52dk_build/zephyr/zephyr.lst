
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 1a 00 20 09 24 00 00 65 6d 00 00 c1 23 00 00     ... .$..em...#..
  10:	c1 23 00 00 c1 23 00 00 c1 23 00 00 00 00 00 00     .#...#...#......
	...
  2c:	4d 20 00 00 c1 23 00 00 00 00 00 00 f5 1f 00 00     M ...#..........
  3c:	c1 23 00 00                                         .#..

00000040 <_irq_vector_table>:
  40:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  50:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  60:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  70:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  80:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  90:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  a0:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  b0:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  c0:	2d 21 00 00 2d 21 00 00 2d 21 00 00 2d 21 00 00     -!..-!..-!..-!..
  d0:	2d 21 00 00 2d 21 00 00 2d 21 00 00                 -!..-!..-!..

Disassembly of section text:

000000dc <__aeabi_fmul>:
      dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
      e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
      e4:	bf1e      	ittt	ne
      e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
      ea:	ea92 0f0c 	teqne	r2, ip
      ee:	ea93 0f0c 	teqne	r3, ip
      f2:	d06f      	beq.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
      f4:	441a      	add	r2, r3
      f6:	ea80 0c01 	eor.w	ip, r0, r1
      fa:	0240      	lsls	r0, r0, #9
      fc:	bf18      	it	ne
      fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     102:	d01e      	beq.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     108:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     10c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     110:	fba0 3101 	umull	r3, r1, r0, r1
     114:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     118:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     11c:	bf3e      	ittt	cc
     11e:	0049      	lslcc	r1, r1, #1
     120:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     124:	005b      	lslcc	r3, r3, #1
     126:	ea40 0001 	orr.w	r0, r0, r1
     12a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     12e:	2afd      	cmp	r2, #253	; 0xfd
     130:	d81d      	bhi.n	16e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1>
     132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     136:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     13a:	bf08      	it	eq
     13c:	f020 0001 	biceq.w	r0, r0, #1
     140:	4770      	bx	lr
     142:	f090 0f00 	teq	r0, #0
     146:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     14a:	bf08      	it	eq
     14c:	0249      	lsleq	r1, r1, #9
     14e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     152:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     156:	3a7f      	subs	r2, #127	; 0x7f
     158:	bfc2      	ittt	gt
     15a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     15e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     162:	4770      	bxgt	lr
     164:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     168:	f04f 0300 	mov.w	r3, #0
     16c:	3a01      	subs	r2, #1
     16e:	dc5d      	bgt.n	22c <CONFIG_FLASH_SIZE+0x2c>
     170:	f112 0f19 	cmn.w	r2, #25
     174:	bfdc      	itt	le
     176:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     17a:	4770      	bxle	lr
     17c:	f1c2 0200 	rsb	r2, r2, #0
     180:	0041      	lsls	r1, r0, #1
     182:	fa21 f102 	lsr.w	r1, r1, r2
     186:	f1c2 0220 	rsb	r2, r2, #32
     18a:	fa00 fc02 	lsl.w	ip, r0, r2
     18e:	ea5f 0031 	movs.w	r0, r1, rrx
     192:	f140 0000 	adc.w	r0, r0, #0
     196:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     19a:	bf08      	it	eq
     19c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1a0:	4770      	bx	lr
     1a2:	f092 0f00 	teq	r2, #0
     1a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1aa:	bf02      	ittt	eq
     1ac:	0040      	lsleq	r0, r0, #1
     1ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1b2:	3a01      	subeq	r2, #1
     1b4:	d0f9      	beq.n	1aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3d>
     1b6:	ea40 000c 	orr.w	r0, r0, ip
     1ba:	f093 0f00 	teq	r3, #0
     1be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1c2:	bf02      	ittt	eq
     1c4:	0049      	lsleq	r1, r1, #1
     1c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ca:	3b01      	subeq	r3, #1
     1cc:	d0f9      	beq.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     1ce:	ea41 010c 	orr.w	r1, r1, ip
     1d2:	e78f      	b.n	f4 <__aeabi_fmul+0x18>
     1d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1d8:	ea92 0f0c 	teq	r2, ip
     1dc:	bf18      	it	ne
     1de:	ea93 0f0c 	teqne	r3, ip
     1e2:	d00a      	beq.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     1e8:	bf18      	it	ne
     1ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     1ee:	d1d8      	bne.n	1a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x35>
     1f0:	ea80 0001 	eor.w	r0, r0, r1
     1f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     1f8:	4770      	bx	lr
     1fa:	f090 0f00 	teq	r0, #0
     1fe:	bf17      	itett	ne
     200:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     204:	4608      	moveq	r0, r1
     206:	f091 0f00 	teqne	r1, #0
     20a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     20e:	d014      	beq.n	23a <CONFIG_FLASH_SIZE+0x3a>
     210:	ea92 0f0c 	teq	r2, ip
     214:	d101      	bne.n	21a <CONFIG_FLASH_SIZE+0x1a>
     216:	0242      	lsls	r2, r0, #9
     218:	d10f      	bne.n	23a <CONFIG_FLASH_SIZE+0x3a>
     21a:	ea93 0f0c 	teq	r3, ip
     21e:	d103      	bne.n	228 <CONFIG_FLASH_SIZE+0x28>
     220:	024b      	lsls	r3, r1, #9
     222:	bf18      	it	ne
     224:	4608      	movne	r0, r1
     226:	d108      	bne.n	23a <CONFIG_FLASH_SIZE+0x3a>
     228:	ea80 0001 	eor.w	r0, r0, r1
     22c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     230:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     234:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     238:	4770      	bx	lr
     23a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     23e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     242:	4770      	bx	lr

00000244 <__aeabi_drsub>:
     244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     248:	e002      	b.n	250 <__adddf3>
     24a:	bf00      	nop

0000024c <__aeabi_dsub>:
     24c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000250 <__adddf3>:
     250:	b530      	push	{r4, r5, lr}
     252:	ea4f 0441 	mov.w	r4, r1, lsl #1
     256:	ea4f 0543 	mov.w	r5, r3, lsl #1
     25a:	ea94 0f05 	teq	r4, r5
     25e:	bf08      	it	eq
     260:	ea90 0f02 	teqeq	r0, r2
     264:	bf1f      	itttt	ne
     266:	ea54 0c00 	orrsne.w	ip, r4, r0
     26a:	ea55 0c02 	orrsne.w	ip, r5, r2
     26e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     276:	f000 80e2 	beq.w	43e <CONFIG_MAIN_STACK_SIZE+0x3e>
     27a:	ea4f 5454 	mov.w	r4, r4, lsr #21
     27e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     282:	bfb8      	it	lt
     284:	426d      	neglt	r5, r5
     286:	dd0c      	ble.n	2a2 <__adddf3+0x52>
     288:	442c      	add	r4, r5
     28a:	ea80 0202 	eor.w	r2, r0, r2
     28e:	ea81 0303 	eor.w	r3, r1, r3
     292:	ea82 0000 	eor.w	r0, r2, r0
     296:	ea83 0101 	eor.w	r1, r3, r1
     29a:	ea80 0202 	eor.w	r2, r0, r2
     29e:	ea81 0303 	eor.w	r3, r1, r3
     2a2:	2d36      	cmp	r5, #54	; 0x36
     2a4:	bf88      	it	hi
     2a6:	bd30      	pophi	{r4, r5, pc}
     2a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
     2b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     2b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     2b8:	d002      	beq.n	2c0 <__adddf3+0x70>
     2ba:	4240      	negs	r0, r0
     2bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2cc:	d002      	beq.n	2d4 <__adddf3+0x84>
     2ce:	4252      	negs	r2, r2
     2d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2d4:	ea94 0f05 	teq	r4, r5
     2d8:	f000 80a7 	beq.w	42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     2dc:	f1a4 0401 	sub.w	r4, r4, #1
     2e0:	f1d5 0e20 	rsbs	lr, r5, #32
     2e4:	db0d      	blt.n	302 <__adddf3+0xb2>
     2e6:	fa02 fc0e 	lsl.w	ip, r2, lr
     2ea:	fa22 f205 	lsr.w	r2, r2, r5
     2ee:	1880      	adds	r0, r0, r2
     2f0:	f141 0100 	adc.w	r1, r1, #0
     2f4:	fa03 f20e 	lsl.w	r2, r3, lr
     2f8:	1880      	adds	r0, r0, r2
     2fa:	fa43 f305 	asr.w	r3, r3, r5
     2fe:	4159      	adcs	r1, r3
     300:	e00e      	b.n	320 <__adddf3+0xd0>
     302:	f1a5 0520 	sub.w	r5, r5, #32
     306:	f10e 0e20 	add.w	lr, lr, #32
     30a:	2a01      	cmp	r2, #1
     30c:	fa03 fc0e 	lsl.w	ip, r3, lr
     310:	bf28      	it	cs
     312:	f04c 0c02 	orrcs.w	ip, ip, #2
     316:	fa43 f305 	asr.w	r3, r3, r5
     31a:	18c0      	adds	r0, r0, r3
     31c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     324:	d507      	bpl.n	336 <__adddf3+0xe6>
     326:	f04f 0e00 	mov.w	lr, #0
     32a:	f1dc 0c00 	rsbs	ip, ip, #0
     32e:	eb7e 0000 	sbcs.w	r0, lr, r0
     332:	eb6e 0101 	sbc.w	r1, lr, r1
     336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     33a:	d31b      	bcc.n	374 <__adddf3+0x124>
     33c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     340:	d30c      	bcc.n	35c <__adddf3+0x10c>
     342:	0849      	lsrs	r1, r1, #1
     344:	ea5f 0030 	movs.w	r0, r0, rrx
     348:	ea4f 0c3c 	mov.w	ip, ip, rrx
     34c:	f104 0401 	add.w	r4, r4, #1
     350:	ea4f 5244 	mov.w	r2, r4, lsl #21
     354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     358:	f080 809a 	bcs.w	490 <CONFIG_MAIN_STACK_SIZE+0x90>
     35c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     360:	bf08      	it	eq
     362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     366:	f150 0000 	adcs.w	r0, r0, #0
     36a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     36e:	ea41 0105 	orr.w	r1, r1, r5
     372:	bd30      	pop	{r4, r5, pc}
     374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     378:	4140      	adcs	r0, r0
     37a:	eb41 0101 	adc.w	r1, r1, r1
     37e:	3c01      	subs	r4, #1
     380:	bf28      	it	cs
     382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     386:	d2e9      	bcs.n	35c <__adddf3+0x10c>
     388:	f091 0f00 	teq	r1, #0
     38c:	bf04      	itt	eq
     38e:	4601      	moveq	r1, r0
     390:	2000      	moveq	r0, #0
     392:	fab1 f381 	clz	r3, r1
     396:	bf08      	it	eq
     398:	3320      	addeq	r3, #32
     39a:	f1a3 030b 	sub.w	r3, r3, #11
     39e:	f1b3 0220 	subs.w	r2, r3, #32
     3a2:	da0c      	bge.n	3be <__adddf3+0x16e>
     3a4:	320c      	adds	r2, #12
     3a6:	dd08      	ble.n	3ba <__adddf3+0x16a>
     3a8:	f102 0c14 	add.w	ip, r2, #20
     3ac:	f1c2 020c 	rsb	r2, r2, #12
     3b0:	fa01 f00c 	lsl.w	r0, r1, ip
     3b4:	fa21 f102 	lsr.w	r1, r1, r2
     3b8:	e00c      	b.n	3d4 <__adddf3+0x184>
     3ba:	f102 0214 	add.w	r2, r2, #20
     3be:	bfd8      	it	le
     3c0:	f1c2 0c20 	rsble	ip, r2, #32
     3c4:	fa01 f102 	lsl.w	r1, r1, r2
     3c8:	fa20 fc0c 	lsr.w	ip, r0, ip
     3cc:	bfdc      	itt	le
     3ce:	ea41 010c 	orrle.w	r1, r1, ip
     3d2:	4090      	lslle	r0, r2
     3d4:	1ae4      	subs	r4, r4, r3
     3d6:	bfa2      	ittt	ge
     3d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     3dc:	4329      	orrge	r1, r5
     3de:	bd30      	popge	{r4, r5, pc}
     3e0:	ea6f 0404 	mvn.w	r4, r4
     3e4:	3c1f      	subs	r4, #31
     3e6:	da1c      	bge.n	422 <CONFIG_MAIN_STACK_SIZE+0x22>
     3e8:	340c      	adds	r4, #12
     3ea:	dc0e      	bgt.n	40a <CONFIG_MAIN_STACK_SIZE+0xa>
     3ec:	f104 0414 	add.w	r4, r4, #20
     3f0:	f1c4 0220 	rsb	r2, r4, #32
     3f4:	fa20 f004 	lsr.w	r0, r0, r4
     3f8:	fa01 f302 	lsl.w	r3, r1, r2
     3fc:	ea40 0003 	orr.w	r0, r0, r3
     400:	fa21 f304 	lsr.w	r3, r1, r4
     404:	ea45 0103 	orr.w	r1, r5, r3
     408:	bd30      	pop	{r4, r5, pc}
     40a:	f1c4 040c 	rsb	r4, r4, #12
     40e:	f1c4 0220 	rsb	r2, r4, #32
     412:	fa20 f002 	lsr.w	r0, r0, r2
     416:	fa01 f304 	lsl.w	r3, r1, r4
     41a:	ea40 0003 	orr.w	r0, r0, r3
     41e:	4629      	mov	r1, r5
     420:	bd30      	pop	{r4, r5, pc}
     422:	fa21 f004 	lsr.w	r0, r1, r4
     426:	4629      	mov	r1, r5
     428:	bd30      	pop	{r4, r5, pc}
     42a:	f094 0f00 	teq	r4, #0
     42e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     432:	bf06      	itte	eq
     434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     438:	3401      	addeq	r4, #1
     43a:	3d01      	subne	r5, #1
     43c:	e74e      	b.n	2dc <__adddf3+0x8c>
     43e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     442:	bf18      	it	ne
     444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     448:	d029      	beq.n	49e <CONFIG_MAIN_STACK_SIZE+0x9e>
     44a:	ea94 0f05 	teq	r4, r5
     44e:	bf08      	it	eq
     450:	ea90 0f02 	teqeq	r0, r2
     454:	d005      	beq.n	462 <CONFIG_MAIN_STACK_SIZE+0x62>
     456:	ea54 0c00 	orrs.w	ip, r4, r0
     45a:	bf04      	itt	eq
     45c:	4619      	moveq	r1, r3
     45e:	4610      	moveq	r0, r2
     460:	bd30      	pop	{r4, r5, pc}
     462:	ea91 0f03 	teq	r1, r3
     466:	bf1e      	ittt	ne
     468:	2100      	movne	r1, #0
     46a:	2000      	movne	r0, #0
     46c:	bd30      	popne	{r4, r5, pc}
     46e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     472:	d105      	bne.n	480 <CONFIG_MAIN_STACK_SIZE+0x80>
     474:	0040      	lsls	r0, r0, #1
     476:	4149      	adcs	r1, r1
     478:	bf28      	it	cs
     47a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     47e:	bd30      	pop	{r4, r5, pc}
     480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     484:	bf3c      	itt	cc
     486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     48a:	bd30      	popcc	{r4, r5, pc}
     48c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     498:	f04f 0000 	mov.w	r0, #0
     49c:	bd30      	pop	{r4, r5, pc}
     49e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     4a2:	bf1a      	itte	ne
     4a4:	4619      	movne	r1, r3
     4a6:	4610      	movne	r0, r2
     4a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     4ac:	bf1c      	itt	ne
     4ae:	460b      	movne	r3, r1
     4b0:	4602      	movne	r2, r0
     4b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     4b6:	bf06      	itte	eq
     4b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     4bc:	ea91 0f03 	teqeq	r1, r3
     4c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4c4:	bd30      	pop	{r4, r5, pc}
     4c6:	bf00      	nop

000004c8 <__aeabi_ui2d>:
     4c8:	f090 0f00 	teq	r0, #0
     4cc:	bf04      	itt	eq
     4ce:	2100      	moveq	r1, #0
     4d0:	4770      	bxeq	lr
     4d2:	b530      	push	{r4, r5, lr}
     4d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4dc:	f04f 0500 	mov.w	r5, #0
     4e0:	f04f 0100 	mov.w	r1, #0
     4e4:	e750      	b.n	388 <__adddf3+0x138>
     4e6:	bf00      	nop

000004e8 <__aeabi_i2d>:
     4e8:	f090 0f00 	teq	r0, #0
     4ec:	bf04      	itt	eq
     4ee:	2100      	moveq	r1, #0
     4f0:	4770      	bxeq	lr
     4f2:	b530      	push	{r4, r5, lr}
     4f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     500:	bf48      	it	mi
     502:	4240      	negmi	r0, r0
     504:	f04f 0100 	mov.w	r1, #0
     508:	e73e      	b.n	388 <__adddf3+0x138>
     50a:	bf00      	nop

0000050c <__aeabi_f2d>:
     50c:	0042      	lsls	r2, r0, #1
     50e:	ea4f 01e2 	mov.w	r1, r2, asr #3
     512:	ea4f 0131 	mov.w	r1, r1, rrx
     516:	ea4f 7002 	mov.w	r0, r2, lsl #28
     51a:	bf1f      	itttt	ne
     51c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     528:	4770      	bxne	lr
     52a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     52e:	bf08      	it	eq
     530:	4770      	bxeq	lr
     532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     536:	bf04      	itt	eq
     538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     53c:	4770      	bxeq	lr
     53e:	b530      	push	{r4, r5, lr}
     540:	f44f 7460 	mov.w	r4, #896	; 0x380
     544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     54c:	e71c      	b.n	388 <__adddf3+0x138>
     54e:	bf00      	nop

00000550 <__aeabi_ul2d>:
     550:	ea50 0201 	orrs.w	r2, r0, r1
     554:	bf08      	it	eq
     556:	4770      	bxeq	lr
     558:	b530      	push	{r4, r5, lr}
     55a:	f04f 0500 	mov.w	r5, #0
     55e:	e00a      	b.n	576 <__aeabi_l2d+0x16>

00000560 <__aeabi_l2d>:
     560:	ea50 0201 	orrs.w	r2, r0, r1
     564:	bf08      	it	eq
     566:	4770      	bxeq	lr
     568:	b530      	push	{r4, r5, lr}
     56a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     56e:	d502      	bpl.n	576 <__aeabi_l2d+0x16>
     570:	4240      	negs	r0, r0
     572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     576:	f44f 6480 	mov.w	r4, #1024	; 0x400
     57a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     57e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     582:	f43f aed8 	beq.w	336 <__adddf3+0xe6>
     586:	f04f 0203 	mov.w	r2, #3
     58a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     58e:	bf18      	it	ne
     590:	3203      	addne	r2, #3
     592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     596:	bf18      	it	ne
     598:	3203      	addne	r2, #3
     59a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     59e:	f1c2 0320 	rsb	r3, r2, #32
     5a2:	fa00 fc03 	lsl.w	ip, r0, r3
     5a6:	fa20 f002 	lsr.w	r0, r0, r2
     5aa:	fa01 fe03 	lsl.w	lr, r1, r3
     5ae:	ea40 000e 	orr.w	r0, r0, lr
     5b2:	fa21 f102 	lsr.w	r1, r1, r2
     5b6:	4414      	add	r4, r2
     5b8:	e6bd      	b.n	336 <__adddf3+0xe6>
     5ba:	bf00      	nop

000005bc <__aeabi_frsub>:
     5bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     5c0:	e002      	b.n	5c8 <__addsf3>
     5c2:	bf00      	nop

000005c4 <__aeabi_fsub>:
     5c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000005c8 <__addsf3>:
     5c8:	0042      	lsls	r2, r0, #1
     5ca:	bf1f      	itttt	ne
     5cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     5d0:	ea92 0f03 	teqne	r2, r3
     5d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     5d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     5dc:	d06a      	beq.n	6b4 <__addsf3+0xec>
     5de:	ea4f 6212 	mov.w	r2, r2, lsr #24
     5e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     5e6:	bfc1      	itttt	gt
     5e8:	18d2      	addgt	r2, r2, r3
     5ea:	4041      	eorgt	r1, r0
     5ec:	4048      	eorgt	r0, r1
     5ee:	4041      	eorgt	r1, r0
     5f0:	bfb8      	it	lt
     5f2:	425b      	neglt	r3, r3
     5f4:	2b19      	cmp	r3, #25
     5f6:	bf88      	it	hi
     5f8:	4770      	bxhi	lr
     5fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     5fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     606:	bf18      	it	ne
     608:	4240      	negne	r0, r0
     60a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     60e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     612:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     616:	bf18      	it	ne
     618:	4249      	negne	r1, r1
     61a:	ea92 0f03 	teq	r2, r3
     61e:	d03f      	beq.n	6a0 <__addsf3+0xd8>
     620:	f1a2 0201 	sub.w	r2, r2, #1
     624:	fa41 fc03 	asr.w	ip, r1, r3
     628:	eb10 000c 	adds.w	r0, r0, ip
     62c:	f1c3 0320 	rsb	r3, r3, #32
     630:	fa01 f103 	lsl.w	r1, r1, r3
     634:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     638:	d502      	bpl.n	640 <__addsf3+0x78>
     63a:	4249      	negs	r1, r1
     63c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     640:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     644:	d313      	bcc.n	66e <__addsf3+0xa6>
     646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     64a:	d306      	bcc.n	65a <__addsf3+0x92>
     64c:	0840      	lsrs	r0, r0, #1
     64e:	ea4f 0131 	mov.w	r1, r1, rrx
     652:	f102 0201 	add.w	r2, r2, #1
     656:	2afe      	cmp	r2, #254	; 0xfe
     658:	d251      	bcs.n	6fe <__addsf3+0x136>
     65a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     65e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     662:	bf08      	it	eq
     664:	f020 0001 	biceq.w	r0, r0, #1
     668:	ea40 0003 	orr.w	r0, r0, r3
     66c:	4770      	bx	lr
     66e:	0049      	lsls	r1, r1, #1
     670:	eb40 0000 	adc.w	r0, r0, r0
     674:	3a01      	subs	r2, #1
     676:	bf28      	it	cs
     678:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     67c:	d2ed      	bcs.n	65a <__addsf3+0x92>
     67e:	fab0 fc80 	clz	ip, r0
     682:	f1ac 0c08 	sub.w	ip, ip, #8
     686:	ebb2 020c 	subs.w	r2, r2, ip
     68a:	fa00 f00c 	lsl.w	r0, r0, ip
     68e:	bfaa      	itet	ge
     690:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     694:	4252      	neglt	r2, r2
     696:	4318      	orrge	r0, r3
     698:	bfbc      	itt	lt
     69a:	40d0      	lsrlt	r0, r2
     69c:	4318      	orrlt	r0, r3
     69e:	4770      	bx	lr
     6a0:	f092 0f00 	teq	r2, #0
     6a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     6a8:	bf06      	itte	eq
     6aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     6ae:	3201      	addeq	r2, #1
     6b0:	3b01      	subne	r3, #1
     6b2:	e7b5      	b.n	620 <__addsf3+0x58>
     6b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     6b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     6bc:	bf18      	it	ne
     6be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     6c2:	d021      	beq.n	708 <__addsf3+0x140>
     6c4:	ea92 0f03 	teq	r2, r3
     6c8:	d004      	beq.n	6d4 <__addsf3+0x10c>
     6ca:	f092 0f00 	teq	r2, #0
     6ce:	bf08      	it	eq
     6d0:	4608      	moveq	r0, r1
     6d2:	4770      	bx	lr
     6d4:	ea90 0f01 	teq	r0, r1
     6d8:	bf1c      	itt	ne
     6da:	2000      	movne	r0, #0
     6dc:	4770      	bxne	lr
     6de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     6e2:	d104      	bne.n	6ee <__addsf3+0x126>
     6e4:	0040      	lsls	r0, r0, #1
     6e6:	bf28      	it	cs
     6e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     6ec:	4770      	bx	lr
     6ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     6f2:	bf3c      	itt	cc
     6f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     6f8:	4770      	bxcc	lr
     6fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     6fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     702:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     706:	4770      	bx	lr
     708:	ea7f 6222 	mvns.w	r2, r2, asr #24
     70c:	bf16      	itet	ne
     70e:	4608      	movne	r0, r1
     710:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     714:	4601      	movne	r1, r0
     716:	0242      	lsls	r2, r0, #9
     718:	bf06      	itte	eq
     71a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     71e:	ea90 0f01 	teqeq	r0, r1
     722:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     726:	4770      	bx	lr

00000728 <__aeabi_ui2f>:
     728:	f04f 0300 	mov.w	r3, #0
     72c:	e004      	b.n	738 <__aeabi_i2f+0x8>
     72e:	bf00      	nop

00000730 <__aeabi_i2f>:
     730:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     734:	bf48      	it	mi
     736:	4240      	negmi	r0, r0
     738:	ea5f 0c00 	movs.w	ip, r0
     73c:	bf08      	it	eq
     73e:	4770      	bxeq	lr
     740:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     744:	4601      	mov	r1, r0
     746:	f04f 0000 	mov.w	r0, #0
     74a:	e01c      	b.n	786 <__aeabi_l2f+0x2a>

0000074c <__aeabi_ul2f>:
     74c:	ea50 0201 	orrs.w	r2, r0, r1
     750:	bf08      	it	eq
     752:	4770      	bxeq	lr
     754:	f04f 0300 	mov.w	r3, #0
     758:	e00a      	b.n	770 <__aeabi_l2f+0x14>
     75a:	bf00      	nop

0000075c <__aeabi_l2f>:
     75c:	ea50 0201 	orrs.w	r2, r0, r1
     760:	bf08      	it	eq
     762:	4770      	bxeq	lr
     764:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     768:	d502      	bpl.n	770 <__aeabi_l2f+0x14>
     76a:	4240      	negs	r0, r0
     76c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     770:	ea5f 0c01 	movs.w	ip, r1
     774:	bf02      	ittt	eq
     776:	4684      	moveq	ip, r0
     778:	4601      	moveq	r1, r0
     77a:	2000      	moveq	r0, #0
     77c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     780:	bf08      	it	eq
     782:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     786:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     78a:	fabc f28c 	clz	r2, ip
     78e:	3a08      	subs	r2, #8
     790:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     794:	db10      	blt.n	7b8 <__aeabi_l2f+0x5c>
     796:	fa01 fc02 	lsl.w	ip, r1, r2
     79a:	4463      	add	r3, ip
     79c:	fa00 fc02 	lsl.w	ip, r0, r2
     7a0:	f1c2 0220 	rsb	r2, r2, #32
     7a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     7a8:	fa20 f202 	lsr.w	r2, r0, r2
     7ac:	eb43 0002 	adc.w	r0, r3, r2
     7b0:	bf08      	it	eq
     7b2:	f020 0001 	biceq.w	r0, r0, #1
     7b6:	4770      	bx	lr
     7b8:	f102 0220 	add.w	r2, r2, #32
     7bc:	fa01 fc02 	lsl.w	ip, r1, r2
     7c0:	f1c2 0220 	rsb	r2, r2, #32
     7c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     7c8:	fa21 f202 	lsr.w	r2, r1, r2
     7cc:	eb43 0002 	adc.w	r0, r3, r2
     7d0:	bf08      	it	eq
     7d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     7d6:	4770      	bx	lr

000007d8 <__aeabi_uldivmod>:
     7d8:	b953      	cbnz	r3, 7f0 <__aeabi_uldivmod+0x18>
     7da:	b94a      	cbnz	r2, 7f0 <__aeabi_uldivmod+0x18>
     7dc:	2900      	cmp	r1, #0
     7de:	bf08      	it	eq
     7e0:	2800      	cmpeq	r0, #0
     7e2:	bf1c      	itt	ne
     7e4:	f04f 31ff 	movne.w	r1, #4294967295
     7e8:	f04f 30ff 	movne.w	r0, #4294967295
     7ec:	f000 b80c 	b.w	808 <__aeabi_idiv0>
     7f0:	f1ad 0c08 	sub.w	ip, sp, #8
     7f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     7f8:	f000 f808 	bl	80c <__udivmoddi4>
     7fc:	f8dd e004 	ldr.w	lr, [sp, #4]
     800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     804:	b004      	add	sp, #16
     806:	4770      	bx	lr

00000808 <__aeabi_idiv0>:
     808:	4770      	bx	lr
     80a:	bf00      	nop

0000080c <__udivmoddi4>:
     80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     810:	4607      	mov	r7, r0
     812:	468c      	mov	ip, r1
     814:	4608      	mov	r0, r1
     816:	9e09      	ldr	r6, [sp, #36]	; 0x24
     818:	4615      	mov	r5, r2
     81a:	463c      	mov	r4, r7
     81c:	4619      	mov	r1, r3
     81e:	2b00      	cmp	r3, #0
     820:	f040 80c6 	bne.w	9b0 <__udivmoddi4+0x1a4>
     824:	4282      	cmp	r2, r0
     826:	fab2 f782 	clz	r7, r2
     82a:	d946      	bls.n	8ba <__udivmoddi4+0xae>
     82c:	b14f      	cbz	r7, 842 <__udivmoddi4+0x36>
     82e:	f1c7 0e20 	rsb	lr, r7, #32
     832:	fa24 fe0e 	lsr.w	lr, r4, lr
     836:	fa00 f307 	lsl.w	r3, r0, r7
     83a:	40bd      	lsls	r5, r7
     83c:	ea4e 0c03 	orr.w	ip, lr, r3
     840:	40bc      	lsls	r4, r7
     842:	ea4f 4815 	mov.w	r8, r5, lsr #16
     846:	fa1f fe85 	uxth.w	lr, r5
     84a:	fbbc f9f8 	udiv	r9, ip, r8
     84e:	0c22      	lsrs	r2, r4, #16
     850:	fb08 c319 	mls	r3, r8, r9, ip
     854:	fb09 fa0e 	mul.w	sl, r9, lr
     858:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     85c:	459a      	cmp	sl, r3
     85e:	d928      	bls.n	8b2 <__udivmoddi4+0xa6>
     860:	18eb      	adds	r3, r5, r3
     862:	f109 30ff 	add.w	r0, r9, #4294967295
     866:	d204      	bcs.n	872 <__udivmoddi4+0x66>
     868:	459a      	cmp	sl, r3
     86a:	d902      	bls.n	872 <__udivmoddi4+0x66>
     86c:	f1a9 0002 	sub.w	r0, r9, #2
     870:	442b      	add	r3, r5
     872:	eba3 030a 	sub.w	r3, r3, sl
     876:	b2a4      	uxth	r4, r4
     878:	fbb3 f2f8 	udiv	r2, r3, r8
     87c:	fb08 3312 	mls	r3, r8, r2, r3
     880:	fb02 fe0e 	mul.w	lr, r2, lr
     884:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     888:	45a6      	cmp	lr, r4
     88a:	d914      	bls.n	8b6 <__udivmoddi4+0xaa>
     88c:	192c      	adds	r4, r5, r4
     88e:	f102 33ff 	add.w	r3, r2, #4294967295
     892:	d203      	bcs.n	89c <__udivmoddi4+0x90>
     894:	45a6      	cmp	lr, r4
     896:	d901      	bls.n	89c <__udivmoddi4+0x90>
     898:	1e93      	subs	r3, r2, #2
     89a:	442c      	add	r4, r5
     89c:	eba4 040e 	sub.w	r4, r4, lr
     8a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     8a4:	b11e      	cbz	r6, 8ae <__udivmoddi4+0xa2>
     8a6:	40fc      	lsrs	r4, r7
     8a8:	2300      	movs	r3, #0
     8aa:	6034      	str	r4, [r6, #0]
     8ac:	6073      	str	r3, [r6, #4]
     8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8b2:	4648      	mov	r0, r9
     8b4:	e7dd      	b.n	872 <__udivmoddi4+0x66>
     8b6:	4613      	mov	r3, r2
     8b8:	e7f0      	b.n	89c <__udivmoddi4+0x90>
     8ba:	b902      	cbnz	r2, 8be <__udivmoddi4+0xb2>
     8bc:	deff      	udf	#255	; 0xff
     8be:	bb87      	cbnz	r7, 922 <__udivmoddi4+0x116>
     8c0:	1a83      	subs	r3, r0, r2
     8c2:	2101      	movs	r1, #1
     8c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     8c8:	b2aa      	uxth	r2, r5
     8ca:	fbb3 fcfe 	udiv	ip, r3, lr
     8ce:	0c20      	lsrs	r0, r4, #16
     8d0:	fb0e 331c 	mls	r3, lr, ip, r3
     8d4:	fb0c f802 	mul.w	r8, ip, r2
     8d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     8dc:	4598      	cmp	r8, r3
     8de:	d963      	bls.n	9a8 <__udivmoddi4+0x19c>
     8e0:	18eb      	adds	r3, r5, r3
     8e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     8e6:	d204      	bcs.n	8f2 <__udivmoddi4+0xe6>
     8e8:	4598      	cmp	r8, r3
     8ea:	d902      	bls.n	8f2 <__udivmoddi4+0xe6>
     8ec:	f1ac 0002 	sub.w	r0, ip, #2
     8f0:	442b      	add	r3, r5
     8f2:	eba3 0308 	sub.w	r3, r3, r8
     8f6:	b2a4      	uxth	r4, r4
     8f8:	fbb3 fcfe 	udiv	ip, r3, lr
     8fc:	fb0e 331c 	mls	r3, lr, ip, r3
     900:	fb0c f202 	mul.w	r2, ip, r2
     904:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     908:	42a2      	cmp	r2, r4
     90a:	d94f      	bls.n	9ac <__udivmoddi4+0x1a0>
     90c:	192c      	adds	r4, r5, r4
     90e:	f10c 33ff 	add.w	r3, ip, #4294967295
     912:	d204      	bcs.n	91e <__udivmoddi4+0x112>
     914:	42a2      	cmp	r2, r4
     916:	d902      	bls.n	91e <__udivmoddi4+0x112>
     918:	f1ac 0302 	sub.w	r3, ip, #2
     91c:	442c      	add	r4, r5
     91e:	1aa4      	subs	r4, r4, r2
     920:	e7be      	b.n	8a0 <__udivmoddi4+0x94>
     922:	f1c7 0c20 	rsb	ip, r7, #32
     926:	fa20 f80c 	lsr.w	r8, r0, ip
     92a:	fa00 f307 	lsl.w	r3, r0, r7
     92e:	fa24 fc0c 	lsr.w	ip, r4, ip
     932:	40bd      	lsls	r5, r7
     934:	ea4c 0203 	orr.w	r2, ip, r3
     938:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     93c:	b2ab      	uxth	r3, r5
     93e:	fbb8 fcfe 	udiv	ip, r8, lr
     942:	0c11      	lsrs	r1, r2, #16
     944:	fb0e 801c 	mls	r0, lr, ip, r8
     948:	fb0c f903 	mul.w	r9, ip, r3
     94c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     950:	4581      	cmp	r9, r0
     952:	fa04 f407 	lsl.w	r4, r4, r7
     956:	d923      	bls.n	9a0 <__udivmoddi4+0x194>
     958:	1828      	adds	r0, r5, r0
     95a:	f10c 31ff 	add.w	r1, ip, #4294967295
     95e:	d204      	bcs.n	96a <__udivmoddi4+0x15e>
     960:	4581      	cmp	r9, r0
     962:	d902      	bls.n	96a <__udivmoddi4+0x15e>
     964:	f1ac 0102 	sub.w	r1, ip, #2
     968:	4428      	add	r0, r5
     96a:	eba0 0009 	sub.w	r0, r0, r9
     96e:	b292      	uxth	r2, r2
     970:	fbb0 fcfe 	udiv	ip, r0, lr
     974:	fb0e 001c 	mls	r0, lr, ip, r0
     978:	fb0c f803 	mul.w	r8, ip, r3
     97c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     980:	4598      	cmp	r8, r3
     982:	d90f      	bls.n	9a4 <__udivmoddi4+0x198>
     984:	18eb      	adds	r3, r5, r3
     986:	f10c 32ff 	add.w	r2, ip, #4294967295
     98a:	d204      	bcs.n	996 <__udivmoddi4+0x18a>
     98c:	4598      	cmp	r8, r3
     98e:	d902      	bls.n	996 <__udivmoddi4+0x18a>
     990:	f1ac 0202 	sub.w	r2, ip, #2
     994:	442b      	add	r3, r5
     996:	eba3 0308 	sub.w	r3, r3, r8
     99a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     99e:	e791      	b.n	8c4 <__udivmoddi4+0xb8>
     9a0:	4661      	mov	r1, ip
     9a2:	e7e2      	b.n	96a <__udivmoddi4+0x15e>
     9a4:	4662      	mov	r2, ip
     9a6:	e7f6      	b.n	996 <__udivmoddi4+0x18a>
     9a8:	4660      	mov	r0, ip
     9aa:	e7a2      	b.n	8f2 <__udivmoddi4+0xe6>
     9ac:	4663      	mov	r3, ip
     9ae:	e7b6      	b.n	91e <__udivmoddi4+0x112>
     9b0:	4283      	cmp	r3, r0
     9b2:	d905      	bls.n	9c0 <__udivmoddi4+0x1b4>
     9b4:	b10e      	cbz	r6, 9ba <__udivmoddi4+0x1ae>
     9b6:	e9c6 7000 	strd	r7, r0, [r6]
     9ba:	2100      	movs	r1, #0
     9bc:	4608      	mov	r0, r1
     9be:	e776      	b.n	8ae <__udivmoddi4+0xa2>
     9c0:	fab3 f183 	clz	r1, r3
     9c4:	b981      	cbnz	r1, 9e8 <__udivmoddi4+0x1dc>
     9c6:	4283      	cmp	r3, r0
     9c8:	d301      	bcc.n	9ce <__udivmoddi4+0x1c2>
     9ca:	42ba      	cmp	r2, r7
     9cc:	d80a      	bhi.n	9e4 <__udivmoddi4+0x1d8>
     9ce:	1abc      	subs	r4, r7, r2
     9d0:	eb60 0303 	sbc.w	r3, r0, r3
     9d4:	2001      	movs	r0, #1
     9d6:	469c      	mov	ip, r3
     9d8:	2e00      	cmp	r6, #0
     9da:	d068      	beq.n	aae <__udivmoddi4+0x2a2>
     9dc:	e9c6 4c00 	strd	r4, ip, [r6]
     9e0:	2100      	movs	r1, #0
     9e2:	e764      	b.n	8ae <__udivmoddi4+0xa2>
     9e4:	4608      	mov	r0, r1
     9e6:	e7f7      	b.n	9d8 <__udivmoddi4+0x1cc>
     9e8:	f1c1 0c20 	rsb	ip, r1, #32
     9ec:	408b      	lsls	r3, r1
     9ee:	fa22 f40c 	lsr.w	r4, r2, ip
     9f2:	431c      	orrs	r4, r3
     9f4:	fa02 f501 	lsl.w	r5, r2, r1
     9f8:	fa00 f301 	lsl.w	r3, r0, r1
     9fc:	fa27 f20c 	lsr.w	r2, r7, ip
     a00:	fa20 fb0c 	lsr.w	fp, r0, ip
     a04:	ea4f 4914 	mov.w	r9, r4, lsr #16
     a08:	4313      	orrs	r3, r2
     a0a:	fbbb f8f9 	udiv	r8, fp, r9
     a0e:	fa1f fe84 	uxth.w	lr, r4
     a12:	fb09 bb18 	mls	fp, r9, r8, fp
     a16:	0c1a      	lsrs	r2, r3, #16
     a18:	fb08 fa0e 	mul.w	sl, r8, lr
     a1c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     a20:	4592      	cmp	sl, r2
     a22:	fa07 f701 	lsl.w	r7, r7, r1
     a26:	d93e      	bls.n	aa6 <__udivmoddi4+0x29a>
     a28:	18a2      	adds	r2, r4, r2
     a2a:	f108 30ff 	add.w	r0, r8, #4294967295
     a2e:	d204      	bcs.n	a3a <__udivmoddi4+0x22e>
     a30:	4592      	cmp	sl, r2
     a32:	d902      	bls.n	a3a <__udivmoddi4+0x22e>
     a34:	f1a8 0002 	sub.w	r0, r8, #2
     a38:	4422      	add	r2, r4
     a3a:	eba2 020a 	sub.w	r2, r2, sl
     a3e:	b29b      	uxth	r3, r3
     a40:	fbb2 f8f9 	udiv	r8, r2, r9
     a44:	fb09 2218 	mls	r2, r9, r8, r2
     a48:	fb08 fe0e 	mul.w	lr, r8, lr
     a4c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     a50:	4596      	cmp	lr, r2
     a52:	d92a      	bls.n	aaa <__udivmoddi4+0x29e>
     a54:	18a2      	adds	r2, r4, r2
     a56:	f108 33ff 	add.w	r3, r8, #4294967295
     a5a:	d204      	bcs.n	a66 <__udivmoddi4+0x25a>
     a5c:	4596      	cmp	lr, r2
     a5e:	d902      	bls.n	a66 <__udivmoddi4+0x25a>
     a60:	f1a8 0302 	sub.w	r3, r8, #2
     a64:	4422      	add	r2, r4
     a66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     a6a:	fba0 9305 	umull	r9, r3, r0, r5
     a6e:	eba2 020e 	sub.w	r2, r2, lr
     a72:	429a      	cmp	r2, r3
     a74:	46ce      	mov	lr, r9
     a76:	4698      	mov	r8, r3
     a78:	d302      	bcc.n	a80 <__udivmoddi4+0x274>
     a7a:	d106      	bne.n	a8a <__udivmoddi4+0x27e>
     a7c:	454f      	cmp	r7, r9
     a7e:	d204      	bcs.n	a8a <__udivmoddi4+0x27e>
     a80:	ebb9 0e05 	subs.w	lr, r9, r5
     a84:	eb63 0804 	sbc.w	r8, r3, r4
     a88:	3801      	subs	r0, #1
     a8a:	b186      	cbz	r6, aae <__udivmoddi4+0x2a2>
     a8c:	ebb7 030e 	subs.w	r3, r7, lr
     a90:	eb62 0708 	sbc.w	r7, r2, r8
     a94:	fa07 fc0c 	lsl.w	ip, r7, ip
     a98:	40cb      	lsrs	r3, r1
     a9a:	ea4c 0303 	orr.w	r3, ip, r3
     a9e:	40cf      	lsrs	r7, r1
     aa0:	e9c6 3700 	strd	r3, r7, [r6]
     aa4:	e79c      	b.n	9e0 <__udivmoddi4+0x1d4>
     aa6:	4640      	mov	r0, r8
     aa8:	e7c7      	b.n	a3a <__udivmoddi4+0x22e>
     aaa:	4643      	mov	r3, r8
     aac:	e7db      	b.n	a66 <__udivmoddi4+0x25a>
     aae:	4631      	mov	r1, r6
     ab0:	e6fd      	b.n	8ae <__udivmoddi4+0xa2>
	...

00000ab4 <imu>:

extern struct acceleration;

K_MSGQ_DEFINE(accel_queue, sizeof(struct acceleration), 10, 4);

void imu(void) {
     ab4:	b510      	push	{r4, lr}
     ab6:	b08c      	sub	sp, #48	; 0x30
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     ab8:	482f      	ldr	r0, [pc, #188]	; (b78 <imu+0xc4>)
     aba:	f007 f84b 	bl	7b54 <z_device_is_ready>

    uint8_t accel[6];

    const struct device *const i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c0));

    if (!device_is_ready(i2c_dev)) {
     abe:	2800      	cmp	r0, #0
     ac0:	d13d      	bne.n	b3e <imu+0x8a>

        printk("acc.x:%.2f\n", acc.x);

        k_msleep(100);
    }
     ac2:	b00c      	add	sp, #48	; 0x30
     ac4:	bd10      	pop	{r4, pc}
        acc.x = (float)(accel[0] << 8 | accel[1])/4096.0;
     ac6:	f89d 001c 	ldrb.w	r0, [sp, #28]
     aca:	f89d 301d 	ldrb.w	r3, [sp, #29]
     ace:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
     ad2:	f7ff fe2d 	bl	730 <__aeabi_i2f>
     ad6:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
     ada:	f7ff faff 	bl	dc <__aeabi_fmul>
     ade:	9009      	str	r0, [sp, #36]	; 0x24
        acc.y = (float)(accel[2] << 8 | accel[3])/4096.0;
     ae0:	f89d 001e 	ldrb.w	r0, [sp, #30]
     ae4:	f89d 301f 	ldrb.w	r3, [sp, #31]
     ae8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
     aec:	f7ff fe20 	bl	730 <__aeabi_i2f>
     af0:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
     af4:	f7ff faf2 	bl	dc <__aeabi_fmul>
     af8:	900a      	str	r0, [sp, #40]	; 0x28
        acc.z = (float)(accel[4] << 8 | accel[5])/4096.0;
     afa:	f89d 0020 	ldrb.w	r0, [sp, #32]
     afe:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b02:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
     b06:	f7ff fe13 	bl	730 <__aeabi_i2f>
     b0a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
     b0e:	f7ff fae5 	bl	dc <__aeabi_fmul>
     b12:	900b      	str	r0, [sp, #44]	; 0x2c
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
     b14:	f04f 32ff 	mov.w	r2, #4294967295
     b18:	f04f 33ff 	mov.w	r3, #4294967295
     b1c:	a909      	add	r1, sp, #36	; 0x24
     b1e:	4817      	ldr	r0, [pc, #92]	; (b7c <imu+0xc8>)
     b20:	f004 fc18 	bl	5354 <z_impl_k_msgq_put>
        printk("acc.x:%.2f\n", acc.x);
     b24:	9809      	ldr	r0, [sp, #36]	; 0x24
     b26:	f7ff fcf1 	bl	50c <__aeabi_f2d>
     b2a:	4602      	mov	r2, r0
     b2c:	460b      	mov	r3, r1
     b2e:	4814      	ldr	r0, [pc, #80]	; (b80 <imu+0xcc>)
     b30:	f005 fe23 	bl	677a <printk>
	return z_impl_k_sleep(timeout);
     b34:	f640 40cd 	movw	r0, #3277	; 0xccd
     b38:	2100      	movs	r1, #0
     b3a:	f005 faef 	bl	611c <z_impl_k_sleep>
        ret = i2c_burst_read(i2c_dev, MPU6050_ADDR, 0x3B, &accel, 6);
     b3e:	233b      	movs	r3, #59	; 0x3b
     b40:	f88d 3003 	strb.w	r3, [sp, #3]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
     b44:	f10d 0303 	add.w	r3, sp, #3
     b48:	9301      	str	r3, [sp, #4]
	msg[0].len = num_write;
     b4a:	2301      	movs	r3, #1
     b4c:	9302      	str	r3, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
     b4e:	2300      	movs	r3, #0
     b50:	f88d 300c 	strb.w	r3, [sp, #12]

	msg[1].buf = (uint8_t *)read_buf;
     b54:	ab07      	add	r3, sp, #28
     b56:	9304      	str	r3, [sp, #16]
	msg[1].len = num_read;
     b58:	2306      	movs	r3, #6
     b5a:	9305      	str	r3, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     b5c:	2307      	movs	r3, #7
     b5e:	f88d 3018 	strb.w	r3, [sp, #24]
	const struct i2c_driver_api *api =
     b62:	4805      	ldr	r0, [pc, #20]	; (b78 <imu+0xc4>)
     b64:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     b66:	689c      	ldr	r4, [r3, #8]
     b68:	2368      	movs	r3, #104	; 0x68
     b6a:	2202      	movs	r2, #2
     b6c:	a901      	add	r1, sp, #4
     b6e:	47a0      	blx	r4
        if (ret) return;
     b70:	2800      	cmp	r0, #0
     b72:	d0a8      	beq.n	ac6 <imu+0x12>
     b74:	e7a5      	b.n	ac2 <imu+0xe>
     b76:	bf00      	nop
     b78:	000081cc 	.word	0x000081cc
     b7c:	200001c8 	.word	0x200001c8
     b80:	000083c8 	.word	0x000083c8

00000b84 <blink_red>:

		k_msleep(led_config.sleep_time);
	}
}

void blink_red(void) {
     b84:	b510      	push	{r4, lr}
     b86:	b084      	sub	sp, #16
	struct led led_config = {
     b88:	4b06      	ldr	r3, [pc, #24]	; (ba4 <blink_red+0x20>)
     b8a:	466c      	mov	r4, sp
     b8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.sleep_time = 333,
		.spec = GPIO_DT_SPEC_GET(RED_LED_NODE, gpios),
		.id = 0xff0000,
	};
	printk("Enabling Red LED");
     b92:	4805      	ldr	r0, [pc, #20]	; (ba8 <blink_red+0x24>)
     b94:	f005 fdf1 	bl	677a <printk>
	blink(led_config);
     b98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     b9c:	f005 fd78 	bl	6690 <blink>
};
     ba0:	b004      	add	sp, #16
     ba2:	bd10      	pop	{r4, pc}
     ba4:	00008390 	.word	0x00008390
     ba8:	000083d4 	.word	0x000083d4

00000bac <blink_green>:

void blink_green(void) {
     bac:	b500      	push	{lr}
     bae:	b085      	sub	sp, #20
	struct led led_config = {
     bb0:	46ec      	mov	ip, sp
     bb2:	4b04      	ldr	r3, [pc, #16]	; (bc4 <blink_green+0x18>)
     bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     bb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		.sleep_time = 250,
		.spec = GPIO_DT_SPEC_GET(GREEN_LED_NODE, gpios),
		.id = 0x00ff00,
	};
	blink(led_config);
     bba:	f005 fd69 	bl	6690 <blink>
};
     bbe:	b005      	add	sp, #20
     bc0:	f85d fb04 	ldr.w	pc, [sp], #4
     bc4:	000083a0 	.word	0x000083a0

00000bc8 <blink_blue>:

void blink_blue(void) {
     bc8:	b500      	push	{lr}
     bca:	b085      	sub	sp, #20
	struct led led_config = {
     bcc:	46ec      	mov	ip, sp
     bce:	4b04      	ldr	r3, [pc, #16]	; (be0 <blink_blue+0x18>)
     bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     bd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		.sleep_time = 653,
		.spec = GPIO_DT_SPEC_GET(BLUE_LED_NODE, gpios),
		.id = 0x0000ff,
	};
	blink(led_config);
     bd6:	f005 fd5b 	bl	6690 <blink>
     bda:	b005      	add	sp, #20
     bdc:	f85d fb04 	ldr.w	pc, [sp], #4
     be0:	000083b0 	.word	0x000083b0

00000be4 <main>:
K_THREAD_DEFINE(led_red_tid, STACK_SIZE, blink_red, NULL, NULL, NULL, 4, 0, 0);
K_THREAD_DEFINE(led_green_tid, STACK_SIZE, blink_green, NULL, NULL, NULL, 3, 0, 0);
K_THREAD_DEFINE(led_blue_tid, STACK_SIZE, blink_blue, NULL, NULL, NULL, 2, 0, 0);
K_THREAD_DEFINE(imu_tid, STACK_SIZE, imu, NULL, NULL, NULL, 1, 0, 0);

void main() {
     be4:	b500      	push	{lr}
     be6:	b085      	sub	sp, #20
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
     be8:	f04f 32ff 	mov.w	r2, #4294967295
     bec:	f04f 33ff 	mov.w	r3, #4294967295
     bf0:	a901      	add	r1, sp, #4
     bf2:	4802      	ldr	r0, [pc, #8]	; (bfc <main+0x18>)
     bf4:	f004 fc04 	bl	5400 <z_impl_k_msgq_get>
    struct acceleration accel;
    while(1) {
     bf8:	e7f6      	b.n	be8 <main+0x4>
     bfa:	bf00      	nop
     bfc:	200001c8 	.word	0x200001c8

00000c00 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     c00:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c02:	680b      	ldr	r3, [r1, #0]
     c04:	3301      	adds	r3, #1
     c06:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c08:	4b01      	ldr	r3, [pc, #4]	; (c10 <char_out+0x10>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	4798      	blx	r3
}
     c0e:	bd08      	pop	{r3, pc}
     c10:	20000000 	.word	0x20000000

00000c14 <__printk_hook_install>:
	_char_out = fn;
     c14:	4b01      	ldr	r3, [pc, #4]	; (c1c <__printk_hook_install+0x8>)
     c16:	6018      	str	r0, [r3, #0]
}
     c18:	4770      	bx	lr
     c1a:	bf00      	nop
     c1c:	20000000 	.word	0x20000000

00000c20 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     c20:	b500      	push	{lr}
     c22:	b083      	sub	sp, #12
     c24:	4602      	mov	r2, r0
     c26:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     c28:	2100      	movs	r1, #0
     c2a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     c2c:	a901      	add	r1, sp, #4
     c2e:	4803      	ldr	r0, [pc, #12]	; (c3c <vprintk+0x1c>)
     c30:	f000 fc52 	bl	14d8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     c34:	b003      	add	sp, #12
     c36:	f85d fb04 	ldr.w	pc, [sp], #4
     c3a:	bf00      	nop
     c3c:	00000c01 	.word	0x00000c01

00000c40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c44:	b083      	sub	sp, #12
     c46:	4604      	mov	r4, r0
     c48:	4608      	mov	r0, r1
     c4a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c4c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c4e:	f013 0f08 	tst.w	r3, #8
     c52:	d105      	bne.n	c60 <process_event+0x20>
     c54:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     c58:	2300      	movs	r3, #0
     c5a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     c5c:	9301      	str	r3, [sp, #4]
}
     c5e:	e069      	b.n	d34 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     c60:	2901      	cmp	r1, #1
     c62:	d009      	beq.n	c78 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     c64:	f043 0320 	orr.w	r3, r3, #32
     c68:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c6a:	f385 8811 	msr	BASEPRI, r5
     c6e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     c72:	b003      	add	sp, #12
     c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     c78:	f043 0310 	orr.w	r3, r3, #16
     c7c:	8323      	strh	r3, [r4, #24]
     c7e:	e7f4      	b.n	c6a <process_event+0x2a>
			evt = process_recheck(mgr);
     c80:	4620      	mov	r0, r4
     c82:	f005 fdaf 	bl	67e4 <process_recheck>
     c86:	e057      	b.n	d38 <process_event+0xf8>
			res = mgr->last_res;
     c88:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     c8c:	464a      	mov	r2, r9
     c8e:	4669      	mov	r1, sp
     c90:	4620      	mov	r0, r4
     c92:	f005 fdc0 	bl	6816 <process_complete>
		onoff_transition_fn transit = NULL;
     c96:	2700      	movs	r7, #0
     c98:	e05a      	b.n	d50 <process_event+0x110>
			transit = mgr->transitions->start;
     c9a:	6923      	ldr	r3, [r4, #16]
     c9c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     c9e:	2106      	movs	r1, #6
     ca0:	4620      	mov	r0, r4
     ca2:	f005 fd78 	bl	6796 <set_state>
		res = 0;
     ca6:	f04f 0900 	mov.w	r9, #0
     caa:	e051      	b.n	d50 <process_event+0x110>
			transit = mgr->transitions->stop;
     cac:	6923      	ldr	r3, [r4, #16]
     cae:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     cb0:	2104      	movs	r1, #4
     cb2:	4620      	mov	r0, r4
     cb4:	f005 fd6f 	bl	6796 <set_state>
		res = 0;
     cb8:	f04f 0900 	mov.w	r9, #0
     cbc:	e048      	b.n	d50 <process_event+0x110>
			transit = mgr->transitions->reset;
     cbe:	6923      	ldr	r3, [r4, #16]
     cc0:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     cc2:	2105      	movs	r1, #5
     cc4:	4620      	mov	r0, r4
     cc6:	f005 fd66 	bl	6796 <set_state>
		res = 0;
     cca:	f04f 0900 	mov.w	r9, #0
     cce:	e03f      	b.n	d50 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     cd0:	2200      	movs	r2, #0
     cd2:	e046      	b.n	d62 <process_event+0x122>
     cd4:	2200      	movs	r2, #0
     cd6:	e044      	b.n	d62 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     cd8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     cdc:	8323      	strh	r3, [r4, #24]
     cde:	f385 8811 	msr	BASEPRI, r5
     ce2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     ce6:	2900      	cmp	r1, #0
     ce8:	d144      	bne.n	d74 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     cea:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     cec:	b12b      	cbz	r3, cfa <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     cee:	464b      	mov	r3, r9
     cf0:	4642      	mov	r2, r8
     cf2:	4669      	mov	r1, sp
     cf4:	4620      	mov	r0, r4
     cf6:	f005 fe05 	bl	6904 <notify_all>
			if (transit != NULL) {
     cfa:	b117      	cbz	r7, d02 <process_event+0xc2>
				transit(mgr, transition_complete);
     cfc:	4925      	ldr	r1, [pc, #148]	; (d94 <process_event+0x154>)
     cfe:	4620      	mov	r0, r4
     d00:	47b8      	blx	r7
	__asm__ volatile(
     d02:	f04f 0320 	mov.w	r3, #32
     d06:	f3ef 8511 	mrs	r5, BASEPRI
     d0a:	f383 8812 	msr	BASEPRI_MAX, r3
     d0e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d12:	8b23      	ldrh	r3, [r4, #24]
     d14:	f023 0308 	bic.w	r3, r3, #8
     d18:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     d1a:	8b23      	ldrh	r3, [r4, #24]
     d1c:	f013 0f10 	tst.w	r3, #16
     d20:	d02e      	beq.n	d80 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     d22:	f023 0310 	bic.w	r3, r3, #16
     d26:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     d28:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     d2a:	8b26      	ldrh	r6, [r4, #24]
     d2c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     d30:	2800      	cmp	r0, #0
     d32:	d09a      	beq.n	c6a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     d34:	2802      	cmp	r0, #2
     d36:	d0a3      	beq.n	c80 <process_event+0x40>
		if (evt == EVT_NOP) {
     d38:	2800      	cmp	r0, #0
     d3a:	d096      	beq.n	c6a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     d3c:	2801      	cmp	r0, #1
     d3e:	d0a3      	beq.n	c88 <process_event+0x48>
		} else if (evt == EVT_START) {
     d40:	2803      	cmp	r0, #3
     d42:	d0aa      	beq.n	c9a <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     d44:	2804      	cmp	r0, #4
     d46:	d0b1      	beq.n	cac <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     d48:	2805      	cmp	r0, #5
     d4a:	d0b8      	beq.n	cbe <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     d4c:	2700      	movs	r7, #0
		res = 0;
     d4e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d50:	8b23      	ldrh	r3, [r4, #24]
     d52:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d56:	45b0      	cmp	r8, r6
     d58:	d0ba      	beq.n	cd0 <process_event+0x90>
     d5a:	68a2      	ldr	r2, [r4, #8]
     d5c:	2a00      	cmp	r2, #0
     d5e:	d0b9      	beq.n	cd4 <process_event+0x94>
     d60:	2201      	movs	r2, #1
		if (do_monitors
     d62:	4611      	mov	r1, r2
     d64:	2a00      	cmp	r2, #0
     d66:	d1b7      	bne.n	cd8 <process_event+0x98>
     d68:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     d6a:	2a00      	cmp	r2, #0
     d6c:	d1b4      	bne.n	cd8 <process_event+0x98>
		    || (transit != NULL)) {
     d6e:	2f00      	cmp	r7, #0
     d70:	d1b2      	bne.n	cd8 <process_event+0x98>
     d72:	e7d2      	b.n	d1a <process_event+0xda>
				notify_monitors(mgr, state, res);
     d74:	464a      	mov	r2, r9
     d76:	4641      	mov	r1, r8
     d78:	4620      	mov	r0, r4
     d7a:	f005 fd14 	bl	67a6 <notify_monitors>
     d7e:	e7b4      	b.n	cea <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     d80:	f013 0f20 	tst.w	r3, #32
     d84:	d004      	beq.n	d90 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     d86:	f023 0320 	bic.w	r3, r3, #32
     d8a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     d8c:	2002      	movs	r0, #2
     d8e:	e7cc      	b.n	d2a <process_event+0xea>
		evt = EVT_NOP;
     d90:	2000      	movs	r0, #0
     d92:	e7ca      	b.n	d2a <process_event+0xea>
     d94:	00006933 	.word	0x00006933

00000d98 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	b082      	sub	sp, #8
     d9c:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     d9e:	2300      	movs	r3, #0
     da0:	6003      	str	r3, [r0, #0]
     da2:	6043      	str	r3, [r0, #4]
     da4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     da6:	784b      	ldrb	r3, [r1, #1]
     da8:	2b25      	cmp	r3, #37	; 0x25
     daa:	d002      	beq.n	db2 <extract_conversion+0x1a>
     dac:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     dae:	2501      	movs	r5, #1
     db0:	e01f      	b.n	df2 <extract_conversion+0x5a>
		conv->specifier = *sp++;
     db2:	1c88      	adds	r0, r1, #2
     db4:	70e3      	strb	r3, [r4, #3]
		return sp;
     db6:	e146      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
			conv->flag_dash = true;
     db8:	7823      	ldrb	r3, [r4, #0]
     dba:	f043 0304 	orr.w	r3, r3, #4
     dbe:	7023      	strb	r3, [r4, #0]
		if (loop) {
     dc0:	b1b5      	cbz	r5, df0 <extract_conversion+0x58>
			++sp;
     dc2:	3601      	adds	r6, #1
     dc4:	e014      	b.n	df0 <extract_conversion+0x58>
			conv->flag_plus = true;
     dc6:	7823      	ldrb	r3, [r4, #0]
     dc8:	f043 0308 	orr.w	r3, r3, #8
     dcc:	7023      	strb	r3, [r4, #0]
			break;
     dce:	e7f7      	b.n	dc0 <extract_conversion+0x28>
			conv->flag_space = true;
     dd0:	7823      	ldrb	r3, [r4, #0]
     dd2:	f043 0310 	orr.w	r3, r3, #16
     dd6:	7023      	strb	r3, [r4, #0]
			break;
     dd8:	e7f2      	b.n	dc0 <extract_conversion+0x28>
			conv->flag_hash = true;
     dda:	7823      	ldrb	r3, [r4, #0]
     ddc:	f043 0320 	orr.w	r3, r3, #32
     de0:	7023      	strb	r3, [r4, #0]
			break;
     de2:	e7ed      	b.n	dc0 <extract_conversion+0x28>
			conv->flag_zero = true;
     de4:	7823      	ldrb	r3, [r4, #0]
     de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     dea:	7023      	strb	r3, [r4, #0]
			break;
     dec:	e7e8      	b.n	dc0 <extract_conversion+0x28>
		switch (*sp) {
     dee:	2500      	movs	r5, #0
	} while (loop);
     df0:	b345      	cbz	r5, e44 <extract_conversion+0xac>
		switch (*sp) {
     df2:	7833      	ldrb	r3, [r6, #0]
     df4:	3b20      	subs	r3, #32
     df6:	2b10      	cmp	r3, #16
     df8:	d8f9      	bhi.n	dee <extract_conversion+0x56>
     dfa:	a201      	add	r2, pc, #4	; (adr r2, e00 <extract_conversion+0x68>)
     dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e00:	00000dd1 	.word	0x00000dd1
     e04:	00000def 	.word	0x00000def
     e08:	00000def 	.word	0x00000def
     e0c:	00000ddb 	.word	0x00000ddb
     e10:	00000def 	.word	0x00000def
     e14:	00000def 	.word	0x00000def
     e18:	00000def 	.word	0x00000def
     e1c:	00000def 	.word	0x00000def
     e20:	00000def 	.word	0x00000def
     e24:	00000def 	.word	0x00000def
     e28:	00000def 	.word	0x00000def
     e2c:	00000dc7 	.word	0x00000dc7
     e30:	00000def 	.word	0x00000def
     e34:	00000db9 	.word	0x00000db9
     e38:	00000def 	.word	0x00000def
     e3c:	00000def 	.word	0x00000def
     e40:	00000de5 	.word	0x00000de5
	if (conv->flag_zero && conv->flag_dash) {
     e44:	7823      	ldrb	r3, [r4, #0]
     e46:	f003 0344 	and.w	r3, r3, #68	; 0x44
     e4a:	2b44      	cmp	r3, #68	; 0x44
     e4c:	d05f      	beq.n	f0e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     e4e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     e50:	7823      	ldrb	r3, [r4, #0]
     e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     e56:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     e58:	7833      	ldrb	r3, [r6, #0]
     e5a:	2b2a      	cmp	r3, #42	; 0x2a
     e5c:	d05c      	beq.n	f18 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     e5e:	a801      	add	r0, sp, #4
     e60:	f005 fe94 	bl	6b8c <extract_decimal>
	if (sp != wp) {
     e64:	9b01      	ldr	r3, [sp, #4]
     e66:	429e      	cmp	r6, r3
     e68:	d00f      	beq.n	e8a <extract_conversion+0xf2>
		conv->width_present = true;
     e6a:	7823      	ldrb	r3, [r4, #0]
     e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     e70:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     e72:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     e74:	b2db      	uxtb	r3, r3
     e76:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     e7a:	2800      	cmp	r0, #0
     e7c:	db54      	blt.n	f28 <extract_conversion+0x190>
     e7e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     e80:	4313      	orrs	r3, r2
     e82:	7822      	ldrb	r2, [r4, #0]
     e84:	f363 0241 	bfi	r2, r3, #1, #1
     e88:	7022      	strb	r2, [r4, #0]
	return sp;
     e8a:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     e8c:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	2b2e      	cmp	r3, #46	; 0x2e
     e92:	bf14      	ite	ne
     e94:	2300      	movne	r3, #0
     e96:	2301      	moveq	r3, #1
     e98:	7862      	ldrb	r2, [r4, #1]
     e9a:	f363 0241 	bfi	r2, r3, #1, #1
     e9e:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     ea0:	2b00      	cmp	r3, #0
     ea2:	d043      	beq.n	f2c <extract_conversion+0x194>
	++sp;
     ea4:	9b01      	ldr	r3, [sp, #4]
     ea6:	1c5a      	adds	r2, r3, #1
     ea8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     eaa:	785b      	ldrb	r3, [r3, #1]
     eac:	2b2a      	cmp	r3, #42	; 0x2a
     eae:	d03f      	beq.n	f30 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     eb0:	a801      	add	r0, sp, #4
     eb2:	f005 fe6b 	bl	6b8c <extract_decimal>
	conv->prec_value = prec;
     eb6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     eb8:	7823      	ldrb	r3, [r4, #0]
     eba:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     ebe:	2800      	cmp	r0, #0
     ec0:	db3e      	blt.n	f40 <extract_conversion+0x1a8>
     ec2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     ec4:	4313      	orrs	r3, r2
     ec6:	7822      	ldrb	r2, [r4, #0]
     ec8:	f363 0241 	bfi	r2, r3, #1, #1
     ecc:	7022      	strb	r2, [r4, #0]
	return sp;
     ece:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     ed0:	7803      	ldrb	r3, [r0, #0]
     ed2:	3b4c      	subs	r3, #76	; 0x4c
     ed4:	2b2e      	cmp	r3, #46	; 0x2e
     ed6:	f200 809e 	bhi.w	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     eda:	e8df f003 	tbb	[pc, r3]
     ede:	9c91      	.short	0x9c91
     ee0:	9c9c9c9c 	.word	0x9c9c9c9c
     ee4:	9c9c9c9c 	.word	0x9c9c9c9c
     ee8:	9c9c9c9c 	.word	0x9c9c9c9c
     eec:	9c9c9c9c 	.word	0x9c9c9c9c
     ef0:	9c9c9c9c 	.word	0x9c9c9c9c
     ef4:	9c9c9c9c 	.word	0x9c9c9c9c
     ef8:	9c339c9c 	.word	0x9c339c9c
     efc:	9c459c57 	.word	0x9c459c57
     f00:	9c9c9c9c 	.word	0x9c9c9c9c
     f04:	9c8a9c9c 	.word	0x9c8a9c9c
     f08:	9c9c9c9c 	.word	0x9c9c9c9c
     f0c:	83          	.byte	0x83
     f0d:	00          	.byte	0x00
		conv->flag_zero = false;
     f0e:	7823      	ldrb	r3, [r4, #0]
     f10:	f36f 1386 	bfc	r3, #6, #1
     f14:	7023      	strb	r3, [r4, #0]
     f16:	e79a      	b.n	e4e <extract_conversion+0xb6>
		conv->width_star = true;
     f18:	7863      	ldrb	r3, [r4, #1]
     f1a:	f043 0301 	orr.w	r3, r3, #1
     f1e:	7063      	strb	r3, [r4, #1]
		return ++sp;
     f20:	4633      	mov	r3, r6
     f22:	3301      	adds	r3, #1
     f24:	9301      	str	r3, [sp, #4]
     f26:	e7b1      	b.n	e8c <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     f28:	2201      	movs	r2, #1
     f2a:	e7a9      	b.n	e80 <extract_conversion+0xe8>
		return sp;
     f2c:	9801      	ldr	r0, [sp, #4]
     f2e:	e7cf      	b.n	ed0 <extract_conversion+0x138>
		conv->prec_star = true;
     f30:	7863      	ldrb	r3, [r4, #1]
     f32:	f043 0304 	orr.w	r3, r3, #4
     f36:	7063      	strb	r3, [r4, #1]
		return ++sp;
     f38:	4610      	mov	r0, r2
     f3a:	3001      	adds	r0, #1
     f3c:	9001      	str	r0, [sp, #4]
     f3e:	e7c7      	b.n	ed0 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     f40:	2201      	movs	r2, #1
     f42:	e7bf      	b.n	ec4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
     f44:	1c42      	adds	r2, r0, #1
     f46:	7843      	ldrb	r3, [r0, #1]
     f48:	2b68      	cmp	r3, #104	; 0x68
     f4a:	d006      	beq.n	f5a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     f4c:	7863      	ldrb	r3, [r4, #1]
     f4e:	2102      	movs	r1, #2
     f50:	f361 03c6 	bfi	r3, r1, #3, #4
     f54:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     f56:	4610      	mov	r0, r2
     f58:	e01e      	b.n	f98 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
     f5a:	7863      	ldrb	r3, [r4, #1]
     f5c:	2201      	movs	r2, #1
     f5e:	f362 03c6 	bfi	r3, r2, #3, #4
     f62:	7063      	strb	r3, [r4, #1]
			++sp;
     f64:	3002      	adds	r0, #2
     f66:	e017      	b.n	f98 <extract_conversion+0x200>
		if (*++sp == 'l') {
     f68:	1c42      	adds	r2, r0, #1
     f6a:	7843      	ldrb	r3, [r0, #1]
     f6c:	2b6c      	cmp	r3, #108	; 0x6c
     f6e:	d006      	beq.n	f7e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     f70:	7863      	ldrb	r3, [r4, #1]
     f72:	2103      	movs	r1, #3
     f74:	f361 03c6 	bfi	r3, r1, #3, #4
     f78:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     f7a:	4610      	mov	r0, r2
     f7c:	e00c      	b.n	f98 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
     f7e:	7863      	ldrb	r3, [r4, #1]
     f80:	2204      	movs	r2, #4
     f82:	f362 03c6 	bfi	r3, r2, #3, #4
     f86:	7063      	strb	r3, [r4, #1]
			++sp;
     f88:	3002      	adds	r0, #2
     f8a:	e005      	b.n	f98 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
     f8c:	7863      	ldrb	r3, [r4, #1]
     f8e:	2205      	movs	r2, #5
     f90:	f362 03c6 	bfi	r3, r2, #3, #4
     f94:	7063      	strb	r3, [r4, #1]
		++sp;
     f96:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     f98:	f810 2b01 	ldrb.w	r2, [r0], #1
     f9c:	70e2      	strb	r2, [r4, #3]
	switch (conv->specifier) {
     f9e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
     fa2:	2b37      	cmp	r3, #55	; 0x37
     fa4:	f200 80a0 	bhi.w	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
     fa8:	e8df f003 	tbb	[pc, r3]
     fac:	9e9e9e5e 	.word	0x9e9e9e5e
     fb0:	9e5e5e5e 	.word	0x9e5e5e5e
     fb4:	9e9e9e9e 	.word	0x9e9e9e9e
     fb8:	9e9e9e9e 	.word	0x9e9e9e9e
     fbc:	9e9e9e9e 	.word	0x9e9e9e9e
     fc0:	4f9e9e9e 	.word	0x4f9e9e9e
     fc4:	9e9e9e9e 	.word	0x9e9e9e9e
     fc8:	9e9e9e9e 	.word	0x9e9e9e9e
     fcc:	3a4f9e5e 	.word	0x3a4f9e5e
     fd0:	9e5e5e5e 	.word	0x9e5e5e5e
     fd4:	9e9e9e3a 	.word	0x9e9e9e3a
     fd8:	934f879e 	.word	0x934f879e
     fdc:	9e939e9e 	.word	0x9e939e9e
     fe0:	4f9e9e4f 	.word	0x4f9e9e4f
		conv->length_mod = LENGTH_Z;
     fe4:	7863      	ldrb	r3, [r4, #1]
     fe6:	2206      	movs	r2, #6
     fe8:	f362 03c6 	bfi	r3, r2, #3, #4
     fec:	7063      	strb	r3, [r4, #1]
		++sp;
     fee:	3001      	adds	r0, #1
		break;
     ff0:	e7d2      	b.n	f98 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
     ff2:	7863      	ldrb	r3, [r4, #1]
     ff4:	2207      	movs	r2, #7
     ff6:	f362 03c6 	bfi	r3, r2, #3, #4
     ffa:	7063      	strb	r3, [r4, #1]
		++sp;
     ffc:	3001      	adds	r0, #1
		break;
     ffe:	e7cb      	b.n	f98 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    1000:	7863      	ldrb	r3, [r4, #1]
    1002:	2208      	movs	r2, #8
    1004:	f362 03c6 	bfi	r3, r2, #3, #4
    1008:	7063      	strb	r3, [r4, #1]
		++sp;
    100a:	3001      	adds	r0, #1
		conv->unsupported = true;
    100c:	7823      	ldrb	r3, [r4, #0]
    100e:	f043 0302 	orr.w	r3, r3, #2
    1012:	7023      	strb	r3, [r4, #0]
		break;
    1014:	e7c0      	b.n	f98 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    1016:	7863      	ldrb	r3, [r4, #1]
    1018:	f36f 03c6 	bfc	r3, #3, #4
    101c:	7063      	strb	r3, [r4, #1]
		break;
    101e:	e7bb      	b.n	f98 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1020:	78a3      	ldrb	r3, [r4, #2]
    1022:	2101      	movs	r1, #1
    1024:	f361 0302 	bfi	r3, r1, #0, #3
    1028:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    102a:	7863      	ldrb	r3, [r4, #1]
    102c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1030:	2b40      	cmp	r3, #64	; 0x40
    1032:	d010      	beq.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
		if (conv->specifier == 'c') {
    1034:	2a63      	cmp	r2, #99	; 0x63
    1036:	d013      	beq.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
	conv->unsupported |= unsupported;
    1038:	7823      	ldrb	r3, [r4, #0]
    103a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    103e:	4315      	orrs	r5, r2
    1040:	f365 0341 	bfi	r3, r5, #1, #1
    1044:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1046:	b002      	add	sp, #8
    1048:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    104a:	78a3      	ldrb	r3, [r4, #2]
    104c:	2102      	movs	r1, #2
    104e:	f361 0302 	bfi	r3, r1, #0, #3
    1052:	70a3      	strb	r3, [r4, #2]
    1054:	e7e9      	b.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
			conv->invalid = true;
    1056:	7821      	ldrb	r1, [r4, #0]
    1058:	f041 0101 	orr.w	r1, r1, #1
    105c:	7021      	strb	r1, [r4, #0]
    105e:	e7e9      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1060:	1e1d      	subs	r5, r3, #0
    1062:	bf18      	it	ne
    1064:	2501      	movne	r5, #1
    1066:	e7e7      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		conv->specifier_cat = SPECIFIER_FP;
    1068:	78a3      	ldrb	r3, [r4, #2]
    106a:	2104      	movs	r1, #4
    106c:	f361 0302 	bfi	r3, r1, #0, #3
    1070:	70a3      	strb	r3, [r4, #2]
			|| (conv->specifier == 'A');
    1072:	2a61      	cmp	r2, #97	; 0x61
    1074:	d01a      	beq.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1076:	2a41      	cmp	r2, #65	; 0x41
    1078:	d016      	beq.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    107a:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
    107c:	7863      	ldrb	r3, [r4, #1]
    107e:	f362 13c7 	bfi	r3, r2, #7, #1
    1082:	7063      	strb	r3, [r4, #1]
		if (conv->specifier_a
    1084:	b2db      	uxtb	r3, r3
    1086:	f994 2001 	ldrsb.w	r2, [r4, #1]
    108a:	2a00      	cmp	r2, #0
    108c:	db31      	blt.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
		if (conv->length_mod == LENGTH_L) {
    108e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1092:	2b18      	cmp	r3, #24
    1094:	d00c      	beq.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
		} else if ((conv->length_mod != LENGTH_NONE)
    1096:	2b00      	cmp	r3, #0
    1098:	d0ce      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
    109a:	2b40      	cmp	r3, #64	; 0x40
    109c:	d0cc      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
			conv->invalid = true;
    109e:	7823      	ldrb	r3, [r4, #0]
    10a0:	f043 0301 	orr.w	r3, r3, #1
    10a4:	7023      	strb	r3, [r4, #0]
    10a6:	e7c7      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
			|| (conv->specifier == 'A');
    10a8:	2201      	movs	r2, #1
    10aa:	e7e7      	b.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    10ac:	2201      	movs	r2, #1
    10ae:	e7e5      	b.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
			conv->length_mod = LENGTH_NONE;
    10b0:	7863      	ldrb	r3, [r4, #1]
    10b2:	f36f 03c6 	bfc	r3, #3, #4
    10b6:	7063      	strb	r3, [r4, #1]
    10b8:	e7be      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		conv->specifier_cat = SPECIFIER_PTR;
    10ba:	78a3      	ldrb	r3, [r4, #2]
    10bc:	2203      	movs	r2, #3
    10be:	f362 0302 	bfi	r3, r2, #0, #3
    10c2:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    10c4:	7863      	ldrb	r3, [r4, #1]
    10c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    10ca:	2b40      	cmp	r3, #64	; 0x40
    10cc:	d1b4      	bne.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
			unsupported = true;
    10ce:	2501      	movs	r5, #1
    10d0:	e7b2      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		conv->specifier_cat = SPECIFIER_PTR;
    10d2:	78a3      	ldrb	r3, [r4, #2]
    10d4:	2203      	movs	r2, #3
    10d6:	f362 0302 	bfi	r3, r2, #0, #3
    10da:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    10dc:	7863      	ldrb	r3, [r4, #1]
    10de:	f013 0f78 	tst.w	r3, #120	; 0x78
    10e2:	d0a9      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
			unsupported = true;
    10e4:	2501      	movs	r5, #1
    10e6:	e7a7      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		conv->invalid = true;
    10e8:	7823      	ldrb	r3, [r4, #0]
    10ea:	f043 0301 	orr.w	r3, r3, #1
    10ee:	7023      	strb	r3, [r4, #0]
		break;
    10f0:	e7a2      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
			unsupported = true;
    10f2:	2501      	movs	r5, #1
    10f4:	e7a0      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    10f6:	bf00      	nop

000010f8 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
    10f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10fc:	b087      	sub	sp, #28
    10fe:	4617      	mov	r7, r2
    1100:	461e      	mov	r6, r3
    1102:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
    1106:	4602      	mov	r2, r0
    1108:	1e0b      	subs	r3, r1, #0
    110a:	db07      	blt.n	111c <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
    110c:	7839      	ldrb	r1, [r7, #0]
    110e:	f011 0f08 	tst.w	r1, #8
    1112:	d014      	beq.n	113e <encode_float+0x46>
		*sign = '+';
    1114:	212b      	movs	r1, #43	; 0x2b
    1116:	9810      	ldr	r0, [sp, #64]	; 0x40
    1118:	7001      	strb	r1, [r0, #0]
    111a:	e002      	b.n	1122 <encode_float+0x2a>
		*sign = '-';
    111c:	212d      	movs	r1, #45	; 0x2d
    111e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1120:	7001      	strb	r1, [r0, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
    1122:	f897 8003 	ldrb.w	r8, [r7, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1126:	f3c3 540a 	ubfx	r4, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    112a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    112e:	9204      	str	r2, [sp, #16]
    1130:	9305      	str	r3, [sp, #20]
	bool is_subnormal = (expo == 0) && (fract != 0);
    1132:	b95c      	cbnz	r4, 114c <encode_float+0x54>
    1134:	ea52 0103 	orrs.w	r1, r2, r3
    1138:	d128      	bne.n	118c <encode_float+0x94>
    113a:	2100      	movs	r1, #0
    113c:	e007      	b.n	114e <encode_float+0x56>
	} else if (conv->flag_space) {
    113e:	f011 0f10 	tst.w	r1, #16
    1142:	d0ee      	beq.n	1122 <encode_float+0x2a>
		*sign = ' ';
    1144:	2120      	movs	r1, #32
    1146:	9810      	ldr	r0, [sp, #64]	; 0x40
    1148:	7001      	strb	r1, [r0, #0]
    114a:	e7ea      	b.n	1122 <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
    114c:	2100      	movs	r1, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    114e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1152:	4284      	cmp	r4, r0
    1154:	d01c      	beq.n	1190 <encode_float+0x98>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
    1156:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
    115a:	d059      	beq.n	1210 <encode_float+0x118>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
    115c:	02db      	lsls	r3, r3, #11
    115e:	ea43 5352 	orr.w	r3, r3, r2, lsr #21
    1162:	02d2      	lsls	r2, r2, #11
    1164:	9204      	str	r2, [sp, #16]
    1166:	9305      	str	r3, [sp, #20]
	fract &= ~SIGN_MASK;
    1168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    116c:	9305      	str	r3, [sp, #20]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
    116e:	4322      	orrs	r2, r4
    1170:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
    1174:	4313      	orrs	r3, r2
    1176:	d007      	beq.n	1188 <encode_float+0x90>
		if (is_subnormal) {
    1178:	2900      	cmp	r1, #0
    117a:	d14d      	bne.n	1218 <encode_float+0x120>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    117c:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
    1180:	9b05      	ldr	r3, [sp, #20]
    1182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1186:	9305      	str	r3, [sp, #20]
		c = 'f';
    1188:	2500      	movs	r5, #0
    118a:	e066      	b.n	125a <encode_float+0x162>
	bool is_subnormal = (expo == 0) && (fract != 0);
    118c:	2101      	movs	r1, #1
    118e:	e7de      	b.n	114e <encode_float+0x56>
		if (fract == 0) {
    1190:	4313      	orrs	r3, r2
    1192:	d122      	bne.n	11da <encode_float+0xe2>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    1194:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
			if (isupper((int)c)) {
    1198:	f1b8 0f19 	cmp.w	r8, #25
    119c:	d811      	bhi.n	11c2 <encode_float+0xca>
				*buf++ = 'I';
    119e:	2349      	movs	r3, #73	; 0x49
    11a0:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'N';
    11a4:	234e      	movs	r3, #78	; 0x4e
    11a6:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'F';
    11aa:	f109 0203 	add.w	r2, r9, #3
    11ae:	2346      	movs	r3, #70	; 0x46
    11b0:	f889 3002 	strb.w	r3, [r9, #2]
		conv->flag_zero = false;
    11b4:	783b      	ldrb	r3, [r7, #0]
    11b6:	f36f 1386 	bfc	r3, #6, #1
    11ba:	703b      	strb	r3, [r7, #0]
		*bpe = buf;
    11bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    11be:	601a      	str	r2, [r3, #0]
		return bps;
    11c0:	e174      	b.n	14ac <encode_float+0x3b4>
				*buf++ = 'i';
    11c2:	2369      	movs	r3, #105	; 0x69
    11c4:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'n';
    11c8:	236e      	movs	r3, #110	; 0x6e
    11ca:	f889 3001 	strb.w	r3, [r9, #1]
				*buf++ = 'f';
    11ce:	f109 0203 	add.w	r2, r9, #3
    11d2:	2366      	movs	r3, #102	; 0x66
    11d4:	f889 3002 	strb.w	r3, [r9, #2]
    11d8:	e7ec      	b.n	11b4 <encode_float+0xbc>
    11da:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
			if (isupper((int)c)) {
    11de:	f1b8 0f19 	cmp.w	r8, #25
    11e2:	d80a      	bhi.n	11fa <encode_float+0x102>
				*buf++ = 'N';
    11e4:	234e      	movs	r3, #78	; 0x4e
    11e6:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'A';
    11ea:	2241      	movs	r2, #65	; 0x41
    11ec:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'N';
    11f0:	f109 0203 	add.w	r2, r9, #3
    11f4:	f889 3002 	strb.w	r3, [r9, #2]
    11f8:	e7dc      	b.n	11b4 <encode_float+0xbc>
				*buf++ = 'n';
    11fa:	236e      	movs	r3, #110	; 0x6e
    11fc:	f889 3000 	strb.w	r3, [r9]
				*buf++ = 'a';
    1200:	2261      	movs	r2, #97	; 0x61
    1202:	f889 2001 	strb.w	r2, [r9, #1]
				*buf++ = 'n';
    1206:	f109 0203 	add.w	r2, r9, #3
    120a:	f889 3002 	strb.w	r3, [r9, #2]
    120e:	e7d1      	b.n	11b4 <encode_float+0xbc>
		c = 'f';
    1210:	f04f 0866 	mov.w	r8, #102	; 0x66
    1214:	e7a2      	b.n	115c <encode_float+0x64>
				expo--;
    1216:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1218:	9b04      	ldr	r3, [sp, #16]
    121a:	9a05      	ldr	r2, [sp, #20]
    121c:	18db      	adds	r3, r3, r3
    121e:	4152      	adcs	r2, r2
    1220:	9304      	str	r3, [sp, #16]
    1222:	9205      	str	r2, [sp, #20]
    1224:	2a00      	cmp	r2, #0
    1226:	daf6      	bge.n	1216 <encode_float+0x11e>
    1228:	e7a8      	b.n	117c <encode_float+0x84>
		/*
		 * Make room to allow a multiplication by 5 without overflow.
		 * We test only the top part for faster code.
		 */
		do {
			fract >>= 1;
    122a:	9b05      	ldr	r3, [sp, #20]
    122c:	9a04      	ldr	r2, [sp, #16]
    122e:	0852      	lsrs	r2, r2, #1
    1230:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    1234:	085b      	lsrs	r3, r3, #1
    1236:	9204      	str	r2, [sp, #16]
    1238:	9305      	str	r3, [sp, #20]
			expo++;
    123a:	4621      	mov	r1, r4
    123c:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    123e:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
    1242:	d2f2      	bcs.n	122a <encode_float+0x132>

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
    1244:	009c      	lsls	r4, r3, #2
    1246:	ea44 7492 	orr.w	r4, r4, r2, lsr #30
    124a:	0090      	lsls	r0, r2, #2
    124c:	1882      	adds	r2, r0, r2
    124e:	eb43 0304 	adc.w	r3, r3, r4
    1252:	9204      	str	r2, [sp, #16]
    1254:	9305      	str	r3, [sp, #20]
		expo++;
    1256:	1c8c      	adds	r4, r1, #2
		decexp--;
    1258:	3d01      	subs	r5, #1
	while (expo < -2) {
    125a:	f114 0f02 	cmn.w	r4, #2
    125e:	dbe4      	blt.n	122a <encode_float+0x132>
    1260:	e014      	b.n	128c <encode_float+0x194>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
    1262:	9b04      	ldr	r3, [sp, #16]
    1264:	3302      	adds	r3, #2
    1266:	9a05      	ldr	r2, [sp, #20]
    1268:	f142 0200 	adc.w	r2, r2, #0
    126c:	9304      	str	r3, [sp, #16]
    126e:	9205      	str	r2, [sp, #20]
		_ldiv5(&fract);
    1270:	a804      	add	r0, sp, #16
    1272:	f005 fc9d 	bl	6bb0 <_ldiv5>
		expo--;
    1276:	3c01      	subs	r4, #1
		decexp++;
    1278:	3501      	adds	r5, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
    127a:	9904      	ldr	r1, [sp, #16]
    127c:	9b05      	ldr	r3, [sp, #20]
    127e:	1849      	adds	r1, r1, r1
    1280:	415b      	adcs	r3, r3
    1282:	9104      	str	r1, [sp, #16]
    1284:	9305      	str	r3, [sp, #20]
			expo--;
    1286:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
    1288:	2b00      	cmp	r3, #0
    128a:	daf6      	bge.n	127a <encode_float+0x182>
	while (expo > 0) {
    128c:	2c00      	cmp	r4, #0
    128e:	dce8      	bgt.n	1262 <encode_float+0x16a>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
    1290:	f1c4 0104 	rsb	r1, r4, #4
    1294:	9a05      	ldr	r2, [sp, #20]
    1296:	341c      	adds	r4, #28
    1298:	f1a1 0020 	sub.w	r0, r1, #32
    129c:	9b04      	ldr	r3, [sp, #16]
    129e:	40cb      	lsrs	r3, r1
    12a0:	fa02 f404 	lsl.w	r4, r2, r4
    12a4:	4323      	orrs	r3, r4
    12a6:	fa22 f000 	lsr.w	r0, r2, r0
    12aa:	4303      	orrs	r3, r0
    12ac:	40ca      	lsrs	r2, r1
    12ae:	9304      	str	r3, [sp, #16]
    12b0:	9205      	str	r2, [sp, #20]

	if ((c == 'g') || (c == 'G')) {
    12b2:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    12b6:	d014      	beq.n	12e2 <encode_float+0x1ea>
    12b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    12bc:	d011      	beq.n	12e2 <encode_float+0x1ea>
	bool prune_zero = false;
    12be:	f04f 0b00 	mov.w	fp, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
    12c2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    12c6:	d02a      	beq.n	131e <encode_float+0x226>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
    12c8:	f106 0a01 	add.w	sl, r6, #1
	}

	int digit_count = 16;
    12cc:	2310      	movs	r3, #16
    12ce:	9303      	str	r3, [sp, #12]

	if (decimals > 16) {
    12d0:	459a      	cmp	sl, r3
    12d2:	dd00      	ble.n	12d6 <encode_float+0x1de>
		decimals = 16;
    12d4:	469a      	mov	sl, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
    12d6:	2200      	movs	r2, #0
    12d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    12dc:	e9cd 2300 	strd	r2, r3, [sp]
	while (decimals--) {
    12e0:	e029      	b.n	1336 <encode_float+0x23e>
		if (decexp < (-4 + 1) || decexp > precision) {
    12e2:	f115 0f03 	cmn.w	r5, #3
    12e6:	db01      	blt.n	12ec <encode_float+0x1f4>
    12e8:	42b5      	cmp	r5, r6
    12ea:	dd11      	ble.n	1310 <encode_float+0x218>
			c += 'e' - 'g';  /* e or E */
    12ec:	f1a8 0802 	sub.w	r8, r8, #2
    12f0:	fa5f f888 	uxtb.w	r8, r8
			if (precision > 0) {
    12f4:	2e00      	cmp	r6, #0
    12f6:	dd00      	ble.n	12fa <encode_float+0x202>
				precision--;
    12f8:	3e01      	subs	r6, #1
		if (!conv->flag_hash && (precision > 0)) {
    12fa:	783b      	ldrb	r3, [r7, #0]
    12fc:	f3c3 1b40 	ubfx	fp, r3, #5, #1
    1300:	f013 0f20 	tst.w	r3, #32
    1304:	d108      	bne.n	1318 <encode_float+0x220>
    1306:	2e00      	cmp	r6, #0
    1308:	dddb      	ble.n	12c2 <encode_float+0x1ca>
			prune_zero = true;
    130a:	f04f 0b01 	mov.w	fp, #1
    130e:	e7d8      	b.n	12c2 <encode_float+0x1ca>
			precision -= decexp;
    1310:	1b76      	subs	r6, r6, r5
			c = 'f';
    1312:	f04f 0866 	mov.w	r8, #102	; 0x66
    1316:	e7f0      	b.n	12fa <encode_float+0x202>
	bool prune_zero = false;
    1318:	f04f 0b00 	mov.w	fp, #0
    131c:	e7d1      	b.n	12c2 <encode_float+0x1ca>
		if (decimals < 0) {
    131e:	eb15 0a06 	adds.w	sl, r5, r6
    1322:	d5d3      	bpl.n	12cc <encode_float+0x1d4>
	int digit_count = 16;
    1324:	2310      	movs	r3, #16
    1326:	9303      	str	r3, [sp, #12]
			decimals = 0;
    1328:	f04f 0a00 	mov.w	sl, #0
    132c:	e7d3      	b.n	12d6 <encode_float+0x1de>
		_ldiv10(&round);
    132e:	4668      	mov	r0, sp
    1330:	f005 fc59 	bl	6be6 <_ldiv10>
	while (decimals--) {
    1334:	46a2      	mov	sl, r4
    1336:	f10a 34ff 	add.w	r4, sl, #4294967295
    133a:	f1ba 0f00 	cmp.w	sl, #0
    133e:	d1f6      	bne.n	132e <encode_float+0x236>
	}
	fract += round;
    1340:	9b04      	ldr	r3, [sp, #16]
    1342:	9a00      	ldr	r2, [sp, #0]
    1344:	189b      	adds	r3, r3, r2
    1346:	9a05      	ldr	r2, [sp, #20]
    1348:	9901      	ldr	r1, [sp, #4]
    134a:	eb42 0201 	adc.w	r2, r2, r1
    134e:	9304      	str	r3, [sp, #16]
    1350:	9205      	str	r2, [sp, #20]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
    1352:	f04f 31ff 	mov.w	r1, #4294967295
    1356:	4299      	cmp	r1, r3
    1358:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    135c:	4193      	sbcs	r3, r2
    135e:	d306      	bcc.n	136e <encode_float+0x276>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
    1360:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    1364:	d138      	bne.n	13d8 <encode_float+0x2e0>
		if (decexp > 0) {
    1366:	2d00      	cmp	r5, #0
    1368:	dd31      	ble.n	13ce <encode_float+0x2d6>
	char *buf = bps;
    136a:	464c      	mov	r4, r9
    136c:	e00b      	b.n	1386 <encode_float+0x28e>
		_ldiv10(&fract);
    136e:	a804      	add	r0, sp, #16
    1370:	f005 fc39 	bl	6be6 <_ldiv10>
		decexp++;
    1374:	3501      	adds	r5, #1
    1376:	e7f3      	b.n	1360 <encode_float+0x268>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
    1378:	a903      	add	r1, sp, #12
    137a:	a804      	add	r0, sp, #16
    137c:	f005 fc3f 	bl	6bfe <_get_digit>
    1380:	f804 0b01 	strb.w	r0, [r4], #1
				decexp--;
    1384:	3d01      	subs	r5, #1
			while (decexp > 0 && digit_count > 0) {
    1386:	2d00      	cmp	r5, #0
    1388:	dd02      	ble.n	1390 <encode_float+0x298>
    138a:	9b03      	ldr	r3, [sp, #12]
    138c:	2b00      	cmp	r3, #0
    138e:	dcf3      	bgt.n	1378 <encode_float+0x280>
			}

			conv->pad0_value = decexp;
    1390:	607d      	str	r5, [r7, #4]

			decexp = 0;
    1392:	4655      	mov	r5, sl
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    1394:	783b      	ldrb	r3, [r7, #0]
    1396:	f013 0f20 	tst.w	r3, #32
    139a:	d101      	bne.n	13a0 <encode_float+0x2a8>
    139c:	2e00      	cmp	r6, #0
    139e:	dd02      	ble.n	13a6 <encode_float+0x2ae>
			*buf++ = '.';
    13a0:	232e      	movs	r3, #46	; 0x2e
    13a2:	f804 3b01 	strb.w	r3, [r4], #1
		}

		if (decexp < 0 && precision > 0) {
    13a6:	2d00      	cmp	r5, #0
    13a8:	da33      	bge.n	1412 <encode_float+0x31a>
    13aa:	2e00      	cmp	r6, #0
    13ac:	dd31      	ble.n	1412 <encode_float+0x31a>
			conv->pad0_value = -decexp;
    13ae:	426b      	negs	r3, r5
    13b0:	607b      	str	r3, [r7, #4]
			if (conv->pad0_value > precision) {
    13b2:	429e      	cmp	r6, r3
    13b4:	da00      	bge.n	13b8 <encode_float+0x2c0>
				conv->pad0_value = precision;
    13b6:	607e      	str	r6, [r7, #4]
			}

			precision -= conv->pad0_value;
    13b8:	687b      	ldr	r3, [r7, #4]
    13ba:	1af6      	subs	r6, r6, r3
			conv->pad_postdp = (conv->pad0_value > 0);
    13bc:	2b00      	cmp	r3, #0
    13be:	bfd4      	ite	le
    13c0:	2300      	movle	r3, #0
    13c2:	2301      	movgt	r3, #1
    13c4:	78ba      	ldrb	r2, [r7, #2]
    13c6:	f363 1245 	bfi	r2, r3, #5, #1
    13ca:	70ba      	strb	r2, [r7, #2]
    13cc:	e021      	b.n	1412 <encode_float+0x31a>
			*buf++ = '0';
    13ce:	464c      	mov	r4, r9
    13d0:	2330      	movs	r3, #48	; 0x30
    13d2:	f804 3b01 	strb.w	r3, [r4], #1
    13d6:	e7dd      	b.n	1394 <encode_float+0x29c>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
    13d8:	a903      	add	r1, sp, #12
    13da:	a804      	add	r0, sp, #16
    13dc:	f005 fc0f 	bl	6bfe <_get_digit>
    13e0:	464c      	mov	r4, r9
    13e2:	f804 0b01 	strb.w	r0, [r4], #1
		if (*buf++ != '0') {
    13e6:	2830      	cmp	r0, #48	; 0x30
    13e8:	d000      	beq.n	13ec <encode_float+0x2f4>
			decexp--;
    13ea:	3d01      	subs	r5, #1
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
    13ec:	783b      	ldrb	r3, [r7, #0]
    13ee:	f013 0f20 	tst.w	r3, #32
    13f2:	d101      	bne.n	13f8 <encode_float+0x300>
    13f4:	2e00      	cmp	r6, #0
    13f6:	dd0c      	ble.n	1412 <encode_float+0x31a>
			*buf++ = '.';
    13f8:	f109 0402 	add.w	r4, r9, #2
    13fc:	232e      	movs	r3, #46	; 0x2e
    13fe:	f889 3001 	strb.w	r3, [r9, #1]
    1402:	e006      	b.n	1412 <encode_float+0x31a>
		}
	}

	while (precision > 0 && digit_count > 0) {
		*buf++ = _get_digit(&fract, &digit_count);
    1404:	a903      	add	r1, sp, #12
    1406:	a804      	add	r0, sp, #16
    1408:	f005 fbf9 	bl	6bfe <_get_digit>
    140c:	f804 0b01 	strb.w	r0, [r4], #1
		precision--;
    1410:	3e01      	subs	r6, #1
	while (precision > 0 && digit_count > 0) {
    1412:	2e00      	cmp	r6, #0
    1414:	dd02      	ble.n	141c <encode_float+0x324>
    1416:	9b03      	ldr	r3, [sp, #12]
    1418:	2b00      	cmp	r3, #0
    141a:	dcf3      	bgt.n	1404 <encode_float+0x30c>
	}

	conv->pad0_pre_exp = precision;
    141c:	60be      	str	r6, [r7, #8]

	if (prune_zero) {
    141e:	f1bb 0f00 	cmp.w	fp, #0
    1422:	d009      	beq.n	1438 <encode_float+0x340>
		conv->pad0_pre_exp = 0;
    1424:	2300      	movs	r3, #0
    1426:	60bb      	str	r3, [r7, #8]
		while (*--buf == '0') {
    1428:	4623      	mov	r3, r4
    142a:	461c      	mov	r4, r3
    142c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    1430:	2a30      	cmp	r2, #48	; 0x30
    1432:	d0fa      	beq.n	142a <encode_float+0x332>
			;
		}
		if (*buf != '.') {
    1434:	2a2e      	cmp	r2, #46	; 0x2e
    1436:	d03d      	beq.n	14b4 <encode_float+0x3bc>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
    1438:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    143c:	d002      	beq.n	1444 <encode_float+0x34c>
    143e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
    1442:	d126      	bne.n	1492 <encode_float+0x39a>
		*buf++ = c;
    1444:	f884 8000 	strb.w	r8, [r4]
		if (decexp < 0) {
    1448:	2d00      	cmp	r5, #0
    144a:	db35      	blt.n	14b8 <encode_float+0x3c0>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
    144c:	1ca2      	adds	r2, r4, #2
    144e:	232b      	movs	r3, #43	; 0x2b
    1450:	7063      	strb	r3, [r4, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
    1452:	2d63      	cmp	r5, #99	; 0x63
    1454:	dd0c      	ble.n	1470 <encode_float+0x378>
			*buf++ = (decexp / 100) + '0';
    1456:	491e      	ldr	r1, [pc, #120]	; (14d0 <encode_float+0x3d8>)
    1458:	fb81 3105 	smull	r3, r1, r1, r5
    145c:	17eb      	asrs	r3, r5, #31
    145e:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    1462:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1466:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
    146a:	2164      	movs	r1, #100	; 0x64
    146c:	fb01 5513 	mls	r5, r1, r3, r5
		}

		*buf++ = (decexp / 10) + '0';
    1470:	4918      	ldr	r1, [pc, #96]	; (14d4 <encode_float+0x3dc>)
    1472:	fb81 3105 	smull	r3, r1, r1, r5
    1476:	17eb      	asrs	r3, r5, #31
    1478:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    147c:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1480:	4614      	mov	r4, r2
    1482:	f804 1b02 	strb.w	r1, [r4], #2
		*buf++ = (decexp % 10) + '0';
    1486:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    148a:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    148e:	3330      	adds	r3, #48	; 0x30
    1490:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
    1492:	687b      	ldr	r3, [r7, #4]
		|| (conv->pad0_pre_exp > 0);
    1494:	2b00      	cmp	r3, #0
    1496:	dd14      	ble.n	14c2 <encode_float+0x3ca>
    1498:	f04f 0a01 	mov.w	sl, #1
	conv->pad_fp = (conv->pad0_value > 0)
    149c:	78bb      	ldrb	r3, [r7, #2]
    149e:	f36a 1386 	bfi	r3, sl, #6, #1
    14a2:	70bb      	strb	r3, [r7, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
    14a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    14a6:	601c      	str	r4, [r3, #0]
	*buf = 0;
    14a8:	2300      	movs	r3, #0
    14aa:	7023      	strb	r3, [r4, #0]
	return bps;
}
    14ac:	4648      	mov	r0, r9
    14ae:	b007      	add	sp, #28
    14b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
    14b4:	461c      	mov	r4, r3
    14b6:	e7bf      	b.n	1438 <encode_float+0x340>
			decexp = -decexp;
    14b8:	426d      	negs	r5, r5
			*buf++ = '-';
    14ba:	1ca2      	adds	r2, r4, #2
    14bc:	232d      	movs	r3, #45	; 0x2d
    14be:	7063      	strb	r3, [r4, #1]
    14c0:	e7c7      	b.n	1452 <encode_float+0x35a>
		|| (conv->pad0_pre_exp > 0);
    14c2:	68bb      	ldr	r3, [r7, #8]
    14c4:	2b00      	cmp	r3, #0
    14c6:	dde9      	ble.n	149c <encode_float+0x3a4>
    14c8:	f04f 0a01 	mov.w	sl, #1
    14cc:	e7e6      	b.n	149c <encode_float+0x3a4>
    14ce:	bf00      	nop
    14d0:	51eb851f 	.word	0x51eb851f
    14d4:	66666667 	.word	0x66666667

000014d8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    14d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14dc:	b097      	sub	sp, #92	; 0x5c
    14de:	4606      	mov	r6, r0
    14e0:	460d      	mov	r5, r1
    14e2:	4617      	mov	r7, r2
    14e4:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    14e6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    14e8:	7838      	ldrb	r0, [r7, #0]
    14ea:	2800      	cmp	r0, #0
    14ec:	f000 835a 	beq.w	1ba4 <cbvprintf+0x6cc>
		if (*fp != '%') {
    14f0:	2825      	cmp	r0, #37	; 0x25
    14f2:	d007      	beq.n	1504 <cbvprintf+0x2c>
			OUTC(*fp++);
    14f4:	3701      	adds	r7, #1
    14f6:	4629      	mov	r1, r5
    14f8:	47b0      	blx	r6
    14fa:	2800      	cmp	r0, #0
    14fc:	f2c0 8353 	blt.w	1ba6 <cbvprintf+0x6ce>
    1500:	3401      	adds	r4, #1
			continue;
    1502:	e7f1      	b.n	14e8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1504:	2300      	movs	r3, #0
    1506:	9308      	str	r3, [sp, #32]
    1508:	9309      	str	r3, [sp, #36]	; 0x24
    150a:	930a      	str	r3, [sp, #40]	; 0x28
    150c:	930b      	str	r3, [sp, #44]	; 0x2c
    150e:	930c      	str	r3, [sp, #48]	; 0x30
    1510:	930d      	str	r3, [sp, #52]	; 0x34
		union argument_value *const value = &state.value;
		const char *sp = fp;
		int width = -1;
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
    1512:	f10d 0255 	add.w	r2, sp, #85	; 0x55
    1516:	9207      	str	r2, [sp, #28]
		char sign = 0;
    1518:	f88d 301b 	strb.w	r3, [sp, #27]

		fp = extract_conversion(conv, sp);
    151c:	4639      	mov	r1, r7
    151e:	a80a      	add	r0, sp, #40	; 0x28
    1520:	f7ff fc3a 	bl	d98 <extract_conversion>
    1524:	4681      	mov	r9, r0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1526:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    152a:	f013 0f01 	tst.w	r3, #1
    152e:	f000 80a1 	beq.w	1674 <cbvprintf+0x19c>
			width = va_arg(ap, int);
    1532:	9b05      	ldr	r3, [sp, #20]
    1534:	1d1a      	adds	r2, r3, #4
    1536:	9205      	str	r2, [sp, #20]
    1538:	f8d3 8000 	ldr.w	r8, [r3]

			if (width < 0) {
    153c:	f1b8 0f00 	cmp.w	r8, #0
    1540:	f2c0 808f 	blt.w	1662 <cbvprintf+0x18a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1544:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    1548:	f013 0f04 	tst.w	r3, #4
    154c:	f000 80a5 	beq.w	169a <cbvprintf+0x1c2>
			int arg = va_arg(ap, int);
    1550:	9b05      	ldr	r3, [sp, #20]
    1552:	1d1a      	adds	r2, r3, #4
    1554:	9205      	str	r2, [sp, #20]
    1556:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    155a:	f1ba 0f00 	cmp.w	sl, #0
    155e:	f2c0 8093 	blt.w	1688 <cbvprintf+0x1b0>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1562:	2300      	movs	r3, #0
    1564:	930b      	str	r3, [sp, #44]	; 0x2c
		conv->pad0_pre_exp = 0;
    1566:	930c      	str	r3, [sp, #48]	; 0x30

		/* FP conversion requires knowing the precision. */
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
		    && (conv->specifier_cat == SPECIFIER_FP)
    1568:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    156c:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1570:	2b04      	cmp	r3, #4
    1572:	f000 809b 	beq.w	16ac <cbvprintf+0x1d4>
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1576:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    157a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    157e:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
    1582:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1586:	2b01      	cmp	r3, #1
    1588:	f000 80a0 	beq.w	16cc <cbvprintf+0x1f4>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    158c:	2b02      	cmp	r3, #2
    158e:	f000 80e5 	beq.w	175c <cbvprintf+0x284>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1592:	2b04      	cmp	r3, #4
    1594:	f000 8136 	beq.w	1804 <cbvprintf+0x32c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1598:	2b03      	cmp	r3, #3
    159a:	f000 814d 	beq.w	1838 <cbvprintf+0x360>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    159e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    15a2:	f012 0f03 	tst.w	r2, #3
    15a6:	f040 814d 	bne.w	1844 <cbvprintf+0x36c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    15aa:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    15ae:	3b25      	subs	r3, #37	; 0x25
    15b0:	2b53      	cmp	r3, #83	; 0x53
    15b2:	f200 815a 	bhi.w	186a <cbvprintf+0x392>
    15b6:	e8df f013 	tbh	[pc, r3, lsl #1]
    15ba:	0151      	.short	0x0151
    15bc:	01580158 	.word	0x01580158
    15c0:	01580158 	.word	0x01580158
    15c4:	01580158 	.word	0x01580158
    15c8:	01580158 	.word	0x01580158
    15cc:	01580158 	.word	0x01580158
    15d0:	01580158 	.word	0x01580158
    15d4:	01580158 	.word	0x01580158
    15d8:	01580158 	.word	0x01580158
    15dc:	01580158 	.word	0x01580158
    15e0:	01580158 	.word	0x01580158
    15e4:	01580158 	.word	0x01580158
    15e8:	01580158 	.word	0x01580158
    15ec:	01580158 	.word	0x01580158
    15f0:	02150158 	.word	0x02150158
    15f4:	01580158 	.word	0x01580158
    15f8:	02150158 	.word	0x02150158
    15fc:	02150215 	.word	0x02150215
    1600:	01580158 	.word	0x01580158
    1604:	01580158 	.word	0x01580158
    1608:	01580158 	.word	0x01580158
    160c:	01580158 	.word	0x01580158
    1610:	01580158 	.word	0x01580158
    1614:	01580158 	.word	0x01580158
    1618:	01580158 	.word	0x01580158
    161c:	01580158 	.word	0x01580158
    1620:	015801b1 	.word	0x015801b1
    1624:	01580158 	.word	0x01580158
    1628:	01580158 	.word	0x01580158
    162c:	01580158 	.word	0x01580158
    1630:	02150158 	.word	0x02150158
    1634:	019d0158 	.word	0x019d0158
    1638:	021501a5 	.word	0x021501a5
    163c:	02150215 	.word	0x02150215
    1640:	01a50158 	.word	0x01a50158
    1644:	01580158 	.word	0x01580158
    1648:	01580158 	.word	0x01580158
    164c:	01b101f3 	.word	0x01b101f3
    1650:	015801db 	.word	0x015801db
    1654:	015a0158 	.word	0x015a0158
    1658:	01b10158 	.word	0x01b10158
    165c:	01580158 	.word	0x01580158
    1660:	01b1      	.short	0x01b1
				conv->flag_dash = true;
    1662:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    1666:	f043 0304 	orr.w	r3, r3, #4
    166a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				width = -width;
    166e:	f1c8 0800 	rsb	r8, r8, #0
    1672:	e767      	b.n	1544 <cbvprintf+0x6c>
		} else if (conv->width_present) {
    1674:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    1678:	2b00      	cmp	r3, #0
    167a:	db02      	blt.n	1682 <cbvprintf+0x1aa>
		int width = -1;
    167c:	f04f 38ff 	mov.w	r8, #4294967295
    1680:	e760      	b.n	1544 <cbvprintf+0x6c>
			width = conv->width_value;
    1682:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    1686:	e75d      	b.n	1544 <cbvprintf+0x6c>
				conv->prec_present = false;
    1688:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    168c:	f36f 0341 	bfc	r3, #1, #1
    1690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
		int precision = -1;
    1694:	f04f 3aff 	mov.w	sl, #4294967295
    1698:	e763      	b.n	1562 <cbvprintf+0x8a>
		} else if (conv->prec_present) {
    169a:	f013 0f02 	tst.w	r3, #2
    169e:	d002      	beq.n	16a6 <cbvprintf+0x1ce>
			precision = conv->prec_value;
    16a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    16a4:	e75d      	b.n	1562 <cbvprintf+0x8a>
		int precision = -1;
    16a6:	f04f 3aff 	mov.w	sl, #4294967295
    16aa:	e75a      	b.n	1562 <cbvprintf+0x8a>
		    && !conv->prec_present) {
    16ac:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    16b0:	f013 0f02 	tst.w	r3, #2
    16b4:	f47f af5f 	bne.w	1576 <cbvprintf+0x9e>
			if (conv->specifier_a) {
    16b8:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    16bc:	2b00      	cmp	r3, #0
    16be:	db02      	blt.n	16c6 <cbvprintf+0x1ee>
				precision = 6;
    16c0:	f04f 0a06 	mov.w	sl, #6
    16c4:	e757      	b.n	1576 <cbvprintf+0x9e>
				precision = FRACTION_HEX;
    16c6:	f04f 0a0d 	mov.w	sl, #13
    16ca:	e754      	b.n	1576 <cbvprintf+0x9e>
			switch (length_mod) {
    16cc:	1ecb      	subs	r3, r1, #3
    16ce:	2b04      	cmp	r3, #4
    16d0:	d804      	bhi.n	16dc <cbvprintf+0x204>
    16d2:	e8df f003 	tbb	[pc, r3]
    16d6:	1d0b      	.short	0x1d0b
    16d8:	3529      	.short	0x3529
    16da:	35          	.byte	0x35
    16db:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    16dc:	9b05      	ldr	r3, [sp, #20]
    16de:	1d1a      	adds	r2, r3, #4
    16e0:	9205      	str	r2, [sp, #20]
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	17da      	asrs	r2, r3, #31
    16e6:	9308      	str	r3, [sp, #32]
    16e8:	9209      	str	r2, [sp, #36]	; 0x24
				break;
    16ea:	e006      	b.n	16fa <cbvprintf+0x222>
					value->sint = va_arg(ap, long);
    16ec:	9b05      	ldr	r3, [sp, #20]
    16ee:	1d1a      	adds	r2, r3, #4
    16f0:	9205      	str	r2, [sp, #20]
    16f2:	681b      	ldr	r3, [r3, #0]
    16f4:	17da      	asrs	r2, r3, #31
    16f6:	9308      	str	r3, [sp, #32]
    16f8:	9209      	str	r2, [sp, #36]	; 0x24
			if (length_mod == LENGTH_HH) {
    16fa:	2901      	cmp	r1, #1
    16fc:	d028      	beq.n	1750 <cbvprintf+0x278>
			} else if (length_mod == LENGTH_H) {
    16fe:	2902      	cmp	r1, #2
    1700:	f47f af4d 	bne.w	159e <cbvprintf+0xc6>
				value->sint = (short)value->sint;
    1704:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    1708:	17da      	asrs	r2, r3, #31
    170a:	9308      	str	r3, [sp, #32]
    170c:	9209      	str	r2, [sp, #36]	; 0x24
    170e:	e746      	b.n	159e <cbvprintf+0xc6>
					(sint_value_type)va_arg(ap, long long);
    1710:	9b05      	ldr	r3, [sp, #20]
    1712:	3307      	adds	r3, #7
    1714:	f023 0307 	bic.w	r3, r3, #7
    1718:	f103 0208 	add.w	r2, r3, #8
    171c:	9205      	str	r2, [sp, #20]
    171e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1722:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    1726:	e7e8      	b.n	16fa <cbvprintf+0x222>
					(sint_value_type)va_arg(ap, intmax_t);
    1728:	9b05      	ldr	r3, [sp, #20]
    172a:	3307      	adds	r3, #7
    172c:	f023 0307 	bic.w	r3, r3, #7
    1730:	f103 0208 	add.w	r2, r3, #8
    1734:	9205      	str	r2, [sp, #20]
    1736:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    173a:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    173e:	e7dc      	b.n	16fa <cbvprintf+0x222>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1740:	9b05      	ldr	r3, [sp, #20]
    1742:	1d1a      	adds	r2, r3, #4
    1744:	9205      	str	r2, [sp, #20]
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	17da      	asrs	r2, r3, #31
				value->sint =
    174a:	9308      	str	r3, [sp, #32]
    174c:	9209      	str	r2, [sp, #36]	; 0x24
				break;
    174e:	e7d4      	b.n	16fa <cbvprintf+0x222>
				value->sint = (char)value->sint;
    1750:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1754:	9308      	str	r3, [sp, #32]
    1756:	2300      	movs	r3, #0
    1758:	9309      	str	r3, [sp, #36]	; 0x24
    175a:	e720      	b.n	159e <cbvprintf+0xc6>
			switch (length_mod) {
    175c:	1ecb      	subs	r3, r1, #3
    175e:	2b04      	cmp	r3, #4
    1760:	d804      	bhi.n	176c <cbvprintf+0x294>
    1762:	e8df f003 	tbb	[pc, r3]
    1766:	1f0b      	.short	0x1f0b
    1768:	4135      	.short	0x4135
    176a:	41          	.byte	0x41
    176b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    176c:	9b05      	ldr	r3, [sp, #20]
    176e:	1d1a      	adds	r2, r3, #4
    1770:	9205      	str	r2, [sp, #20]
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	9308      	str	r3, [sp, #32]
    1776:	2300      	movs	r3, #0
    1778:	9309      	str	r3, [sp, #36]	; 0x24
				break;
    177a:	e01e      	b.n	17ba <cbvprintf+0x2e2>
				    && (conv->specifier == 'c')) {
    177c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
				if ((!WCHAR_IS_SIGNED)
    1780:	2b63      	cmp	r3, #99	; 0x63
    1782:	d007      	beq.n	1794 <cbvprintf+0x2bc>
					value->uint = va_arg(ap, unsigned long);
    1784:	9b05      	ldr	r3, [sp, #20]
    1786:	1d1a      	adds	r2, r3, #4
    1788:	9205      	str	r2, [sp, #20]
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	9308      	str	r3, [sp, #32]
    178e:	2300      	movs	r3, #0
    1790:	9309      	str	r3, [sp, #36]	; 0x24
    1792:	e012      	b.n	17ba <cbvprintf+0x2e2>
					value->uint = (wchar_t)va_arg(ap,
    1794:	9b05      	ldr	r3, [sp, #20]
    1796:	1d1a      	adds	r2, r3, #4
    1798:	9205      	str	r2, [sp, #20]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	9308      	str	r3, [sp, #32]
    179e:	2300      	movs	r3, #0
    17a0:	9309      	str	r3, [sp, #36]	; 0x24
    17a2:	e00a      	b.n	17ba <cbvprintf+0x2e2>
					(uint_value_type)va_arg(ap,
    17a4:	9b05      	ldr	r3, [sp, #20]
    17a6:	3307      	adds	r3, #7
    17a8:	f023 0307 	bic.w	r3, r3, #7
    17ac:	f103 0208 	add.w	r2, r3, #8
    17b0:	9205      	str	r2, [sp, #20]
    17b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    17b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
			if (length_mod == LENGTH_HH) {
    17ba:	2901      	cmp	r1, #1
    17bc:	d01c      	beq.n	17f8 <cbvprintf+0x320>
			} else if (length_mod == LENGTH_H) {
    17be:	2902      	cmp	r1, #2
    17c0:	f47f aeed 	bne.w	159e <cbvprintf+0xc6>
				value->uint = (unsigned short)value->uint;
    17c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    17c8:	9308      	str	r3, [sp, #32]
    17ca:	2300      	movs	r3, #0
    17cc:	9309      	str	r3, [sp, #36]	; 0x24
    17ce:	e6e6      	b.n	159e <cbvprintf+0xc6>
					(uint_value_type)va_arg(ap,
    17d0:	9b05      	ldr	r3, [sp, #20]
    17d2:	3307      	adds	r3, #7
    17d4:	f023 0307 	bic.w	r3, r3, #7
    17d8:	f103 0208 	add.w	r2, r3, #8
    17dc:	9205      	str	r2, [sp, #20]
    17de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    17e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
				break;
    17e6:	e7e8      	b.n	17ba <cbvprintf+0x2e2>
					(uint_value_type)va_arg(ap, size_t);
    17e8:	9b05      	ldr	r3, [sp, #20]
    17ea:	1d1a      	adds	r2, r3, #4
    17ec:	9205      	str	r2, [sp, #20]
    17ee:	681b      	ldr	r3, [r3, #0]
				value->uint =
    17f0:	9308      	str	r3, [sp, #32]
    17f2:	2300      	movs	r3, #0
    17f4:	9309      	str	r3, [sp, #36]	; 0x24
				break;
    17f6:	e7e0      	b.n	17ba <cbvprintf+0x2e2>
				value->uint = (unsigned char)value->uint;
    17f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    17fc:	9308      	str	r3, [sp, #32]
    17fe:	2300      	movs	r3, #0
    1800:	9309      	str	r3, [sp, #36]	; 0x24
    1802:	e6cc      	b.n	159e <cbvprintf+0xc6>
			if (length_mod == LENGTH_UPPER_L) {
    1804:	2908      	cmp	r1, #8
    1806:	d00b      	beq.n	1820 <cbvprintf+0x348>
				value->dbl = va_arg(ap, double);
    1808:	9b05      	ldr	r3, [sp, #20]
    180a:	3307      	adds	r3, #7
    180c:	f023 0307 	bic.w	r3, r3, #7
    1810:	f103 0208 	add.w	r2, r3, #8
    1814:	9205      	str	r2, [sp, #20]
    1816:	e9d3 2300 	ldrd	r2, r3, [r3]
    181a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    181e:	e6be      	b.n	159e <cbvprintf+0xc6>
				value->ldbl = va_arg(ap, long double);
    1820:	9b05      	ldr	r3, [sp, #20]
    1822:	3307      	adds	r3, #7
    1824:	f023 0307 	bic.w	r3, r3, #7
    1828:	f103 0208 	add.w	r2, r3, #8
    182c:	9205      	str	r2, [sp, #20]
    182e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1832:	e9cd 2308 	strd	r2, r3, [sp, #32]
    1836:	e6b2      	b.n	159e <cbvprintf+0xc6>
			value->ptr = va_arg(ap, void *);
    1838:	9b05      	ldr	r3, [sp, #20]
    183a:	1d1a      	adds	r2, r3, #4
    183c:	9205      	str	r2, [sp, #20]
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	9308      	str	r3, [sp, #32]
    1842:	e6ac      	b.n	159e <cbvprintf+0xc6>
			OUTS(sp, fp);
    1844:	464b      	mov	r3, r9
    1846:	463a      	mov	r2, r7
    1848:	4629      	mov	r1, r5
    184a:	4630      	mov	r0, r6
    184c:	f005 fa5f 	bl	6d0e <outs>
    1850:	2800      	cmp	r0, #0
    1852:	f2c0 81a8 	blt.w	1ba6 <cbvprintf+0x6ce>
    1856:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1858:	464f      	mov	r7, r9
			continue;
    185a:	e645      	b.n	14e8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    185c:	4629      	mov	r1, r5
    185e:	2025      	movs	r0, #37	; 0x25
    1860:	47b0      	blx	r6
    1862:	2800      	cmp	r0, #0
    1864:	f2c0 819f 	blt.w	1ba6 <cbvprintf+0x6ce>
    1868:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
    186a:	464f      	mov	r7, r9

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
			continue;
    186c:	e63c      	b.n	14e8 <cbvprintf+0x10>
			bps = (const char *)value->ptr;
    186e:	9f08      	ldr	r7, [sp, #32]
			if (precision >= 0) {
    1870:	f1ba 0f00 	cmp.w	sl, #0
    1874:	db3a      	blt.n	18ec <cbvprintf+0x414>
				len = strnlen(bps, precision);
    1876:	4651      	mov	r1, sl
    1878:	4638      	mov	r0, r7
    187a:	f005 fb39 	bl	6ef0 <strnlen>
			bpe = bps + len;
    187e:	4438      	add	r0, r7
    1880:	9007      	str	r0, [sp, #28]
		if (bps == NULL) {
    1882:	2f00      	cmp	r7, #0
    1884:	d0f1      	beq.n	186a <cbvprintf+0x392>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1886:	9b07      	ldr	r3, [sp, #28]
    1888:	1bdb      	subs	r3, r3, r7
		int pad_len = 0;

		if (sign != 0) {
    188a:	f89d 001b 	ldrb.w	r0, [sp, #27]
    188e:	b100      	cbz	r0, 1892 <cbvprintf+0x3ba>
			nj_len += 1U;
    1890:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    1892:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    1896:	f011 0f10 	tst.w	r1, #16
    189a:	f000 80b2 	beq.w	1a02 <cbvprintf+0x52a>
			nj_len += 2U;
    189e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    18a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    18a2:	4413      	add	r3, r2
		if (conv->pad_fp) {
    18a4:	f011 0f40 	tst.w	r1, #64	; 0x40
    18a8:	d001      	beq.n	18ae <cbvprintf+0x3d6>
			nj_len += conv->pad0_pre_exp;
    18aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18ac:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    18ae:	f1b8 0f00 	cmp.w	r8, #0
    18b2:	f340 80bf 	ble.w	1a34 <cbvprintf+0x55c>
			width -= (int)nj_len;
    18b6:	eba8 0803 	sub.w	r8, r8, r3

			if (!conv->flag_dash) {
    18ba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    18be:	f013 0f04 	tst.w	r3, #4
    18c2:	f040 80b7 	bne.w	1a34 <cbvprintf+0x55c>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    18c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    18ca:	f000 80a0 	beq.w	1a0e <cbvprintf+0x536>
					if (sign != 0) {
    18ce:	2800      	cmp	r0, #0
    18d0:	f000 80a0 	beq.w	1a14 <cbvprintf+0x53c>
						OUTC(sign);
    18d4:	4629      	mov	r1, r5
    18d6:	47b0      	blx	r6
    18d8:	2800      	cmp	r0, #0
    18da:	f2c0 8164 	blt.w	1ba6 <cbvprintf+0x6ce>
    18de:	3401      	adds	r4, #1
						sign = 0;
    18e0:	2300      	movs	r3, #0
    18e2:	f88d 301b 	strb.w	r3, [sp, #27]
					}
					pad = '0';
    18e6:	f04f 0a30 	mov.w	sl, #48	; 0x30
    18ea:	e095      	b.n	1a18 <cbvprintf+0x540>
				len = strlen(bps);
    18ec:	4638      	mov	r0, r7
    18ee:	f005 faf6 	bl	6ede <strlen>
    18f2:	e7c4      	b.n	187e <cbvprintf+0x3a6>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    18f4:	9b08      	ldr	r3, [sp, #32]
    18f6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
			bpe = buf + 1;
    18fa:	f10d 033d 	add.w	r3, sp, #61	; 0x3d
    18fe:	9307      	str	r3, [sp, #28]
			bps = buf;
    1900:	af0f      	add	r7, sp, #60	; 0x3c
			break;
    1902:	e7be      	b.n	1882 <cbvprintf+0x3aa>
			if (conv->flag_plus) {
    1904:	f012 0f08 	tst.w	r2, #8
    1908:	d022      	beq.n	1950 <cbvprintf+0x478>
				sign = '+';
    190a:	232b      	movs	r3, #43	; 0x2b
    190c:	f88d 301b 	strb.w	r3, [sp, #27]
			sint = value->sint;
    1910:	9a08      	ldr	r2, [sp, #32]
    1912:	9b09      	ldr	r3, [sp, #36]	; 0x24
			if (sint < 0) {
    1914:	2b00      	cmp	r3, #0
    1916:	db22      	blt.n	195e <cbvprintf+0x486>
				value->uint = (uint_value_type)sint;
    1918:	9208      	str	r2, [sp, #32]
    191a:	9309      	str	r3, [sp, #36]	; 0x24
			bps = encode_uint(value->uint, conv, buf, bpe);
    191c:	9b07      	ldr	r3, [sp, #28]
    191e:	9300      	str	r3, [sp, #0]
    1920:	ab0f      	add	r3, sp, #60	; 0x3c
    1922:	aa0a      	add	r2, sp, #40	; 0x28
    1924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1928:	f005 f987 	bl	6c3a <encode_uint>
    192c:	4607      	mov	r7, r0
			if (precision >= 0) {
    192e:	f1ba 0f00 	cmp.w	sl, #0
    1932:	dba6      	blt.n	1882 <cbvprintf+0x3aa>
				size_t len = bpe - bps;
    1934:	9b07      	ldr	r3, [sp, #28]
    1936:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1938:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    193c:	f36f 1286 	bfc	r2, #6, #1
    1940:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
				if (len < (size_t)precision) {
    1944:	459a      	cmp	sl, r3
    1946:	d99c      	bls.n	1882 <cbvprintf+0x3aa>
					conv->pad0_value = precision - (int)len;
    1948:	ebaa 0303 	sub.w	r3, sl, r3
    194c:	930b      	str	r3, [sp, #44]	; 0x2c
    194e:	e798      	b.n	1882 <cbvprintf+0x3aa>
			} else if (conv->flag_space) {
    1950:	f012 0f10 	tst.w	r2, #16
    1954:	d0dc      	beq.n	1910 <cbvprintf+0x438>
				sign = ' ';
    1956:	2320      	movs	r3, #32
    1958:	f88d 301b 	strb.w	r3, [sp, #27]
    195c:	e7d8      	b.n	1910 <cbvprintf+0x438>
				sign = '-';
    195e:	212d      	movs	r1, #45	; 0x2d
    1960:	f88d 101b 	strb.w	r1, [sp, #27]
				value->uint = (uint_value_type)-sint;
    1964:	4252      	negs	r2, r2
    1966:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    196a:	9208      	str	r2, [sp, #32]
    196c:	9309      	str	r3, [sp, #36]	; 0x24
    196e:	e7d5      	b.n	191c <cbvprintf+0x444>
			if (value->ptr != NULL) {
    1970:	9808      	ldr	r0, [sp, #32]
    1972:	b918      	cbnz	r0, 197c <cbvprintf+0x4a4>
			bpe = bps + 5;
    1974:	4f8d      	ldr	r7, [pc, #564]	; (1bac <cbvprintf+0x6d4>)
    1976:	9707      	str	r7, [sp, #28]
			bps = "(nil)";
    1978:	3f05      	subs	r7, #5
			break;
    197a:	e782      	b.n	1882 <cbvprintf+0x3aa>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    197c:	9b07      	ldr	r3, [sp, #28]
    197e:	9300      	str	r3, [sp, #0]
    1980:	ab0f      	add	r3, sp, #60	; 0x3c
    1982:	aa0a      	add	r2, sp, #40	; 0x28
    1984:	2100      	movs	r1, #0
    1986:	f005 f958 	bl	6c3a <encode_uint>
    198a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    198c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1990:	f043 0310 	orr.w	r3, r3, #16
    1994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				conv->specifier = 'x';
    1998:	2378      	movs	r3, #120	; 0x78
    199a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
				goto prec_int_pad0;
    199e:	e7c6      	b.n	192e <cbvprintf+0x456>
				store_count(conv, value->ptr, count);
    19a0:	9a08      	ldr	r2, [sp, #32]
	switch ((enum length_mod_enum)conv->length_mod) {
    19a2:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    19a6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    19aa:	2b07      	cmp	r3, #7
    19ac:	f63f af5d 	bhi.w	186a <cbvprintf+0x392>
    19b0:	e8df f003 	tbb	[pc, r3]
    19b4:	0a080604 	.word	0x0a080604
    19b8:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    19bc:	6014      	str	r4, [r2, #0]
		break;
    19be:	e754      	b.n	186a <cbvprintf+0x392>
		*(signed char *)dp = (signed char)count;
    19c0:	7014      	strb	r4, [r2, #0]
		break;
    19c2:	e752      	b.n	186a <cbvprintf+0x392>
		*(short *)dp = (short)count;
    19c4:	8014      	strh	r4, [r2, #0]
		break;
    19c6:	e750      	b.n	186a <cbvprintf+0x392>
		*(long *)dp = (long)count;
    19c8:	6014      	str	r4, [r2, #0]
		break;
    19ca:	e74e      	b.n	186a <cbvprintf+0x392>
		*(long long *)dp = (long long)count;
    19cc:	17e3      	asrs	r3, r4, #31
    19ce:	6014      	str	r4, [r2, #0]
    19d0:	6053      	str	r3, [r2, #4]
		break;
    19d2:	e74a      	b.n	186a <cbvprintf+0x392>
		*(intmax_t *)dp = (intmax_t)count;
    19d4:	17e3      	asrs	r3, r4, #31
    19d6:	6014      	str	r4, [r2, #0]
    19d8:	6053      	str	r3, [r2, #4]
		break;
    19da:	e746      	b.n	186a <cbvprintf+0x392>
		*(size_t *)dp = (size_t)count;
    19dc:	6014      	str	r4, [r2, #0]
		break;
    19de:	e744      	b.n	186a <cbvprintf+0x392>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    19e0:	6014      	str	r4, [r2, #0]
}
    19e2:	e742      	b.n	186a <cbvprintf+0x392>
				bps = encode_float(value->dbl, conv, precision,
    19e4:	ab07      	add	r3, sp, #28
    19e6:	9302      	str	r3, [sp, #8]
    19e8:	ab0f      	add	r3, sp, #60	; 0x3c
    19ea:	9301      	str	r3, [sp, #4]
    19ec:	f10d 031b 	add.w	r3, sp, #27
    19f0:	9300      	str	r3, [sp, #0]
    19f2:	4653      	mov	r3, sl
    19f4:	aa0a      	add	r2, sp, #40	; 0x28
    19f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    19fa:	f7ff fb7d 	bl	10f8 <encode_float>
    19fe:	4607      	mov	r7, r0
			break;
    1a00:	e73f      	b.n	1882 <cbvprintf+0x3aa>
		} else if (conv->altform_0) {
    1a02:	f011 0f08 	tst.w	r1, #8
    1a06:	f43f af4b 	beq.w	18a0 <cbvprintf+0x3c8>
			nj_len += 1U;
    1a0a:	3301      	adds	r3, #1
    1a0c:	e748      	b.n	18a0 <cbvprintf+0x3c8>
				char pad = ' ';
    1a0e:	f04f 0a20 	mov.w	sl, #32
    1a12:	e001      	b.n	1a18 <cbvprintf+0x540>
					pad = '0';
    1a14:	f04f 0a30 	mov.w	sl, #48	; 0x30
    1a18:	4643      	mov	r3, r8
				}

				while (width-- > 0) {
    1a1a:	f103 38ff 	add.w	r8, r3, #4294967295
    1a1e:	2b00      	cmp	r3, #0
    1a20:	dd08      	ble.n	1a34 <cbvprintf+0x55c>
					OUTC(pad);
    1a22:	4629      	mov	r1, r5
    1a24:	4650      	mov	r0, sl
    1a26:	47b0      	blx	r6
    1a28:	2800      	cmp	r0, #0
    1a2a:	f2c0 80bc 	blt.w	1ba6 <cbvprintf+0x6ce>
    1a2e:	3401      	adds	r4, #1
				while (width-- > 0) {
    1a30:	4643      	mov	r3, r8
    1a32:	e7f2      	b.n	1a1a <cbvprintf+0x542>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1a34:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1a38:	b128      	cbz	r0, 1a46 <cbvprintf+0x56e>
			OUTC(sign);
    1a3a:	4629      	mov	r1, r5
    1a3c:	47b0      	blx	r6
    1a3e:	2800      	cmp	r0, #0
    1a40:	f2c0 80b1 	blt.w	1ba6 <cbvprintf+0x6ce>
    1a44:	3401      	adds	r4, #1
		}

		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    1a46:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1a4a:	f013 0f40 	tst.w	r3, #64	; 0x40
    1a4e:	d06a      	beq.n	1b26 <cbvprintf+0x64e>
			const char *cp = bps;

			if (conv->specifier_a) {
    1a50:	f99d 3029 	ldrsb.w	r3, [sp, #41]	; 0x29
    1a54:	2b00      	cmp	r3, #0
    1a56:	da0b      	bge.n	1a70 <cbvprintf+0x598>
				/* Only padding is pre_exp */
				while (*cp != 'p') {
    1a58:	7838      	ldrb	r0, [r7, #0]
    1a5a:	2870      	cmp	r0, #112	; 0x70
    1a5c:	d04c      	beq.n	1af8 <cbvprintf+0x620>
					OUTC(*cp++);
    1a5e:	3701      	adds	r7, #1
    1a60:	4629      	mov	r1, r5
    1a62:	47b0      	blx	r6
    1a64:	2800      	cmp	r0, #0
    1a66:	f2c0 809e 	blt.w	1ba6 <cbvprintf+0x6ce>
    1a6a:	3401      	adds	r4, #1
    1a6c:	e7f4      	b.n	1a58 <cbvprintf+0x580>
				}
			} else {
				while (isdigit((int)*cp)) {
					OUTC(*cp++);
    1a6e:	3401      	adds	r4, #1
				while (isdigit((int)*cp)) {
    1a70:	7838      	ldrb	r0, [r7, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1a72:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1a76:	2b09      	cmp	r3, #9
    1a78:	d805      	bhi.n	1a86 <cbvprintf+0x5ae>
					OUTC(*cp++);
    1a7a:	3701      	adds	r7, #1
    1a7c:	4629      	mov	r1, r5
    1a7e:	47b0      	blx	r6
    1a80:	2800      	cmp	r0, #0
    1a82:	daf4      	bge.n	1a6e <cbvprintf+0x596>
    1a84:	e08f      	b.n	1ba6 <cbvprintf+0x6ce>
				}

				pad_len = conv->pad0_value;
    1a86:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
				if (!conv->pad_postdp) {
    1a8a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1a8e:	f013 0f20 	tst.w	r3, #32
    1a92:	d00e      	beq.n	1ab2 <cbvprintf+0x5da>
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}

				if (*cp == '.') {
    1a94:	7838      	ldrb	r0, [r7, #0]
    1a96:	282e      	cmp	r0, #46	; 0x2e
    1a98:	d01a      	beq.n	1ad0 <cbvprintf+0x5f8>
					 */
					while (pad_len-- > 0) {
						OUTC('0');
					}
				}
				while (isdigit((int)*cp)) {
    1a9a:	7838      	ldrb	r0, [r7, #0]
    1a9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1aa0:	2b09      	cmp	r3, #9
    1aa2:	d829      	bhi.n	1af8 <cbvprintf+0x620>
					OUTC(*cp++);
    1aa4:	3701      	adds	r7, #1
    1aa6:	4629      	mov	r1, r5
    1aa8:	47b0      	blx	r6
    1aaa:	2800      	cmp	r0, #0
    1aac:	db7b      	blt.n	1ba6 <cbvprintf+0x6ce>
    1aae:	3401      	adds	r4, #1
    1ab0:	e7f3      	b.n	1a9a <cbvprintf+0x5c2>
					while (pad_len-- > 0) {
    1ab2:	f10a 3bff 	add.w	fp, sl, #4294967295
    1ab6:	f1ba 0f00 	cmp.w	sl, #0
    1aba:	dd07      	ble.n	1acc <cbvprintf+0x5f4>
						OUTC('0');
    1abc:	4629      	mov	r1, r5
    1abe:	2030      	movs	r0, #48	; 0x30
    1ac0:	47b0      	blx	r6
    1ac2:	2800      	cmp	r0, #0
    1ac4:	db6f      	blt.n	1ba6 <cbvprintf+0x6ce>
    1ac6:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    1ac8:	46da      	mov	sl, fp
    1aca:	e7f2      	b.n	1ab2 <cbvprintf+0x5da>
    1acc:	46da      	mov	sl, fp
    1ace:	e7e1      	b.n	1a94 <cbvprintf+0x5bc>
					OUTC(*cp++);
    1ad0:	3701      	adds	r7, #1
    1ad2:	4629      	mov	r1, r5
    1ad4:	47b0      	blx	r6
    1ad6:	2800      	cmp	r0, #0
    1ad8:	db65      	blt.n	1ba6 <cbvprintf+0x6ce>
    1ada:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    1adc:	e001      	b.n	1ae2 <cbvprintf+0x60a>
						OUTC('0');
    1ade:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
    1ae0:	46da      	mov	sl, fp
    1ae2:	f10a 3bff 	add.w	fp, sl, #4294967295
    1ae6:	f1ba 0f00 	cmp.w	sl, #0
    1aea:	ddd6      	ble.n	1a9a <cbvprintf+0x5c2>
						OUTC('0');
    1aec:	4629      	mov	r1, r5
    1aee:	2030      	movs	r0, #48	; 0x30
    1af0:	47b0      	blx	r6
    1af2:	2800      	cmp	r0, #0
    1af4:	daf3      	bge.n	1ade <cbvprintf+0x606>
    1af6:	e056      	b.n	1ba6 <cbvprintf+0x6ce>
				}
			}

			pad_len = conv->pad0_pre_exp;
    1af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			while (pad_len-- > 0) {
    1afa:	f103 3aff 	add.w	sl, r3, #4294967295
    1afe:	2b00      	cmp	r3, #0
    1b00:	dd07      	ble.n	1b12 <cbvprintf+0x63a>
				OUTC('0');
    1b02:	4629      	mov	r1, r5
    1b04:	2030      	movs	r0, #48	; 0x30
    1b06:	47b0      	blx	r6
    1b08:	2800      	cmp	r0, #0
    1b0a:	db4c      	blt.n	1ba6 <cbvprintf+0x6ce>
    1b0c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1b0e:	4653      	mov	r3, sl
    1b10:	e7f3      	b.n	1afa <cbvprintf+0x622>
			}

			OUTS(cp, bpe);
    1b12:	9b07      	ldr	r3, [sp, #28]
    1b14:	463a      	mov	r2, r7
    1b16:	4629      	mov	r1, r5
    1b18:	4630      	mov	r0, r6
    1b1a:	f005 f8f8 	bl	6d0e <outs>
    1b1e:	2800      	cmp	r0, #0
    1b20:	db41      	blt.n	1ba6 <cbvprintf+0x6ce>
    1b22:	4404      	add	r4, r0
    1b24:	e033      	b.n	1b8e <cbvprintf+0x6b6>
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1b26:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1b2a:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1b2e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1b32:	4313      	orrs	r3, r2
    1b34:	d005      	beq.n	1b42 <cbvprintf+0x66a>
				OUTC('0');
    1b36:	4629      	mov	r1, r5
    1b38:	2030      	movs	r0, #48	; 0x30
    1b3a:	47b0      	blx	r6
    1b3c:	2800      	cmp	r0, #0
    1b3e:	db32      	blt.n	1ba6 <cbvprintf+0x6ce>
    1b40:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1b42:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    1b46:	f013 0f10 	tst.w	r3, #16
    1b4a:	d006      	beq.n	1b5a <cbvprintf+0x682>
				OUTC(conv->specifier);
    1b4c:	4629      	mov	r1, r5
    1b4e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    1b52:	47b0      	blx	r6
    1b54:	2800      	cmp	r0, #0
    1b56:	db26      	blt.n	1ba6 <cbvprintf+0x6ce>
    1b58:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			while (pad_len-- > 0) {
    1b5c:	f103 3aff 	add.w	sl, r3, #4294967295
    1b60:	2b00      	cmp	r3, #0
    1b62:	dd07      	ble.n	1b74 <cbvprintf+0x69c>
				OUTC('0');
    1b64:	4629      	mov	r1, r5
    1b66:	2030      	movs	r0, #48	; 0x30
    1b68:	47b0      	blx	r6
    1b6a:	2800      	cmp	r0, #0
    1b6c:	db1b      	blt.n	1ba6 <cbvprintf+0x6ce>
    1b6e:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1b70:	4653      	mov	r3, sl
    1b72:	e7f3      	b.n	1b5c <cbvprintf+0x684>
			}

			OUTS(bps, bpe);
    1b74:	9b07      	ldr	r3, [sp, #28]
    1b76:	463a      	mov	r2, r7
    1b78:	4629      	mov	r1, r5
    1b7a:	4630      	mov	r0, r6
    1b7c:	f005 f8c7 	bl	6d0e <outs>
    1b80:	2800      	cmp	r0, #0
    1b82:	db10      	blt.n	1ba6 <cbvprintf+0x6ce>
    1b84:	4404      	add	r4, r0
    1b86:	e002      	b.n	1b8e <cbvprintf+0x6b6>
		}

		/* Finish left justification */
		while (width > 0) {
			OUTC(' ');
    1b88:	3401      	adds	r4, #1
			--width;
    1b8a:	f108 38ff 	add.w	r8, r8, #4294967295
		while (width > 0) {
    1b8e:	f1b8 0f00 	cmp.w	r8, #0
    1b92:	dd05      	ble.n	1ba0 <cbvprintf+0x6c8>
			OUTC(' ');
    1b94:	4629      	mov	r1, r5
    1b96:	2020      	movs	r0, #32
    1b98:	47b0      	blx	r6
    1b9a:	2800      	cmp	r0, #0
    1b9c:	daf4      	bge.n	1b88 <cbvprintf+0x6b0>
    1b9e:	e002      	b.n	1ba6 <cbvprintf+0x6ce>
		fp = extract_conversion(conv, sp);
    1ba0:	464f      	mov	r7, r9
    1ba2:	e4a1      	b.n	14e8 <cbvprintf+0x10>
		}
	}

	return count;
    1ba4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1ba6:	b017      	add	sp, #92	; 0x5c
    1ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bac:	00008421 	.word	0x00008421

00001bb0 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    1bb0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    1bb2:	4b2a      	ldr	r3, [pc, #168]	; (1c5c <pm_system_resume+0xac>)
    1bb4:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1bb6:	f005 031f 	and.w	r3, r5, #31
    1bba:	2201      	movs	r2, #1
    1bbc:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1bbe:	0969      	lsrs	r1, r5, #5
    1bc0:	4b27      	ldr	r3, [pc, #156]	; (1c60 <pm_system_resume+0xb0>)
    1bc2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1bc6:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1bc8:	f3bf 8f5b 	dmb	ish
    1bcc:	e853 1f00 	ldrex	r1, [r3]
    1bd0:	ea01 0400 	and.w	r4, r1, r0
    1bd4:	e843 4600 	strex	r6, r4, [r3]
    1bd8:	2e00      	cmp	r6, #0
    1bda:	d1f7      	bne.n	1bcc <pm_system_resume+0x1c>
    1bdc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1be0:	420a      	tst	r2, r1
    1be2:	d100      	bne.n	1be6 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    1be4:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    1be6:	481f      	ldr	r0, [pc, #124]	; (1c64 <pm_system_resume+0xb4>)
    1be8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1bec:	0093      	lsls	r3, r2, #2
    1bee:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
    1bf0:	4a1d      	ldr	r2, [pc, #116]	; (1c68 <pm_system_resume+0xb8>)
    1bf2:	b172      	cbz	r2, 1c12 <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1bf4:	7849      	ldrb	r1, [r1, #1]
    1bf6:	5cc0      	ldrb	r0, [r0, r3]
    1bf8:	f005 f9e0 	bl	6fbc <pm_state_exit_post_ops>
    1bfc:	f04f 0320 	mov.w	r3, #32
    1c00:	f3ef 8611 	mrs	r6, BASEPRI
    1c04:	f383 8812 	msr	BASEPRI_MAX, r3
    1c08:	f3bf 8f6f 	isb	sy
    1c0c:	4b17      	ldr	r3, [pc, #92]	; (1c6c <pm_system_resume+0xbc>)
    1c0e:	681c      	ldr	r4, [r3, #0]
    1c10:	e010      	b.n	1c34 <pm_system_resume+0x84>
	__asm__ volatile(
    1c12:	2300      	movs	r3, #0
    1c14:	f383 8811 	msr	BASEPRI, r3
    1c18:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1c1c:	e7ee      	b.n	1bfc <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1c1e:	4b0f      	ldr	r3, [pc, #60]	; (1c5c <pm_system_resume+0xac>)
    1c20:	7d1b      	ldrb	r3, [r3, #20]
    1c22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1c26:	0099      	lsls	r1, r3, #2
    1c28:	4b0e      	ldr	r3, [pc, #56]	; (1c64 <pm_system_resume+0xb4>)
    1c2a:	5c58      	ldrb	r0, [r3, r1]
    1c2c:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    1c2e:	b10c      	cbz	r4, 1c34 <pm_system_resume+0x84>
	return node->next;
    1c30:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1c32:	b124      	cbz	r4, 1c3e <pm_system_resume+0x8e>
    1c34:	b11c      	cbz	r4, 1c3e <pm_system_resume+0x8e>
			callback = notifier->state_exit;
    1c36:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d1f0      	bne.n	1c1e <pm_system_resume+0x6e>
    1c3c:	e7f7      	b.n	1c2e <pm_system_resume+0x7e>
	__asm__ volatile(
    1c3e:	f386 8811 	msr	BASEPRI, r6
    1c42:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1c46:	4807      	ldr	r0, [pc, #28]	; (1c64 <pm_system_resume+0xb4>)
    1c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1c4c:	00aa      	lsls	r2, r5, #2
    1c4e:	1881      	adds	r1, r0, r2
    1c50:	2300      	movs	r3, #0
    1c52:	5083      	str	r3, [r0, r2]
    1c54:	604b      	str	r3, [r1, #4]
    1c56:	608b      	str	r3, [r1, #8]
}
    1c58:	e7c4      	b.n	1be4 <pm_system_resume+0x34>
    1c5a:	bf00      	nop
    1c5c:	20000d20 	.word	0x20000d20
    1c60:	20000720 	.word	0x20000720
    1c64:	20000710 	.word	0x20000710
    1c68:	00006fbd 	.word	0x00006fbd
    1c6c:	20000708 	.word	0x20000708

00001c70 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1c70:	b570      	push	{r4, r5, r6, lr}
    1c72:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1c74:	4b57      	ldr	r3, [pc, #348]	; (1dd4 <pm_system_suspend+0x164>)
    1c76:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1c78:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c7a:	f3bf 8f5b 	dmb	ish
    1c7e:	4b56      	ldr	r3, [pc, #344]	; (1dd8 <pm_system_suspend+0x168>)
    1c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1c84:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1c88:	f005 021f 	and.w	r2, r5, #31
    1c8c:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1c8e:	f013 0f01 	tst.w	r3, #1
    1c92:	d015      	beq.n	1cc0 <pm_system_suspend+0x50>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1c94:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1c98:	4a50      	ldr	r2, [pc, #320]	; (1ddc <pm_system_suspend+0x16c>)
    1c9a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1c9e:	b1f3      	cbz	r3, 1cde <pm_system_suspend+0x6e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1ca0:	f1b4 3fff 	cmp.w	r4, #4294967295
    1ca4:	d131      	bne.n	1d0a <pm_system_suspend+0x9a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1ca6:	f003 ff05 	bl	5ab4 <k_sched_lock>
	__asm__ volatile(
    1caa:	f04f 0320 	mov.w	r3, #32
    1cae:	f3ef 8611 	mrs	r6, BASEPRI
    1cb2:	f383 8812 	msr	BASEPRI_MAX, r3
    1cb6:	f3bf 8f6f 	isb	sy
	return list->head;
    1cba:	4b49      	ldr	r3, [pc, #292]	; (1de0 <pm_system_suspend+0x170>)
    1cbc:	681c      	ldr	r4, [r3, #0]
    1cbe:	e045      	b.n	1d4c <pm_system_suspend+0xdc>
		info = pm_policy_next_state(id, ticks);
    1cc0:	4601      	mov	r1, r0
    1cc2:	4628      	mov	r0, r5
    1cc4:	f000 f8a4 	bl	1e10 <pm_policy_next_state>
		if (info != NULL) {
    1cc8:	2800      	cmp	r0, #0
    1cca:	d0e3      	beq.n	1c94 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    1ccc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1cd0:	4a42      	ldr	r2, [pc, #264]	; (1ddc <pm_system_suspend+0x16c>)
    1cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1cd6:	c807      	ldmia	r0, {r0, r1, r2}
    1cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1cdc:	e7da      	b.n	1c94 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1cde:	f005 021f 	and.w	r2, r5, #31
    1ce2:	2301      	movs	r3, #1
    1ce4:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ce6:	096d      	lsrs	r5, r5, #5
    1ce8:	4a3b      	ldr	r2, [pc, #236]	; (1dd8 <pm_system_suspend+0x168>)
    1cea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1cee:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1cf0:	f3bf 8f5b 	dmb	ish
    1cf4:	e855 2f00 	ldrex	r2, [r5]
    1cf8:	401a      	ands	r2, r3
    1cfa:	e845 2100 	strex	r1, r2, [r5]
    1cfe:	2900      	cmp	r1, #0
    1d00:	d1f8      	bne.n	1cf4 <pm_system_suspend+0x84>
    1d02:	f3bf 8f5b 	dmb	ish
		ret = false;
    1d06:	2000      	movs	r0, #0
		goto end;
    1d08:	e062      	b.n	1dd0 <pm_system_suspend+0x160>
		     k_us_to_ticks_ceil32(
    1d0a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    1d0e:	4a33      	ldr	r2, [pc, #204]	; (1ddc <pm_system_suspend+0x16c>)
    1d10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d14:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1d16:	0c41      	lsrs	r1, r0, #17
    1d18:	03c0      	lsls	r0, r0, #15
    1d1a:	4b32      	ldr	r3, [pc, #200]	; (1de4 <pm_system_suspend+0x174>)
    1d1c:	18c0      	adds	r0, r0, r3
    1d1e:	4a32      	ldr	r2, [pc, #200]	; (1de8 <pm_system_suspend+0x178>)
    1d20:	f04f 0300 	mov.w	r3, #0
    1d24:	f141 0100 	adc.w	r1, r1, #0
    1d28:	f7fe fd56 	bl	7d8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1d2c:	2101      	movs	r1, #1
    1d2e:	1a20      	subs	r0, r4, r0
    1d30:	f006 f9a9 	bl	8086 <z_set_timeout_expiry>
    1d34:	e7b7      	b.n	1ca6 <pm_system_suspend+0x36>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1d36:	4b27      	ldr	r3, [pc, #156]	; (1dd4 <pm_system_suspend+0x164>)
    1d38:	7d1b      	ldrb	r3, [r3, #20]
    1d3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d3e:	4927      	ldr	r1, [pc, #156]	; (1ddc <pm_system_suspend+0x16c>)
    1d40:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1d44:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    1d46:	b10c      	cbz	r4, 1d4c <pm_system_suspend+0xdc>
	return node->next;
    1d48:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1d4a:	b124      	cbz	r4, 1d56 <pm_system_suspend+0xe6>
    1d4c:	b11c      	cbz	r4, 1d56 <pm_system_suspend+0xe6>
			callback = notifier->state_entry;
    1d4e:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    1d50:	2a00      	cmp	r2, #0
    1d52:	d1f0      	bne.n	1d36 <pm_system_suspend+0xc6>
    1d54:	e7f7      	b.n	1d46 <pm_system_suspend+0xd6>
	__asm__ volatile(
    1d56:	f386 8811 	msr	BASEPRI, r6
    1d5a:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1d5e:	f005 031f 	and.w	r3, r5, #31
    1d62:	2101      	movs	r1, #1
    1d64:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1d66:	096b      	lsrs	r3, r5, #5
    1d68:	4a20      	ldr	r2, [pc, #128]	; (1dec <pm_system_suspend+0x17c>)
    1d6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d6e:	f3bf 8f5b 	dmb	ish
    1d72:	e853 2f00 	ldrex	r2, [r3]
    1d76:	430a      	orrs	r2, r1
    1d78:	e843 2000 	strex	r0, r2, [r3]
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d1f8      	bne.n	1d72 <pm_system_suspend+0x102>
    1d80:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1d84:	4b1a      	ldr	r3, [pc, #104]	; (1df0 <pm_system_suspend+0x180>)
    1d86:	b14b      	cbz	r3, 1d9c <pm_system_suspend+0x12c>
		pm_state_set(info->state, info->substate_id);
    1d88:	4b14      	ldr	r3, [pc, #80]	; (1ddc <pm_system_suspend+0x16c>)
    1d8a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1d8e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1d92:	7849      	ldrb	r1, [r1, #1]
    1d94:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1d98:	f005 f904 	bl	6fa4 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1d9c:	f7ff ff08 	bl	1bb0 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    1da0:	f005 031f 	and.w	r3, r5, #31
    1da4:	2401      	movs	r4, #1
    1da6:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1daa:	096d      	lsrs	r5, r5, #5
    1dac:	4a0a      	ldr	r2, [pc, #40]	; (1dd8 <pm_system_suspend+0x168>)
    1dae:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1db2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1db4:	f3bf 8f5b 	dmb	ish
    1db8:	e855 2f00 	ldrex	r2, [r5]
    1dbc:	401a      	ands	r2, r3
    1dbe:	e845 2100 	strex	r1, r2, [r5]
    1dc2:	2900      	cmp	r1, #0
    1dc4:	d1f8      	bne.n	1db8 <pm_system_suspend+0x148>
    1dc6:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    1dca:	f004 f895 	bl	5ef8 <k_sched_unlock>
	bool ret = true;
    1dce:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1dd0:	bd70      	pop	{r4, r5, r6, pc}
    1dd2:	bf00      	nop
    1dd4:	20000d20 	.word	0x20000d20
    1dd8:	2000071c 	.word	0x2000071c
    1ddc:	20000710 	.word	0x20000710
    1de0:	20000708 	.word	0x20000708
    1de4:	000f423f 	.word	0x000f423f
    1de8:	000f4240 	.word	0x000f4240
    1dec:	20000720 	.word	0x20000720
    1df0:	00006fa5 	.word	0x00006fa5

00001df4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1df4:	f3bf 8f5b 	dmb	ish
    1df8:	4b04      	ldr	r3, [pc, #16]	; (1e0c <pm_policy_state_lock_is_active+0x18>)
    1dfa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1dfe:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1e02:	3800      	subs	r0, #0
    1e04:	bf18      	it	ne
    1e06:	2001      	movne	r0, #1
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop
    1e0c:	20000724 	.word	0x20000724

00001e10 <pm_policy_next_state>:
{
    1e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e14:	b082      	sub	sp, #8
    1e16:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1e18:	a901      	add	r1, sp, #4
    1e1a:	f000 f843 	bl	1ea4 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1e1e:	1e44      	subs	r4, r0, #1
    1e20:	b224      	sxth	r4, r4
    1e22:	e007      	b.n	1e34 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    1e24:	f1b6 3fff 	cmp.w	r6, #4294967295
    1e28:	d032      	beq.n	1e90 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    1e2a:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    1e2c:	42b0      	cmp	r0, r6
    1e2e:	d92f      	bls.n	1e90 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1e30:	3c01      	subs	r4, #1
    1e32:	b224      	sxth	r4, r4
    1e34:	2c00      	cmp	r4, #0
    1e36:	db2a      	blt.n	1e8e <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    1e38:	9b01      	ldr	r3, [sp, #4]
    1e3a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1e3e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1e42:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1e46:	f7ff ffd5 	bl	1df4 <pm_policy_state_lock_is_active>
    1e4a:	2800      	cmp	r0, #0
    1e4c:	d1f0      	bne.n	1e30 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1e4e:	6868      	ldr	r0, [r5, #4]
    1e50:	0c41      	lsrs	r1, r0, #17
    1e52:	03c0      	lsls	r0, r0, #15
    1e54:	4f10      	ldr	r7, [pc, #64]	; (1e98 <pm_policy_next_state+0x88>)
    1e56:	19c0      	adds	r0, r0, r7
    1e58:	4a10      	ldr	r2, [pc, #64]	; (1e9c <pm_policy_next_state+0x8c>)
    1e5a:	f04f 0300 	mov.w	r3, #0
    1e5e:	f141 0100 	adc.w	r1, r1, #0
    1e62:	f7fe fcb9 	bl	7d8 <__aeabi_uldivmod>
    1e66:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    1e68:	68ab      	ldr	r3, [r5, #8]
    1e6a:	0c59      	lsrs	r1, r3, #17
    1e6c:	03db      	lsls	r3, r3, #15
    1e6e:	19d8      	adds	r0, r3, r7
    1e70:	4a0a      	ldr	r2, [pc, #40]	; (1e9c <pm_policy_next_state+0x8c>)
    1e72:	f04f 0300 	mov.w	r3, #0
    1e76:	f141 0100 	adc.w	r1, r1, #0
    1e7a:	f7fe fcad 	bl	7d8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1e7e:	4b08      	ldr	r3, [pc, #32]	; (1ea0 <pm_policy_next_state+0x90>)
    1e80:	681b      	ldr	r3, [r3, #0]
    1e82:	f1b3 3fff 	cmp.w	r3, #4294967295
    1e86:	d0cd      	beq.n	1e24 <pm_policy_next_state+0x14>
    1e88:	4283      	cmp	r3, r0
    1e8a:	d8cb      	bhi.n	1e24 <pm_policy_next_state+0x14>
    1e8c:	e7d0      	b.n	1e30 <pm_policy_next_state+0x20>
	return NULL;
    1e8e:	2500      	movs	r5, #0
}
    1e90:	4628      	mov	r0, r5
    1e92:	b002      	add	sp, #8
    1e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e98:	000f423f 	.word	0x000f423f
    1e9c:	000f4240 	.word	0x000f4240
    1ea0:	20000004 	.word	0x20000004

00001ea4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1ea4:	b908      	cbnz	r0, 1eaa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1ea6:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <pm_state_cpu_get_all+0xc>)
    1ea8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1eaa:	2000      	movs	r0, #0
    1eac:	4770      	bx	lr
    1eae:	bf00      	nop
    1eb0:	00008424 	.word	0x00008424

00001eb4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1eb4:	4901      	ldr	r1, [pc, #4]	; (1ebc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1eb6:	2210      	movs	r2, #16
	str	r2, [r1]
    1eb8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1eba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1ebc:	e000ed10 	.word	0xe000ed10

00001ec0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1ec0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1ec2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1ec4:	f380 8811 	msr	BASEPRI, r0
	isb
    1ec8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1ecc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1ed0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ed2:	b662      	cpsie	i
	isb
    1ed4:	f3bf 8f6f 	isb	sy

	bx	lr
    1ed8:	4770      	bx	lr
    1eda:	bf00      	nop

00001edc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1edc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1ede:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1ee0:	f381 8811 	msr	BASEPRI, r1

	wfe
    1ee4:	bf20      	wfe

	msr	BASEPRI, r0
    1ee6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1eea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1eec:	4770      	bx	lr
    1eee:	bf00      	nop

00001ef0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1ef0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1ef2:	2800      	cmp	r0, #0
    1ef4:	db07      	blt.n	1f06 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef6:	f000 021f 	and.w	r2, r0, #31
    1efa:	0940      	lsrs	r0, r0, #5
    1efc:	2301      	movs	r3, #1
    1efe:	4093      	lsls	r3, r2
    1f00:	4a01      	ldr	r2, [pc, #4]	; (1f08 <arch_irq_enable+0x18>)
    1f02:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    1f06:	4770      	bx	lr
    1f08:	e000e100 	.word	0xe000e100

00001f0c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1f0c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1f0e:	2800      	cmp	r0, #0
    1f10:	db0c      	blt.n	1f2c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f12:	f000 021f 	and.w	r2, r0, #31
    1f16:	0940      	lsrs	r0, r0, #5
    1f18:	2301      	movs	r3, #1
    1f1a:	4093      	lsls	r3, r2
    1f1c:	3020      	adds	r0, #32
    1f1e:	4a04      	ldr	r2, [pc, #16]	; (1f30 <arch_irq_disable+0x24>)
    1f20:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f28:	f3bf 8f6f 	isb	sy
}
    1f2c:	4770      	bx	lr
    1f2e:	bf00      	nop
    1f30:	e000e100 	.word	0xe000e100

00001f34 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1f34:	0942      	lsrs	r2, r0, #5
    1f36:	4b05      	ldr	r3, [pc, #20]	; (1f4c <arch_irq_is_enabled+0x18>)
    1f38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1f3c:	f000 001f 	and.w	r0, r0, #31
    1f40:	2301      	movs	r3, #1
    1f42:	fa03 f000 	lsl.w	r0, r3, r0
}
    1f46:	4010      	ands	r0, r2
    1f48:	4770      	bx	lr
    1f4a:	bf00      	nop
    1f4c:	e000e100 	.word	0xe000e100

00001f50 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1f50:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1f52:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1f54:	2800      	cmp	r0, #0
    1f56:	db08      	blt.n	1f6a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f58:	0149      	lsls	r1, r1, #5
    1f5a:	b2c9      	uxtb	r1, r1
    1f5c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1f60:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1f64:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1f68:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1f6a:	f000 000f 	and.w	r0, r0, #15
    1f6e:	0149      	lsls	r1, r1, #5
    1f70:	b2c9      	uxtb	r1, r1
    1f72:	4b01      	ldr	r3, [pc, #4]	; (1f78 <z_arm_irq_priority_set+0x28>)
    1f74:	5419      	strb	r1, [r3, r0]
}
    1f76:	4770      	bx	lr
    1f78:	e000ed14 	.word	0xe000ed14

00001f7c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1f7c:	bf30      	wfi
    b z_SysNmiOnReset
    1f7e:	f7ff bffd 	b.w	1f7c <z_SysNmiOnReset>
    1f82:	bf00      	nop

00001f84 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1f84:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1f86:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <z_arm_prep_c+0x30>)
    1f88:	4a0b      	ldr	r2, [pc, #44]	; (1fb8 <z_arm_prep_c+0x34>)
    1f8a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1f8e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f94:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1f9c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1fa4:	f003 f828 	bl	4ff8 <z_bss_zero>
	z_data_copy();
    1fa8:	f004 f926 	bl	61f8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1fac:	f000 fa12 	bl	23d4 <z_arm_interrupt_init>
	z_cstart();
    1fb0:	f003 f880 	bl	50b4 <z_cstart>
    1fb4:	e000ed00 	.word	0xe000ed00
    1fb8:	00000000 	.word	0x00000000

00001fbc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1fbc:	4a0a      	ldr	r2, [pc, #40]	; (1fe8 <arch_swap+0x2c>)
    1fbe:	6893      	ldr	r3, [r2, #8]
    1fc0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1fc4:	4909      	ldr	r1, [pc, #36]	; (1fec <arch_swap+0x30>)
    1fc6:	6809      	ldr	r1, [r1, #0]
    1fc8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1fcc:	4908      	ldr	r1, [pc, #32]	; (1ff0 <arch_swap+0x34>)
    1fce:	684b      	ldr	r3, [r1, #4]
    1fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1fd4:	604b      	str	r3, [r1, #4]
    1fd6:	2300      	movs	r3, #0
    1fd8:	f383 8811 	msr	BASEPRI, r3
    1fdc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1fe0:	6893      	ldr	r3, [r2, #8]
}
    1fe2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    1fe6:	4770      	bx	lr
    1fe8:	20000d20 	.word	0x20000d20
    1fec:	0000856c 	.word	0x0000856c
    1ff0:	e000ed00 	.word	0xe000ed00

00001ff4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1ff4:	4913      	ldr	r1, [pc, #76]	; (2044 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1ff6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1ff8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1ffc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1ffe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2002:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2006:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2008:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    200c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2010:	4f0d      	ldr	r7, [pc, #52]	; (2048 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2012:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2016:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2018:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    201a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    201c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2020:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2022:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2026:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    202a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    202c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    202e:	f000 fa7b 	bl	2528 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2032:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2036:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    203a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    203e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2042:	4770      	bx	lr
    ldr r1, =_kernel
    2044:	20000d20 	.word	0x20000d20
    ldr v4, =_SCS_ICSR
    2048:	e000ed04 	.word	0xe000ed04

0000204c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    204c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2050:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2052:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2056:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    205a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    205c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2060:	2902      	cmp	r1, #2
    beq _oops
    2062:	d0ff      	beq.n	2064 <_oops>

00002064 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2064:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2066:	f004 fe71 	bl	6d4c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    206a:	bd01      	pop	{r0, pc}

0000206c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    206c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    206e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2072:	490e      	ldr	r1, [pc, #56]	; (20ac <arch_new_thread+0x40>)
    2074:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2078:	f021 0101 	bic.w	r1, r1, #1
    207c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2080:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2084:	9b01      	ldr	r3, [sp, #4]
    2086:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    208a:	9b02      	ldr	r3, [sp, #8]
    208c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2090:	9b03      	ldr	r3, [sp, #12]
    2092:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    209a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    209e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    20a0:	2300      	movs	r3, #0
    20a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    20a6:	bc10      	pop	{r4}
    20a8:	4770      	bx	lr
    20aa:	bf00      	nop
    20ac:	00006a8d 	.word	0x00006a8d

000020b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    20b0:	4b12      	ldr	r3, [pc, #72]	; (20fc <z_check_thread_stack_fail+0x4c>)
    20b2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    20b4:	b302      	cbz	r2, 20f8 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    20b6:	f110 0f16 	cmn.w	r0, #22
    20ba:	d011      	beq.n	20e0 <z_check_thread_stack_fail+0x30>
    20bc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    20c0:	f1a3 0c20 	sub.w	ip, r3, #32
    20c4:	4584      	cmp	ip, r0
    20c6:	d805      	bhi.n	20d4 <z_check_thread_stack_fail+0x24>
    20c8:	4283      	cmp	r3, r0
    20ca:	d905      	bls.n	20d8 <z_check_thread_stack_fail+0x28>
    20cc:	428b      	cmp	r3, r1
    20ce:	d805      	bhi.n	20dc <z_check_thread_stack_fail+0x2c>
    20d0:	2100      	movs	r1, #0
    20d2:	e00b      	b.n	20ec <z_check_thread_stack_fail+0x3c>
    20d4:	2100      	movs	r1, #0
    20d6:	e009      	b.n	20ec <z_check_thread_stack_fail+0x3c>
    20d8:	2100      	movs	r1, #0
    20da:	e007      	b.n	20ec <z_check_thread_stack_fail+0x3c>
    20dc:	2101      	movs	r1, #1
    20de:	e005      	b.n	20ec <z_check_thread_stack_fail+0x3c>
    20e0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    20e4:	428b      	cmp	r3, r1
    20e6:	bf94      	ite	ls
    20e8:	2100      	movls	r1, #0
    20ea:	2101      	movhi	r1, #1
    20ec:	b909      	cbnz	r1, 20f2 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    20ee:	2000      	movs	r0, #0
}
    20f0:	4770      	bx	lr
		return thread->stack_info.start;
    20f2:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    20f6:	4770      	bx	lr
		return 0;
    20f8:	2000      	movs	r0, #0
    20fa:	4770      	bx	lr
    20fc:	20000d20 	.word	0x20000d20

00002100 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2100:	b508      	push	{r3, lr}
    2102:	460d      	mov	r5, r1
    2104:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2106:	4b08      	ldr	r3, [pc, #32]	; (2128 <arch_switch_to_main_thread+0x28>)
    2108:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    210a:	f000 fa0d 	bl	2528 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    210e:	4620      	mov	r0, r4
    2110:	f385 8809 	msr	PSP, r5
    2114:	2100      	movs	r1, #0
    2116:	b663      	cpsie	if
    2118:	f381 8811 	msr	BASEPRI, r1
    211c:	f3bf 8f6f 	isb	sy
    2120:	2200      	movs	r2, #0
    2122:	2300      	movs	r3, #0
    2124:	f004 fcb2 	bl	6a8c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2128:	20000d20 	.word	0x20000d20

0000212c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    212c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    212e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2130:	4a0b      	ldr	r2, [pc, #44]	; (2160 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2132:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2134:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2136:	bf1e      	ittt	ne
	movne	r1, #0
    2138:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    213a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    213c:	f005 fd82 	blne	7c44 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2140:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2142:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2146:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    214a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    214e:	4905      	ldr	r1, [pc, #20]	; (2164 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2150:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2152:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2154:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2156:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    215a:	4903      	ldr	r1, [pc, #12]	; (2168 <_isr_wrapper+0x3c>)
	bx r1
    215c:	4708      	bx	r1
    215e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2160:	20000d20 	.word	0x20000d20
	ldr r1, =_sw_isr_table
    2164:	000081fc 	.word	0x000081fc
	ldr r1, =z_arm_int_exit
    2168:	0000216d 	.word	0x0000216d

0000216c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    216c:	4b04      	ldr	r3, [pc, #16]	; (2180 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    216e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2170:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2172:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2174:	d003      	beq.n	217e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2176:	4903      	ldr	r1, [pc, #12]	; (2184 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    217c:	600a      	str	r2, [r1, #0]

0000217e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    217e:	4770      	bx	lr
	ldr r3, =_kernel
    2180:	20000d20 	.word	0x20000d20
	ldr r1, =_SCS_ICSR
    2184:	e000ed04 	.word	0xe000ed04

00002188 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2188:	b510      	push	{r4, lr}
    218a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    218c:	4b12      	ldr	r3, [pc, #72]	; (21d8 <bus_fault+0x50>)
    218e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2194:	f413 7f00 	tst.w	r3, #512	; 0x200
    2198:	d00b      	beq.n	21b2 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    219a:	4b0f      	ldr	r3, [pc, #60]	; (21d8 <bus_fault+0x50>)
    219c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    21a4:	d005      	beq.n	21b2 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    21a6:	b121      	cbz	r1, 21b2 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    21a8:	4a0b      	ldr	r2, [pc, #44]	; (21d8 <bus_fault+0x50>)
    21aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    21b0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    21b2:	4b09      	ldr	r3, [pc, #36]	; (21d8 <bus_fault+0x50>)
    21b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    21b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21b8:	f413 7f80 	tst.w	r3, #256	; 0x100
    21bc:	d101      	bne.n	21c2 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <bus_fault+0x50>)
    21c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    21c2:	4a05      	ldr	r2, [pc, #20]	; (21d8 <bus_fault+0x50>)
    21c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21c6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    21ca:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    21cc:	2101      	movs	r1, #1
    21ce:	f004 fdcf 	bl	6d70 <memory_fault_recoverable>
    21d2:	7020      	strb	r0, [r4, #0]

	return reason;
}
    21d4:	2000      	movs	r0, #0
    21d6:	bd10      	pop	{r4, pc}
    21d8:	e000ed00 	.word	0xe000ed00

000021dc <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    21dc:	4b07      	ldr	r3, [pc, #28]	; (21fc <usage_fault+0x20>)
    21de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    21e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    21e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    21e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    21e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    21e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    21ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    21ec:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    21f0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    21f4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    21f6:	2000      	movs	r0, #0
    21f8:	4770      	bx	lr
    21fa:	bf00      	nop
    21fc:	e000ed00 	.word	0xe000ed00

00002200 <mem_manage_fault>:
{
    2200:	b570      	push	{r4, r5, r6, lr}
    2202:	4605      	mov	r5, r0
    2204:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2206:	4b25      	ldr	r3, [pc, #148]	; (229c <mem_manage_fault+0x9c>)
    2208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    220a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    220e:	f013 0f02 	tst.w	r3, #2
    2212:	d00c      	beq.n	222e <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    2214:	4b21      	ldr	r3, [pc, #132]	; (229c <mem_manage_fault+0x9c>)
    2216:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    221a:	f013 0f80 	tst.w	r3, #128	; 0x80
    221e:	d02f      	beq.n	2280 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    2220:	b139      	cbz	r1, 2232 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2222:	4a1e      	ldr	r2, [pc, #120]	; (229c <mem_manage_fault+0x9c>)
    2224:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    222a:	6293      	str	r3, [r2, #40]	; 0x28
    222c:	e001      	b.n	2232 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    222e:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2232:	4b1a      	ldr	r3, [pc, #104]	; (229c <mem_manage_fault+0x9c>)
    2234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    223a:	f013 0f10 	tst.w	r3, #16
    223e:	d104      	bne.n	224a <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2240:	4b16      	ldr	r3, [pc, #88]	; (229c <mem_manage_fault+0x9c>)
    2242:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2244:	f014 0402 	ands.w	r4, r4, #2
    2248:	d004      	beq.n	2254 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    224a:	4b14      	ldr	r3, [pc, #80]	; (229c <mem_manage_fault+0x9c>)
    224c:	685c      	ldr	r4, [r3, #4]
    224e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    2252:	d118      	bne.n	2286 <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2254:	4b11      	ldr	r3, [pc, #68]	; (229c <mem_manage_fault+0x9c>)
    2256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2258:	f013 0f20 	tst.w	r3, #32
    225c:	d004      	beq.n	2268 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    225e:	4a0f      	ldr	r2, [pc, #60]	; (229c <mem_manage_fault+0x9c>)
    2260:	6a53      	ldr	r3, [r2, #36]	; 0x24
    2262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2266:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2268:	4a0c      	ldr	r2, [pc, #48]	; (229c <mem_manage_fault+0x9c>)
    226a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    226c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2270:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2272:	2101      	movs	r1, #1
    2274:	4628      	mov	r0, r5
    2276:	f004 fd7b 	bl	6d70 <memory_fault_recoverable>
    227a:	7030      	strb	r0, [r6, #0]
}
    227c:	4620      	mov	r0, r4
    227e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    2280:	f06f 0015 	mvn.w	r0, #21
    2284:	e7d5      	b.n	2232 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2286:	4629      	mov	r1, r5
    2288:	f7ff ff12 	bl	20b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    228c:	4604      	mov	r4, r0
    228e:	2800      	cmp	r0, #0
    2290:	d0e0      	beq.n	2254 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2292:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2296:	2402      	movs	r4, #2
    2298:	e7dc      	b.n	2254 <mem_manage_fault+0x54>
    229a:	bf00      	nop
    229c:	e000ed00 	.word	0xe000ed00

000022a0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    22a0:	b508      	push	{r3, lr}
    22a2:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    22a4:	2300      	movs	r3, #0
    22a6:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22a8:	4b1b      	ldr	r3, [pc, #108]	; (2318 <hard_fault+0x78>)
    22aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    22ac:	f010 0002 	ands.w	r0, r0, #2
    22b0:	d12e      	bne.n	2310 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    22b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22b4:	2b00      	cmp	r3, #0
    22b6:	db2c      	blt.n	2312 <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    22b8:	4b17      	ldr	r3, [pc, #92]	; (2318 <hard_fault+0x78>)
    22ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22bc:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    22c0:	d028      	beq.n	2314 <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    22c2:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    22c6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    22ca:	f64d 7302 	movw	r3, #57090	; 0xdf02
    22ce:	429a      	cmp	r2, r3
    22d0:	d00f      	beq.n	22f2 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    22d2:	4b11      	ldr	r3, [pc, #68]	; (2318 <hard_fault+0x78>)
    22d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    22d8:	b973      	cbnz	r3, 22f8 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    22da:	4b0f      	ldr	r3, [pc, #60]	; (2318 <hard_fault+0x78>)
    22dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    22e0:	b983      	cbnz	r3, 2304 <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    22e2:	4b0d      	ldr	r3, [pc, #52]	; (2318 <hard_fault+0x78>)
    22e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    22e6:	b29b      	uxth	r3, r3
    22e8:	b19b      	cbz	r3, 2312 <hard_fault+0x72>
			reason = usage_fault(esf);
    22ea:	4660      	mov	r0, ip
    22ec:	f7ff ff76 	bl	21dc <usage_fault>
    22f0:	e00f      	b.n	2312 <hard_fault+0x72>
			reason = esf->basic.r0;
    22f2:	f8dc 0000 	ldr.w	r0, [ip]
    22f6:	e00c      	b.n	2312 <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    22f8:	460a      	mov	r2, r1
    22fa:	2101      	movs	r1, #1
    22fc:	4660      	mov	r0, ip
    22fe:	f7ff ff7f 	bl	2200 <mem_manage_fault>
    2302:	e006      	b.n	2312 <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    2304:	460a      	mov	r2, r1
    2306:	2101      	movs	r1, #1
    2308:	4660      	mov	r0, ip
    230a:	f7ff ff3d 	bl	2188 <bus_fault>
    230e:	e000      	b.n	2312 <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2310:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    2312:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2314:	4618      	mov	r0, r3
	return reason;
    2316:	e7fc      	b.n	2312 <hard_fault+0x72>
    2318:	e000ed00 	.word	0xe000ed00

0000231c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    231c:	b570      	push	{r4, r5, r6, lr}
    231e:	b08a      	sub	sp, #40	; 0x28
    2320:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2322:	4b22      	ldr	r3, [pc, #136]	; (23ac <z_arm_fault+0x90>)
    2324:	6859      	ldr	r1, [r3, #4]
    2326:	f3c1 0108 	ubfx	r1, r1, #0, #9
    232a:	2300      	movs	r3, #0
    232c:	f383 8811 	msr	BASEPRI, r3
    2330:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2334:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2338:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    233c:	d115      	bne.n	236a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    233e:	f002 030c 	and.w	r3, r2, #12
    2342:	2b08      	cmp	r3, #8
    2344:	d014      	beq.n	2370 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2346:	f012 0f08 	tst.w	r2, #8
    234a:	d00b      	beq.n	2364 <z_arm_fault+0x48>
	*nested_exc = false;
    234c:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    234e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    2352:	4620      	mov	r0, r4
    2354:	f004 fd11 	bl	6d7a <fault_handle>
    2358:	4605      	mov	r5, r0
	if (recoverable) {
    235a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    235e:	b153      	cbz	r3, 2376 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    2360:	b00a      	add	sp, #40	; 0x28
    2362:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    2364:	4604      	mov	r4, r0
			*nested_exc = true;
    2366:	2601      	movs	r6, #1
    2368:	e7f1      	b.n	234e <z_arm_fault+0x32>
	*nested_exc = false;
    236a:	2600      	movs	r6, #0
		return NULL;
    236c:	4634      	mov	r4, r6
    236e:	e7ee      	b.n	234e <z_arm_fault+0x32>
	*nested_exc = false;
    2370:	2600      	movs	r6, #0
		return NULL;
    2372:	4634      	mov	r4, r6
    2374:	e7eb      	b.n	234e <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2376:	2220      	movs	r2, #32
    2378:	4621      	mov	r1, r4
    237a:	a801      	add	r0, sp, #4
    237c:	f004 fdc2 	bl	6f04 <memcpy>
	if (nested_exc) {
    2380:	b14e      	cbz	r6, 2396 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2382:	9b08      	ldr	r3, [sp, #32]
    2384:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2388:	b95a      	cbnz	r2, 23a2 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    238a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    238e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    2392:	9308      	str	r3, [sp, #32]
    2394:	e005      	b.n	23a2 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2396:	9b08      	ldr	r3, [sp, #32]
    2398:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    239c:	f023 0301 	bic.w	r3, r3, #1
    23a0:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    23a2:	a901      	add	r1, sp, #4
    23a4:	4628      	mov	r0, r5
    23a6:	f004 fccd 	bl	6d44 <z_arm_fatal_error>
    23aa:	e7d9      	b.n	2360 <z_arm_fault+0x44>
    23ac:	e000ed00 	.word	0xe000ed00

000023b0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    23b0:	4a02      	ldr	r2, [pc, #8]	; (23bc <z_arm_fault_init+0xc>)
    23b2:	6953      	ldr	r3, [r2, #20]
    23b4:	f043 0310 	orr.w	r3, r3, #16
    23b8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    23ba:	4770      	bx	lr
    23bc:	e000ed00 	.word	0xe000ed00

000023c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    23c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    23c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    23c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    23ca:	4672      	mov	r2, lr
	bl z_arm_fault
    23cc:	f7ff ffa6 	bl	231c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    23d0:	bd01      	pop	{r0, pc}
    23d2:	bf00      	nop

000023d4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    23d4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    23d6:	e006      	b.n	23e6 <z_arm_interrupt_init+0x12>
    23d8:	f002 010f 	and.w	r1, r2, #15
    23dc:	4b09      	ldr	r3, [pc, #36]	; (2404 <z_arm_interrupt_init+0x30>)
    23de:	440b      	add	r3, r1
    23e0:	2120      	movs	r1, #32
    23e2:	7619      	strb	r1, [r3, #24]
    23e4:	3201      	adds	r2, #1
    23e6:	2a26      	cmp	r2, #38	; 0x26
    23e8:	dc0a      	bgt.n	2400 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    23ea:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    23ec:	2b00      	cmp	r3, #0
    23ee:	dbf3      	blt.n	23d8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    23f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    23f8:	2120      	movs	r1, #32
    23fa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    23fe:	e7f1      	b.n	23e4 <z_arm_interrupt_init+0x10>
	}
}
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	e000ecfc 	.word	0xe000ecfc

00002408 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2408:	2000      	movs	r0, #0
    msr CONTROL, r0
    240a:	f380 8814 	msr	CONTROL, r0
    isb
    240e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2412:	f005 fe91 	bl	8138 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2416:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2418:	490d      	ldr	r1, [pc, #52]	; (2450 <__start+0x48>)
    str r0, [r1]
    241a:	6008      	str	r0, [r1, #0]
    dsb
    241c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2420:	480c      	ldr	r0, [pc, #48]	; (2454 <__start+0x4c>)
    msr msp, r0
    2422:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2426:	f000 f82d 	bl	2484 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    242a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    242c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2430:	4809      	ldr	r0, [pc, #36]	; (2458 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2432:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2436:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2438:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    243c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2440:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2442:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2444:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2448:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    244c:	f7ff fd9a 	bl	1f84 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2450:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2454:	20001a00 	.word	0x20001a00
    ldr r0, =z_interrupt_stacks
    2458:	20001b80 	.word	0x20001b80

0000245c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    245c:	4b08      	ldr	r3, [pc, #32]	; (2480 <z_arm_clear_arm_mpu_config+0x24>)
    245e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    2462:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    2466:	2300      	movs	r3, #0
    2468:	e006      	b.n	2478 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    246a:	4a05      	ldr	r2, [pc, #20]	; (2480 <z_arm_clear_arm_mpu_config+0x24>)
    246c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    2470:	2100      	movs	r1, #0
    2472:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    2476:	3301      	adds	r3, #1
    2478:	4283      	cmp	r3, r0
    247a:	dbf6      	blt.n	246a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    247c:	4770      	bx	lr
    247e:	bf00      	nop
    2480:	e000ed00 	.word	0xe000ed00

00002484 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2484:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2486:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2488:	2400      	movs	r4, #0
    248a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    248e:	f7ff ffe5 	bl	245c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2492:	4623      	mov	r3, r4
    2494:	e008      	b.n	24a8 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    2496:	f103 0120 	add.w	r1, r3, #32
    249a:	4a0e      	ldr	r2, [pc, #56]	; (24d4 <z_arm_init_arch_hw_at_boot+0x50>)
    249c:	f04f 30ff 	mov.w	r0, #4294967295
    24a0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    24a4:	3301      	adds	r3, #1
    24a6:	b2db      	uxtb	r3, r3
    24a8:	2b07      	cmp	r3, #7
    24aa:	d9f4      	bls.n	2496 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    24ac:	2300      	movs	r3, #0
    24ae:	e008      	b.n	24c2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    24b0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    24b4:	4a07      	ldr	r2, [pc, #28]	; (24d4 <z_arm_init_arch_hw_at_boot+0x50>)
    24b6:	f04f 30ff 	mov.w	r0, #4294967295
    24ba:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    24be:	3301      	adds	r3, #1
    24c0:	b2db      	uxtb	r3, r3
    24c2:	2b07      	cmp	r3, #7
    24c4:	d9f4      	bls.n	24b0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    24c6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    24c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24cc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    24d0:	bd10      	pop	{r4, pc}
    24d2:	bf00      	nop
    24d4:	e000e100 	.word	0xe000e100

000024d8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    24d8:	b508      	push	{r3, lr}
	if (_current == thread) {
    24da:	4b0a      	ldr	r3, [pc, #40]	; (2504 <z_impl_k_thread_abort+0x2c>)
    24dc:	689b      	ldr	r3, [r3, #8]
    24de:	4283      	cmp	r3, r0
    24e0:	d002      	beq.n	24e8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    24e2:	f003 fe4d 	bl	6180 <z_thread_abort>
}
    24e6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    24e8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    24ec:	2b00      	cmp	r3, #0
    24ee:	d0f8      	beq.n	24e2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    24f0:	4b05      	ldr	r3, [pc, #20]	; (2508 <z_impl_k_thread_abort+0x30>)
    24f2:	685a      	ldr	r2, [r3, #4]
    24f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    24f8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    24fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    24fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2500:	625a      	str	r2, [r3, #36]	; 0x24
    2502:	e7ee      	b.n	24e2 <z_impl_k_thread_abort+0xa>
    2504:	20000d20 	.word	0x20000d20
    2508:	e000ed00 	.word	0xe000ed00

0000250c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    250c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    250e:	4b03      	ldr	r3, [pc, #12]	; (251c <z_arm_configure_static_mpu_regions+0x10>)
    2510:	4a03      	ldr	r2, [pc, #12]	; (2520 <z_arm_configure_static_mpu_regions+0x14>)
    2512:	2101      	movs	r1, #1
    2514:	4803      	ldr	r0, [pc, #12]	; (2524 <z_arm_configure_static_mpu_regions+0x18>)
    2516:	f004 fcb6 	bl	6e86 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    251a:	bd08      	pop	{r3, pc}
    251c:	20010000 	.word	0x20010000
    2520:	20000000 	.word	0x20000000
    2524:	00008424 	.word	0x00008424

00002528 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2528:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    252a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    252e:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2530:	4804      	ldr	r0, [pc, #16]	; (2544 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2532:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    2534:	2320      	movs	r3, #32
    2536:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2538:	4b03      	ldr	r3, [pc, #12]	; (2548 <z_arm_configure_dynamic_mpu_regions+0x20>)
    253a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    253c:	2101      	movs	r1, #1
    253e:	f004 fca6 	bl	6e8e <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    2542:	bd08      	pop	{r3, pc}
    2544:	20000740 	.word	0x20000740
    2548:	150b0000 	.word	0x150b0000

0000254c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    254c:	4a08      	ldr	r2, [pc, #32]	; (2570 <region_init+0x24>)
    254e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2552:	680b      	ldr	r3, [r1, #0]
    2554:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2558:	4303      	orrs	r3, r0
    255a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    255e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2562:	688b      	ldr	r3, [r1, #8]
    2564:	f043 0301 	orr.w	r3, r3, #1
    2568:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    256c:	4770      	bx	lr
    256e:	bf00      	nop
    2570:	e000ed00 	.word	0xe000ed00

00002574 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2574:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2576:	4c03      	ldr	r4, [pc, #12]	; (2584 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2578:	2301      	movs	r3, #1
    257a:	7822      	ldrb	r2, [r4, #0]
    257c:	f004 fc5b 	bl	6e36 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2580:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2582:	bd10      	pop	{r4, pc}
    2584:	20000d66 	.word	0x20000d66

00002588 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2588:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    258a:	2300      	movs	r3, #0
    258c:	4a09      	ldr	r2, [pc, #36]	; (25b4 <mpu_configure_dynamic_mpu_regions+0x2c>)
    258e:	7812      	ldrb	r2, [r2, #0]
    2590:	f004 fc51 	bl	6e36 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2594:	f110 0f16 	cmn.w	r0, #22
    2598:	d00a      	beq.n	25b0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    259a:	4603      	mov	r3, r0
    259c:	e006      	b.n	25ac <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    259e:	4a06      	ldr	r2, [pc, #24]	; (25b8 <mpu_configure_dynamic_mpu_regions+0x30>)
    25a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    25a4:	2100      	movs	r1, #0
    25a6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    25aa:	3301      	adds	r3, #1
    25ac:	2b07      	cmp	r3, #7
    25ae:	ddf6      	ble.n	259e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    25b0:	bd08      	pop	{r3, pc}
    25b2:	bf00      	nop
    25b4:	20000d66 	.word	0x20000d66
    25b8:	e000ed00 	.word	0xe000ed00

000025bc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    25bc:	4b04      	ldr	r3, [pc, #16]	; (25d0 <arm_core_mpu_enable+0x14>)
    25be:	2205      	movs	r2, #5
    25c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    25c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25c8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop
    25d0:	e000ed00 	.word	0xe000ed00

000025d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    25d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    25d8:	4b02      	ldr	r3, [pc, #8]	; (25e4 <arm_core_mpu_disable+0x10>)
    25da:	2200      	movs	r2, #0
    25dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    25e0:	4770      	bx	lr
    25e2:	bf00      	nop
    25e4:	e000ed00 	.word	0xe000ed00

000025e8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    25e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    25ea:	4b0e      	ldr	r3, [pc, #56]	; (2624 <z_arm_mpu_init+0x3c>)
    25ec:	681d      	ldr	r5, [r3, #0]
    25ee:	2d08      	cmp	r5, #8
    25f0:	d815      	bhi.n	261e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    25f2:	f7ff ffef 	bl	25d4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    25f6:	2400      	movs	r4, #0
    25f8:	e009      	b.n	260e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    25fa:	4b0a      	ldr	r3, [pc, #40]	; (2624 <z_arm_mpu_init+0x3c>)
    25fc:	6859      	ldr	r1, [r3, #4]
    25fe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2602:	0093      	lsls	r3, r2, #2
    2604:	4419      	add	r1, r3
    2606:	4620      	mov	r0, r4
    2608:	f7ff ffa0 	bl	254c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    260c:	3401      	adds	r4, #1
    260e:	42a5      	cmp	r5, r4
    2610:	d8f3      	bhi.n	25fa <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <z_arm_mpu_init+0x40>)
    2614:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2616:	f7ff ffd1 	bl	25bc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    261a:	2000      	movs	r0, #0
}
    261c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    261e:	f04f 30ff 	mov.w	r0, #4294967295
    2622:	e7fb      	b.n	261c <z_arm_mpu_init+0x34>
    2624:	00008440 	.word	0x00008440
    2628:	20000d66 	.word	0x20000d66

0000262c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    262c:	4b01      	ldr	r3, [pc, #4]	; (2634 <__stdout_hook_install+0x8>)
    262e:	6018      	str	r0, [r3, #0]
}
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	20000008 	.word	0x20000008

00002638 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2638:	f04f 0320 	mov.w	r3, #32
    263c:	f3ef 8211 	mrs	r2, BASEPRI
    2640:	f383 8812 	msr	BASEPRI_MAX, r3
    2644:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2648:	2301      	movs	r3, #1
    264a:	4906      	ldr	r1, [pc, #24]	; (2664 <nordicsemi_nrf52_init+0x2c>)
    264c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2650:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2654:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2658:	f382 8811 	msr	BASEPRI, r2
    265c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2660:	2000      	movs	r0, #0
    2662:	4770      	bx	lr
    2664:	4001e000 	.word	0x4001e000

00002668 <sys_arch_reboot>:
    *p_gpregret = val;
    2668:	b2c0      	uxtb	r0, r0
    266a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    266e:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2672:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2676:	4905      	ldr	r1, [pc, #20]	; (268c <sys_arch_reboot+0x24>)
    2678:	68ca      	ldr	r2, [r1, #12]
    267a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    267e:	4b04      	ldr	r3, [pc, #16]	; (2690 <sys_arch_reboot+0x28>)
    2680:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2682:	60cb      	str	r3, [r1, #12]
    2684:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2688:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    268a:	e7fd      	b.n	2688 <sys_arch_reboot+0x20>
    268c:	e000ed00 	.word	0xe000ed00
    2690:	05fa0004 	.word	0x05fa0004

00002694 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2694:	b130      	cbz	r0, 26a4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    2696:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2698:	0180      	lsls	r0, r0, #6
    269a:	4b03      	ldr	r3, [pc, #12]	; (26a8 <arch_busy_wait+0x14>)
    269c:	f043 0301 	orr.w	r3, r3, #1
    26a0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    26a2:	bd08      	pop	{r3, pc}
    26a4:	4770      	bx	lr
    26a6:	bf00      	nop
    26a8:	000083c0 	.word	0x000083c0

000026ac <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    26ac:	4800      	ldr	r0, [pc, #0]	; (26b0 <get_hf_flags+0x4>)
    26ae:	4770      	bx	lr
    26b0:	2000079c 	.word	0x2000079c

000026b4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    26b4:	4b03      	ldr	r3, [pc, #12]	; (26c4 <get_subsys+0x10>)
    26b6:	1ac0      	subs	r0, r0, r3
    26b8:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    26ba:	4b03      	ldr	r3, [pc, #12]	; (26c8 <get_subsys+0x14>)
    26bc:	fb03 f000 	mul.w	r0, r3, r0
    26c0:	4770      	bx	lr
    26c2:	bf00      	nop
    26c4:	2000075c 	.word	0x2000075c
    26c8:	b6db6db7 	.word	0xb6db6db7

000026cc <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    26cc:	b538      	push	{r3, r4, r5, lr}
    26ce:	4605      	mov	r5, r0
    26d0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    26d2:	f7ff ffef 	bl	26b4 <get_subsys>
    26d6:	4601      	mov	r1, r0
    26d8:	2240      	movs	r2, #64	; 0x40
    26da:	4803      	ldr	r0, [pc, #12]	; (26e8 <onoff_stop+0x1c>)
    26dc:	f004 fce9 	bl	70b2 <stop>
    26e0:	4601      	mov	r1, r0
	notify(mgr, res);
    26e2:	4628      	mov	r0, r5
    26e4:	47a0      	blx	r4
}
    26e6:	bd38      	pop	{r3, r4, r5, pc}
    26e8:	0000819c 	.word	0x0000819c

000026ec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    26ec:	b530      	push	{r4, r5, lr}
    26ee:	b083      	sub	sp, #12
    26f0:	4605      	mov	r5, r0
    26f2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    26f4:	f7ff ffde 	bl	26b4 <get_subsys>
    26f8:	4601      	mov	r1, r0
    26fa:	2340      	movs	r3, #64	; 0x40
    26fc:	9300      	str	r3, [sp, #0]
    26fe:	4623      	mov	r3, r4
    2700:	4a05      	ldr	r2, [pc, #20]	; (2718 <onoff_start+0x2c>)
    2702:	4806      	ldr	r0, [pc, #24]	; (271c <onoff_start+0x30>)
    2704:	f004 fcef 	bl	70e6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2708:	1e01      	subs	r1, r0, #0
    270a:	db01      	blt.n	2710 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    270c:	b003      	add	sp, #12
    270e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2710:	4628      	mov	r0, r5
    2712:	47a0      	blx	r4
}
    2714:	e7fa      	b.n	270c <onoff_start+0x20>
    2716:	bf00      	nop
    2718:	0000712f 	.word	0x0000712f
    271c:	0000819c 	.word	0x0000819c

00002720 <generic_hfclk_start>:
{
    2720:	b510      	push	{r4, lr}
	__asm__ volatile(
    2722:	f04f 0320 	mov.w	r3, #32
    2726:	f3ef 8411 	mrs	r4, BASEPRI
    272a:	f383 8812 	msr	BASEPRI_MAX, r3
    272e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2732:	4a13      	ldr	r2, [pc, #76]	; (2780 <generic_hfclk_start+0x60>)
    2734:	6813      	ldr	r3, [r2, #0]
    2736:	f043 0302 	orr.w	r3, r3, #2
    273a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    273c:	f013 0f01 	tst.w	r3, #1
    2740:	d108      	bne.n	2754 <generic_hfclk_start+0x34>
	bool already_started = false;
    2742:	2300      	movs	r3, #0
	__asm__ volatile(
    2744:	f384 8811 	msr	BASEPRI, r4
    2748:	f3bf 8f6f 	isb	sy
	if (already_started) {
    274c:	b99b      	cbnz	r3, 2776 <generic_hfclk_start+0x56>
	hfclk_start();
    274e:	f004 fcf6 	bl	713e <hfclk_start>
}
    2752:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2758:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    275c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2760:	f012 0f01 	tst.w	r2, #1
    2764:	d101      	bne.n	276a <generic_hfclk_start+0x4a>
	bool already_started = false;
    2766:	2300      	movs	r3, #0
    2768:	e7ec      	b.n	2744 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    276a:	f7ff ff9f 	bl	26ac <get_hf_flags>
    276e:	f004 fc7b 	bl	7068 <set_on_state>
			already_started = true;
    2772:	2301      	movs	r3, #1
    2774:	e7e6      	b.n	2744 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    2776:	2100      	movs	r1, #0
    2778:	4802      	ldr	r0, [pc, #8]	; (2784 <generic_hfclk_start+0x64>)
    277a:	f004 fc88 	bl	708e <clkstarted_handle>
		return;
    277e:	e7e8      	b.n	2752 <generic_hfclk_start+0x32>
    2780:	200007ac 	.word	0x200007ac
    2784:	0000819c 	.word	0x0000819c

00002788 <generic_hfclk_stop>:
{
    2788:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    278a:	4b0a      	ldr	r3, [pc, #40]	; (27b4 <generic_hfclk_stop+0x2c>)
    278c:	f3bf 8f5b 	dmb	ish
    2790:	e853 2f00 	ldrex	r2, [r3]
    2794:	f022 0102 	bic.w	r1, r2, #2
    2798:	e843 1000 	strex	r0, r1, [r3]
    279c:	2800      	cmp	r0, #0
    279e:	d1f7      	bne.n	2790 <generic_hfclk_stop+0x8>
    27a0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    27a4:	f012 0f01 	tst.w	r2, #1
    27a8:	d000      	beq.n	27ac <generic_hfclk_stop+0x24>
}
    27aa:	bd08      	pop	{r3, pc}
	hfclk_stop();
    27ac:	f004 fccc 	bl	7148 <hfclk_stop>
    27b0:	e7fb      	b.n	27aa <generic_hfclk_stop+0x22>
    27b2:	bf00      	nop
    27b4:	200007ac 	.word	0x200007ac

000027b8 <api_blocking_start>:
{
    27b8:	b500      	push	{lr}
    27ba:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    27bc:	f8cd d000 	str.w	sp, [sp]
    27c0:	f8cd d004 	str.w	sp, [sp, #4]
    27c4:	2300      	movs	r3, #0
    27c6:	9302      	str	r3, [sp, #8]
    27c8:	2301      	movs	r3, #1
    27ca:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    27cc:	466b      	mov	r3, sp
    27ce:	4a07      	ldr	r2, [pc, #28]	; (27ec <api_blocking_start+0x34>)
    27d0:	f004 fca5 	bl	711e <api_start>
	if (err < 0) {
    27d4:	2800      	cmp	r0, #0
    27d6:	db05      	blt.n	27e4 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    27d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    27dc:	2300      	movs	r3, #0
    27de:	4668      	mov	r0, sp
    27e0:	f002 ff5e 	bl	56a0 <z_impl_k_sem_take>
}
    27e4:	b005      	add	sp, #20
    27e6:	f85d fb04 	ldr.w	pc, [sp], #4
    27ea:	bf00      	nop
    27ec:	00007153 	.word	0x00007153

000027f0 <lfclk_start>:
{
    27f0:	b508      	push	{r3, lr}
	if (!once) {
    27f2:	4b07      	ldr	r3, [pc, #28]	; (2810 <lfclk_start+0x20>)
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	b11b      	cbz	r3, 2800 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    27f8:	2000      	movs	r0, #0
    27fa:	f004 ffe3 	bl	77c4 <nrfx_clock_start>
}
    27fe:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2800:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2804:	f005 fc6e 	bl	80e4 <z_impl_k_busy_wait>
		once = true;
    2808:	4b01      	ldr	r3, [pc, #4]	; (2810 <lfclk_start+0x20>)
    280a:	2201      	movs	r2, #1
    280c:	701a      	strb	r2, [r3, #0]
    280e:	e7f3      	b.n	27f8 <lfclk_start+0x8>
    2810:	20000d67 	.word	0x20000d67

00002814 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2814:	b570      	push	{r4, r5, r6, lr}
    2816:	4605      	mov	r5, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2818:	2200      	movs	r2, #0
    281a:	2101      	movs	r1, #1
    281c:	4610      	mov	r0, r2
    281e:	f7ff fb97 	bl	1f50 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2822:	4813      	ldr	r0, [pc, #76]	; (2870 <clk_init+0x5c>)
    2824:	f001 fac4 	bl	3db0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2828:	4b12      	ldr	r3, [pc, #72]	; (2874 <clk_init+0x60>)
    282a:	4298      	cmp	r0, r3
    282c:	d11c      	bne.n	2868 <clk_init+0x54>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    282e:	6928      	ldr	r0, [r5, #16]
    2830:	f000 f992 	bl	2b58 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    2834:	f004 ffb7 	bl	77a6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2838:	2400      	movs	r4, #0
    283a:	2c01      	cmp	r4, #1
    283c:	d812      	bhi.n	2864 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    283e:	4621      	mov	r1, r4
    2840:	4628      	mov	r0, r5
    2842:	f004 fbc1 	bl	6fc8 <get_sub_data>
    2846:	4606      	mov	r6, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2848:	4621      	mov	r1, r4
    284a:	4628      	mov	r0, r5
    284c:	f004 fbc7 	bl	6fde <get_onoff_manager>
    2850:	4909      	ldr	r1, [pc, #36]	; (2878 <clk_init+0x64>)
    2852:	f004 f87c 	bl	694e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2856:	2800      	cmp	r0, #0
    2858:	db05      	blt.n	2866 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    285a:	2301      	movs	r3, #1
    285c:	60b3      	str	r3, [r6, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    285e:	441c      	add	r4, r3
    2860:	b2e4      	uxtb	r4, r4
    2862:	e7ea      	b.n	283a <clk_init+0x26>
	}

	return 0;
    2864:	2000      	movs	r0, #0
}
    2866:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2868:	f06f 0004 	mvn.w	r0, #4
    286c:	e7fb      	b.n	2866 <clk_init+0x52>
    286e:	bf00      	nop
    2870:	0000287d 	.word	0x0000287d
    2874:	0bad0000 	.word	0x0bad0000
    2878:	00008490 	.word	0x00008490

0000287c <clock_event_handler>:
{
    287c:	b508      	push	{r3, lr}
	switch (event) {
    287e:	2801      	cmp	r0, #1
    2880:	d010      	beq.n	28a4 <clock_event_handler+0x28>
    2882:	2803      	cmp	r0, #3
    2884:	d015      	beq.n	28b2 <clock_event_handler+0x36>
    2886:	b100      	cbz	r0, 288a <clock_event_handler+0xe>
}
    2888:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    288a:	2100      	movs	r1, #0
    288c:	480a      	ldr	r0, [pc, #40]	; (28b8 <clock_event_handler+0x3c>)
    288e:	f004 fb9b 	bl	6fc8 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2892:	6883      	ldr	r3, [r0, #8]
    2894:	f013 0f07 	tst.w	r3, #7
    2898:	d1f6      	bne.n	2888 <clock_event_handler+0xc>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    289a:	2100      	movs	r1, #0
    289c:	4806      	ldr	r0, [pc, #24]	; (28b8 <clock_event_handler+0x3c>)
    289e:	f004 fbf6 	bl	708e <clkstarted_handle>
    28a2:	e7f1      	b.n	2888 <clock_event_handler+0xc>
			z_nrf_clock_calibration_lfclk_started();
    28a4:	f004 fc74 	bl	7190 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    28a8:	2101      	movs	r1, #1
    28aa:	4803      	ldr	r0, [pc, #12]	; (28b8 <clock_event_handler+0x3c>)
    28ac:	f004 fbef 	bl	708e <clkstarted_handle>
		break;
    28b0:	e7ea      	b.n	2888 <clock_event_handler+0xc>
			z_nrf_clock_calibration_done_handler();
    28b2:	f000 f967 	bl	2b84 <z_nrf_clock_calibration_done_handler>
}
    28b6:	e7e7      	b.n	2888 <clock_event_handler+0xc>
    28b8:	0000819c 	.word	0x0000819c

000028bc <lfclk_spinwait>:
{
    28bc:	b570      	push	{r4, r5, r6, lr}
    28be:	4605      	mov	r5, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28c0:	f005 f989 	bl	7bd6 <k_is_in_isr>
    28c4:	b920      	cbnz	r0, 28d0 <lfclk_spinwait+0x14>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    28c6:	4b21      	ldr	r3, [pc, #132]	; (294c <lfclk_spinwait+0x90>)
    28c8:	781b      	ldrb	r3, [r3, #0]
    28ca:	b19b      	cbz	r3, 28f4 <lfclk_spinwait+0x38>
    28cc:	2300      	movs	r3, #0
    28ce:	e000      	b.n	28d2 <lfclk_spinwait+0x16>
    28d0:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    28d2:	461c      	mov	r4, r3
    28d4:	b183      	cbz	r3, 28f8 <lfclk_spinwait+0x3c>
	__asm__ volatile(
    28d6:	f04f 0320 	mov.w	r3, #32
    28da:	f3ef 8611 	mrs	r6, BASEPRI
    28de:	f383 8812 	msr	BASEPRI_MAX, r3
    28e2:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    28e6:	b96c      	cbnz	r4, 2904 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    28e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28ec:	2202      	movs	r2, #2
    28ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    28f2:	e007      	b.n	2904 <lfclk_spinwait+0x48>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28f4:	2301      	movs	r3, #1
    28f6:	e7ec      	b.n	28d2 <lfclk_spinwait+0x16>
	int key = isr_mode ? irq_lock() : 0;
    28f8:	2600      	movs	r6, #0
    28fa:	e7f4      	b.n	28e6 <lfclk_spinwait+0x2a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    28fc:	b1cc      	cbz	r4, 2932 <lfclk_spinwait+0x76>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    28fe:	4630      	mov	r0, r6
    2900:	f7ff faec 	bl	1edc <arch_cpu_atomic_idle>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2908:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    290c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2910:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2914:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    2918:	d110      	bne.n	293c <lfclk_spinwait+0x80>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
    291a:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    291c:	2a00      	cmp	r2, #0
    291e:	d0ed      	beq.n	28fc <lfclk_spinwait+0x40>
    2920:	b10b      	cbz	r3, 2926 <lfclk_spinwait+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2922:	2d01      	cmp	r5, #1
    2924:	d1ea      	bne.n	28fc <lfclk_spinwait+0x40>
	if (isr_mode) {
    2926:	b15c      	cbz	r4, 2940 <lfclk_spinwait+0x84>
	__asm__ volatile(
    2928:	f386 8811 	msr	BASEPRI, r6
    292c:	f3bf 8f6f 	isb	sy
}
    2930:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    2932:	2021      	movs	r0, #33	; 0x21
    2934:	2100      	movs	r1, #0
    2936:	f003 fbf1 	bl	611c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    293a:	e7e3      	b.n	2904 <lfclk_spinwait+0x48>
                return true;
    293c:	2201      	movs	r2, #1
    293e:	e7ed      	b.n	291c <lfclk_spinwait+0x60>
    p_reg->INTENSET = mask;
    2940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2944:	2202      	movs	r2, #2
    2946:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    294a:	e7f1      	b.n	2930 <lfclk_spinwait+0x74>
    294c:	20000d6a 	.word	0x20000d6a

00002950 <z_nrf_clock_control_get_onoff>:
{
    2950:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    2952:	b2c1      	uxtb	r1, r0
    2954:	4801      	ldr	r0, [pc, #4]	; (295c <z_nrf_clock_control_get_onoff+0xc>)
    2956:	f004 fb42 	bl	6fde <get_onoff_manager>
}
    295a:	bd08      	pop	{r3, pc}
    295c:	0000819c 	.word	0x0000819c

00002960 <z_nrf_clock_control_lf_on>:
{
    2960:	b510      	push	{r4, lr}
    2962:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2964:	4b10      	ldr	r3, [pc, #64]	; (29a8 <z_nrf_clock_control_lf_on+0x48>)
    2966:	2101      	movs	r1, #1
    2968:	f3bf 8f5b 	dmb	ish
    296c:	e853 2f00 	ldrex	r2, [r3]
    2970:	e843 1000 	strex	r0, r1, [r3]
    2974:	2800      	cmp	r0, #0
    2976:	d1f9      	bne.n	296c <z_nrf_clock_control_lf_on+0xc>
    2978:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    297c:	b11a      	cbz	r2, 2986 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    297e:	1e63      	subs	r3, r4, #1
    2980:	2b01      	cmp	r3, #1
    2982:	d90d      	bls.n	29a0 <z_nrf_clock_control_lf_on+0x40>
}
    2984:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    2986:	4809      	ldr	r0, [pc, #36]	; (29ac <z_nrf_clock_control_lf_on+0x4c>)
    2988:	f004 fb29 	bl	6fde <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    298c:	4908      	ldr	r1, [pc, #32]	; (29b0 <z_nrf_clock_control_lf_on+0x50>)
    298e:	2300      	movs	r3, #0
    2990:	604b      	str	r3, [r1, #4]
    2992:	608b      	str	r3, [r1, #8]
    2994:	60cb      	str	r3, [r1, #12]
    2996:	2301      	movs	r3, #1
    2998:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    299a:	f003 fff5 	bl	6988 <onoff_request>
    299e:	e7ee      	b.n	297e <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    29a0:	4620      	mov	r0, r4
    29a2:	f7ff ff8b 	bl	28bc <lfclk_spinwait>
		break;
    29a6:	e7ed      	b.n	2984 <z_nrf_clock_control_lf_on+0x24>
    29a8:	200007b0 	.word	0x200007b0
    29ac:	0000819c 	.word	0x0000819c
    29b0:	2000074c 	.word	0x2000074c

000029b4 <get_temperature>:
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
}

/* Function reads from temperature sensor and converts to 0.25'C units. */
static int get_temperature(int16_t *tvp)
{
    29b4:	b510      	push	{r4, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	4604      	mov	r4, r0
	struct sensor_value sensor_val;
	int rc = sensor_sample_fetch(temp_sensor);
    29ba:	4b0e      	ldr	r3, [pc, #56]	; (29f4 <get_temperature+0x40>)
    29bc:	6818      	ldr	r0, [r3, #0]
 */
__syscall int sensor_sample_fetch(const struct device *dev);

static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
    29be:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    29c0:	68db      	ldr	r3, [r3, #12]
    29c2:	2139      	movs	r1, #57	; 0x39
    29c4:	4798      	blx	r3

	if (rc == 0) {
    29c6:	b930      	cbnz	r0, 29d6 <get_temperature+0x22>
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    29c8:	4b0a      	ldr	r3, [pc, #40]	; (29f4 <get_temperature+0x40>)
    29ca:	6818      	ldr	r0, [r3, #0]

static inline int z_impl_sensor_channel_get(const struct device *dev,
					    enum sensor_channel chan,
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
    29cc:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    29ce:	691b      	ldr	r3, [r3, #16]
    29d0:	466a      	mov	r2, sp
    29d2:	210c      	movs	r1, #12
    29d4:	4798      	blx	r3
					&sensor_val);
	}
	if (rc == 0) {
    29d6:	b950      	cbnz	r0, 29ee <get_temperature+0x3a>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    29d8:	9b01      	ldr	r3, [sp, #4]
    29da:	4a07      	ldr	r2, [pc, #28]	; (29f8 <get_temperature+0x44>)
    29dc:	fb82 1203 	smull	r1, r2, r2, r3
    29e0:	17db      	asrs	r3, r3, #31
    29e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
    29e6:	9a00      	ldr	r2, [sp, #0]
    29e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		*tvp = sensor_value_to_temp_unit(&sensor_val);
    29ec:	8023      	strh	r3, [r4, #0]
	}
	return rc;
}
    29ee:	b002      	add	sp, #8
    29f0:	bd10      	pop	{r4, pc}
    29f2:	bf00      	nop
    29f4:	200007cc 	.word	0x200007cc
    29f8:	431bde83 	.word	0x431bde83

000029fc <hf_release>:
{
    29fc:	b508      	push	{r3, lr}
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    29fe:	4b02      	ldr	r3, [pc, #8]	; (2a08 <hf_release+0xc>)
    2a00:	6818      	ldr	r0, [r3, #0]
    2a02:	f004 fbb2 	bl	716a <clk_release>
}
    2a06:	bd08      	pop	{r3, pc}
    2a08:	200007c8 	.word	0x200007c8

00002a0c <start_cycle>:
{
    2a0c:	b500      	push	{lr}
    2a0e:	b083      	sub	sp, #12
	z_impl_k_timer_start(timer, duration, period);
    2a10:	2200      	movs	r2, #0
    2a12:	2300      	movs	r3, #0
    2a14:	e9cd 2300 	strd	r2, r3, [sp]
    2a18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2a1c:	2300      	movs	r3, #0
    2a1e:	4805      	ldr	r0, [pc, #20]	; (2a34 <start_cycle+0x28>)
    2a20:	f003 fda6 	bl	6570 <z_impl_k_timer_start>
	hf_release();
    2a24:	f7ff ffea 	bl	29fc <hf_release>
	cal_process_in_progress = 0;
    2a28:	4b03      	ldr	r3, [pc, #12]	; (2a38 <start_cycle+0x2c>)
    2a2a:	2200      	movs	r2, #0
    2a2c:	601a      	str	r2, [r3, #0]
}
    2a2e:	b003      	add	sp, #12
    2a30:	f85d fb04 	ldr.w	pc, [sp], #4
    2a34:	20000190 	.word	0x20000190
    2a38:	200007b4 	.word	0x200007b4

00002a3c <start_hw_cal>:
{
    2a3c:	b508      	push	{r3, lr}
	nrfx_clock_calibration_start();
    2a3e:	f001 f9cb 	bl	3dd8 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <start_hw_cal+0x10>)
    2a44:	2201      	movs	r2, #1
    2a46:	701a      	strb	r2, [r3, #0]
}
    2a48:	bd08      	pop	{r3, pc}
    2a4a:	bf00      	nop
    2a4c:	20000d68 	.word	0x20000d68

00002a50 <cal_hf_callback>:
{
    2a50:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2a52:	4b05      	ldr	r3, [pc, #20]	; (2a68 <cal_hf_callback+0x18>)
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	b11b      	cbz	r3, 2a60 <cal_hf_callback+0x10>
		k_work_submit(&temp_measure_work);
    2a58:	4804      	ldr	r0, [pc, #16]	; (2a6c <cal_hf_callback+0x1c>)
    2a5a:	f002 ff6b 	bl	5934 <k_work_submit>
}
    2a5e:	bd08      	pop	{r3, pc}
		start_hw_cal();
    2a60:	f7ff ffec 	bl	2a3c <start_hw_cal>
    2a64:	e7fb      	b.n	2a5e <cal_hf_callback+0xe>
    2a66:	bf00      	nop
    2a68:	200007cc 	.word	0x200007cc
    2a6c:	2000000c 	.word	0x2000000c

00002a70 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
    2a70:	b500      	push	{lr}
    2a72:	b083      	sub	sp, #12
	int16_t temperature = 0;
    2a74:	2300      	movs	r3, #0
    2a76:	f8ad 3006 	strh.w	r3, [sp, #6]
	int16_t diff = 0;
	bool started = false;
	int rc;

	rc = get_temperature(&temperature);
    2a7a:	f10d 0006 	add.w	r0, sp, #6
    2a7e:	f7ff ff99 	bl	29b4 <get_temperature>

	if (rc != 0) {
    2a82:	b180      	cbz	r0, 2aa6 <measure_temperature+0x36>
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
    2a84:	2300      	movs	r3, #0
    2a86:	4a12      	ldr	r2, [pc, #72]	; (2ad0 <measure_temperature+0x60>)
    2a88:	7013      	strb	r3, [r2, #0]
	} else {
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
    2a8a:	4a11      	ldr	r2, [pc, #68]	; (2ad0 <measure_temperature+0x60>)
    2a8c:	7812      	ldrb	r2, [r2, #0]
    2a8e:	b10a      	cbz	r2, 2a94 <measure_temperature+0x24>
    2a90:	2b01      	cmp	r3, #1
    2a92:	dd13      	ble.n	2abc <measure_temperature+0x4c>
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
    2a94:	4b0f      	ldr	r3, [pc, #60]	; (2ad4 <measure_temperature+0x64>)
    2a96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2a9a:	801a      	strh	r2, [r3, #0]
		started = true;
		start_hw_cal();
    2a9c:	f7ff ffce 	bl	2a3c <start_hw_cal>
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
    2aa0:	b003      	add	sp, #12
    2aa2:	f85d fb04 	ldr.w	pc, [sp], #4
		diff = abs(temperature - prev_temperature);
    2aa6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    2aaa:	4a0a      	ldr	r2, [pc, #40]	; (2ad4 <measure_temperature+0x64>)
    2aac:	f9b2 2000 	ldrsh.w	r2, [r2]
    2ab0:	1a9b      	subs	r3, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	bfb8      	it	lt
    2ab6:	425b      	neglt	r3, r3
    2ab8:	b21b      	sxth	r3, r3
    2aba:	e7e6      	b.n	2a8a <measure_temperature+0x1a>
		calib_skip_cnt--;
    2abc:	3a01      	subs	r2, #1
    2abe:	4b04      	ldr	r3, [pc, #16]	; (2ad0 <measure_temperature+0x60>)
    2ac0:	701a      	strb	r2, [r3, #0]
		total_skips_cnt++;
    2ac2:	4a05      	ldr	r2, [pc, #20]	; (2ad8 <measure_temperature+0x68>)
    2ac4:	6813      	ldr	r3, [r2, #0]
    2ac6:	3301      	adds	r3, #1
    2ac8:	6013      	str	r3, [r2, #0]
		start_cycle();
    2aca:	f7ff ff9f 	bl	2a0c <start_cycle>
}
    2ace:	e7e7      	b.n	2aa0 <measure_temperature+0x30>
    2ad0:	20000d68 	.word	0x20000d68
    2ad4:	20000d64 	.word	0x20000d64
    2ad8:	200007d4 	.word	0x200007d4

00002adc <hf_request>:
{
    2adc:	b508      	push	{r3, lr}
	clk_request(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK], &cli, cal_hf_callback);
    2ade:	4a03      	ldr	r2, [pc, #12]	; (2aec <hf_request+0x10>)
    2ae0:	4903      	ldr	r1, [pc, #12]	; (2af0 <hf_request+0x14>)
    2ae2:	4b04      	ldr	r3, [pc, #16]	; (2af4 <hf_request+0x18>)
    2ae4:	6818      	ldr	r0, [r3, #0]
    2ae6:	f004 fb44 	bl	7172 <clk_request>
}
    2aea:	bd08      	pop	{r3, pc}
    2aec:	00002a51 	.word	0x00002a51
    2af0:	200007b8 	.word	0x200007b8
    2af4:	200007c8 	.word	0x200007c8

00002af8 <start_cal_process>:
{
    2af8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2afa:	4b09      	ldr	r3, [pc, #36]	; (2b20 <start_cal_process+0x28>)
    2afc:	2201      	movs	r2, #1
    2afe:	f3bf 8f5b 	dmb	ish
    2b02:	e853 1f00 	ldrex	r1, [r3]
    2b06:	2900      	cmp	r1, #0
    2b08:	d103      	bne.n	2b12 <start_cal_process+0x1a>
    2b0a:	e843 2000 	strex	r0, r2, [r3]
    2b0e:	2800      	cmp	r0, #0
    2b10:	d1f7      	bne.n	2b02 <start_cal_process+0xa>
    2b12:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    2b16:	d101      	bne.n	2b1c <start_cal_process+0x24>
		hf_request();
    2b18:	f7ff ffe0 	bl	2adc <hf_request>
}
    2b1c:	bd08      	pop	{r3, pc}
    2b1e:	bf00      	nop
    2b20:	200007b4 	.word	0x200007b4

00002b24 <start_unconditional_cal_process>:

SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
    2b24:	b508      	push	{r3, lr}
	calib_skip_cnt = 0;
    2b26:	4b03      	ldr	r3, [pc, #12]	; (2b34 <start_unconditional_cal_process+0x10>)
    2b28:	2200      	movs	r2, #0
    2b2a:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    2b2c:	f7ff ffe4 	bl	2af8 <start_cal_process>
}
    2b30:	bd08      	pop	{r3, pc}
    2b32:	bf00      	nop
    2b34:	20000d68 	.word	0x20000d68

00002b38 <temp_sensor_init>:
{
    2b38:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    2b3a:	4805      	ldr	r0, [pc, #20]	; (2b50 <temp_sensor_init+0x18>)
    2b3c:	4b05      	ldr	r3, [pc, #20]	; (2b54 <temp_sensor_init+0x1c>)
    2b3e:	6018      	str	r0, [r3, #0]
    2b40:	f005 f808 	bl	7b54 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    2b44:	b108      	cbz	r0, 2b4a <temp_sensor_init+0x12>
	return 0;
    2b46:	2000      	movs	r0, #0
}
    2b48:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2b4a:	f06f 0012 	mvn.w	r0, #18
    2b4e:	e7fb      	b.n	2b48 <temp_sensor_init+0x10>
    2b50:	000081e4 	.word	0x000081e4
    2b54:	200007cc 	.word	0x200007cc

00002b58 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    2b58:	4b03      	ldr	r3, [pc, #12]	; (2b68 <z_nrf_clock_calibration_init+0x10>)
    2b5a:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    2b5c:	2300      	movs	r3, #0
    2b5e:	4a03      	ldr	r2, [pc, #12]	; (2b6c <z_nrf_clock_calibration_init+0x14>)
    2b60:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    2b62:	4a03      	ldr	r2, [pc, #12]	; (2b70 <z_nrf_clock_calibration_init+0x18>)
    2b64:	6013      	str	r3, [r2, #0]
}
    2b66:	4770      	bx	lr
    2b68:	200007c8 	.word	0x200007c8
    2b6c:	200007d0 	.word	0x200007d0
    2b70:	200007d4 	.word	0x200007d4

00002b74 <z_nrf_clock_calibration_lfclk_stopped>:
{
	start_unconditional_cal_process();
}

void z_nrf_clock_calibration_lfclk_stopped(void)
{
    2b74:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
    2b76:	4802      	ldr	r0, [pc, #8]	; (2b80 <z_nrf_clock_calibration_lfclk_stopped+0xc>)
    2b78:	f005 faba 	bl	80f0 <z_impl_k_timer_stop>
	k_timer_stop(&backoff_timer);
	LOG_DBG("Calibration stopped");
}
    2b7c:	bd08      	pop	{r3, pc}
    2b7e:	bf00      	nop
    2b80:	20000190 	.word	0x20000190

00002b84 <z_nrf_clock_calibration_done_handler>:

void z_nrf_clock_calibration_done_handler(void)
{
    2b84:	b508      	push	{r3, lr}
	total_cnt++;
    2b86:	4a03      	ldr	r2, [pc, #12]	; (2b94 <z_nrf_clock_calibration_done_handler+0x10>)
    2b88:	6813      	ldr	r3, [r2, #0]
    2b8a:	3301      	adds	r3, #1
    2b8c:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    2b8e:	f7ff ff3d 	bl	2a0c <start_cycle>
}
    2b92:	bd08      	pop	{r3, pc}
    2b94:	200007d0 	.word	0x200007d0

00002b98 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2b98:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2b9a:	4c04      	ldr	r4, [pc, #16]	; (2bac <rtt_console_init+0x14>)
    2b9c:	4620      	mov	r0, r4
    2b9e:	f7fe f839 	bl	c14 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    2ba2:	4620      	mov	r0, r4
    2ba4:	f7ff fd42 	bl	262c <__stdout_hook_install>

	return 0;
}
    2ba8:	2000      	movs	r0, #0
    2baa:	bd10      	pop	{r4, pc}
    2bac:	00002bb1 	.word	0x00002bb1

00002bb0 <rtt_console_out>:
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	4606      	mov	r6, r0
	char c = (char)character;
    2bb6:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
    2bba:	2402      	movs	r4, #2
		SEGGER_RTT_LOCK();
    2bbc:	f3ef 8511 	mrs	r5, BASEPRI
    2bc0:	f04f 0120 	mov.w	r1, #32
    2bc4:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2bc8:	2201      	movs	r2, #1
    2bca:	f10d 0107 	add.w	r1, sp, #7
    2bce:	2000      	movs	r0, #0
    2bd0:	f002 f954 	bl	4e7c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    2bd4:	f385 8811 	msr	BASEPRI, r5
		if (cnt) {
    2bd8:	b938      	cbnz	r0, 2bea <rtt_console_out+0x3a>
		} else if (host_present) {
    2bda:	4b09      	ldr	r3, [pc, #36]	; (2c00 <rtt_console_out+0x50>)
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	b15b      	cbz	r3, 2bf8 <rtt_console_out+0x48>
			if (max_cnt) {
    2be0:	b13c      	cbz	r4, 2bf2 <rtt_console_out+0x42>
				wait();
    2be2:	f004 fad9 	bl	7198 <wait>
				max_cnt--;
    2be6:	3c01      	subs	r4, #1
		SEGGER_RTT_LOCK();
    2be8:	e7e8      	b.n	2bbc <rtt_console_out+0xc>
			host_present = true;
    2bea:	4b05      	ldr	r3, [pc, #20]	; (2c00 <rtt_console_out+0x50>)
    2bec:	2201      	movs	r2, #1
    2bee:	701a      	strb	r2, [r3, #0]
    2bf0:	e002      	b.n	2bf8 <rtt_console_out+0x48>
				host_present = false;
    2bf2:	4b03      	ldr	r3, [pc, #12]	; (2c00 <rtt_console_out+0x50>)
    2bf4:	2200      	movs	r2, #0
    2bf6:	701a      	strb	r2, [r3, #0]
}
    2bf8:	4630      	mov	r0, r6
    2bfa:	b002      	add	sp, #8
    2bfc:	bd70      	pop	{r4, r5, r6, pc}
    2bfe:	bf00      	nop
    2c00:	20000d69 	.word	0x20000d69

00002c04 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c04:	b908      	cbnz	r0, 2c0a <get_dev+0x6>
    2c06:	4802      	ldr	r0, [pc, #8]	; (2c10 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2c08:	4770      	bx	lr
	const struct device *dev = NULL;
    2c0a:	2000      	movs	r0, #0
    2c0c:	4770      	bx	lr
    2c0e:	bf00      	nop
    2c10:	000081b4 	.word	0x000081b4

00002c14 <gpio_nrfx_pin_interrupt_configure>:
{
    2c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c16:	b085      	sub	sp, #20
    2c18:	460e      	mov	r6, r1
    2c1a:	4619      	mov	r1, r3
	return port->config;
    2c1c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2c1e:	7b1b      	ldrb	r3, [r3, #12]
    2c20:	f006 051f 	and.w	r5, r6, #31
    2c24:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2c28:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    2c2c:	d022      	beq.n	2c74 <gpio_nrfx_pin_interrupt_configure+0x60>
    2c2e:	4607      	mov	r7, r0
    2c30:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2c32:	2300      	movs	r3, #0
    2c34:	9302      	str	r3, [sp, #8]
    2c36:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    2c38:	4610      	mov	r0, r2
    2c3a:	f004 fb30 	bl	729e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2c3e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    2c42:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2c44:	6899      	ldr	r1, [r3, #8]
    2c46:	40f1      	lsrs	r1, r6
    2c48:	f011 0f01 	tst.w	r1, #1
    2c4c:	d102      	bne.n	2c54 <gpio_nrfx_pin_interrupt_configure+0x40>
    2c4e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    2c52:	d014      	beq.n	2c7e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2c54:	2300      	movs	r3, #0
    2c56:	aa02      	add	r2, sp, #8
    2c58:	4619      	mov	r1, r3
    2c5a:	4628      	mov	r0, r5
    2c5c:	f001 faba 	bl	41d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2c60:	4b19      	ldr	r3, [pc, #100]	; (2cc8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    2c62:	4298      	cmp	r0, r3
    2c64:	d12c      	bne.n	2cc0 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2c66:	2101      	movs	r1, #1
    2c68:	4628      	mov	r0, r5
    2c6a:	f001 fc7d 	bl	4568 <nrfx_gpiote_trigger_enable>
	return 0;
    2c6e:	2000      	movs	r0, #0
}
    2c70:	b005      	add	sp, #20
    2c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2c74:	4628      	mov	r0, r5
    2c76:	f001 fccf 	bl	4618 <nrfx_gpiote_trigger_disable>
		return 0;
    2c7a:	2000      	movs	r0, #0
    2c7c:	e7f8      	b.n	2c70 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2c7e:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2c82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2c8e:	f013 0f01 	tst.w	r3, #1
    2c92:	d1df      	bne.n	2c54 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2c94:	f10d 0107 	add.w	r1, sp, #7
    2c98:	4628      	mov	r0, r5
    2c9a:	f001 fc09 	bl	44b0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2c9e:	4b0b      	ldr	r3, [pc, #44]	; (2ccc <gpio_nrfx_pin_interrupt_configure+0xb8>)
    2ca0:	4298      	cmp	r0, r3
    2ca2:	d003      	beq.n	2cac <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    2ca4:	f10d 0307 	add.w	r3, sp, #7
    2ca8:	9303      	str	r3, [sp, #12]
    2caa:	e7d3      	b.n	2c54 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    2cac:	f10d 0007 	add.w	r0, sp, #7
    2cb0:	f001 fc52 	bl	4558 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2cb4:	4b04      	ldr	r3, [pc, #16]	; (2cc8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    2cb6:	4298      	cmp	r0, r3
    2cb8:	d0f4      	beq.n	2ca4 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    2cba:	f06f 000b 	mvn.w	r0, #11
    2cbe:	e7d7      	b.n	2c70 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    2cc0:	f06f 0004 	mvn.w	r0, #4
    2cc4:	e7d4      	b.n	2c70 <gpio_nrfx_pin_interrupt_configure+0x5c>
    2cc6:	bf00      	nop
    2cc8:	0bad0000 	.word	0x0bad0000
    2ccc:	0bad0004 	.word	0x0bad0004

00002cd0 <pin_uninit>:
{
    2cd0:	b530      	push	{r4, r5, lr}
    2cd2:	b083      	sub	sp, #12
    2cd4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cd6:	f10d 0107 	add.w	r1, sp, #7
    2cda:	f001 fbe9 	bl	44b0 <nrfx_gpiote_channel_get>
    2cde:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2ce0:	4620      	mov	r0, r4
    2ce2:	f001 fcc3 	bl	466c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2ce6:	4b0b      	ldr	r3, [pc, #44]	; (2d14 <pin_uninit+0x44>)
    2ce8:	4298      	cmp	r0, r3
    2cea:	d10f      	bne.n	2d0c <pin_uninit+0x3c>
	if (free_ch) {
    2cec:	429d      	cmp	r5, r3
    2cee:	d005      	beq.n	2cfc <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2cf0:	4b08      	ldr	r3, [pc, #32]	; (2d14 <pin_uninit+0x44>)
    2cf2:	4298      	cmp	r0, r3
    2cf4:	d107      	bne.n	2d06 <pin_uninit+0x36>
    2cf6:	2000      	movs	r0, #0
}
    2cf8:	b003      	add	sp, #12
    2cfa:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    2cfc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2d00:	f001 fc22 	bl	4548 <nrfx_gpiote_channel_free>
    2d04:	e7f4      	b.n	2cf0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2d06:	f06f 0004 	mvn.w	r0, #4
    2d0a:	e7f5      	b.n	2cf8 <pin_uninit+0x28>
		return -EIO;
    2d0c:	f06f 0004 	mvn.w	r0, #4
    2d10:	e7f2      	b.n	2cf8 <pin_uninit+0x28>
    2d12:	bf00      	nop
    2d14:	0bad0000 	.word	0x0bad0000

00002d18 <gpio_nrfx_pin_configure>:
{
    2d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d1c:	b087      	sub	sp, #28
	return port->config;
    2d1e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d22:	f898 300c 	ldrb.w	r3, [r8, #12]
    2d26:	f001 051f 	and.w	r5, r1, #31
    2d2a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2d2e:	2a00      	cmp	r2, #0
    2d30:	d044      	beq.n	2dbc <gpio_nrfx_pin_configure+0xa4>
    2d32:	460c      	mov	r4, r1
    2d34:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2d36:	2600      	movs	r6, #0
    2d38:	9603      	str	r6, [sp, #12]
    2d3a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d3c:	f10d 0117 	add.w	r1, sp, #23
    2d40:	4620      	mov	r0, r4
    2d42:	f001 fbb5 	bl	44b0 <nrfx_gpiote_channel_get>
    2d46:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d48:	4633      	mov	r3, r6
    2d4a:	aa03      	add	r2, sp, #12
    2d4c:	4631      	mov	r1, r6
    2d4e:	4628      	mov	r0, r5
    2d50:	f001 fa40 	bl	41d4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d54:	4b30      	ldr	r3, [pc, #192]	; (2e18 <gpio_nrfx_pin_configure+0x100>)
    2d56:	4298      	cmp	r0, r3
    2d58:	d15b      	bne.n	2e12 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    2d5a:	4599      	cmp	r9, r3
    2d5c:	d036      	beq.n	2dcc <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    2d5e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    2d62:	d043      	beq.n	2dec <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    2d64:	f10d 0103 	add.w	r1, sp, #3
    2d68:	4638      	mov	r0, r7
    2d6a:	f004 fa1f 	bl	71ac <get_drive>
		if (rv != 0) {
    2d6e:	4606      	mov	r6, r0
    2d70:	bb40      	cbnz	r0, 2dc4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    2d72:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2d76:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2d7a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    2d7e:	bf0c      	ite	eq
    2d80:	2301      	moveq	r3, #1
    2d82:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2d84:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2d88:	4638      	mov	r0, r7
    2d8a:	f004 fa55 	bl	7238 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2d8e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d92:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    2d96:	d01e      	beq.n	2dd6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2d98:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2d9c:	2101      	movs	r1, #1
    2d9e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    2da2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2da6:	2200      	movs	r2, #0
    2da8:	a901      	add	r1, sp, #4
    2daa:	4628      	mov	r0, r5
    2dac:	f001 fac4 	bl	4338 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2db0:	4b19      	ldr	r3, [pc, #100]	; (2e18 <gpio_nrfx_pin_configure+0x100>)
    2db2:	4298      	cmp	r0, r3
    2db4:	d006      	beq.n	2dc4 <gpio_nrfx_pin_configure+0xac>
    2db6:	f06f 0615 	mvn.w	r6, #21
    2dba:	e003      	b.n	2dc4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    2dbc:	4628      	mov	r0, r5
    2dbe:	f7ff ff87 	bl	2cd0 <pin_uninit>
    2dc2:	4606      	mov	r6, r0
}
    2dc4:	4630      	mov	r0, r6
    2dc6:	b007      	add	sp, #28
    2dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    2dcc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2dd0:	f001 fbba 	bl	4548 <nrfx_gpiote_channel_free>
    2dd4:	e7c3      	b.n	2d5e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2dd6:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    2dda:	d0e4      	beq.n	2da6 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2ddc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2de0:	2301      	movs	r3, #1
    2de2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    2de6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    2dea:	e7dc      	b.n	2da6 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    2dec:	4638      	mov	r0, r7
    2dee:	f004 fa23 	bl	7238 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    2df2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2df6:	2300      	movs	r3, #0
    2df8:	461a      	mov	r2, r3
    2dfa:	a902      	add	r1, sp, #8
    2dfc:	4628      	mov	r0, r5
    2dfe:	f001 f9e9 	bl	41d4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2e02:	4b05      	ldr	r3, [pc, #20]	; (2e18 <gpio_nrfx_pin_configure+0x100>)
    2e04:	4298      	cmp	r0, r3
    2e06:	d101      	bne.n	2e0c <gpio_nrfx_pin_configure+0xf4>
    2e08:	2600      	movs	r6, #0
    2e0a:	e7db      	b.n	2dc4 <gpio_nrfx_pin_configure+0xac>
    2e0c:	f06f 0615 	mvn.w	r6, #21
    2e10:	e7d8      	b.n	2dc4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    2e12:	f06f 0615 	mvn.w	r6, #21
    2e16:	e7d5      	b.n	2dc4 <gpio_nrfx_pin_configure+0xac>
    2e18:	0bad0000 	.word	0x0bad0000

00002e1c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2e1c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2e1e:	f001 fb89 	bl	4534 <nrfx_gpiote_is_init>
    2e22:	b108      	cbz	r0, 2e28 <gpio_nrfx_init+0xc>
		return 0;
    2e24:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2e26:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2e28:	f001 fb5a 	bl	44e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2e2c:	4b08      	ldr	r3, [pc, #32]	; (2e50 <gpio_nrfx_init+0x34>)
    2e2e:	4298      	cmp	r0, r3
    2e30:	d10a      	bne.n	2e48 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2e32:	2100      	movs	r1, #0
    2e34:	4807      	ldr	r0, [pc, #28]	; (2e54 <gpio_nrfx_init+0x38>)
    2e36:	f001 fb35 	bl	44a4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2e3a:	2200      	movs	r2, #0
    2e3c:	2105      	movs	r1, #5
    2e3e:	2006      	movs	r0, #6
    2e40:	f7ff f886 	bl	1f50 <z_arm_irq_priority_set>
	return 0;
    2e44:	2000      	movs	r0, #0
    2e46:	e7ee      	b.n	2e26 <gpio_nrfx_init+0xa>
		return -EIO;
    2e48:	f06f 0004 	mvn.w	r0, #4
    2e4c:	e7eb      	b.n	2e26 <gpio_nrfx_init+0xa>
    2e4e:	bf00      	nop
    2e50:	0bad0000 	.word	0x0bad0000
    2e54:	0000733d 	.word	0x0000733d

00002e58 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    2e58:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2e5a:	6843      	ldr	r3, [r0, #4]

	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    2e5c:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    2e5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    2e62:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2e66:	f001 ff7d 	bl	4d64 <nrfx_twi_twim_bus_recover>
	scl_pin = dev_data->twim_config.scl;
	sda_pin = dev_data->twim_config.sda;
#endif

	err = nrfx_twim_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2e6a:	4b04      	ldr	r3, [pc, #16]	; (2e7c <i2c_nrfx_twim_recover_bus+0x24>)
    2e6c:	4298      	cmp	r0, r3
    2e6e:	d101      	bne.n	2e74 <i2c_nrfx_twim_recover_bus+0x1c>
    2e70:	2000      	movs	r0, #0
}
    2e72:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2e74:	f06f 000f 	mvn.w	r0, #15
    2e78:	e7fb      	b.n	2e72 <i2c_nrfx_twim_recover_bus+0x1a>
    2e7a:	bf00      	nop
    2e7c:	0bad0000 	.word	0x0bad0000

00002e80 <init_twim>:
{
    2e80:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2e82:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    2e84:	4623      	mov	r3, r4
    2e86:	4a08      	ldr	r2, [pc, #32]	; (2ea8 <init_twim+0x28>)
    2e88:	f104 0120 	add.w	r1, r4, #32
    2e8c:	6840      	ldr	r0, [r0, #4]
    2e8e:	f001 fe99 	bl	4bc4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    2e92:	4b06      	ldr	r3, [pc, #24]	; (2eac <init_twim+0x2c>)
    2e94:	4298      	cmp	r0, r3
    2e96:	d104      	bne.n	2ea2 <init_twim+0x22>
	dev_data->twim_initialized = true;
    2e98:	2301      	movs	r3, #1
    2e9a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return 0;
    2e9e:	2000      	movs	r0, #0
}
    2ea0:	bd10      	pop	{r4, pc}
		return -EIO;
    2ea2:	f06f 0004 	mvn.w	r0, #4
    2ea6:	e7fb      	b.n	2ea0 <init_twim+0x20>
    2ea8:	000030bd 	.word	0x000030bd
    2eac:	0bad0000 	.word	0x0bad0000

00002eb0 <i2c_nrfx_twim_transfer>:
{
    2eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2eb4:	b08f      	sub	sp, #60	; 0x3c
    2eb6:	9007      	str	r0, [sp, #28]
    2eb8:	4688      	mov	r8, r1
    2eba:	4691      	mov	r9, r2
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2ebc:	6901      	ldr	r1, [r0, #16]
    2ebe:	9103      	str	r1, [sp, #12]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    2ec0:	6842      	ldr	r2, [r0, #4]
    2ec2:	9202      	str	r2, [sp, #8]
	uint8_t *msg_buf = dev_data->msg_buf;
    2ec4:	f8d1 a038 	ldr.w	sl, [r1, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    2ec8:	8912      	ldrh	r2, [r2, #8]
    2eca:	9205      	str	r2, [sp, #20]
	nrfx_twim_xfer_desc_t cur_xfer = {
    2ecc:	2200      	movs	r2, #0
    2ece:	9209      	str	r2, [sp, #36]	; 0x24
    2ed0:	920a      	str	r2, [sp, #40]	; 0x28
    2ed2:	920b      	str	r2, [sp, #44]	; 0x2c
    2ed4:	920c      	str	r2, [sp, #48]	; 0x30
    2ed6:	920d      	str	r2, [sp, #52]	; 0x34
    2ed8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    2edc:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    2ee0:	b923      	cbnz	r3, 2eec <i2c_nrfx_twim_transfer+0x3c>
    2ee2:	f7ff ffcd 	bl	2e80 <init_twim>
    2ee6:	2800      	cmp	r0, #0
    2ee8:	f2c0 80e1 	blt.w	30ae <i2c_nrfx_twim_transfer+0x1fe>
	return z_impl_k_sem_take(sem, timeout);
    2eec:	f04f 32ff 	mov.w	r2, #4294967295
    2ef0:	f04f 33ff 	mov.w	r3, #4294967295
    2ef4:	9c03      	ldr	r4, [sp, #12]
    2ef6:	4620      	mov	r0, r4
    2ef8:	f002 fbd2 	bl	56a0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    2efc:	4623      	mov	r3, r4
    2efe:	3310      	adds	r3, #16
    2f00:	4618      	mov	r0, r3
    2f02:	9306      	str	r3, [sp, #24]
    2f04:	2200      	movs	r2, #0
    2f06:	2300      	movs	r3, #0
    2f08:	f002 fbca 	bl	56a0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    2f0c:	9802      	ldr	r0, [sp, #8]
    2f0e:	f001 fea3 	bl	4c58 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    2f12:	2600      	movs	r6, #0
	uint16_t msg_buf_used = 0;
    2f14:	4634      	mov	r4, r6
	int ret = 0;
    2f16:	9604      	str	r6, [sp, #16]
	for (size_t i = 0; i < num_msgs; i++) {
    2f18:	e043      	b.n	2fa2 <i2c_nrfx_twim_transfer+0xf2>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2f1a:	2200      	movs	r2, #0
		if (concat_next || (msg_buf_used != 0)) {
    2f1c:	9201      	str	r2, [sp, #4]
    2f1e:	b90a      	cbnz	r2, 2f24 <i2c_nrfx_twim_transfer+0x74>
    2f20:	2c00      	cmp	r4, #0
    2f22:	d06a      	beq.n	2ffa <i2c_nrfx_twim_transfer+0x14a>
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2f24:	4620      	mov	r0, r4
    2f26:	686a      	ldr	r2, [r5, #4]
    2f28:	18a1      	adds	r1, r4, r2
    2f2a:	f8dd c014 	ldr.w	ip, [sp, #20]
    2f2e:	4561      	cmp	r1, ip
    2f30:	f200 80b1 	bhi.w	3096 <i2c_nrfx_twim_transfer+0x1e6>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2f34:	f013 0f01 	tst.w	r3, #1
    2f38:	d059      	beq.n	2fee <i2c_nrfx_twim_transfer+0x13e>
			msg_buf_used += msgs[i].len;
    2f3a:	686b      	ldr	r3, [r5, #4]
    2f3c:	441c      	add	r4, r3
    2f3e:	b2a4      	uxth	r4, r4
		if (concat_next) {
    2f40:	9b01      	ldr	r3, [sp, #4]
    2f42:	bb6b      	cbnz	r3, 2fa0 <i2c_nrfx_twim_transfer+0xf0>
		if (msg_buf_used == 0) {
    2f44:	2c00      	cmp	r4, #0
    2f46:	d16c      	bne.n	3022 <i2c_nrfx_twim_transfer+0x172>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2f48:	f858 300b 	ldr.w	r3, [r8, fp]
    2f4c:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
    2f4e:	686b      	ldr	r3, [r5, #4]
    2f50:	930a      	str	r3, [sp, #40]	; 0x28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2f52:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2f54:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2f58:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2f5c:	f013 0f02 	tst.w	r3, #2
    2f60:	d063      	beq.n	302a <i2c_nrfx_twim_transfer+0x17a>
    2f62:	2200      	movs	r2, #0
    2f64:	a909      	add	r1, sp, #36	; 0x24
    2f66:	9802      	ldr	r0, [sp, #8]
    2f68:	f001 fee2 	bl	4d30 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    2f6c:	4b52      	ldr	r3, [pc, #328]	; (30b8 <i2c_nrfx_twim_transfer+0x208>)
    2f6e:	4298      	cmp	r0, r3
    2f70:	d15d      	bne.n	302e <i2c_nrfx_twim_transfer+0x17e>
    2f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f76:	2300      	movs	r3, #0
    2f78:	9806      	ldr	r0, [sp, #24]
    2f7a:	f002 fb91 	bl	56a0 <z_impl_k_sem_take>
		if (ret != 0) {
    2f7e:	9004      	str	r0, [sp, #16]
    2f80:	2800      	cmp	r0, #0
    2f82:	d15f      	bne.n	3044 <i2c_nrfx_twim_transfer+0x194>
		res = dev_data->res;
    2f84:	9b03      	ldr	r3, [sp, #12]
    2f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    2f88:	4b4b      	ldr	r3, [pc, #300]	; (30b8 <i2c_nrfx_twim_transfer+0x208>)
    2f8a:	429a      	cmp	r2, r3
    2f8c:	f040 808b 	bne.w	30a6 <i2c_nrfx_twim_transfer+0x1f6>
		if ((msgs[i].flags & I2C_MSG_READ)
    2f90:	7a2b      	ldrb	r3, [r5, #8]
    2f92:	f013 0f01 	tst.w	r3, #1
    2f96:	d002      	beq.n	2f9e <i2c_nrfx_twim_transfer+0xee>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f9a:	459a      	cmp	sl, r3
    2f9c:	d065      	beq.n	306a <i2c_nrfx_twim_transfer+0x1ba>
		msg_buf_used = 0;
    2f9e:	2400      	movs	r4, #0
    2fa0:	463e      	mov	r6, r7
	for (size_t i = 0; i < num_msgs; i++) {
    2fa2:	454e      	cmp	r6, r9
    2fa4:	d26d      	bcs.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2fa6:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    2faa:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    2fae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    2fb2:	7a2b      	ldrb	r3, [r5, #8]
    2fb4:	f013 0f08 	tst.w	r3, #8
    2fb8:	d160      	bne.n	307c <i2c_nrfx_twim_transfer+0x1cc>
		bool concat_next = ((i + 1) < num_msgs)
    2fba:	1c77      	adds	r7, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2fbc:	454f      	cmp	r7, r9
    2fbe:	d2ac      	bcs.n	2f1a <i2c_nrfx_twim_transfer+0x6a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2fc0:	f013 0f02 	tst.w	r3, #2
    2fc4:	d10d      	bne.n	2fe2 <i2c_nrfx_twim_transfer+0x132>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    2fc6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    2fca:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    2fce:	7a12      	ldrb	r2, [r2, #8]
    2fd0:	f012 0f04 	tst.w	r2, #4
    2fd4:	d107      	bne.n	2fe6 <i2c_nrfx_twim_transfer+0x136>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    2fd6:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    2fd8:	f012 0f01 	tst.w	r2, #1
    2fdc:	d005      	beq.n	2fea <i2c_nrfx_twim_transfer+0x13a>
    2fde:	2200      	movs	r2, #0
    2fe0:	e79c      	b.n	2f1c <i2c_nrfx_twim_transfer+0x6c>
    2fe2:	2200      	movs	r2, #0
    2fe4:	e79a      	b.n	2f1c <i2c_nrfx_twim_transfer+0x6c>
    2fe6:	2200      	movs	r2, #0
    2fe8:	e798      	b.n	2f1c <i2c_nrfx_twim_transfer+0x6c>
    2fea:	2201      	movs	r2, #1
    2fec:	e796      	b.n	2f1c <i2c_nrfx_twim_transfer+0x6c>
				memcpy(msg_buf + msg_buf_used,
    2fee:	f858 100b 	ldr.w	r1, [r8, fp]
    2ff2:	4450      	add	r0, sl
    2ff4:	f003 ff86 	bl	6f04 <memcpy>
    2ff8:	e79f      	b.n	2f3a <i2c_nrfx_twim_transfer+0x8a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2ffa:	f013 0f01 	tst.w	r3, #1
    2ffe:	d19f      	bne.n	2f40 <i2c_nrfx_twim_transfer+0x90>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    3000:	f858 100b 	ldr.w	r1, [r8, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3004:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    3008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    300c:	d098      	beq.n	2f40 <i2c_nrfx_twim_transfer+0x90>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    300e:	686a      	ldr	r2, [r5, #4]
    3010:	9b02      	ldr	r3, [sp, #8]
    3012:	895b      	ldrh	r3, [r3, #10]
    3014:	429a      	cmp	r2, r3
    3016:	d842      	bhi.n	309e <i2c_nrfx_twim_transfer+0x1ee>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    3018:	4650      	mov	r0, sl
    301a:	f003 ff73 	bl	6f04 <memcpy>
			msg_buf_used = msgs[i].len;
    301e:	88ac      	ldrh	r4, [r5, #4]
    3020:	e78e      	b.n	2f40 <i2c_nrfx_twim_transfer+0x90>
			cur_xfer.p_primary_buf = msg_buf;
    3022:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
    3026:	940a      	str	r4, [sp, #40]	; 0x28
    3028:	e793      	b.n	2f52 <i2c_nrfx_twim_transfer+0xa2>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    302a:	2220      	movs	r2, #32
    302c:	e79a      	b.n	2f64 <i2c_nrfx_twim_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
    302e:	330b      	adds	r3, #11
    3030:	4298      	cmp	r0, r3
    3032:	d003      	beq.n	303c <i2c_nrfx_twim_transfer+0x18c>
				ret = -EIO;
    3034:	f06f 0304 	mvn.w	r3, #4
    3038:	9304      	str	r3, [sp, #16]
    303a:	e022      	b.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
    303c:	f06f 030f 	mvn.w	r3, #15
    3040:	9304      	str	r3, [sp, #16]
    3042:	e01e      	b.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
			nrfx_twim_disable(&dev_config->twim);
    3044:	9802      	ldr	r0, [sp, #8]
    3046:	f001 fe17 	bl	4c78 <nrfx_twim_disable>
			(void)i2c_nrfx_twim_recover_bus(dev);
    304a:	9807      	ldr	r0, [sp, #28]
    304c:	f7ff ff04 	bl	2e58 <i2c_nrfx_twim_recover_bus>
			ret = -EIO;
    3050:	f06f 0304 	mvn.w	r3, #4
    3054:	9304      	str	r3, [sp, #16]
			break;
    3056:	e014      	b.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
				msg_buf_used -= msgs[j].len;
    3058:	1aa4      	subs	r4, r4, r2
    305a:	b2a4      	uxth	r4, r4
				memcpy(msgs[j].buf,
    305c:	eb0a 0104 	add.w	r1, sl, r4
    3060:	f858 0000 	ldr.w	r0, [r8, r0]
    3064:	f003 ff4e 	bl	6f04 <memcpy>
				j--;
    3068:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
    306a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    306e:	0098      	lsls	r0, r3, #2
    3070:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    3074:	685a      	ldr	r2, [r3, #4]
    3076:	4294      	cmp	r4, r2
    3078:	d2ee      	bcs.n	3058 <i2c_nrfx_twim_transfer+0x1a8>
    307a:	e790      	b.n	2f9e <i2c_nrfx_twim_transfer+0xee>
			ret = -ENOTSUP;
    307c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    3080:	9304      	str	r3, [sp, #16]
	nrfx_twim_disable(&dev_config->twim);
    3082:	9802      	ldr	r0, [sp, #8]
    3084:	f001 fdf8 	bl	4c78 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    3088:	9803      	ldr	r0, [sp, #12]
    308a:	f002 fae5 	bl	5658 <z_impl_k_sem_give>
}
    308e:	9804      	ldr	r0, [sp, #16]
    3090:	b00f      	add	sp, #60	; 0x3c
    3092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOSPC;
    3096:	f06f 031b 	mvn.w	r3, #27
    309a:	9304      	str	r3, [sp, #16]
    309c:	e7f1      	b.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EINVAL;
    309e:	f06f 0315 	mvn.w	r3, #21
    30a2:	9304      	str	r3, [sp, #16]
    30a4:	e7ed      	b.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
			ret = -EIO;
    30a6:	f06f 0304 	mvn.w	r3, #4
    30aa:	9304      	str	r3, [sp, #16]
    30ac:	e7e9      	b.n	3082 <i2c_nrfx_twim_transfer+0x1d2>
		return -EIO;
    30ae:	f06f 0304 	mvn.w	r3, #4
    30b2:	9304      	str	r3, [sp, #16]
    30b4:	e7eb      	b.n	308e <i2c_nrfx_twim_transfer+0x1de>
    30b6:	bf00      	nop
    30b8:	0bad0000 	.word	0x0bad0000

000030bc <event_handler>:
{
    30bc:	b508      	push	{r3, lr}
	switch (p_event->type) {
    30be:	7803      	ldrb	r3, [r0, #0]
    30c0:	2b01      	cmp	r3, #1
    30c2:	d00c      	beq.n	30de <event_handler+0x22>
    30c4:	2b02      	cmp	r3, #2
    30c6:	d00d      	beq.n	30e4 <event_handler+0x28>
    30c8:	b113      	cbz	r3, 30d0 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    30ca:	4b08      	ldr	r3, [pc, #32]	; (30ec <event_handler+0x30>)
    30cc:	634b      	str	r3, [r1, #52]	; 0x34
		break;
    30ce:	e001      	b.n	30d4 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    30d0:	4b07      	ldr	r3, [pc, #28]	; (30f0 <event_handler+0x34>)
    30d2:	634b      	str	r3, [r1, #52]	; 0x34
	k_sem_give(&dev_data->completion_sync);
    30d4:	f101 0010 	add.w	r0, r1, #16
    30d8:	f002 fabe 	bl	5658 <z_impl_k_sem_give>
}
    30dc:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    30de:	4b05      	ldr	r3, [pc, #20]	; (30f4 <event_handler+0x38>)
    30e0:	634b      	str	r3, [r1, #52]	; 0x34
		break;
    30e2:	e7f7      	b.n	30d4 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    30e4:	4b04      	ldr	r3, [pc, #16]	; (30f8 <event_handler+0x3c>)
    30e6:	634b      	str	r3, [r1, #52]	; 0x34
		break;
    30e8:	e7f4      	b.n	30d4 <event_handler+0x18>
    30ea:	bf00      	nop
    30ec:	0bad0001 	.word	0x0bad0001
    30f0:	0bad0000 	.word	0x0bad0000
    30f4:	0bae0001 	.word	0x0bae0001
    30f8:	0bae0002 	.word	0x0bae0002

000030fc <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    30fc:	4b01      	ldr	r3, [pc, #4]	; (3104 <hfclk_on_callback+0x8>)
    30fe:	2201      	movs	r2, #1
    3100:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    3102:	4770      	bx	lr
    3104:	4000c000 	.word	0x4000c000

00003108 <temp_nrf5_channel_get>:

static int temp_nrf5_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	struct temp_nrf5_data *data = dev->data;
    3108:	6903      	ldr	r3, [r0, #16]
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    310a:	290c      	cmp	r1, #12
    310c:	d110      	bne.n	3130 <temp_nrf5_channel_get+0x28>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3110:	4909      	ldr	r1, [pc, #36]	; (3138 <temp_nrf5_channel_get+0x30>)
    3112:	fb01 f303 	mul.w	r3, r1, r3
	val->val1 = uval / 1000000;
    3116:	4809      	ldr	r0, [pc, #36]	; (313c <temp_nrf5_channel_get+0x34>)
    3118:	fb80 1003 	smull	r1, r0, r0, r3
    311c:	17d9      	asrs	r1, r3, #31
    311e:	ebc1 41a0 	rsb	r1, r1, r0, asr #18
    3122:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    3124:	4806      	ldr	r0, [pc, #24]	; (3140 <temp_nrf5_channel_get+0x38>)
    3126:	fb00 3311 	mls	r3, r0, r1, r3
    312a:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    312c:	2000      	movs	r0, #0
    312e:	4770      	bx	lr
		return -ENOTSUP;
    3130:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3134:	4770      	bx	lr
    3136:	bf00      	nop
    3138:	0003d090 	.word	0x0003d090
    313c:	431bde83 	.word	0x431bde83
    3140:	000f4240 	.word	0x000f4240

00003144 <temp_nrf5_sample_fetch>:
{
    3144:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    3148:	b084      	sub	sp, #16
	struct temp_nrf5_data *data = dev->data;
    314a:	6904      	ldr	r4, [r0, #16]
	if (data->clk_mgr == NULL) {
    314c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    314e:	b37b      	cbz	r3, 31b0 <temp_nrf5_sample_fetch+0x6c>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    3150:	2939      	cmp	r1, #57	; 0x39
    3152:	d001      	beq.n	3158 <temp_nrf5_sample_fetch+0x14>
    3154:	290c      	cmp	r1, #12
    3156:	d12e      	bne.n	31b6 <temp_nrf5_sample_fetch+0x72>
	k_mutex_lock(&data->mutex, K_FOREVER);
    3158:	f104 0610 	add.w	r6, r4, #16
    315c:	f04f 38ff 	mov.w	r8, #4294967295
    3160:	f04f 39ff 	mov.w	r9, #4294967295
	return z_impl_k_mutex_lock(mutex, timeout);
    3164:	4642      	mov	r2, r8
    3166:	464b      	mov	r3, r9
    3168:	4630      	mov	r0, r6
    316a:	f002 f9a7 	bl	54bc <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    316e:	2500      	movs	r5, #0
    3170:	9501      	str	r5, [sp, #4]
    3172:	9502      	str	r5, [sp, #8]
    3174:	9503      	str	r5, [sp, #12]
    3176:	4b11      	ldr	r3, [pc, #68]	; (31bc <temp_nrf5_sample_fetch+0x78>)
    3178:	9301      	str	r3, [sp, #4]
    317a:	2303      	movs	r3, #3
    317c:	9302      	str	r3, [sp, #8]
	r = onoff_request(data->clk_mgr, &cli);
    317e:	4669      	mov	r1, sp
    3180:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3182:	f003 fc01 	bl	6988 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    3186:	4642      	mov	r2, r8
    3188:	464b      	mov	r3, r9
    318a:	4620      	mov	r0, r4
    318c:	f002 fa88 	bl	56a0 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    3190:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3192:	f003 fc55 	bl	6a40 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    3196:	4b0a      	ldr	r3, [pc, #40]	; (31c0 <temp_nrf5_sample_fetch+0x7c>)
    3198:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    319c:	6262      	str	r2, [r4, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    319e:	2201      	movs	r2, #1
    31a0:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    31a2:	4630      	mov	r0, r6
    31a4:	f002 fa14 	bl	55d0 <z_impl_k_mutex_unlock>
	return 0;
    31a8:	4628      	mov	r0, r5
}
    31aa:	b004      	add	sp, #16
    31ac:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return -EAGAIN;
    31b0:	f06f 000a 	mvn.w	r0, #10
    31b4:	e7f9      	b.n	31aa <temp_nrf5_sample_fetch+0x66>
		return -ENOTSUP;
    31b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    31ba:	e7f6      	b.n	31aa <temp_nrf5_sample_fetch+0x66>
    31bc:	000030fd 	.word	0x000030fd
    31c0:	4000c000 	.word	0x4000c000

000031c4 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    31c4:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    31c6:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    31c8:	2000      	movs	r0, #0
    31ca:	f7ff fbc1 	bl	2950 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    31ce:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    31d0:	f04f 32ff 	mov.w	r2, #4294967295
    31d4:	2100      	movs	r1, #0
    31d6:	4620      	mov	r0, r4
    31d8:	f004 fd57 	bl	7c8a <z_impl_k_sem_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);
    31dc:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_mutex_init(mutex);
    31e0:	f004 fd4c 	bl	7c7c <z_impl_k_mutex_init>

	IRQ_CONNECT(
    31e4:	2200      	movs	r2, #0
    31e6:	2101      	movs	r1, #1
    31e8:	200c      	movs	r0, #12
    31ea:	f7fe feb1 	bl	1f50 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    31ee:	200c      	movs	r0, #12
    31f0:	f7fe fe7e 	bl	1ef0 <arch_irq_enable>
    p_reg->INTENSET = mask;
    31f4:	4b02      	ldr	r3, [pc, #8]	; (3200 <temp_nrf5_init+0x3c>)
    31f6:	2201      	movs	r2, #1
    31f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    31fc:	2000      	movs	r0, #0
    31fe:	bd10      	pop	{r4, pc}
    3200:	4000c000 	.word	0x4000c000

00003204 <temp_nrf5_isr>:
{
    3204:	b508      	push	{r3, lr}
	struct temp_nrf5_data *data = dev->data;
    3206:	6900      	ldr	r0, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3208:	4b04      	ldr	r3, [pc, #16]	; (321c <temp_nrf5_isr+0x18>)
    320a:	2200      	movs	r2, #0
    320c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3210:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    3214:	f002 fa20 	bl	5658 <z_impl_k_sem_give>
}
    3218:	bd08      	pop	{r3, pc}
    321a:	bf00      	nop
    321c:	4000c000 	.word	0x4000c000

00003220 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3220:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3224:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3228:	4b01      	ldr	r3, [pc, #4]	; (3230 <set_comparator+0x10>)
    322a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    322e:	4770      	bx	lr
    3230:	40011000 	.word	0x40011000

00003234 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3234:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    3238:	4b01      	ldr	r3, [pc, #4]	; (3240 <get_comparator+0xc>)
    323a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    323e:	4770      	bx	lr
    3240:	40011000 	.word	0x40011000

00003244 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3248:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    324a:	4a02      	ldr	r2, [pc, #8]	; (3254 <event_enable+0x10>)
    324c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    3250:	4770      	bx	lr
    3252:	bf00      	nop
    3254:	40011000 	.word	0x40011000

00003258 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    325c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    325e:	4a02      	ldr	r2, [pc, #8]	; (3268 <event_disable+0x10>)
    3260:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    3264:	4770      	bx	lr
    3266:	bf00      	nop
    3268:	40011000 	.word	0x40011000

0000326c <counter>:
     return p_reg->COUNTER;
    326c:	4b01      	ldr	r3, [pc, #4]	; (3274 <counter+0x8>)
    326e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    3272:	4770      	bx	lr
    3274:	40011000 	.word	0x40011000

00003278 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3278:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    327a:	2301      	movs	r3, #1
    327c:	4083      	lsls	r3, r0
    327e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3282:	4a10      	ldr	r2, [pc, #64]	; (32c4 <compare_int_lock+0x4c>)
    3284:	f3bf 8f5b 	dmb	ish
    3288:	e852 1f00 	ldrex	r1, [r2]
    328c:	ea01 0e0c 	and.w	lr, r1, ip
    3290:	e842 e400 	strex	r4, lr, [r2]
    3294:	2c00      	cmp	r4, #0
    3296:	d1f7      	bne.n	3288 <compare_int_lock+0x10>
    3298:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    329c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    32a0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    32a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    32ac:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    32b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32b4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    32b8:	420b      	tst	r3, r1
}
    32ba:	bf14      	ite	ne
    32bc:	2001      	movne	r0, #1
    32be:	2000      	moveq	r0, #0
    32c0:	bd10      	pop	{r4, pc}
    32c2:	bf00      	nop
    32c4:	20000824 	.word	0x20000824

000032c8 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    32c8:	b570      	push	{r4, r5, r6, lr}
    32ca:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    32cc:	f004 f8be 	bl	744c <full_int_lock>
    32d0:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    32d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    32d6:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    32d8:	4a17      	ldr	r2, [pc, #92]	; (3338 <channel_processing_check_and_clear+0x70>)
    32da:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    32de:	4213      	tst	r3, r2
    32e0:	d105      	bne.n	32ee <channel_processing_check_and_clear+0x26>
	bool result = false;
    32e2:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    32e4:	4628      	mov	r0, r5
    32e6:	f004 f8ba 	bl	745e <full_int_unlock>

	return result;
}
    32ea:	4630      	mov	r0, r6
    32ec:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    32ee:	2301      	movs	r3, #1
    32f0:	40a3      	lsls	r3, r4
    32f2:	43db      	mvns	r3, r3
    32f4:	4a11      	ldr	r2, [pc, #68]	; (333c <channel_processing_check_and_clear+0x74>)
    32f6:	f3bf 8f5b 	dmb	ish
    32fa:	e852 1f00 	ldrex	r1, [r2]
    32fe:	ea01 0003 	and.w	r0, r1, r3
    3302:	e842 0600 	strex	r6, r0, [r2]
    3306:	2e00      	cmp	r6, #0
    3308:	d1f7      	bne.n	32fa <channel_processing_check_and_clear+0x32>
    330a:	f3bf 8f5b 	dmb	ish
    330e:	b959      	cbnz	r1, 3328 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3310:	f104 0350 	add.w	r3, r4, #80	; 0x50
    3314:	009b      	lsls	r3, r3, #2
    3316:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    331c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3320:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3322:	b113      	cbz	r3, 332a <channel_processing_check_and_clear+0x62>
    3324:	2301      	movs	r3, #1
    3326:	e000      	b.n	332a <channel_processing_check_and_clear+0x62>
    3328:	2301      	movs	r3, #1
		if (result) {
    332a:	461e      	mov	r6, r3
    332c:	2b00      	cmp	r3, #0
    332e:	d0d9      	beq.n	32e4 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    3330:	4620      	mov	r0, r4
    3332:	f004 f87c 	bl	742e <event_clear>
    3336:	e7d5      	b.n	32e4 <channel_processing_check_and_clear+0x1c>
    3338:	40011000 	.word	0x40011000
    333c:	20000820 	.word	0x20000820

00003340 <compare_int_unlock>:
	if (key) {
    3340:	b901      	cbnz	r1, 3344 <compare_int_unlock+0x4>
}
    3342:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    3344:	2301      	movs	r3, #1
    3346:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3348:	4a11      	ldr	r2, [pc, #68]	; (3390 <compare_int_unlock+0x50>)
    334a:	f3bf 8f5b 	dmb	ish
    334e:	e852 1f00 	ldrex	r1, [r2]
    3352:	4319      	orrs	r1, r3
    3354:	e842 1c00 	strex	ip, r1, [r2]
    3358:	f1bc 0f00 	cmp.w	ip, #0
    335c:	d1f7      	bne.n	334e <compare_int_unlock+0xe>
    335e:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3366:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3368:	4a0a      	ldr	r2, [pc, #40]	; (3394 <compare_int_unlock+0x54>)
    336a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    336e:	f3bf 8f5b 	dmb	ish
    3372:	4b09      	ldr	r3, [pc, #36]	; (3398 <compare_int_unlock+0x58>)
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    337a:	fa23 f000 	lsr.w	r0, r3, r0
    337e:	f010 0f01 	tst.w	r0, #1
    3382:	d0de      	beq.n	3342 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3384:	4b05      	ldr	r3, [pc, #20]	; (339c <compare_int_unlock+0x5c>)
    3386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    338a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    338e:	e7d8      	b.n	3342 <compare_int_unlock+0x2>
    3390:	20000824 	.word	0x20000824
    3394:	40011000 	.word	0x40011000
    3398:	20000820 	.word	0x20000820
    339c:	e000e100 	.word	0xe000e100

000033a0 <sys_clock_timeout_handler>:
{
    33a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    33a4:	4607      	mov	r7, r0
    33a6:	4614      	mov	r4, r2
    33a8:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    33aa:	4610      	mov	r0, r2
    33ac:	4619      	mov	r1, r3
    33ae:	f004 f84a 	bl	7446 <absolute_time_to_cc>
    33b2:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    33b4:	4b15      	ldr	r3, [pc, #84]	; (340c <sys_clock_timeout_handler+0x6c>)
    33b6:	681a      	ldr	r2, [r3, #0]
    33b8:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    33ba:	601c      	str	r4, [r3, #0]
    33bc:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    33be:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    33c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    33c6:	d309      	bcc.n	33dc <sys_clock_timeout_handler+0x3c>
	return false;
    33c8:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    33ca:	f003 f803 	bl	63d4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    33ce:	4638      	mov	r0, r7
    33d0:	f7ff ff30 	bl	3234 <get_comparator>
    33d4:	42a8      	cmp	r0, r5
    33d6:	d00e      	beq.n	33f6 <sys_clock_timeout_handler+0x56>
}
    33d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    33dc:	4b0c      	ldr	r3, [pc, #48]	; (3410 <sys_clock_timeout_handler+0x70>)
    33de:	681b      	ldr	r3, [r3, #0]
    33e0:	0a1a      	lsrs	r2, r3, #8
    33e2:	061b      	lsls	r3, r3, #24
    33e4:	eb15 0803 	adds.w	r8, r5, r3
    33e8:	f142 0900 	adc.w	r9, r2, #0
    33ec:	4b09      	ldr	r3, [pc, #36]	; (3414 <sys_clock_timeout_handler+0x74>)
    33ee:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    33f2:	2401      	movs	r4, #1
    33f4:	e7e9      	b.n	33ca <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    33f6:	b11c      	cbz	r4, 3400 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    33f8:	4638      	mov	r0, r7
    33fa:	f7ff ff23 	bl	3244 <event_enable>
}
    33fe:	e7eb      	b.n	33d8 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    3400:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    3404:	4638      	mov	r0, r7
    3406:	f7ff ff0b 	bl	3220 <set_comparator>
    340a:	e7f5      	b.n	33f8 <sys_clock_timeout_handler+0x58>
    340c:	200004c8 	.word	0x200004c8
    3410:	20000828 	.word	0x20000828
    3414:	200004b0 	.word	0x200004b0

00003418 <z_nrf_rtc_timer_read>:
{
    3418:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    341a:	4b0d      	ldr	r3, [pc, #52]	; (3450 <z_nrf_rtc_timer_read+0x38>)
    341c:	681c      	ldr	r4, [r3, #0]
    341e:	0a25      	lsrs	r5, r4, #8
    3420:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3422:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    3426:	f7ff ff21 	bl	326c <counter>
    342a:	4603      	mov	r3, r0
	val += cntr;
    342c:	1900      	adds	r0, r0, r4
    342e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3436:	d20a      	bcs.n	344e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <z_nrf_rtc_timer_read+0x3c>)
    343a:	e9d3 2300 	ldrd	r2, r3, [r3]
    343e:	4290      	cmp	r0, r2
    3440:	eb71 0303 	sbcs.w	r3, r1, r3
    3444:	d203      	bcs.n	344e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    3446:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    344a:	f141 0100 	adc.w	r1, r1, #0
}
    344e:	bd38      	pop	{r3, r4, r5, pc}
    3450:	20000828 	.word	0x20000828
    3454:	200004b0 	.word	0x200004b0

00003458 <compare_set_nolocks>:
{
    3458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    345a:	4606      	mov	r6, r0
    345c:	4614      	mov	r4, r2
    345e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    3460:	4610      	mov	r0, r2
    3462:	4619      	mov	r1, r3
    3464:	f003 ffef 	bl	7446 <absolute_time_to_cc>
    3468:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    346a:	f7ff ffd5 	bl	3418 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    346e:	42a0      	cmp	r0, r4
    3470:	eb71 0305 	sbcs.w	r3, r1, r5
    3474:	d21d      	bcs.n	34b2 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    3476:	1a23      	subs	r3, r4, r0
    3478:	eb65 0101 	sbc.w	r1, r5, r1
    347c:	4a1b      	ldr	r2, [pc, #108]	; (34ec <compare_set_nolocks+0x94>)
    347e:	4293      	cmp	r3, r2
    3480:	f171 0300 	sbcs.w	r3, r1, #0
    3484:	d22f      	bcs.n	34e6 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    3486:	4b1a      	ldr	r3, [pc, #104]	; (34f0 <compare_set_nolocks+0x98>)
    3488:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    348c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3490:	42ab      	cmp	r3, r5
    3492:	bf08      	it	eq
    3494:	42a2      	cmpeq	r2, r4
    3496:	d01a      	beq.n	34ce <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    3498:	4639      	mov	r1, r7
    349a:	4630      	mov	r0, r6
    349c:	f003 ffe4 	bl	7468 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    34a0:	4639      	mov	r1, r7
    34a2:	f003 ffc0 	bl	7426 <counter_sub>
    34a6:	1900      	adds	r0, r0, r4
    34a8:	f145 0300 	adc.w	r3, r5, #0
    34ac:	4604      	mov	r4, r0
    34ae:	461d      	mov	r5, r3
    34b0:	e00d      	b.n	34ce <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    34b2:	2301      	movs	r3, #1
    34b4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34b6:	4a0f      	ldr	r2, [pc, #60]	; (34f4 <compare_set_nolocks+0x9c>)
    34b8:	f3bf 8f5b 	dmb	ish
    34bc:	e852 1f00 	ldrex	r1, [r2]
    34c0:	4319      	orrs	r1, r3
    34c2:	e842 1000 	strex	r0, r1, [r2]
    34c6:	2800      	cmp	r0, #0
    34c8:	d1f8      	bne.n	34bc <compare_set_nolocks+0x64>
    34ca:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    34ce:	4b08      	ldr	r3, [pc, #32]	; (34f0 <compare_set_nolocks+0x98>)
    34d0:	0132      	lsls	r2, r6, #4
    34d2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    34d6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    34da:	9906      	ldr	r1, [sp, #24]
    34dc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    34de:	9b07      	ldr	r3, [sp, #28]
    34e0:	6073      	str	r3, [r6, #4]
	return ret;
    34e2:	2000      	movs	r0, #0
}
    34e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    34e6:	f06f 0015 	mvn.w	r0, #21
    34ea:	e7fb      	b.n	34e4 <compare_set_nolocks+0x8c>
    34ec:	01000001 	.word	0x01000001
    34f0:	200004b8 	.word	0x200004b8
    34f4:	20000820 	.word	0x20000820

000034f8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    34f8:	b530      	push	{r4, r5, lr}
    34fa:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    34fc:	2300      	movs	r3, #0
    34fe:	4a1d      	ldr	r2, [pc, #116]	; (3574 <sys_clock_driver_init+0x7c>)
    3500:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3504:	2b00      	cmp	r3, #0
    3506:	dd24      	ble.n	3552 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    3508:	4c1a      	ldr	r4, [pc, #104]	; (3574 <sys_clock_driver_init+0x7c>)
    350a:	2502      	movs	r5, #2
    350c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3510:	4b19      	ldr	r3, [pc, #100]	; (3578 <sys_clock_driver_init+0x80>)
    3512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3516:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    351a:	2200      	movs	r2, #0
    351c:	2101      	movs	r1, #1
    351e:	2011      	movs	r0, #17
    3520:	f7fe fd16 	bl	1f50 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3524:	2011      	movs	r0, #17
    3526:	f7fe fce3 	bl	1ef0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    352a:	2301      	movs	r3, #1
    352c:	60a3      	str	r3, [r4, #8]
    352e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3530:	4a12      	ldr	r2, [pc, #72]	; (357c <sys_clock_driver_init+0x84>)
    3532:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3534:	2400      	movs	r4, #0
    3536:	9401      	str	r4, [sp, #4]
    3538:	4b11      	ldr	r3, [pc, #68]	; (3580 <sys_clock_driver_init+0x88>)
    353a:	9300      	str	r3, [sp, #0]
    353c:	4a11      	ldr	r2, [pc, #68]	; (3584 <sys_clock_driver_init+0x8c>)
    353e:	2300      	movs	r3, #0
    3540:	4620      	mov	r0, r4
    3542:	f003 ffcc 	bl	74de <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3546:	4628      	mov	r0, r5
    3548:	f7ff fa0a 	bl	2960 <z_nrf_clock_control_lf_on>

	return 0;
}
    354c:	4620      	mov	r0, r4
    354e:	b003      	add	sp, #12
    3550:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3552:	4a0d      	ldr	r2, [pc, #52]	; (3588 <sys_clock_driver_init+0x90>)
    3554:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3558:	f04f 30ff 	mov.w	r0, #4294967295
    355c:	f04f 31ff 	mov.w	r1, #4294967295
    3560:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3564:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3568:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    356a:	4902      	ldr	r1, [pc, #8]	; (3574 <sys_clock_driver_init+0x7c>)
    356c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3570:	3301      	adds	r3, #1
    3572:	e7c7      	b.n	3504 <sys_clock_driver_init+0xc>
    3574:	40011000 	.word	0x40011000
    3578:	e000e100 	.word	0xe000e100
    357c:	20000824 	.word	0x20000824
    3580:	000033a1 	.word	0x000033a1
    3584:	007fffff 	.word	0x007fffff
    3588:	200004b8 	.word	0x200004b8

0000358c <process_channel>:
{
    358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3590:	b082      	sub	sp, #8
    3592:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    3594:	f7ff fe98 	bl	32c8 <channel_processing_check_and_clear>
    3598:	b910      	cbnz	r0, 35a0 <process_channel+0x14>
}
    359a:	b002      	add	sp, #8
    359c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    35a0:	f7ff ff3a 	bl	3418 <z_nrf_rtc_timer_read>
    35a4:	4682      	mov	sl, r0
    35a6:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    35a8:	f003 ff50 	bl	744c <full_int_lock>
    35ac:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    35ae:	4b13      	ldr	r3, [pc, #76]	; (35fc <process_channel+0x70>)
    35b0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    35b4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    35b8:	45c2      	cmp	sl, r8
    35ba:	eb76 0309 	sbcs.w	r3, r6, r9
    35be:	d20b      	bcs.n	35d8 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    35c0:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    35c2:	4628      	mov	r0, r5
    35c4:	f003 ff4b 	bl	745e <full_int_unlock>
		if (handler) {
    35c8:	2e00      	cmp	r6, #0
    35ca:	d0e6      	beq.n	359a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    35cc:	9700      	str	r7, [sp, #0]
    35ce:	4642      	mov	r2, r8
    35d0:	464b      	mov	r3, r9
    35d2:	4620      	mov	r0, r4
    35d4:	47b0      	blx	r6
}
    35d6:	e7e0      	b.n	359a <process_channel+0xe>
			handler = cc_data[chan].callback;
    35d8:	4a08      	ldr	r2, [pc, #32]	; (35fc <process_channel+0x70>)
    35da:	0123      	lsls	r3, r4, #4
    35dc:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    35e0:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    35e2:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    35e4:	2000      	movs	r0, #0
    35e6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    35e8:	f04f 32ff 	mov.w	r2, #4294967295
    35ec:	f04f 33ff 	mov.w	r3, #4294967295
    35f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    35f4:	4620      	mov	r0, r4
    35f6:	f7ff fe2f 	bl	3258 <event_disable>
    35fa:	e7e2      	b.n	35c2 <process_channel+0x36>
    35fc:	200004b8 	.word	0x200004b8

00003600 <rtc_nrf_isr>:
{
    3600:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    3602:	4b0e      	ldr	r3, [pc, #56]	; (363c <rtc_nrf_isr+0x3c>)
    3604:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3608:	f013 0f02 	tst.w	r3, #2
    360c:	d00d      	beq.n	362a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    360e:	4b0b      	ldr	r3, [pc, #44]	; (363c <rtc_nrf_isr+0x3c>)
    3610:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3614:	b14b      	cbz	r3, 362a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3616:	4b09      	ldr	r3, [pc, #36]	; (363c <rtc_nrf_isr+0x3c>)
    3618:	2200      	movs	r2, #0
    361a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    361e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    3622:	4a07      	ldr	r2, [pc, #28]	; (3640 <rtc_nrf_isr+0x40>)
    3624:	6813      	ldr	r3, [r2, #0]
    3626:	3301      	adds	r3, #1
    3628:	6013      	str	r3, [r2, #0]
{
    362a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    362c:	2c00      	cmp	r4, #0
    362e:	dd00      	ble.n	3632 <rtc_nrf_isr+0x32>
}
    3630:	bd10      	pop	{r4, pc}
		process_channel(chan);
    3632:	4620      	mov	r0, r4
    3634:	f7ff ffaa 	bl	358c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3638:	3401      	adds	r4, #1
    363a:	e7f7      	b.n	362c <rtc_nrf_isr+0x2c>
    363c:	40011000 	.word	0x40011000
    3640:	20000828 	.word	0x20000828

00003644 <sys_clock_set_timeout>:
{
    3644:	b510      	push	{r4, lr}
    3646:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3648:	f1b0 3fff 	cmp.w	r0, #4294967295
    364c:	d006      	beq.n	365c <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    364e:	2801      	cmp	r0, #1
    3650:	dd06      	ble.n	3660 <sys_clock_set_timeout+0x1c>
    3652:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3656:	da05      	bge.n	3664 <sys_clock_set_timeout+0x20>
    3658:	1e44      	subs	r4, r0, #1
    365a:	e004      	b.n	3666 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    365c:	480f      	ldr	r0, [pc, #60]	; (369c <sys_clock_set_timeout+0x58>)
    365e:	e7f8      	b.n	3652 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3660:	2400      	movs	r4, #0
    3662:	e000      	b.n	3666 <sys_clock_set_timeout+0x22>
    3664:	4c0d      	ldr	r4, [pc, #52]	; (369c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3666:	f7ff fed7 	bl	3418 <z_nrf_rtc_timer_read>
    366a:	4b0d      	ldr	r3, [pc, #52]	; (36a0 <sys_clock_set_timeout+0x5c>)
    366c:	6819      	ldr	r1, [r3, #0]
    366e:	685b      	ldr	r3, [r3, #4]
    3670:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    3672:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3676:	d300      	bcc.n	367a <sys_clock_set_timeout+0x36>
		ticks = 0;
    3678:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    367a:	4420      	add	r0, r4
    367c:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    367e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    3682:	d300      	bcc.n	3686 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    3684:	4a05      	ldr	r2, [pc, #20]	; (369c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    3686:	2000      	movs	r0, #0
    3688:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    368a:	9001      	str	r0, [sp, #4]
    368c:	4905      	ldr	r1, [pc, #20]	; (36a4 <sys_clock_set_timeout+0x60>)
    368e:	9100      	str	r1, [sp, #0]
    3690:	f143 0300 	adc.w	r3, r3, #0
    3694:	f003 ff23 	bl	74de <compare_set>
}
    3698:	b002      	add	sp, #8
    369a:	bd10      	pop	{r4, pc}
    369c:	007fffff 	.word	0x007fffff
    36a0:	200004c8 	.word	0x200004c8
    36a4:	000033a1 	.word	0x000033a1

000036a8 <sys_clock_elapsed>:
{
    36a8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    36aa:	f7ff feb5 	bl	3418 <z_nrf_rtc_timer_read>
    36ae:	4b02      	ldr	r3, [pc, #8]	; (36b8 <sys_clock_elapsed+0x10>)
    36b0:	681b      	ldr	r3, [r3, #0]
}
    36b2:	1ac0      	subs	r0, r0, r3
    36b4:	bd08      	pop	{r3, pc}
    36b6:	bf00      	nop
    36b8:	200004c8 	.word	0x200004c8

000036bc <pinctrl_configure_pins>:
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    36bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36c0:	4606      	mov	r6, r0
    36c2:	460f      	mov	r7, r1
    36c4:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    36c6:	2400      	movs	r4, #0
    36c8:	e015      	b.n	36f6 <pinctrl_configure_pins+0x3a>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    36ca:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    36ce:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    36d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    36d6:	f002 001f 	and.w	r0, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    36da:	2101      	movs	r1, #1
    36dc:	fa01 f000 	lsl.w	r0, r1, r0
    p_reg->OUTSET = set_mask;
    36e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    36e4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    36e8:	460a      	mov	r2, r1
    36ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    36ee:	f003 ff29 	bl	7544 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    36f2:	3401      	adds	r4, #1
    36f4:	b2e4      	uxtb	r4, r4
    36f6:	42bc      	cmp	r4, r7
    36f8:	f080 8140 	bcs.w	397c <pinctrl_configure_pins+0x2c0>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    36fc:	00a0      	lsls	r0, r4, #2
    36fe:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
    3702:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    3706:	0c2a      	lsrs	r2, r5, #16
    3708:	2a19      	cmp	r2, #25
    370a:	f200 8139 	bhi.w	3980 <pinctrl_configure_pins+0x2c4>
    370e:	a101      	add	r1, pc, #4	; (adr r1, 3714 <pinctrl_configure_pins+0x58>)
    3710:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3714:	000036cb 	.word	0x000036cb
    3718:	0000377d 	.word	0x0000377d
    371c:	00003793 	.word	0x00003793
    3720:	000037bd 	.word	0x000037bd
    3724:	000037d3 	.word	0x000037d3
    3728:	000037fd 	.word	0x000037fd
    372c:	00003827 	.word	0x00003827
    3730:	00003981 	.word	0x00003981
    3734:	00003981 	.word	0x00003981
    3738:	00003981 	.word	0x00003981
    373c:	00003981 	.word	0x00003981
    3740:	0000383d 	.word	0x0000383d
    3744:	00003855 	.word	0x00003855
    3748:	00003981 	.word	0x00003981
    374c:	00003981 	.word	0x00003981
    3750:	00003981 	.word	0x00003981
    3754:	00003981 	.word	0x00003981
    3758:	00003981 	.word	0x00003981
    375c:	00003981 	.word	0x00003981
    3760:	00003981 	.word	0x00003981
    3764:	00003981 	.word	0x00003981
    3768:	00003981 	.word	0x00003981
    376c:	0000386d 	.word	0x0000386d
    3770:	000038b1 	.word	0x000038b1
    3774:	000038f5 	.word	0x000038f5
    3778:	00003939 	.word	0x00003939
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    377c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    3780:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3784:	2200      	movs	r2, #0
    3786:	4611      	mov	r1, r2
    3788:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    378c:	f003 feda 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    3790:	e7af      	b.n	36f2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    3792:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    3796:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    379a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    379e:	f002 001f 	and.w	r0, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    37a2:	2101      	movs	r1, #1
    37a4:	fa01 f000 	lsl.w	r0, r1, r0
    p_reg->OUTSET = set_mask;
    37a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    37ac:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    37b0:	460a      	mov	r2, r1
    37b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    37b6:	f003 fec5 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    37ba:	e79a      	b.n	36f2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    37bc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    37c0:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    37c4:	2200      	movs	r2, #0
    37c6:	4611      	mov	r1, r2
    37c8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    37cc:	f003 feba 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    37d0:	e78f      	b.n	36f2 <pinctrl_configure_pins+0x36>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    37d2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    37d6:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    37da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    37de:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    37e2:	2101      	movs	r1, #1
    37e4:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    37e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    37ec:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    37f0:	2200      	movs	r2, #0
    37f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    37f6:	f003 fea5 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    37fa:	e77a      	b.n	36f2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    37fc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    3800:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    3804:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    3808:	f002 001f 	and.w	r0, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    380c:	2101      	movs	r1, #1
    380e:	fa01 f000 	lsl.w	r0, r1, r0
    p_reg->OUTCLR = clr_mask;
    3812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3816:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    381a:	460a      	mov	r2, r1
    381c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    3820:	f003 fe90 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    3824:	e765      	b.n	36f2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    3826:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    382a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    382e:	2200      	movs	r2, #0
    3830:	4611      	mov	r1, r2
    3832:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    3836:	f003 fe85 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    383a:	e75a      	b.n	36f2 <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    383c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    3840:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    3844:	b903      	cbnz	r3, 3848 <pinctrl_configure_pins+0x18c>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    3846:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3848:	2200      	movs	r2, #0
    384a:	4611      	mov	r1, r2
    384c:	5830      	ldr	r0, [r6, r0]
    384e:	f003 fe79 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    3852:	e74e      	b.n	36f2 <pinctrl_configure_pins+0x36>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    3854:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    3858:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    385c:	b903      	cbnz	r3, 3860 <pinctrl_configure_pins+0x1a4>
				drive = NRF_DRIVE_S0D1;
    385e:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3860:	2200      	movs	r2, #0
    3862:	4611      	mov	r1, r2
    3864:	5830      	ldr	r0, [r6, r0]
    3866:	f003 fe6d 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    386a:	e742      	b.n	36f2 <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    386c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    3870:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3874:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    3878:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    387c:	d10e      	bne.n	389c <pinctrl_configure_pins+0x1e0>
    *p_pin = pin_number & 0x1F;
    387e:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3882:	2101      	movs	r1, #1
    3884:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    3888:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    388c:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3890:	2201      	movs	r2, #1
    3892:	4611      	mov	r1, r2
    3894:	5830      	ldr	r0, [r6, r0]
    3896:	f003 fe55 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    389a:	e72a      	b.n	36f2 <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    389c:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    38a0:	2101      	movs	r1, #1
    38a2:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    38a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    38aa:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    38ae:	e7ef      	b.n	3890 <pinctrl_configure_pins+0x1d4>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    38b0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    38b4:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    38b8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    38bc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    38c0:	d10e      	bne.n	38e0 <pinctrl_configure_pins+0x224>
    *p_pin = pin_number & 0x1F;
    38c2:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    38c6:	2101      	movs	r1, #1
    38c8:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    38cc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    38d0:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    38d4:	2201      	movs	r2, #1
    38d6:	4611      	mov	r1, r2
    38d8:	5830      	ldr	r0, [r6, r0]
    38da:	f003 fe33 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    38de:	e708      	b.n	36f2 <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    38e0:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    38e4:	2101      	movs	r1, #1
    38e6:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    38ea:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    38ee:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    38f2:	e7ef      	b.n	38d4 <pinctrl_configure_pins+0x218>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    38f4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    38f8:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    38fc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    3900:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    3904:	d10e      	bne.n	3924 <pinctrl_configure_pins+0x268>
    *p_pin = pin_number & 0x1F;
    3906:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    390a:	2101      	movs	r1, #1
    390c:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    3910:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    3914:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3918:	2201      	movs	r2, #1
    391a:	4611      	mov	r1, r2
    391c:	5830      	ldr	r0, [r6, r0]
    391e:	f003 fe11 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    3922:	e6e6      	b.n	36f2 <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    3924:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3928:	2101      	movs	r1, #1
    392a:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    392e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    3932:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    3936:	e7ef      	b.n	3918 <pinctrl_configure_pins+0x25c>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    3938:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    393c:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    3940:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    3944:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    3948:	d10e      	bne.n	3968 <pinctrl_configure_pins+0x2ac>
    *p_pin = pin_number & 0x1F;
    394a:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    394e:	2101      	movs	r1, #1
    3950:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    3954:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    3958:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    395c:	2201      	movs	r2, #1
    395e:	4611      	mov	r1, r2
    3960:	5830      	ldr	r0, [r6, r0]
    3962:	f003 fdef 	bl	7544 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    3966:	e6c4      	b.n	36f2 <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    3968:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    396c:	2101      	movs	r1, #1
    396e:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    3972:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    3976:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    397a:	e7ef      	b.n	395c <pinctrl_configure_pins+0x2a0>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    397c:	2000      	movs	r0, #0
    397e:	e001      	b.n	3984 <pinctrl_configure_pins+0x2c8>
		switch (NRF_GET_FUN(pins[i])) {
    3980:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003988 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    3988:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    398c:	4905      	ldr	r1, [pc, #20]	; (39a4 <__NVIC_SystemReset+0x1c>)
    398e:	68ca      	ldr	r2, [r1, #12]
    3990:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3994:	4b04      	ldr	r3, [pc, #16]	; (39a8 <__NVIC_SystemReset+0x20>)
    3996:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3998:	60cb      	str	r3, [r1, #12]
    399a:	f3bf 8f4f 	dsb	sy
    __NOP();
    399e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    39a0:	e7fd      	b.n	399e <__NVIC_SystemReset+0x16>
    39a2:	bf00      	nop
    39a4:	e000ed00 	.word	0xe000ed00
    39a8:	05fa0004 	.word	0x05fa0004

000039ac <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    39ac:	4b02      	ldr	r3, [pc, #8]	; (39b8 <nvmc_wait+0xc>)
    39ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    39b2:	2b00      	cmp	r3, #0
    39b4:	d0fa      	beq.n	39ac <nvmc_wait>
}
    39b6:	4770      	bx	lr
    39b8:	4001e000 	.word	0x4001e000

000039bc <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    39bc:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    39be:	4b03      	ldr	r3, [pc, #12]	; (39cc <nvmc_config+0x10>)
    39c0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    39c4:	f7ff fff2 	bl	39ac <nvmc_wait>
}
    39c8:	bd08      	pop	{r3, pc}
    39ca:	bf00      	nop
    39cc:	4001e000 	.word	0x4001e000

000039d0 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    39d0:	4b01      	ldr	r3, [pc, #4]	; (39d8 <SystemCoreClockUpdate+0x8>)
    39d2:	4a02      	ldr	r2, [pc, #8]	; (39dc <SystemCoreClockUpdate+0xc>)
    39d4:	601a      	str	r2, [r3, #0]
}
    39d6:	4770      	bx	lr
    39d8:	20000058 	.word	0x20000058
    39dc:	03d09000 	.word	0x03d09000

000039e0 <SystemInit>:

void SystemInit(void)
{
    39e0:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    39e2:	f003 fdca 	bl	757a <nrf52_errata_12>
    39e6:	b140      	cbz	r0, 39fa <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    39e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    39ec:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    39f0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    39f4:	4a7d      	ldr	r2, [pc, #500]	; (3bec <SystemInit+0x20c>)
    39f6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    39fa:	f003 fdd0 	bl	759e <nrf52_errata_16>
    39fe:	b110      	cbz	r0, 3a06 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3a00:	4b7b      	ldr	r3, [pc, #492]	; (3bf0 <SystemInit+0x210>)
    3a02:	4a7c      	ldr	r2, [pc, #496]	; (3bf4 <SystemInit+0x214>)
    3a04:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    3a06:	f003 fde0 	bl	75ca <nrf52_errata_31>
    3a0a:	b148      	cbz	r0, 3a20 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3a10:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    3a14:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a1c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3a20:	f003 fde5 	bl	75ee <nrf52_errata_32>
    3a24:	b130      	cbz	r0, 3a34 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3a26:	4a74      	ldr	r2, [pc, #464]	; (3bf8 <SystemInit+0x218>)
    3a28:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    3a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3a30:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3a34:	f003 fdf1 	bl	761a <nrf52_errata_36>
    3a38:	b140      	cbz	r0, 3a4c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    3a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a3e:	2200      	movs	r2, #0
    3a40:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3a44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3a48:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3a4c:	f003 fdf7 	bl	763e <nrf52_errata_37>
    3a50:	b120      	cbz	r0, 3a5c <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    3a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a56:	2203      	movs	r2, #3
    3a58:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3a5c:	f003 fe05 	bl	766a <nrf52_errata_57>
    3a60:	b160      	cbz	r0, 3a7c <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    3a62:	4b66      	ldr	r3, [pc, #408]	; (3bfc <SystemInit+0x21c>)
    3a64:	2205      	movs	r2, #5
    3a66:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    3a6a:	2201      	movs	r2, #1
    3a6c:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3a70:	2200      	movs	r2, #0
    3a72:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3a76:	223f      	movs	r2, #63	; 0x3f
    3a78:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3a7c:	f003 fe0b 	bl	7696 <nrf52_errata_66>
    3a80:	2800      	cmp	r0, #0
    3a82:	d046      	beq.n	3b12 <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3a88:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3a8c:	4b5c      	ldr	r3, [pc, #368]	; (3c00 <SystemInit+0x220>)
    3a8e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3a92:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3a96:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3a9a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3a9e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3aa2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3aa6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3aaa:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3aae:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3ab2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3ab6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3aba:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3abe:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3ac2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3ac6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3aca:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3ace:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3ad2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3ad6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3ada:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3ade:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3ae2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3ae6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3aea:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3aee:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3af2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3af6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3afa:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3afe:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3b02:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3b06:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3b0a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3b0e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    3b12:	f003 fde2 	bl	76da <nrf52_errata_108>
    3b16:	b148      	cbz	r0, 3b2c <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    3b18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3b1c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3b20:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    3b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b28:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3b2c:	f003 fde7 	bl	76fe <nrf52_errata_136>
    3b30:	b160      	cbz	r0, 3b4c <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3b3a:	f013 0f01 	tst.w	r3, #1
    3b3e:	d005      	beq.n	3b4c <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b44:	f06f 0201 	mvn.w	r2, #1
    3b48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    3b4c:	f003 fde9 	bl	7722 <nrf52_errata_182>
    3b50:	b130      	cbz	r0, 3b60 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3b52:	4a2c      	ldr	r2, [pc, #176]	; (3c04 <SystemInit+0x224>)
    3b54:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    3b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3b5c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3b60:	f003 fdf3 	bl	774a <nrf52_configuration_249>
    3b64:	b138      	cbz	r0, 3b76 <SystemInit+0x196>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3b66:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3b6a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b72:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    3b76:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3b7a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    3b7e:	f013 0f01 	tst.w	r3, #1
    3b82:	d10e      	bne.n	3ba2 <SystemInit+0x1c2>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3b84:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	db1a      	blt.n	3bc6 <SystemInit+0x1e6>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3b90:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3b94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3b98:	2b00      	cmp	r3, #0
    3b9a:	db14      	blt.n	3bc6 <SystemInit+0x1e6>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    3b9c:	f7ff ff18 	bl	39d0 <SystemCoreClockUpdate>
}
    3ba0:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    3ba2:	2001      	movs	r0, #1
    3ba4:	f7ff ff0a 	bl	39bc <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    3ba8:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    3bac:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    3bb0:	f023 0301 	bic.w	r3, r3, #1
    3bb4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
    3bb8:	f7ff fef8 	bl	39ac <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    3bbc:	2000      	movs	r0, #0
    3bbe:	f7ff fefd 	bl	39bc <nvmc_config>
            NVIC_SystemReset();
    3bc2:	f7ff fee1 	bl	3988 <__NVIC_SystemReset>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    3bc6:	2001      	movs	r0, #1
    3bc8:	f7ff fef8 	bl	39bc <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3bcc:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    3bd0:	2515      	movs	r5, #21
    3bd2:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    3bd6:	f7ff fee9 	bl	39ac <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3bda:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    3bde:	f7ff fee5 	bl	39ac <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    3be2:	2000      	movs	r0, #0
    3be4:	f7ff feea 	bl	39bc <nvmc_config>
            NVIC_SystemReset();
    3be8:	f7ff fece 	bl	3988 <__NVIC_SystemReset>
    3bec:	40013000 	.word	0x40013000
    3bf0:	4007c000 	.word	0x4007c000
    3bf4:	baadf00d 	.word	0xbaadf00d
    3bf8:	e000ed00 	.word	0xe000ed00
    3bfc:	40005000 	.word	0x40005000
    3c00:	4000c000 	.word	0x4000c000
    3c04:	40001000 	.word	0x40001000

00003c08 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3c08:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    3c0a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3c0c:	fab4 f384 	clz	r3, r4
    3c10:	f1c3 031f 	rsb	r3, r3, #31
    3c14:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    3c18:	2b00      	cmp	r3, #0
    3c1a:	db16      	blt.n	3c4a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3c1c:	2201      	movs	r2, #1
    3c1e:	fa02 f303 	lsl.w	r3, r2, r3
    3c22:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3c26:	f3bf 8f5b 	dmb	ish
    3c2a:	e850 2f00 	ldrex	r2, [r0]
    3c2e:	42a2      	cmp	r2, r4
    3c30:	d104      	bne.n	3c3c <nrfx_flag32_alloc+0x34>
    3c32:	e840 3e00 	strex	lr, r3, [r0]
    3c36:	f1be 0f00 	cmp.w	lr, #0
    3c3a:	d1f6      	bne.n	3c2a <nrfx_flag32_alloc+0x22>
    3c3c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3c40:	d1e3      	bne.n	3c0a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    3c42:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    3c46:	4802      	ldr	r0, [pc, #8]	; (3c50 <nrfx_flag32_alloc+0x48>)
}
    3c48:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    3c4a:	4802      	ldr	r0, [pc, #8]	; (3c54 <nrfx_flag32_alloc+0x4c>)
    3c4c:	e7fc      	b.n	3c48 <nrfx_flag32_alloc+0x40>
    3c4e:	bf00      	nop
    3c50:	0bad0000 	.word	0x0bad0000
    3c54:	0bad0002 	.word	0x0bad0002

00003c58 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3c58:	6803      	ldr	r3, [r0, #0]
    3c5a:	40cb      	lsrs	r3, r1
    3c5c:	f013 0f01 	tst.w	r3, #1
    3c60:	d115      	bne.n	3c8e <nrfx_flag32_free+0x36>
{
    3c62:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    3c64:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    3c66:	2301      	movs	r3, #1
    3c68:	408b      	lsls	r3, r1
    3c6a:	4313      	orrs	r3, r2
    3c6c:	f3bf 8f5b 	dmb	ish
    3c70:	e850 cf00 	ldrex	ip, [r0]
    3c74:	4594      	cmp	ip, r2
    3c76:	d104      	bne.n	3c82 <nrfx_flag32_free+0x2a>
    3c78:	e840 3e00 	strex	lr, r3, [r0]
    3c7c:	f1be 0f00 	cmp.w	lr, #0
    3c80:	d1f6      	bne.n	3c70 <nrfx_flag32_free+0x18>
    3c82:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3c86:	d1ed      	bne.n	3c64 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    3c88:	4802      	ldr	r0, [pc, #8]	; (3c94 <nrfx_flag32_free+0x3c>)
}
    3c8a:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    3c8e:	4802      	ldr	r0, [pc, #8]	; (3c98 <nrfx_flag32_free+0x40>)
}
    3c90:	4770      	bx	lr
    3c92:	bf00      	nop
    3c94:	0bad0000 	.word	0x0bad0000
    3c98:	0bad0004 	.word	0x0bad0004

00003c9c <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    3c9c:	4b0d      	ldr	r3, [pc, #52]	; (3cd4 <nrfx_clock_anomaly_132+0x38>)
    3c9e:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3ca2:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    3ca6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    3caa:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
    3cae:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    3cb0:	f040 0201 	orr.w	r2, r0, #1
    3cb4:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    3cb6:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3cb8:	4b07      	ldr	r3, [pc, #28]	; (3cd8 <nrfx_clock_anomaly_132+0x3c>)
    3cba:	685b      	ldr	r3, [r3, #4]
    3cbc:	1a9b      	subs	r3, r3, r2
    3cbe:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    3cc2:	d3f9      	bcc.n	3cb8 <nrfx_clock_anomaly_132+0x1c>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    3cc4:	4b04      	ldr	r3, [pc, #16]	; (3cd8 <nrfx_clock_anomaly_132+0x3c>)
    3cc6:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    3cc8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    3ccc:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
}
    3cd0:	4770      	bx	lr
    3cd2:	bf00      	nop
    3cd4:	e000ed00 	.word	0xe000ed00
    3cd8:	e0001000 	.word	0xe0001000

00003cdc <clock_stop>:
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3cdc:	b570      	push	{r4, r5, r6, lr}
    3cde:	b082      	sub	sp, #8
    switch (domain)
    3ce0:	4605      	mov	r5, r0
    3ce2:	b118      	cbz	r0, 3cec <clock_stop+0x10>
    3ce4:	2801      	cmp	r0, #1
    3ce6:	d016      	beq.n	3d16 <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3ce8:	b002      	add	sp, #8
    3cea:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    3cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cf0:	2202      	movs	r2, #2
    3cf2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3cf6:	2200      	movs	r2, #0
    3cf8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3cfc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d00:	2201      	movs	r2, #1
    3d02:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3d04:	2301      	movs	r3, #1
    3d06:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3d0a:	429d      	cmp	r5, r3
    3d0c:	d00f      	beq.n	3d2e <clock_stop+0x52>
    3d0e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3d10:	f242 7410 	movw	r4, #10000	; 0x2710
    3d14:	e029      	b.n	3d6a <clock_stop+0x8e>
    p_reg->INTENCLR = mask;
    3d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d1a:	2201      	movs	r2, #1
    3d1c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d20:	2100      	movs	r1, #0
    3d22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3d26:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d2a:	605a      	str	r2, [r3, #4]
}
    3d2c:	e7ea      	b.n	3d04 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3d2e:	f10d 0607 	add.w	r6, sp, #7
    3d32:	e7ed      	b.n	3d10 <clock_stop+0x34>
            if (p_clk_src != NULL)
    3d34:	b136      	cbz	r6, 3d44 <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d3a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3d3e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3d42:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d48:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3d4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3d50:	d122      	bne.n	3d98 <clock_stop+0xbc>
    return false;
    3d52:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3d54:	b323      	cbz	r3, 3da0 <clock_stop+0xc4>
    3d56:	b11e      	cbz	r6, 3d60 <clock_stop+0x84>
    3d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3d5c:	2b01      	cmp	r3, #1
    3d5e:	d11f      	bne.n	3da0 <clock_stop+0xc4>
    3d60:	2001      	movs	r0, #1
    3d62:	f003 fd09 	bl	7778 <nrfx_busy_wait>
    3d66:	3c01      	subs	r4, #1
    3d68:	d01a      	beq.n	3da0 <clock_stop+0xc4>
    switch (domain)
    3d6a:	2d00      	cmp	r5, #0
    3d6c:	d0e2      	beq.n	3d34 <clock_stop+0x58>
    3d6e:	2d01      	cmp	r5, #1
    3d70:	d001      	beq.n	3d76 <clock_stop+0x9a>
    3d72:	2300      	movs	r3, #0
    3d74:	e7ee      	b.n	3d54 <clock_stop+0x78>
            if (p_clk_src != NULL)
    3d76:	b136      	cbz	r6, 3d86 <clock_stop+0xaa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3d80:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3d84:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d8a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3d8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3d92:	d103      	bne.n	3d9c <clock_stop+0xc0>
    return false;
    3d94:	2300      	movs	r3, #0
    3d96:	e7dd      	b.n	3d54 <clock_stop+0x78>
                return true;
    3d98:	2301      	movs	r3, #1
    3d9a:	e7db      	b.n	3d54 <clock_stop+0x78>
                return true;
    3d9c:	2301      	movs	r3, #1
    3d9e:	e7d9      	b.n	3d54 <clock_stop+0x78>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3da0:	2d01      	cmp	r5, #1
    3da2:	d1a1      	bne.n	3ce8 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    3da4:	4b01      	ldr	r3, [pc, #4]	; (3dac <clock_stop+0xd0>)
    3da6:	2200      	movs	r2, #0
    3da8:	715a      	strb	r2, [r3, #5]
    3daa:	e79d      	b.n	3ce8 <clock_stop+0xc>
    3dac:	2000082c 	.word	0x2000082c

00003db0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3db0:	4b06      	ldr	r3, [pc, #24]	; (3dcc <nrfx_clock_init+0x1c>)
    3db2:	791b      	ldrb	r3, [r3, #4]
    3db4:	b943      	cbnz	r3, 3dc8 <nrfx_clock_init+0x18>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    3db6:	4b05      	ldr	r3, [pc, #20]	; (3dcc <nrfx_clock_init+0x1c>)
    3db8:	2200      	movs	r2, #0
    3dba:	719a      	strb	r2, [r3, #6]
#endif
        m_clock_cb.event_handler = event_handler;
    3dbc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3dbe:	2101      	movs	r1, #1
    3dc0:	7119      	strb	r1, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    3dc2:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3dc4:	4802      	ldr	r0, [pc, #8]	; (3dd0 <nrfx_clock_init+0x20>)
    3dc6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3dc8:	4802      	ldr	r0, [pc, #8]	; (3dd4 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3dca:	4770      	bx	lr
    3dcc:	2000082c 	.word	0x2000082c
    3dd0:	0bad0000 	.word	0x0bad0000
    3dd4:	0bad000c 	.word	0x0bad000c

00003dd8 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3ddc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    3de0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3de4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    3de8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3dec:	d104      	bne.n	3df8 <nrfx_clock_calibration_start+0x20>
    return false;
    3dee:	2200      	movs	r2, #0
{
    nrfx_err_t err_code = NRFX_SUCCESS;

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
    nrf_clock_hfclk_t clk_src;
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    3df0:	b31a      	cbz	r2, 3e3a <nrfx_clock_calibration_start+0x62>
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    3df2:	b91b      	cbnz	r3, 3dfc <nrfx_clock_calibration_start+0x24>
    {
        return NRFX_ERROR_INVALID_STATE;
    3df4:	4814      	ldr	r0, [pc, #80]	; (3e48 <nrfx_clock_calibration_start+0x70>)
    3df6:	4770      	bx	lr
                return true;
    3df8:	2201      	movs	r2, #1
    3dfa:	e7f9      	b.n	3df0 <nrfx_clock_calibration_start+0x18>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e00:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3e04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e08:	d100      	bne.n	3e0c <nrfx_clock_calibration_start+0x34>
    return false;
    3e0a:	2200      	movs	r2, #0
    }

    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    3e0c:	b1ba      	cbz	r2, 3e3e <nrfx_clock_calibration_start+0x66>
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    3e0e:	4b0f      	ldr	r3, [pc, #60]	; (3e4c <nrfx_clock_calibration_start+0x74>)
    3e10:	799b      	ldrb	r3, [r3, #6]
    3e12:	b9b3      	cbnz	r3, 3e42 <nrfx_clock_calibration_start+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e18:	2200      	movs	r2, #0
    3e1a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    3e1e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    p_reg->INTENSET = mask;
    3e22:	2208      	movs	r2, #8
    3e24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    3e28:	2201      	movs	r2, #1
    3e2a:	4908      	ldr	r1, [pc, #32]	; (3e4c <nrfx_clock_calibration_start+0x74>)
    3e2c:	718a      	strb	r2, [r1, #6]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000002;
    3e2e:	2102      	movs	r1, #2
    3e30:	f8c3 1c34 	str.w	r1, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e34:	611a      	str	r2, [r3, #16]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3e36:	4806      	ldr	r0, [pc, #24]	; (3e50 <nrfx_clock_calibration_start+0x78>)
}
    3e38:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    3e3a:	4803      	ldr	r0, [pc, #12]	; (3e48 <nrfx_clock_calibration_start+0x70>)
    3e3c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    3e3e:	4802      	ldr	r0, [pc, #8]	; (3e48 <nrfx_clock_calibration_start+0x70>)
    3e40:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    3e42:	4804      	ldr	r0, [pc, #16]	; (3e54 <nrfx_clock_calibration_start+0x7c>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop
    3e48:	0bad0005 	.word	0x0bad0005
    3e4c:	2000082c 	.word	0x2000082c
    3e50:	0bad0000 	.word	0x0bad0000
    3e54:	0bad000b 	.word	0x0bad000b

00003e58 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3e58:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3e62:	b18b      	cbz	r3, 3e88 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e68:	2200      	movs	r2, #0
    3e6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3e6e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3e72:	2201      	movs	r2, #1
    3e74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3e78:	4b1c      	ldr	r3, [pc, #112]	; (3eec <nrfx_power_clock_irq_handler+0x94>)
    3e7a:	795b      	ldrb	r3, [r3, #5]
    3e7c:	b923      	cbnz	r3, 3e88 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    3e7e:	4b1b      	ldr	r3, [pc, #108]	; (3eec <nrfx_power_clock_irq_handler+0x94>)
    3e80:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	2000      	movs	r0, #0
    3e86:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e8c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3e90:	b16b      	cbz	r3, 3eae <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e96:	2200      	movs	r2, #0
    3e98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3e9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    3ea0:	2202      	movs	r2, #2
    3ea2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3ea6:	4b11      	ldr	r3, [pc, #68]	; (3eec <nrfx_power_clock_irq_handler+0x94>)
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	2001      	movs	r0, #1
    3eac:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3eb2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    3eb6:	b1bb      	cbz	r3, 3ee8 <nrfx_power_clock_irq_handler+0x90>
    return p_reg->INTENSET & mask;
    3eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ebc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    3ec0:	f013 0f08 	tst.w	r3, #8
    3ec4:	d010      	beq.n	3ee8 <nrfx_power_clock_irq_handler+0x90>
        nrf_clock_int_enable_check(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK))
    {
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
    3ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3eca:	2200      	movs	r2, #0
    3ecc:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ed0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    3ed4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    3ed8:	2108      	movs	r1, #8
    3eda:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    3ede:	4b03      	ldr	r3, [pc, #12]	; (3eec <nrfx_power_clock_irq_handler+0x94>)
    3ee0:	719a      	strb	r2, [r3, #6]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	2003      	movs	r0, #3
    3ee6:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3ee8:	bd08      	pop	{r3, pc}
    3eea:	bf00      	nop
    3eec:	2000082c 	.word	0x2000082c

00003ef0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3ef0:	3008      	adds	r0, #8
    3ef2:	4b03      	ldr	r3, [pc, #12]	; (3f00 <pin_in_use+0x10>)
    3ef4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ef8:	f000 0001 	and.w	r0, r0, #1
    3efc:	4770      	bx	lr
    3efe:	bf00      	nop
    3f00:	2000005c 	.word	0x2000005c

00003f04 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3f04:	3008      	adds	r0, #8
    3f06:	4b03      	ldr	r3, [pc, #12]	; (3f14 <pin_in_use_by_te+0x10>)
    3f08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3f0c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3f10:	4770      	bx	lr
    3f12:	bf00      	nop
    3f14:	2000005c 	.word	0x2000005c

00003f18 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3f18:	3008      	adds	r0, #8
    3f1a:	4b04      	ldr	r3, [pc, #16]	; (3f2c <pin_has_trigger+0x14>)
    3f1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3f20:	f010 001c 	ands.w	r0, r0, #28
    3f24:	bf18      	it	ne
    3f26:	2001      	movne	r0, #1
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop
    3f2c:	2000005c 	.word	0x2000005c

00003f30 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3f30:	3008      	adds	r0, #8
    3f32:	4b03      	ldr	r3, [pc, #12]	; (3f40 <pin_is_output+0x10>)
    3f34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3f38:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop
    3f40:	2000005c 	.word	0x2000005c

00003f44 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f44:	3008      	adds	r0, #8
    3f46:	4b02      	ldr	r3, [pc, #8]	; (3f50 <pin_te_get+0xc>)
    3f48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3f4c:	0b40      	lsrs	r0, r0, #13
    3f4e:	4770      	bx	lr
    3f50:	2000005c 	.word	0x2000005c

00003f54 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3f54:	2200      	movs	r2, #0
    3f56:	e004      	b.n	3f62 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3f58:	f04f 33ff 	mov.w	r3, #4294967295
    3f5c:	4283      	cmp	r3, r0
    3f5e:	d00f      	beq.n	3f80 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3f60:	3201      	adds	r2, #1
    3f62:	2a1f      	cmp	r2, #31
    3f64:	d80a      	bhi.n	3f7c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3f66:	f102 0308 	add.w	r3, r2, #8
    3f6a:	4906      	ldr	r1, [pc, #24]	; (3f84 <handler_in_use+0x30>)
    3f6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3f70:	f413 7f80 	tst.w	r3, #256	; 0x100
    3f74:	d0f0      	beq.n	3f58 <handler_in_use+0x4>
    3f76:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3f7a:	e7ef      	b.n	3f5c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3f7c:	2000      	movs	r0, #0
    3f7e:	4770      	bx	lr
            return true;
    3f80:	2001      	movs	r0, #1
}
    3f82:	4770      	bx	lr
    3f84:	2000005c 	.word	0x2000005c

00003f88 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3f88:	2300      	movs	r3, #0
    3f8a:	b113      	cbz	r3, 3f92 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    3f8c:	f04f 30ff 	mov.w	r0, #4294967295
}
    3f90:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3f92:	4a07      	ldr	r2, [pc, #28]	; (3fb0 <find_handler+0x28>)
    3f94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3f98:	4282      	cmp	r2, r0
    3f9a:	d001      	beq.n	3fa0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3f9c:	3301      	adds	r3, #1
    3f9e:	e7f4      	b.n	3f8a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3fa0:	4a03      	ldr	r2, [pc, #12]	; (3fb0 <find_handler+0x28>)
    3fa2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3fa6:	6852      	ldr	r2, [r2, #4]
    3fa8:	428a      	cmp	r2, r1
    3faa:	d1f7      	bne.n	3f9c <find_handler+0x14>
            return i;
    3fac:	4618      	mov	r0, r3
    3fae:	4770      	bx	lr
    3fb0:	2000005c 	.word	0x2000005c

00003fb4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3fb4:	3008      	adds	r0, #8
    3fb6:	4b06      	ldr	r3, [pc, #24]	; (3fd0 <channel_handler_get+0x1c>)
    3fb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3fbc:	f410 7f80 	tst.w	r0, #256	; 0x100
    3fc0:	d004      	beq.n	3fcc <channel_handler_get+0x18>
    3fc2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    3fc6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3fca:	4770      	bx	lr
        return NULL;
    3fcc:	2000      	movs	r0, #0
}
    3fce:	4770      	bx	lr
    3fd0:	2000005c 	.word	0x2000005c

00003fd4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3fd4:	b570      	push	{r4, r5, r6, lr}
    3fd6:	4604      	mov	r4, r0
    3fd8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3fda:	f7ff ffeb 	bl	3fb4 <channel_handler_get>

    if (handler)
    3fde:	b120      	cbz	r0, 3fea <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3fe0:	6806      	ldr	r6, [r0, #0]
    3fe2:	6842      	ldr	r2, [r0, #4]
    3fe4:	4629      	mov	r1, r5
    3fe6:	4620      	mov	r0, r4
    3fe8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3fea:	4b04      	ldr	r3, [pc, #16]	; (3ffc <call_handler+0x28>)
    3fec:	689b      	ldr	r3, [r3, #8]
    3fee:	b123      	cbz	r3, 3ffa <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3ff0:	4a02      	ldr	r2, [pc, #8]	; (3ffc <call_handler+0x28>)
    3ff2:	68d2      	ldr	r2, [r2, #12]
    3ff4:	4629      	mov	r1, r5
    3ff6:	4620      	mov	r0, r4
    3ff8:	4798      	blx	r3
    }
}
    3ffa:	bd70      	pop	{r4, r5, r6, pc}
    3ffc:	2000005c 	.word	0x2000005c

00004000 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4000:	f100 0208 	add.w	r2, r0, #8
    4004:	4b0e      	ldr	r3, [pc, #56]	; (4040 <release_handler+0x40>)
    4006:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    400a:	f413 7f80 	tst.w	r3, #256	; 0x100
    400e:	d016      	beq.n	403e <release_handler+0x3e>
{
    4010:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4012:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4016:	4610      	mov	r0, r2
    4018:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    401c:	4a08      	ldr	r2, [pc, #32]	; (4040 <release_handler+0x40>)
    401e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    4022:	4620      	mov	r0, r4
    4024:	f7ff ff96 	bl	3f54 <handler_in_use>
    4028:	b100      	cbz	r0, 402c <release_handler+0x2c>
}
    402a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    402c:	4804      	ldr	r0, [pc, #16]	; (4040 <release_handler+0x40>)
    402e:	2300      	movs	r3, #0
    4030:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4034:	4621      	mov	r1, r4
    4036:	3054      	adds	r0, #84	; 0x54
    4038:	f7ff fe0e 	bl	3c58 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    403c:	e7f5      	b.n	402a <release_handler+0x2a>
    403e:	4770      	bx	lr
    4040:	2000005c 	.word	0x2000005c

00004044 <pin_handler_trigger_uninit>:
{
    4044:	b510      	push	{r4, lr}
    4046:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    4048:	f7ff ff5c 	bl	3f04 <pin_in_use_by_te>
    404c:	b140      	cbz	r0, 4060 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    404e:	4620      	mov	r0, r4
    4050:	f7ff ff78 	bl	3f44 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4054:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    4058:	4b06      	ldr	r3, [pc, #24]	; (4074 <pin_handler_trigger_uninit+0x30>)
    405a:	2200      	movs	r2, #0
    405c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    4060:	4620      	mov	r0, r4
    4062:	f7ff ffcd 	bl	4000 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4066:	3408      	adds	r4, #8
    4068:	4b03      	ldr	r3, [pc, #12]	; (4078 <pin_handler_trigger_uninit+0x34>)
    406a:	2200      	movs	r2, #0
    406c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    4070:	bd10      	pop	{r4, pc}
    4072:	bf00      	nop
    4074:	40006000 	.word	0x40006000
    4078:	2000005c 	.word	0x2000005c

0000407c <pin_handler_set>:
{
    407c:	b570      	push	{r4, r5, r6, lr}
    407e:	b082      	sub	sp, #8
    4080:	4606      	mov	r6, r0
    4082:	460c      	mov	r4, r1
    4084:	4615      	mov	r5, r2
    release_handler(pin);
    4086:	f7ff ffbb 	bl	4000 <release_handler>
    if (!handler)
    408a:	b324      	cbz	r4, 40d6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    408c:	4629      	mov	r1, r5
    408e:	4620      	mov	r0, r4
    4090:	f7ff ff7a 	bl	3f88 <find_handler>
    if (handler_id < 0)
    4094:	1e03      	subs	r3, r0, #0
    4096:	db13      	blt.n	40c0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    4098:	4a10      	ldr	r2, [pc, #64]	; (40dc <pin_handler_set+0x60>)
    409a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    409e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    40a2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    40a4:	025b      	lsls	r3, r3, #9
    40a6:	b29b      	uxth	r3, r3
    40a8:	f106 0008 	add.w	r0, r6, #8
    40ac:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    40b0:	430b      	orrs	r3, r1
    40b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    40b6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    40ba:	4809      	ldr	r0, [pc, #36]	; (40e0 <pin_handler_set+0x64>)
}
    40bc:	b002      	add	sp, #8
    40be:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    40c0:	f10d 0107 	add.w	r1, sp, #7
    40c4:	4807      	ldr	r0, [pc, #28]	; (40e4 <pin_handler_set+0x68>)
    40c6:	f7ff fd9f 	bl	3c08 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    40ca:	4b05      	ldr	r3, [pc, #20]	; (40e0 <pin_handler_set+0x64>)
    40cc:	4298      	cmp	r0, r3
    40ce:	d1f5      	bne.n	40bc <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    40d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    40d4:	e7e0      	b.n	4098 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    40d6:	4802      	ldr	r0, [pc, #8]	; (40e0 <pin_handler_set+0x64>)
    40d8:	e7f0      	b.n	40bc <pin_handler_set+0x40>
    40da:	bf00      	nop
    40dc:	2000005c 	.word	0x2000005c
    40e0:	0bad0000 	.word	0x0bad0000
    40e4:	200000b0 	.word	0x200000b0

000040e8 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    40e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ea:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    40ec:	2300      	movs	r3, #0
    40ee:	a801      	add	r0, sp, #4
    40f0:	e008      	b.n	4104 <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    40f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    40f6:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    40fa:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    40fe:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    4102:	3301      	adds	r3, #1
    4104:	2b00      	cmp	r3, #0
    4106:	d0f4      	beq.n	40f2 <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4108:	2500      	movs	r5, #0
    410a:	b39d      	cbz	r5, 4174 <port_event_handle+0x8c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    410c:	4b1e      	ldr	r3, [pc, #120]	; (4188 <port_event_handle+0xa0>)
    410e:	2200      	movs	r2, #0
    4110:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    4114:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    4118:	a801      	add	r0, sp, #4
    411a:	f003 fc13 	bl	7944 <latch_pending_read_and_check>
    411e:	2800      	cmp	r0, #0
    4120:	d1f2      	bne.n	4108 <port_event_handle+0x20>
}
    4122:	b003      	add	sp, #12
    4124:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4126:	fa90 f0a0 	rbit	r0, r0
    412a:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    412e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4132:	f100 0208 	add.w	r2, r0, #8
    4136:	4b15      	ldr	r3, [pc, #84]	; (418c <port_event_handle+0xa4>)
    4138:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    413c:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    413e:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4142:	af01      	add	r7, sp, #4
    4144:	2401      	movs	r4, #1
    4146:	fa04 f203 	lsl.w	r2, r4, r3
    414a:	5dbb      	ldrb	r3, [r7, r6]
    414c:	ea23 0302 	bic.w	r3, r3, r2
    4150:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    4152:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4156:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    415a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    415e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    4162:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4166:	f3c1 0182 	ubfx	r1, r1, #2, #3
    416a:	f003 fb9d 	bl	78a8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    416e:	40bc      	lsls	r4, r7
    4170:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
            while (latch[i])
    4174:	ab02      	add	r3, sp, #8
    4176:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    417a:	f853 0c04 	ldr.w	r0, [r3, #-4]
    417e:	2800      	cmp	r0, #0
    4180:	d1d1      	bne.n	4126 <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4182:	3501      	adds	r5, #1
    4184:	e7c1      	b.n	410a <port_event_handle+0x22>
    4186:	bf00      	nop
    4188:	40006000 	.word	0x40006000
    418c:	2000005c 	.word	0x2000005c

00004190 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    4190:	b538      	push	{r3, r4, r5, lr}
    4192:	4604      	mov	r4, r0
    while (mask)
    4194:	e018      	b.n	41c8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    4196:	fa94 f3a4 	rbit	r3, r4
    419a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    419e:	2201      	movs	r2, #1
    41a0:	409a      	lsls	r2, r3
    41a2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    41a6:	4a0a      	ldr	r2, [pc, #40]	; (41d0 <gpiote_evt_handle+0x40>)
    41a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    41ac:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    41b0:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    41b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    41b8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    41bc:	f003 fb6d 	bl	789a <gpiote_polarity_to_trigger>
    41c0:	4601      	mov	r1, r0
    41c2:	4628      	mov	r0, r5
    41c4:	f7ff ff06 	bl	3fd4 <call_handler>
    while (mask)
    41c8:	2c00      	cmp	r4, #0
    41ca:	d1e4      	bne.n	4196 <gpiote_evt_handle+0x6>
    }
}
    41cc:	bd38      	pop	{r3, r4, r5, pc}
    41ce:	bf00      	nop
    41d0:	40006000 	.word	0x40006000

000041d4 <nrfx_gpiote_input_configure>:
{
    41d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41d8:	4604      	mov	r4, r0
    41da:	4615      	mov	r5, r2
    41dc:	461e      	mov	r6, r3
    if (p_input_config)
    41de:	b369      	cbz	r1, 423c <nrfx_gpiote_input_configure+0x68>
    41e0:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    41e2:	f003 fb44 	bl	786e <pin_is_task_output>
    41e6:	2800      	cmp	r0, #0
    41e8:	f040 8096 	bne.w	4318 <nrfx_gpiote_input_configure+0x144>
    *p_pin = pin_number & 0x1F;
    41ec:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    41f0:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
    41f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    41f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    41fc:	2f00      	cmp	r7, #0
    41fe:	d03f      	beq.n	4280 <nrfx_gpiote_input_configure+0xac>
    4200:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4202:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    4206:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    420a:	2f00      	cmp	r7, #0
    420c:	d03a      	beq.n	4284 <nrfx_gpiote_input_configure+0xb0>
    420e:	7839      	ldrb	r1, [r7, #0]
    4210:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4212:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    4214:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4218:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    421c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4220:	4a41      	ldr	r2, [pc, #260]	; (4328 <nrfx_gpiote_input_configure+0x154>)
    4222:	f104 0108 	add.w	r1, r4, #8
    4226:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    422a:	f023 0302 	bic.w	r3, r3, #2
    422e:	b29b      	uxth	r3, r3
    4230:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4234:	f043 0301 	orr.w	r3, r3, #1
    4238:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    423c:	b1bd      	cbz	r5, 426e <nrfx_gpiote_input_configure+0x9a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    423e:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4240:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    4244:	4620      	mov	r0, r4
    4246:	f7ff fe73 	bl	3f30 <pin_is_output>
    424a:	b1e8      	cbz	r0, 4288 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    424c:	f1b8 0f00 	cmp.w	r8, #0
    4250:	d164      	bne.n	431c <nrfx_gpiote_input_configure+0x148>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4252:	4a35      	ldr	r2, [pc, #212]	; (4328 <nrfx_gpiote_input_configure+0x154>)
    4254:	f104 0108 	add.w	r1, r4, #8
    4258:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    425c:	f023 031c 	bic.w	r3, r3, #28
    4260:	b29b      	uxth	r3, r3
    4262:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4266:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    426a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    426e:	2e00      	cmp	r6, #0
    4270:	d058      	beq.n	4324 <nrfx_gpiote_input_configure+0x150>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4272:	6872      	ldr	r2, [r6, #4]
    4274:	6831      	ldr	r1, [r6, #0]
    4276:	4620      	mov	r0, r4
    4278:	f7ff ff00 	bl	407c <pin_handler_set>
}
    427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4280:	2100      	movs	r1, #0
    4282:	e7be      	b.n	4202 <nrfx_gpiote_input_configure+0x2e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4284:	2100      	movs	r1, #0
    4286:	e7c4      	b.n	4212 <nrfx_gpiote_input_configure+0x3e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4288:	4a27      	ldr	r2, [pc, #156]	; (4328 <nrfx_gpiote_input_configure+0x154>)
    428a:	f104 0108 	add.w	r1, r4, #8
    428e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4292:	f023 0320 	bic.w	r3, r3, #32
    4296:	04db      	lsls	r3, r3, #19
    4298:	0cdb      	lsrs	r3, r3, #19
    429a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    429e:	f1b8 0f00 	cmp.w	r8, #0
    42a2:	d0d6      	beq.n	4252 <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    42a4:	2f03      	cmp	r7, #3
    42a6:	d83b      	bhi.n	4320 <nrfx_gpiote_input_configure+0x14c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    42a8:	686b      	ldr	r3, [r5, #4]
    42aa:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    42ac:	b937      	cbnz	r7, 42bc <nrfx_gpiote_input_configure+0xe8>
    p_reg->CONFIG[idx] = 0;
    42ae:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    42b2:	4b1e      	ldr	r3, [pc, #120]	; (432c <nrfx_gpiote_input_configure+0x158>)
    42b4:	2200      	movs	r2, #0
    42b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    42ba:	e7ca      	b.n	4252 <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    42bc:	4638      	mov	r0, r7
    42be:	f003 faed 	bl	789c <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    42c2:	4b1a      	ldr	r3, [pc, #104]	; (432c <nrfx_gpiote_input_configure+0x158>)
    42c4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    42c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    42cc:	f021 0103 	bic.w	r1, r1, #3
    42d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    42d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    42d8:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    42dc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    42e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    42e4:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    42e8:	0221      	lsls	r1, r4, #8
    42ea:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    42ee:	0400      	lsls	r0, r0, #16
    42f0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    42f4:	4301      	orrs	r1, r0
    42f6:	ea4c 0101 	orr.w	r1, ip, r1
    42fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    42fe:	036b      	lsls	r3, r5, #13
    4300:	b29b      	uxth	r3, r3
    4302:	4a09      	ldr	r2, [pc, #36]	; (4328 <nrfx_gpiote_input_configure+0x154>)
    4304:	f104 0108 	add.w	r1, r4, #8
    4308:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    430c:	4303      	orrs	r3, r0
    430e:	f043 0320 	orr.w	r3, r3, #32
    4312:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    4316:	e79c      	b.n	4252 <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    4318:	4805      	ldr	r0, [pc, #20]	; (4330 <nrfx_gpiote_input_configure+0x15c>)
    431a:	e7af      	b.n	427c <nrfx_gpiote_input_configure+0xa8>
                return NRFX_ERROR_INVALID_PARAM;
    431c:	4804      	ldr	r0, [pc, #16]	; (4330 <nrfx_gpiote_input_configure+0x15c>)
    431e:	e7ad      	b.n	427c <nrfx_gpiote_input_configure+0xa8>
                    return NRFX_ERROR_INVALID_PARAM;
    4320:	4803      	ldr	r0, [pc, #12]	; (4330 <nrfx_gpiote_input_configure+0x15c>)
    4322:	e7ab      	b.n	427c <nrfx_gpiote_input_configure+0xa8>
        err = NRFX_SUCCESS;
    4324:	4803      	ldr	r0, [pc, #12]	; (4334 <nrfx_gpiote_input_configure+0x160>)
    4326:	e7a9      	b.n	427c <nrfx_gpiote_input_configure+0xa8>
    4328:	2000005c 	.word	0x2000005c
    432c:	40006000 	.word	0x40006000
    4330:	0bad0004 	.word	0x0bad0004
    4334:	0bad0000 	.word	0x0bad0000

00004338 <nrfx_gpiote_output_configure>:
{
    4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433a:	4604      	mov	r4, r0
    433c:	4616      	mov	r6, r2
    if (p_config)
    433e:	2900      	cmp	r1, #0
    4340:	d04d      	beq.n	43de <nrfx_gpiote_output_configure+0xa6>
    4342:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4344:	f003 faa2 	bl	788c <pin_is_input>
    4348:	b128      	cbz	r0, 4356 <nrfx_gpiote_output_configure+0x1e>
    434a:	4620      	mov	r0, r4
    434c:	f7ff fdda 	bl	3f04 <pin_in_use_by_te>
    4350:	2800      	cmp	r0, #0
    4352:	f040 8097 	bne.w	4484 <nrfx_gpiote_output_configure+0x14c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4356:	4620      	mov	r0, r4
    4358:	f7ff fdde 	bl	3f18 <pin_has_trigger>
    435c:	b118      	cbz	r0, 4366 <nrfx_gpiote_output_configure+0x2e>
    435e:	786b      	ldrb	r3, [r5, #1]
    4360:	2b01      	cmp	r3, #1
    4362:	f000 8091 	beq.w	4488 <nrfx_gpiote_output_configure+0x150>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4366:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
    4368:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    436c:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
    4370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4374:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4378:	1c6f      	adds	r7, r5, #1
    437a:	d04c      	beq.n	4416 <nrfx_gpiote_output_configure+0xde>
    437c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    437e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4382:	2800      	cmp	r0, #0
    4384:	d049      	beq.n	441a <nrfx_gpiote_output_configure+0xe2>
    4386:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    438a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    438e:	2d00      	cmp	r5, #0
    4390:	d046      	beq.n	4420 <nrfx_gpiote_output_configure+0xe8>
    4392:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4396:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    439a:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    439e:	2f00      	cmp	r7, #0
    43a0:	d041      	beq.n	4426 <nrfx_gpiote_output_configure+0xee>
    43a2:	786b      	ldrb	r3, [r5, #1]
    43a4:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    43a6:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    43aa:	2800      	cmp	r0, #0
    43ac:	d03d      	beq.n	442a <nrfx_gpiote_output_configure+0xf2>
    43ae:	78a8      	ldrb	r0, [r5, #2]
    43b0:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    43b2:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    43b4:	2d00      	cmp	r5, #0
    43b6:	d03a      	beq.n	442e <nrfx_gpiote_output_configure+0xf6>
    43b8:	7828      	ldrb	r0, [r5, #0]
    43ba:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    43bc:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    43be:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    43c0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    43c4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    43c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    43cc:	4a31      	ldr	r2, [pc, #196]	; (4494 <nrfx_gpiote_output_configure+0x15c>)
    43ce:	f104 0108 	add.w	r1, r4, #8
    43d2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    43d6:	f043 0303 	orr.w	r3, r3, #3
    43da:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    43de:	2e00      	cmp	r6, #0
    43e0:	d054      	beq.n	448c <nrfx_gpiote_output_configure+0x154>
        if (pin_is_input(pin))
    43e2:	4620      	mov	r0, r4
    43e4:	f003 fa52 	bl	788c <pin_is_input>
    43e8:	2800      	cmp	r0, #0
    43ea:	d151      	bne.n	4490 <nrfx_gpiote_output_configure+0x158>
        uint32_t ch = p_task_config->task_ch;
    43ec:	7833      	ldrb	r3, [r6, #0]
    p_reg->CONFIG[idx] = 0;
    43ee:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    43f2:	4a29      	ldr	r2, [pc, #164]	; (4498 <nrfx_gpiote_output_configure+0x160>)
    43f4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    43f8:	4926      	ldr	r1, [pc, #152]	; (4494 <nrfx_gpiote_output_configure+0x15c>)
    43fa:	f104 0008 	add.w	r0, r4, #8
    43fe:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    4402:	f022 0220 	bic.w	r2, r2, #32
    4406:	04d2      	lsls	r2, r2, #19
    4408:	0cd2      	lsrs	r2, r2, #19
    440a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    440e:	7872      	ldrb	r2, [r6, #1]
    4410:	b97a      	cbnz	r2, 4432 <nrfx_gpiote_output_configure+0xfa>
    return NRFX_SUCCESS;
    4412:	4822      	ldr	r0, [pc, #136]	; (449c <nrfx_gpiote_output_configure+0x164>)
}
    4414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4416:	2300      	movs	r3, #0
    4418:	e7b1      	b.n	437e <nrfx_gpiote_output_configure+0x46>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    441a:	f04f 0c00 	mov.w	ip, #0
    441e:	e7b4      	b.n	438a <nrfx_gpiote_output_configure+0x52>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4420:	f04f 0c00 	mov.w	ip, #0
    4424:	e7b7      	b.n	4396 <nrfx_gpiote_output_configure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4426:	2300      	movs	r3, #0
    4428:	e7bd      	b.n	43a6 <nrfx_gpiote_output_configure+0x6e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    442a:	2000      	movs	r0, #0
    442c:	e7c1      	b.n	43b2 <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    442e:	2000      	movs	r0, #0
    4430:	e7c4      	b.n	43bc <nrfx_gpiote_output_configure+0x84>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4432:	78b7      	ldrb	r7, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4434:	4818      	ldr	r0, [pc, #96]	; (4498 <nrfx_gpiote_output_configure+0x160>)
    4436:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    443a:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    443e:	f421 1198 	bic.w	r1, r1, #1245184	; 0x130000
    4442:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    4446:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    444a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    444e:	0221      	lsls	r1, r4, #8
    4450:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4454:	0412      	lsls	r2, r2, #16
    4456:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    445a:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    445c:	0539      	lsls	r1, r7, #20
    445e:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4462:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4464:	4332      	orrs	r2, r6
    4466:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    446a:	035b      	lsls	r3, r3, #13
    446c:	b29b      	uxth	r3, r3
    446e:	4a09      	ldr	r2, [pc, #36]	; (4494 <nrfx_gpiote_output_configure+0x15c>)
    4470:	3408      	adds	r4, #8
    4472:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    4476:	430b      	orrs	r3, r1
    4478:	f043 0320 	orr.w	r3, r3, #32
    447c:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    4480:	4806      	ldr	r0, [pc, #24]	; (449c <nrfx_gpiote_output_configure+0x164>)
    4482:	e7c7      	b.n	4414 <nrfx_gpiote_output_configure+0xdc>
    4484:	4806      	ldr	r0, [pc, #24]	; (44a0 <nrfx_gpiote_output_configure+0x168>)
    4486:	e7c5      	b.n	4414 <nrfx_gpiote_output_configure+0xdc>
    4488:	4805      	ldr	r0, [pc, #20]	; (44a0 <nrfx_gpiote_output_configure+0x168>)
    448a:	e7c3      	b.n	4414 <nrfx_gpiote_output_configure+0xdc>
    448c:	4803      	ldr	r0, [pc, #12]	; (449c <nrfx_gpiote_output_configure+0x164>)
    448e:	e7c1      	b.n	4414 <nrfx_gpiote_output_configure+0xdc>
            return NRFX_ERROR_INVALID_PARAM;
    4490:	4803      	ldr	r0, [pc, #12]	; (44a0 <nrfx_gpiote_output_configure+0x168>)
    4492:	e7bf      	b.n	4414 <nrfx_gpiote_output_configure+0xdc>
    4494:	2000005c 	.word	0x2000005c
    4498:	40006000 	.word	0x40006000
    449c:	0bad0000 	.word	0x0bad0000
    44a0:	0bad0004 	.word	0x0bad0004

000044a4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    44a4:	4b01      	ldr	r3, [pc, #4]	; (44ac <nrfx_gpiote_global_callback_set+0x8>)
    44a6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    44a8:	60d9      	str	r1, [r3, #12]
}
    44aa:	4770      	bx	lr
    44ac:	2000005c 	.word	0x2000005c

000044b0 <nrfx_gpiote_channel_get>:
{
    44b0:	b538      	push	{r3, r4, r5, lr}
    44b2:	4604      	mov	r4, r0
    44b4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    44b6:	f7ff fd25 	bl	3f04 <pin_in_use_by_te>
    44ba:	b140      	cbz	r0, 44ce <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    44bc:	f104 0008 	add.w	r0, r4, #8
    44c0:	4b04      	ldr	r3, [pc, #16]	; (44d4 <nrfx_gpiote_channel_get+0x24>)
    44c2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    44c6:	0b5b      	lsrs	r3, r3, #13
    44c8:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    44ca:	4803      	ldr	r0, [pc, #12]	; (44d8 <nrfx_gpiote_channel_get+0x28>)
}
    44cc:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    44ce:	4803      	ldr	r0, [pc, #12]	; (44dc <nrfx_gpiote_channel_get+0x2c>)
    44d0:	e7fc      	b.n	44cc <nrfx_gpiote_channel_get+0x1c>
    44d2:	bf00      	nop
    44d4:	2000005c 	.word	0x2000005c
    44d8:	0bad0000 	.word	0x0bad0000
    44dc:	0bad0004 	.word	0x0bad0004

000044e0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    44e0:	4b10      	ldr	r3, [pc, #64]	; (4524 <nrfx_gpiote_init+0x44>)
    44e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    44e6:	b10b      	cbz	r3, 44ec <nrfx_gpiote_init+0xc>
        return err_code;
    44e8:	480f      	ldr	r0, [pc, #60]	; (4528 <nrfx_gpiote_init+0x48>)
}
    44ea:	4770      	bx	lr
{
    44ec:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    44ee:	4c0d      	ldr	r4, [pc, #52]	; (4524 <nrfx_gpiote_init+0x44>)
    44f0:	2240      	movs	r2, #64	; 0x40
    44f2:	2100      	movs	r1, #0
    44f4:	f104 0010 	add.w	r0, r4, #16
    44f8:	f002 fd33 	bl	6f62 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    44fc:	2006      	movs	r0, #6
    44fe:	f7fd fcf7 	bl	1ef0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4502:	4b0a      	ldr	r3, [pc, #40]	; (452c <nrfx_gpiote_init+0x4c>)
    4504:	2200      	movs	r2, #0
    4506:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    450a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    450e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4512:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4516:	2301      	movs	r3, #1
    4518:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    451c:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
    451e:	4804      	ldr	r0, [pc, #16]	; (4530 <nrfx_gpiote_init+0x50>)
}
    4520:	bd10      	pop	{r4, pc}
    4522:	bf00      	nop
    4524:	2000005c 	.word	0x2000005c
    4528:	0bad0005 	.word	0x0bad0005
    452c:	40006000 	.word	0x40006000
    4530:	0bad0000 	.word	0x0bad0000

00004534 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4534:	4b03      	ldr	r3, [pc, #12]	; (4544 <nrfx_gpiote_is_init+0x10>)
    4536:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    453a:	3800      	subs	r0, #0
    453c:	bf18      	it	ne
    453e:	2001      	movne	r0, #1
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	2000005c 	.word	0x2000005c

00004548 <nrfx_gpiote_channel_free>:
{
    4548:	b508      	push	{r3, lr}
    454a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    454c:	4801      	ldr	r0, [pc, #4]	; (4554 <nrfx_gpiote_channel_free+0xc>)
    454e:	f7ff fb83 	bl	3c58 <nrfx_flag32_free>
}
    4552:	bd08      	pop	{r3, pc}
    4554:	200000ac 	.word	0x200000ac

00004558 <nrfx_gpiote_channel_alloc>:
{
    4558:	b508      	push	{r3, lr}
    455a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    455c:	4801      	ldr	r0, [pc, #4]	; (4564 <nrfx_gpiote_channel_alloc+0xc>)
    455e:	f7ff fb53 	bl	3c08 <nrfx_flag32_alloc>
}
    4562:	bd08      	pop	{r3, pc}
    4564:	200000ac 	.word	0x200000ac

00004568 <nrfx_gpiote_trigger_enable>:
{
    4568:	b538      	push	{r3, r4, r5, lr}
    456a:	4604      	mov	r4, r0
    456c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    456e:	f7ff fcc9 	bl	3f04 <pin_in_use_by_te>
    4572:	b308      	cbz	r0, 45b8 <nrfx_gpiote_trigger_enable+0x50>
    4574:	4620      	mov	r0, r4
    4576:	f003 f989 	bl	788c <pin_is_input>
    457a:	b1e8      	cbz	r0, 45b8 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    457c:	4620      	mov	r0, r4
    457e:	f7ff fce1 	bl	3f44 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4582:	0083      	lsls	r3, r0, #2
    4584:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    4588:	b29b      	uxth	r3, r3
    458a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    458e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4592:	2200      	movs	r2, #0
    4594:	601a      	str	r2, [r3, #0]
    4596:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4598:	4a1d      	ldr	r2, [pc, #116]	; (4610 <nrfx_gpiote_trigger_enable+0xa8>)
    459a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    459e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    45a2:	f043 0301 	orr.w	r3, r3, #1
    45a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    45aa:	b365      	cbz	r5, 4606 <nrfx_gpiote_trigger_enable+0x9e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    45ac:	2301      	movs	r3, #1
    45ae:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    45b2:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    45b6:	e026      	b.n	4606 <nrfx_gpiote_trigger_enable+0x9e>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    45b8:	f104 0308 	add.w	r3, r4, #8
    45bc:	4a15      	ldr	r2, [pc, #84]	; (4614 <nrfx_gpiote_trigger_enable+0xac>)
    45be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    45c2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    45c6:	2b04      	cmp	r3, #4
    45c8:	d00e      	beq.n	45e8 <nrfx_gpiote_trigger_enable+0x80>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    45ca:	2b05      	cmp	r3, #5
    45cc:	d01c      	beq.n	4608 <nrfx_gpiote_trigger_enable+0xa0>
    *p_pin = pin_number & 0x1F;
    45ce:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
    45d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    45d6:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    45da:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    45de:	f013 0f01 	tst.w	r3, #1
    45e2:	d013      	beq.n	460c <nrfx_gpiote_trigger_enable+0xa4>
    45e4:	2103      	movs	r1, #3
    45e6:	e000      	b.n	45ea <nrfx_gpiote_trigger_enable+0x82>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    45e8:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
    45ea:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    45ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    45f2:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    45f6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    45fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    45fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4602:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    4606:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4608:	2102      	movs	r1, #2
    460a:	e7ee      	b.n	45ea <nrfx_gpiote_trigger_enable+0x82>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    460c:	2102      	movs	r1, #2
    460e:	e7ec      	b.n	45ea <nrfx_gpiote_trigger_enable+0x82>
    4610:	40006000 	.word	0x40006000
    4614:	2000005c 	.word	0x2000005c

00004618 <nrfx_gpiote_trigger_disable>:
{
    4618:	b510      	push	{r4, lr}
    461a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    461c:	f7ff fc72 	bl	3f04 <pin_in_use_by_te>
    4620:	b1a0      	cbz	r0, 464c <nrfx_gpiote_trigger_disable+0x34>
    4622:	4620      	mov	r0, r4
    4624:	f003 f932 	bl	788c <pin_is_input>
    4628:	b180      	cbz	r0, 464c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    462a:	4620      	mov	r0, r4
    462c:	f7ff fc8a 	bl	3f44 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4630:	2201      	movs	r2, #1
    4632:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    4634:	4b0c      	ldr	r3, [pc, #48]	; (4668 <nrfx_gpiote_trigger_disable+0x50>)
    4636:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    463a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    463e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    4642:	f022 0203 	bic.w	r2, r2, #3
    4646:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    464a:	e00b      	b.n	4664 <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    464c:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4650:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4654:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4658:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    465c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    4660:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    4664:	bd10      	pop	{r4, pc}
    4666:	bf00      	nop
    4668:	40006000 	.word	0x40006000

0000466c <nrfx_gpiote_pin_uninit>:
{
    466c:	b510      	push	{r4, lr}
    466e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4670:	f7ff fc3e 	bl	3ef0 <pin_in_use>
    4674:	b908      	cbnz	r0, 467a <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    4676:	4809      	ldr	r0, [pc, #36]	; (469c <nrfx_gpiote_pin_uninit+0x30>)
}
    4678:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    467a:	4620      	mov	r0, r4
    467c:	f7ff ffcc 	bl	4618 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4680:	4620      	mov	r0, r4
    4682:	f7ff fcdf 	bl	4044 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    4686:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    468a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    468e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4692:	2202      	movs	r2, #2
    4694:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    4698:	4801      	ldr	r0, [pc, #4]	; (46a0 <nrfx_gpiote_pin_uninit+0x34>)
    469a:	e7ed      	b.n	4678 <nrfx_gpiote_pin_uninit+0xc>
    469c:	0bad0004 	.word	0x0bad0004
    46a0:	0bad0000 	.word	0x0bad0000

000046a4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    46a4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    46a6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    46a8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    46ac:	2100      	movs	r1, #0
    uint32_t status = 0;
    46ae:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    46b0:	e003      	b.n	46ba <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    46b2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    46b4:	3304      	adds	r3, #4
    46b6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    46b8:	3101      	adds	r1, #1
    46ba:	2907      	cmp	r1, #7
    46bc:	d814      	bhi.n	46e8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46be:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    46c2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    46c6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    46c8:	2a00      	cmp	r2, #0
    46ca:	d0f2      	beq.n	46b2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    46cc:	4a0c      	ldr	r2, [pc, #48]	; (4700 <nrfx_gpiote_irq_handler+0x5c>)
    46ce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    46d2:	4210      	tst	r0, r2
    46d4:	d0ed      	beq.n	46b2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    46d6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    46da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    46de:	2500      	movs	r5, #0
    46e0:	6015      	str	r5, [r2, #0]
    46e2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    46e4:	4304      	orrs	r4, r0
    46e6:	e7e4      	b.n	46b2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46e8:	4b05      	ldr	r3, [pc, #20]	; (4700 <nrfx_gpiote_irq_handler+0x5c>)
    46ea:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    46ee:	b91b      	cbnz	r3, 46f8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    46f0:	4620      	mov	r0, r4
    46f2:	f7ff fd4d 	bl	4190 <gpiote_evt_handle>
}
    46f6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    46f8:	f7ff fcf6 	bl	40e8 <port_event_handle>
    46fc:	e7f8      	b.n	46f0 <nrfx_gpiote_irq_handler+0x4c>
    46fe:	bf00      	nop
    4700:	40006000 	.word	0x40006000

00004704 <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    4704:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4706:	f010 0f01 	tst.w	r0, #1
    470a:	d108      	bne.n	471e <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    470c:	4806      	ldr	r0, [pc, #24]	; (4728 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    470e:	f013 0f02 	tst.w	r3, #2
    4712:	d000      	beq.n	4716 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4714:	4805      	ldr	r0, [pc, #20]	; (472c <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4716:	f013 0f04 	tst.w	r3, #4
    471a:	d102      	bne.n	4722 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    471c:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    471e:	4804      	ldr	r0, [pc, #16]	; (4730 <twi_process_error+0x2c>)
    4720:	e7f5      	b.n	470e <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4722:	4804      	ldr	r0, [pc, #16]	; (4734 <twi_process_error+0x30>)
    return ret;
    4724:	e7fa      	b.n	471c <twi_process_error+0x18>
    4726:	bf00      	nop
    4728:	0bad0001 	.word	0x0bad0001
    472c:	0bae0001 	.word	0x0bae0001
    4730:	0bae0000 	.word	0x0bae0000
    4734:	0bae0002 	.word	0x0bae0002

00004738 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    4738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    473c:	4605      	mov	r5, r0
    473e:	460c      	mov	r4, r1
    4740:	4616      	mov	r6, r2
    4742:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    4744:	2300      	movs	r3, #0
    4746:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    474a:	6853      	ldr	r3, [r2, #4]
    474c:	b133      	cbz	r3, 475c <twim_xfer+0x24>
    474e:	68d3      	ldr	r3, [r2, #12]
    4750:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    4754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4758:	f040 8131 	bne.w	49be <twim_xfer+0x286>
    p_reg->INTENCLR = mask;
    475c:	4b9c      	ldr	r3, [pc, #624]	; (49d0 <twim_xfer+0x298>)
    475e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
    4762:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    4766:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    476a:	2b00      	cmp	r3, #0
    476c:	d136      	bne.n	47dc <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    476e:	f017 0f14 	tst.w	r7, #20
    4772:	bf0c      	ite	eq
    4774:	2301      	moveq	r3, #1
    4776:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    4778:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
    477c:	f105 0c0c 	add.w	ip, r5, #12
    4780:	46b6      	mov	lr, r6
    4782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    478a:	f8de 3000 	ldr.w	r3, [lr]
    478e:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    4792:	f3c7 1300 	ubfx	r3, r7, #4, #1
    4796:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
    479a:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    479c:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    479e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47a2:	2300      	movs	r3, #0
    47a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    47a8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    47ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    47b0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    47b4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    47b8:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    47bc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    47c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
    47c4:	4639      	mov	r1, r7
    47c6:	4620      	mov	r0, r4
    47c8:	f003 f943 	bl	7a52 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
    47cc:	7833      	ldrb	r3, [r6, #0]
    47ce:	2b03      	cmp	r3, #3
    47d0:	f200 80a8 	bhi.w	4924 <twim_xfer+0x1ec>
    47d4:	e8df f003 	tbb	[pc, r3]
    47d8:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    47dc:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    47de:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    47e2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 49d4 <twim_xfer+0x29c>
    47e6:	e081      	b.n	48ec <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    47e8:	6933      	ldr	r3, [r6, #16]
    47ea:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    47ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    47f2:	f040 80e7 	bne.w	49c4 <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
    47f6:	f44f 7380 	mov.w	r3, #256	; 0x100
    47fa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    47fe:	68f2      	ldr	r2, [r6, #12]
    4800:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4802:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4806:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    480a:	2300      	movs	r3, #0
    480c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    4810:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4814:	2301      	movs	r3, #1
    4816:	6223      	str	r3, [r4, #32]
    4818:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    481a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    481e:	2b00      	cmp	r3, #0
    4820:	d0fb      	beq.n	481a <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4822:	2300      	movs	r3, #0
    4824:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    4828:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    482c:	6932      	ldr	r2, [r6, #16]
    482e:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4830:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4834:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    4838:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    483c:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    483e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    4840:	f8df 9194 	ldr.w	r9, [pc, #404]	; 49d8 <twim_xfer+0x2a0>
        break;
    4844:	e032      	b.n	48ac <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4846:	68f2      	ldr	r2, [r6, #12]
    4848:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    484a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    484e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    4852:	6933      	ldr	r3, [r6, #16]
    4854:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    4858:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    485c:	f040 80b5 	bne.w	49ca <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    4860:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4862:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4866:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    486a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    486e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4872:	2302      	movs	r3, #2
    4874:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4876:	2301      	movs	r3, #1
    4878:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    487a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    487c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 49d8 <twim_xfer+0x2a0>
}
    4880:	e014      	b.n	48ac <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4882:	68f2      	ldr	r2, [r6, #12]
    4884:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4886:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    488a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    488e:	f017 0f20 	tst.w	r7, #32
    4892:	d02e      	beq.n	48f2 <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
    4894:	f44f 7380 	mov.w	r3, #256	; 0x100
    4898:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    489c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    48a0:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48a2:	2301      	movs	r3, #1
    48a4:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    48a6:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    48a8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 49d8 <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    48ac:	f017 0f08 	tst.w	r7, #8
    48b0:	d107      	bne.n	48c2 <twim_xfer+0x18a>
    48b2:	7832      	ldrb	r2, [r6, #0]
    48b4:	2a03      	cmp	r2, #3
    48b6:	d004      	beq.n	48c2 <twim_xfer+0x18a>
    48b8:	2201      	movs	r2, #1
    48ba:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
    48bc:	6873      	ldr	r3, [r6, #4]
    48be:	b903      	cbnz	r3, 48c2 <twim_xfer+0x18a>
    48c0:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
    48c2:	682b      	ldr	r3, [r5, #0]
    48c4:	b393      	cbz	r3, 492c <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    48c6:	f017 0f04 	tst.w	r7, #4
    48ca:	d001      	beq.n	48d0 <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
    48cc:	2300      	movs	r3, #0
    48ce:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    48d0:	f017 0f40 	tst.w	r7, #64	; 0x40
    48d4:	d103      	bne.n	48de <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    48d6:	68ab      	ldr	r3, [r5, #8]
    48d8:	f043 0302 	orr.w	r3, r3, #2
    48dc:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    48de:	68ab      	ldr	r3, [r5, #8]
    48e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    48e4:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    48e6:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    48e8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
    48ec:	4648      	mov	r0, r9
    48ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
    48f2:	f44f 7300 	mov.w	r3, #512	; 0x200
    48f6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    48fa:	2302      	movs	r3, #2
    48fc:	60ab      	str	r3, [r5, #8]
    48fe:	e7d0      	b.n	48a2 <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    4900:	68f2      	ldr	r2, [r6, #12]
    4902:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4904:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4908:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    490c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4910:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4914:	2302      	movs	r3, #2
    4916:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4918:	2301      	movs	r3, #1
    491a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    491c:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    491e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 49d8 <twim_xfer+0x2a0>
}
    4922:	e7c3      	b.n	48ac <twim_xfer+0x174>
    switch (p_xfer_desc->type)
    4924:	2308      	movs	r3, #8
    4926:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 49dc <twim_xfer+0x2a4>
    492a:	e7bf      	b.n	48ac <twim_xfer+0x174>
        bool transmission_finished = false;
    492c:	4643      	mov	r3, r8
    492e:	e000      	b.n	4932 <twim_xfer+0x1fa>
        } while (!transmission_finished);
    4930:	bb6b      	cbnz	r3, 498e <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4932:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    4936:	b102      	cbz	r2, 493a <twim_xfer+0x202>
                transmission_finished = true;
    4938:	2301      	movs	r3, #1
    493a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    493e:	b12a      	cbz	r2, 494c <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4940:	2300      	movs	r3, #0
    4942:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4946:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    494a:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    494c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    4950:	2a00      	cmp	r2, #0
    4952:	d0ed      	beq.n	4930 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4954:	2200      	movs	r2, #0
    4956:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    495a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    495e:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    4962:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    4966:	b112      	cbz	r2, 496e <twim_xfer+0x236>
    4968:	f411 7f00 	tst.w	r1, #512	; 0x200
    496c:	d103      	bne.n	4976 <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    496e:	2301      	movs	r3, #1
    4970:	6223      	str	r3, [r4, #32]
    4972:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
    4974:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    4976:	2a00      	cmp	r2, #0
    4978:	d0da      	beq.n	4930 <twim_xfer+0x1f8>
    497a:	f411 7f80 	tst.w	r1, #256	; 0x100
    497e:	d0d7      	beq.n	4930 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4980:	2300      	movs	r3, #0
    4982:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4986:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    498a:	4643      	mov	r3, r8
    498c:	e7d1      	b.n	4932 <twim_xfer+0x1fa>
    uint32_t error_source = p_reg->ERRORSRC;
    498e:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4992:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    4996:	2300      	movs	r3, #0
    4998:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
    499c:	b118      	cbz	r0, 49a6 <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
    499e:	f7ff feb1 	bl	4704 <twi_process_error>
    49a2:	4681      	mov	r9, r0
    49a4:	e7a2      	b.n	48ec <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    49a6:	f017 0f40 	tst.w	r7, #64	; 0x40
    49aa:	d19f      	bne.n	48ec <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
    49ac:	4629      	mov	r1, r5
    49ae:	4620      	mov	r0, r4
    49b0:	f002 ffe1 	bl	7976 <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    49b4:	2800      	cmp	r0, #0
    49b6:	d199      	bne.n	48ec <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
    49b8:	f8df 9024 	ldr.w	r9, [pc, #36]	; 49e0 <twim_xfer+0x2a8>
    49bc:	e796      	b.n	48ec <twim_xfer+0x1b4>
        return err_code;
    49be:	f8df 9024 	ldr.w	r9, [pc, #36]	; 49e4 <twim_xfer+0x2ac>
    49c2:	e793      	b.n	48ec <twim_xfer+0x1b4>
            return err_code;
    49c4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 49e4 <twim_xfer+0x2ac>
    49c8:	e790      	b.n	48ec <twim_xfer+0x1b4>
            return err_code;
    49ca:	f8df 9018 	ldr.w	r9, [pc, #24]	; 49e4 <twim_xfer+0x2ac>
    49ce:	e78d      	b.n	48ec <twim_xfer+0x1b4>
    49d0:	019c0202 	.word	0x019c0202
    49d4:	0bad000b 	.word	0x0bad000b
    49d8:	0bad0000 	.word	0x0bad0000
    49dc:	0bad0004 	.word	0x0bad0004
    49e0:	0bad0001 	.word	0x0bad0001
    49e4:	0bad000a 	.word	0x0bad000a

000049e8 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    49e8:	b530      	push	{r4, r5, lr}
    49ea:	b087      	sub	sp, #28
    49ec:	4604      	mov	r4, r0
    49ee:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49f0:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    49f4:	b143      	cbz	r3, 4a08 <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49f6:	2300      	movs	r3, #0
    49f8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    49fc:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a00:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4a04:	2b00      	cmp	r3, #0
    4a06:	d061      	beq.n	4acc <twim_irq_handler+0xe4>
    4a08:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d07d      	beq.n	4b0c <twim_irq_handler+0x124>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a10:	2300      	movs	r3, #0
    4a12:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4a16:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    4a1a:	6a2b      	ldr	r3, [r5, #32]
    4a1c:	f013 0f40 	tst.w	r3, #64	; 0x40
    4a20:	d103      	bne.n	4a2a <twim_irq_handler+0x42>
    4a22:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4a26:	2b00      	cmp	r3, #0
    4a28:	d067      	beq.n	4afa <twim_irq_handler+0x112>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    4a2a:	6a2b      	ldr	r3, [r5, #32]
    4a2c:	f013 0f04 	tst.w	r3, #4
    4a30:	d130      	bne.n	4a94 <twim_irq_handler+0xac>
        {
            event.xfer_desc = p_cb->xfer_desc;
    4a32:	f10d 0c04 	add.w	ip, sp, #4
    4a36:	f105 0e0c 	add.w	lr, r5, #12
    4a3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4a3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4a42:	f8de 3000 	ldr.w	r3, [lr]
    4a46:	f8cc 3000 	str.w	r3, [ip]
    4a4a:	2300      	movs	r3, #0
    4a4c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    4a50:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    4a54:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    4a58:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
    4a5c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4a60:	b113      	cbz	r3, 4a68 <twim_irq_handler+0x80>
    4a62:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4a66:	b1ab      	cbz	r3, 4a94 <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
    4a68:	2300      	movs	r3, #0
    4a6a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
    4a6e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4a70:	4b52      	ldr	r3, [pc, #328]	; (4bbc <twim_irq_handler+0x1d4>)
    4a72:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4a76:	0b22      	lsrs	r2, r4, #12
    4a78:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	db09      	blt.n	4a94 <twim_irq_handler+0xac>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a80:	f002 021f 	and.w	r2, r2, #31
    4a84:	095b      	lsrs	r3, r3, #5
    4a86:	2101      	movs	r1, #1
    4a88:	fa01 f202 	lsl.w	r2, r1, r2
    4a8c:	3360      	adds	r3, #96	; 0x60
    4a8e:	494c      	ldr	r1, [pc, #304]	; (4bc0 <twim_irq_handler+0x1d8>)
    4a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
    4a94:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4a98:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    4a9c:	f013 0f02 	tst.w	r3, #2
    4aa0:	d073      	beq.n	4b8a <twim_irq_handler+0x1a2>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    4aa2:	2301      	movs	r3, #1
    4aa4:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    4aa8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4aac:	b90b      	cbnz	r3, 4ab2 <twim_irq_handler+0xca>
    {
        p_cb->busy = false;
    4aae:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    4ab2:	6a2b      	ldr	r3, [r5, #32]
    4ab4:	f013 0f04 	tst.w	r3, #4
    4ab8:	d002      	beq.n	4ac0 <twim_irq_handler+0xd8>
    4aba:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4abe:	b11b      	cbz	r3, 4ac8 <twim_irq_handler+0xe0>
    {
        p_cb->handler(&event, p_cb->p_context);
    4ac0:	682b      	ldr	r3, [r5, #0]
    4ac2:	6869      	ldr	r1, [r5, #4]
    4ac4:	4668      	mov	r0, sp
    4ac6:	4798      	blx	r3
    }
}
    4ac8:	b007      	add	sp, #28
    4aca:	bd30      	pop	{r4, r5, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    4acc:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
    4ace:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4ad2:	2302      	movs	r3, #2
    4ad4:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4ad6:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    4ad8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4adc:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    4ae0:	b123      	cbz	r3, 4aec <twim_irq_handler+0x104>
    return p_reg->SHORTS;
    4ae2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    4ae6:	f413 7f00 	tst.w	r3, #512	; 0x200
    4aea:	d102      	bne.n	4af2 <twim_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4aec:	2301      	movs	r3, #1
    4aee:	6223      	str	r3, [r4, #32]
    4af0:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
    4af2:	2301      	movs	r3, #1
    4af4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
    4af8:	e7e6      	b.n	4ac8 <twim_irq_handler+0xe0>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    4afa:	4629      	mov	r1, r5
    4afc:	4620      	mov	r0, r4
    4afe:	f002 ff3a 	bl	7976 <xfer_completeness_check>
    4b02:	f080 0001 	eor.w	r0, r0, #1
    4b06:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    4b0a:	e78e      	b.n	4a2a <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b0c:	2300      	movs	r3, #0
    4b0e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4b12:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    4b16:	7b2b      	ldrb	r3, [r5, #12]
    4b18:	bb2b      	cbnz	r3, 4b66 <twim_irq_handler+0x17e>
            event.xfer_desc = p_cb->xfer_desc;
    4b1a:	f10d 0c04 	add.w	ip, sp, #4
    4b1e:	f105 0e0c 	add.w	lr, r5, #12
    4b22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4b26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4b2a:	f8de 3000 	ldr.w	r3, [lr]
    4b2e:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
    4b32:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4b36:	2b00      	cmp	r3, #0
    4b38:	d1ac      	bne.n	4a94 <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
    4b3a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    4b3e:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4b40:	4b1e      	ldr	r3, [pc, #120]	; (4bbc <twim_irq_handler+0x1d4>)
    4b42:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    4b46:	0b22      	lsrs	r2, r4, #12
    4b48:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	dba1      	blt.n	4a94 <twim_irq_handler+0xac>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b50:	f002 021f 	and.w	r2, r2, #31
    4b54:	095b      	lsrs	r3, r3, #5
    4b56:	2101      	movs	r1, #1
    4b58:	fa01 f202 	lsl.w	r2, r1, r2
    4b5c:	3360      	adds	r3, #96	; 0x60
    4b5e:	4918      	ldr	r1, [pc, #96]	; (4bc0 <twim_irq_handler+0x1d8>)
    4b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    4b64:	e796      	b.n	4a94 <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
    4b66:	f44f 7300 	mov.w	r3, #512	; 0x200
    4b6a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    4b6e:	f240 2302 	movw	r3, #514	; 0x202
    4b72:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4b74:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    4b78:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4b7c:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    4b7e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b82:	2301      	movs	r3, #1
    4b84:	60a3      	str	r3, [r4, #8]
    4b86:	6223      	str	r3, [r4, #32]
            return;
    4b88:	e79e      	b.n	4ac8 <twim_irq_handler+0xe0>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4b8a:	f013 0f04 	tst.w	r3, #4
    4b8e:	d003      	beq.n	4b98 <twim_irq_handler+0x1b0>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    4b90:	2302      	movs	r3, #2
    4b92:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    4b96:	e787      	b.n	4aa8 <twim_irq_handler+0xc0>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4b98:	f013 0f01 	tst.w	r3, #1
    4b9c:	d003      	beq.n	4ba6 <twim_irq_handler+0x1be>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    4b9e:	2303      	movs	r3, #3
    4ba0:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
    4ba4:	e780      	b.n	4aa8 <twim_irq_handler+0xc0>
    else if (p_cb->error)
    4ba6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4baa:	b11b      	cbz	r3, 4bb4 <twim_irq_handler+0x1cc>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    4bac:	2304      	movs	r3, #4
    4bae:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
    4bb2:	e779      	b.n	4aa8 <twim_irq_handler+0xc0>
        event.type = NRFX_TWIM_EVT_DONE;
    4bb4:	2300      	movs	r3, #0
    4bb6:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    4bba:	e775      	b.n	4aa8 <twim_irq_handler+0xc0>
    4bbc:	019c0202 	.word	0x019c0202
    4bc0:	e000e100 	.word	0xe000e100

00004bc4 <nrfx_twim_init>:
{
    4bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bc6:	4604      	mov	r4, r0
    4bc8:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4bca:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4bcc:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4bce:	491e      	ldr	r1, [pc, #120]	; (4c48 <nrfx_twim_init+0x84>)
    4bd0:	2034      	movs	r0, #52	; 0x34
    4bd2:	fb00 1106 	mla	r1, r0, r6, r1
    4bd6:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    4bda:	b109      	cbz	r1, 4be0 <nrfx_twim_init+0x1c>
        return err_code;
    4bdc:	481b      	ldr	r0, [pc, #108]	; (4c4c <nrfx_twim_init+0x88>)
}
    4bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
    4be0:	f8df c064 	ldr.w	ip, [pc, #100]	; 4c48 <nrfx_twim_init+0x84>
    4be4:	fb06 f000 	mul.w	r0, r6, r0
    4be8:	eb0c 0100 	add.w	r1, ip, r0
    4bec:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context       = p_context;
    4bf0:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
    4bf2:	2300      	movs	r3, #0
    4bf4:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
    4bf6:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
    4bfa:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4bfe:	7b6b      	ldrb	r3, [r5, #13]
    4c00:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4c04:	7bab      	ldrb	r3, [r5, #14]
    4c06:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
    4c0a:	4629      	mov	r1, r5
    4c0c:	4638      	mov	r0, r7
    4c0e:	f002 fef3 	bl	79f8 <twim_pins_configure>
    4c12:	b1b0      	cbz	r0, 4c42 <nrfx_twim_init+0x7e>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    4c14:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
    4c16:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
    4c1a:	2334      	movs	r3, #52	; 0x34
    4c1c:	fb06 f303 	mul.w	r3, r6, r3
    4c20:	4a09      	ldr	r2, [pc, #36]	; (4c48 <nrfx_twim_init+0x84>)
    4c22:	58d3      	ldr	r3, [r2, r3]
    4c24:	b123      	cbz	r3, 4c30 <nrfx_twim_init+0x6c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    4c26:	6820      	ldr	r0, [r4, #0]
    4c28:	f340 3007 	sbfx	r0, r0, #12, #8
    4c2c:	f7fd f960 	bl	1ef0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4c30:	4b05      	ldr	r3, [pc, #20]	; (4c48 <nrfx_twim_init+0x84>)
    4c32:	2234      	movs	r2, #52	; 0x34
    4c34:	fb02 3606 	mla	r6, r2, r6, r3
    4c38:	2301      	movs	r3, #1
    4c3a:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    return err_code;
    4c3e:	4804      	ldr	r0, [pc, #16]	; (4c50 <nrfx_twim_init+0x8c>)
    4c40:	e7cd      	b.n	4bde <nrfx_twim_init+0x1a>
        return NRFX_ERROR_INVALID_PARAM;
    4c42:	4804      	ldr	r0, [pc, #16]	; (4c54 <nrfx_twim_init+0x90>)
    4c44:	e7cb      	b.n	4bde <nrfx_twim_init+0x1a>
    4c46:	bf00      	nop
    4c48:	20000834 	.word	0x20000834
    4c4c:	0bad0005 	.word	0x0bad0005
    4c50:	0bad0000 	.word	0x0bad0000
    4c54:	0bad0004 	.word	0x0bad0004

00004c58 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4c58:	7902      	ldrb	r2, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
    4c5a:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4c5c:	2106      	movs	r1, #6
    4c5e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4c62:	4b04      	ldr	r3, [pc, #16]	; (4c74 <nrfx_twim_enable+0x1c>)
    4c64:	2134      	movs	r1, #52	; 0x34
    4c66:	fb01 3302 	mla	r3, r1, r2, r3
    4c6a:	2202      	movs	r2, #2
    4c6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    4c70:	4770      	bx	lr
    4c72:	bf00      	nop
    4c74:	20000834 	.word	0x20000834

00004c78 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4c78:	7901      	ldrb	r1, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4c7a:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    4c7c:	4b0b      	ldr	r3, [pc, #44]	; (4cac <nrfx_twim_disable+0x34>)
    4c7e:	2034      	movs	r0, #52	; 0x34
    4c80:	fb00 3301 	mla	r3, r0, r1, r3
    4c84:	2100      	movs	r1, #0
    4c86:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
    4c88:	4809      	ldr	r0, [pc, #36]	; (4cb0 <nrfx_twim_disable+0x38>)
    4c8a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4c8e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    4c92:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    4c96:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4c9a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4c9e:	2201      	movs	r2, #1
    4ca0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    4ca4:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    4ca8:	4770      	bx	lr
    4caa:	bf00      	nop
    4cac:	20000834 	.word	0x20000834
    4cb0:	019c0202 	.word	0x019c0202

00004cb4 <nrfx_twim_uninit>:
{
    4cb4:	b538      	push	{r3, r4, r5, lr}
    4cb6:	4604      	mov	r4, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4cb8:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->handler)
    4cba:	2334      	movs	r3, #52	; 0x34
    4cbc:	fb05 f303 	mul.w	r3, r5, r3
    4cc0:	4a1a      	ldr	r2, [pc, #104]	; (4d2c <nrfx_twim_uninit+0x78>)
    4cc2:	58d3      	ldr	r3, [r2, r3]
    4cc4:	b123      	cbz	r3, 4cd0 <nrfx_twim_uninit+0x1c>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    4cc6:	6800      	ldr	r0, [r0, #0]
    4cc8:	f340 3007 	sbfx	r0, r0, #12, #8
    4ccc:	f7fd f91e 	bl	1f0c <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    4cd0:	4620      	mov	r0, r4
    4cd2:	f7ff ffd1 	bl	4c78 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    4cd6:	4b15      	ldr	r3, [pc, #84]	; (4d2c <nrfx_twim_uninit+0x78>)
    4cd8:	2234      	movs	r2, #52	; 0x34
    4cda:	fb02 3305 	mla	r3, r2, r5, r3
    4cde:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    4ce2:	b9d3      	cbnz	r3, 4d1a <nrfx_twim_uninit+0x66>
    4ce4:	4b11      	ldr	r3, [pc, #68]	; (4d2c <nrfx_twim_uninit+0x78>)
    4ce6:	fb02 3305 	mla	r3, r2, r5, r3
    4cea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    4cee:	b9a3      	cbnz	r3, 4d1a <nrfx_twim_uninit+0x66>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    4cf0:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
    4cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    4cf6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4cfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4cfe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4d02:	2102      	movs	r1, #2
    4d04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
    4d08:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SDA;
    4d0a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4d0e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    4d12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4d16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4d1a:	4b04      	ldr	r3, [pc, #16]	; (4d2c <nrfx_twim_uninit+0x78>)
    4d1c:	2234      	movs	r2, #52	; 0x34
    4d1e:	fb02 3505 	mla	r5, r2, r5, r3
    4d22:	2300      	movs	r3, #0
    4d24:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    4d28:	bd38      	pop	{r3, r4, r5, pc}
    4d2a:	bf00      	nop
    4d2c:	20000834 	.word	0x20000834

00004d30 <nrfx_twim_xfer>:
{
    4d30:	b510      	push	{r4, lr}
    4d32:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4d34:	f890 c004 	ldrb.w	ip, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    4d38:	460a      	mov	r2, r1
    4d3a:	6801      	ldr	r1, [r0, #0]
    4d3c:	4c03      	ldr	r4, [pc, #12]	; (4d4c <nrfx_twim_xfer+0x1c>)
    4d3e:	2034      	movs	r0, #52	; 0x34
    4d40:	fb00 400c 	mla	r0, r0, ip, r4
    4d44:	f7ff fcf8 	bl	4738 <twim_xfer>
}
    4d48:	bd10      	pop	{r4, pc}
    4d4a:	bf00      	nop
    4d4c:	20000834 	.word	0x20000834

00004d50 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    4d50:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    4d52:	4902      	ldr	r1, [pc, #8]	; (4d5c <nrfx_twim_0_irq_handler+0xc>)
    4d54:	4802      	ldr	r0, [pc, #8]	; (4d60 <nrfx_twim_0_irq_handler+0x10>)
    4d56:	f7ff fe47 	bl	49e8 <twim_irq_handler>
}
    4d5a:	bd08      	pop	{r3, pc}
    4d5c:	20000834 	.word	0x20000834
    4d60:	40003000 	.word	0x40003000

00004d64 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    4d68:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d6c:	f04f 0801 	mov.w	r8, #1
    4d70:	fa08 f600 	lsl.w	r6, r8, r0
    p_reg->OUTSET = set_mask;
    4d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d78:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    4d7c:	f001 071f 	and.w	r7, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d80:	fa08 f807 	lsl.w	r8, r8, r7
    p_reg->OUTSET = set_mask;
    4d84:	f8c3 8508 	str.w	r8, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    4d88:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    4d8c:	f240 620d 	movw	r2, #1549	; 0x60d
    4d90:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    4d94:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
    4d98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4d9c:	2004      	movs	r0, #4
    4d9e:	f002 fceb 	bl	7778 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    4da2:	2400      	movs	r4, #0
    4da4:	2c08      	cmp	r4, #8
    4da6:	d816      	bhi.n	4dd6 <nrfx_twi_twim_bus_recover+0x72>
    return p_reg->IN;
    4da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4dac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4db0:	40fb      	lsrs	r3, r7
    {
        if (nrf_gpio_pin_read(sda_pin))
    4db2:	f013 0f01 	tst.w	r3, #1
    4db6:	d10e      	bne.n	4dd6 <nrfx_twi_twim_bus_recover+0x72>
    p_reg->OUTCLR = clr_mask;
    4db8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    4dbc:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    4dc0:	2004      	movs	r0, #4
    4dc2:	f002 fcd9 	bl	7778 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    4dc6:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    4dca:	2004      	movs	r0, #4
    4dcc:	f002 fcd4 	bl	7778 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4dd0:	3401      	adds	r4, #1
    4dd2:	b2e4      	uxtb	r4, r4
    4dd4:	e7e6      	b.n	4da4 <nrfx_twi_twim_bus_recover+0x40>
    p_reg->OUTCLR = clr_mask;
    4dd6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    4dda:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    4dde:	2004      	movs	r0, #4
    4de0:	f002 fcca 	bl	7778 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    4de4:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    4de8:	2004      	movs	r0, #4
    4dea:	f002 fcc5 	bl	7778 <nrfx_busy_wait>
    return p_reg->IN;
    4dee:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4df2:	fa21 f707 	lsr.w	r7, r1, r7

    if (nrf_gpio_pin_read(sda_pin))
    4df6:	f017 0f01 	tst.w	r7, #1
    4dfa:	d002      	beq.n	4e02 <nrfx_twi_twim_bus_recover+0x9e>
    {
        return NRFX_SUCCESS;
    4dfc:	4802      	ldr	r0, [pc, #8]	; (4e08 <nrfx_twi_twim_bus_recover+0xa4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INTERNAL;
    4e02:	4802      	ldr	r0, [pc, #8]	; (4e0c <nrfx_twi_twim_bus_recover+0xa8>)
    4e04:	e7fb      	b.n	4dfe <nrfx_twi_twim_bus_recover+0x9a>
    4e06:	bf00      	nop
    4e08:	0bad0000 	.word	0x0bad0000
    4e0c:	0bad0001 	.word	0x0bad0001

00004e10 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4e10:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4e12:	4c14      	ldr	r4, [pc, #80]	; (4e64 <_DoInit+0x54>)
    4e14:	2303      	movs	r3, #3
    4e16:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4e18:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4e1a:	4a13      	ldr	r2, [pc, #76]	; (4e68 <_DoInit+0x58>)
    4e1c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4e1e:	4b13      	ldr	r3, [pc, #76]	; (4e6c <_DoInit+0x5c>)
    4e20:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4e26:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4e28:	2300      	movs	r3, #0
    4e2a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4e2c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4e2e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4e30:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4e32:	4a0f      	ldr	r2, [pc, #60]	; (4e70 <_DoInit+0x60>)
    4e34:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4e36:	2210      	movs	r2, #16
    4e38:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4e3a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4e3c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4e3e:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4e40:	490c      	ldr	r1, [pc, #48]	; (4e74 <_DoInit+0x64>)
    4e42:	1de0      	adds	r0, r4, #7
    4e44:	f002 f827 	bl	6e96 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e48:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4e4c:	490a      	ldr	r1, [pc, #40]	; (4e78 <_DoInit+0x68>)
    4e4e:	4620      	mov	r0, r4
    4e50:	f002 f821 	bl	6e96 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e54:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4e58:	2320      	movs	r3, #32
    4e5a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e5c:	f3bf 8f5f 	dmb	sy
}
    4e60:	bd10      	pop	{r4, pc}
    4e62:	bf00      	nop
    4e64:	20000868 	.word	0x20000868
    4e68:	00008540 	.word	0x00008540
    4e6c:	20000920 	.word	0x20000920
    4e70:	20000910 	.word	0x20000910
    4e74:	0000854c 	.word	0x0000854c
    4e78:	00008550 	.word	0x00008550

00004e7c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e7e:	460f      	mov	r7, r1
    4e80:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    4e82:	4b18      	ldr	r3, [pc, #96]	; (4ee4 <SEGGER_RTT_WriteNoLock+0x68>)
    4e84:	1c45      	adds	r5, r0, #1
    4e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4e8a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    4e8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4e92:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4e96:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    4e98:	2c01      	cmp	r4, #1
    4e9a:	d011      	beq.n	4ec0 <SEGGER_RTT_WriteNoLock+0x44>
    4e9c:	2c02      	cmp	r4, #2
    4e9e:	d01c      	beq.n	4eda <SEGGER_RTT_WriteNoLock+0x5e>
    4ea0:	b114      	cbz	r4, 4ea8 <SEGGER_RTT_WriteNoLock+0x2c>
    4ea2:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    4ea4:	4620      	mov	r0, r4
    4ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4ea8:	4628      	mov	r0, r5
    4eaa:	f002 fde7 	bl	7a7c <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    4eae:	4286      	cmp	r6, r0
    4eb0:	d8f8      	bhi.n	4ea4 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
    4eb2:	4632      	mov	r2, r6
    4eb4:	4639      	mov	r1, r7
    4eb6:	4628      	mov	r0, r5
    4eb8:	f002 fdec 	bl	7a94 <_WriteNoCheck>
      Status = NumBytes;
    4ebc:	4634      	mov	r4, r6
    4ebe:	e7f1      	b.n	4ea4 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
    4ec0:	4628      	mov	r0, r5
    4ec2:	f002 fddb 	bl	7a7c <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4ec6:	4634      	mov	r4, r6
    4ec8:	4286      	cmp	r6, r0
    4eca:	bf28      	it	cs
    4ecc:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4ece:	4622      	mov	r2, r4
    4ed0:	4639      	mov	r1, r7
    4ed2:	4628      	mov	r0, r5
    4ed4:	f002 fdde 	bl	7a94 <_WriteNoCheck>
    break;
    4ed8:	e7e4      	b.n	4ea4 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4eda:	4628      	mov	r0, r5
    4edc:	f002 fe00 	bl	7ae0 <_WriteBlocking>
    4ee0:	4604      	mov	r4, r0
    break;
    4ee2:	e7df      	b.n	4ea4 <SEGGER_RTT_WriteNoLock+0x28>
    4ee4:	20000868 	.word	0x20000868

00004ee8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    4ee8:	4b03      	ldr	r3, [pc, #12]	; (4ef8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    4eea:	e000      	b.n	4eee <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    4eec:	3318      	adds	r3, #24
	while (dev < __device_end) {
    4eee:	4a03      	ldr	r2, [pc, #12]	; (4efc <z_device_state_init+0x14>)
    4ef0:	4293      	cmp	r3, r2
    4ef2:	d3fb      	bcc.n	4eec <z_device_state_init+0x4>
	}
}
    4ef4:	4770      	bx	lr
    4ef6:	bf00      	nop
    4ef8:	0000819c 	.word	0x0000819c
    4efc:	000081fc 	.word	0x000081fc

00004f00 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4f00:	b570      	push	{r4, r5, r6, lr}
    4f02:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4f04:	4b11      	ldr	r3, [pc, #68]	; (4f4c <z_sys_init_run_level+0x4c>)
    4f06:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4f0a:	e009      	b.n	4f20 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    4f0c:	4240      	negs	r0, r0
    4f0e:	e017      	b.n	4f40 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    4f10:	68eb      	ldr	r3, [r5, #12]
    4f12:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    4f14:	68ea      	ldr	r2, [r5, #12]
    4f16:	7853      	ldrb	r3, [r2, #1]
    4f18:	f043 0301 	orr.w	r3, r3, #1
    4f1c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4f1e:	3408      	adds	r4, #8
    4f20:	1c73      	adds	r3, r6, #1
    4f22:	4a0a      	ldr	r2, [pc, #40]	; (4f4c <z_sys_init_run_level+0x4c>)
    4f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f28:	42a3      	cmp	r3, r4
    4f2a:	d90d      	bls.n	4f48 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    4f2c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    4f2e:	6823      	ldr	r3, [r4, #0]
    4f30:	4628      	mov	r0, r5
    4f32:	4798      	blx	r3
		if (dev != NULL) {
    4f34:	2d00      	cmp	r5, #0
    4f36:	d0f2      	beq.n	4f1e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    4f38:	2800      	cmp	r0, #0
    4f3a:	d0eb      	beq.n	4f14 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    4f3c:	2800      	cmp	r0, #0
    4f3e:	dbe5      	blt.n	4f0c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    4f40:	28ff      	cmp	r0, #255	; 0xff
    4f42:	dde5      	ble.n	4f10 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    4f44:	20ff      	movs	r0, #255	; 0xff
    4f46:	e7e3      	b.n	4f10 <z_sys_init_run_level+0x10>
		}
	}
}
    4f48:	bd70      	pop	{r4, r5, r6, pc}
    4f4a:	bf00      	nop
    4f4c:	00008558 	.word	0x00008558

00004f50 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4f50:	b510      	push	{r4, lr}
    4f52:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    4f54:	4c11      	ldr	r4, [pc, #68]	; (4f9c <init_idle_thread+0x4c>)
    4f56:	23b0      	movs	r3, #176	; 0xb0
    4f58:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4f5c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    4f60:	4b0f      	ldr	r3, [pc, #60]	; (4fa0 <init_idle_thread+0x50>)
    4f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    4f66:	4a0f      	ldr	r2, [pc, #60]	; (4fa4 <init_idle_thread+0x54>)
    4f68:	9205      	str	r2, [sp, #20]
    4f6a:	2201      	movs	r2, #1
    4f6c:	9204      	str	r2, [sp, #16]
    4f6e:	220f      	movs	r2, #15
    4f70:	9203      	str	r2, [sp, #12]
    4f72:	2200      	movs	r2, #0
    4f74:	9202      	str	r2, [sp, #8]
    4f76:	9201      	str	r2, [sp, #4]
    4f78:	9300      	str	r3, [sp, #0]
    4f7a:	4b0b      	ldr	r3, [pc, #44]	; (4fa8 <init_idle_thread+0x58>)
    4f7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4f80:	490a      	ldr	r1, [pc, #40]	; (4fac <init_idle_thread+0x5c>)
    4f82:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    4f86:	fb0c 1100 	mla	r1, ip, r0, r1
    4f8a:	4620      	mov	r0, r4
    4f8c:	f000 f916 	bl	51bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4f90:	7b63      	ldrb	r3, [r4, #13]
    4f92:	f023 0304 	bic.w	r3, r3, #4
    4f96:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4f98:	b006      	add	sp, #24
    4f9a:	bd10      	pop	{r4, pc}
    4f9c:	200004d0 	.word	0x200004d0
    4fa0:	20000d20 	.word	0x20000d20
    4fa4:	00008570 	.word	0x00008570
    4fa8:	00005319 	.word	0x00005319
    4fac:	20001a20 	.word	0x20001a20

00004fb0 <bg_thread_main>:
{
    4fb0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4fb2:	4b0a      	ldr	r3, [pc, #40]	; (4fdc <bg_thread_main+0x2c>)
    4fb4:	2201      	movs	r2, #1
    4fb6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4fb8:	2002      	movs	r0, #2
    4fba:	f7ff ffa1 	bl	4f00 <z_sys_init_run_level>
		boot_banner();
    4fbe:	f001 fb2d 	bl	661c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4fc2:	2003      	movs	r0, #3
    4fc4:	f7ff ff9c 	bl	4f00 <z_sys_init_run_level>
	z_init_static_threads();
    4fc8:	f000 f95c 	bl	5284 <z_init_static_threads>
	main();
    4fcc:	f7fb fe0a 	bl	be4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4fd0:	4a03      	ldr	r2, [pc, #12]	; (4fe0 <bg_thread_main+0x30>)
    4fd2:	7b13      	ldrb	r3, [r2, #12]
    4fd4:	f023 0301 	bic.w	r3, r3, #1
    4fd8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4fda:	bd08      	pop	{r3, pc}
    4fdc:	20000d6a 	.word	0x20000d6a
    4fe0:	20000580 	.word	0x20000580

00004fe4 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    4fe4:	b508      	push	{r3, lr}
    4fe6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4fe8:	4a01      	ldr	r2, [pc, #4]	; (4ff0 <switch_to_main_thread+0xc>)
    4fea:	4802      	ldr	r0, [pc, #8]	; (4ff4 <switch_to_main_thread+0x10>)
    4fec:	f7fd f888 	bl	2100 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4ff0:	00004fb1 	.word	0x00004fb1
    4ff4:	20000580 	.word	0x20000580

00004ff8 <z_bss_zero>:
{
    4ff8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4ffa:	4803      	ldr	r0, [pc, #12]	; (5008 <z_bss_zero+0x10>)
    4ffc:	4a03      	ldr	r2, [pc, #12]	; (500c <z_bss_zero+0x14>)
    4ffe:	1a12      	subs	r2, r2, r0
    5000:	2100      	movs	r1, #0
    5002:	f002 fdce 	bl	7ba2 <z_early_memset>
}
    5006:	bd08      	pop	{r3, pc}
    5008:	200001f0 	.word	0x200001f0
    500c:	20000d6c 	.word	0x20000d6c

00005010 <z_init_cpu>:
{
    5010:	b510      	push	{r4, lr}
    5012:	4604      	mov	r4, r0
	init_idle_thread(id);
    5014:	f7ff ff9c 	bl	4f50 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5018:	490b      	ldr	r1, [pc, #44]	; (5048 <z_init_cpu+0x38>)
    501a:	23b0      	movs	r3, #176	; 0xb0
    501c:	fb03 1104 	mla	r1, r3, r4, r1
    5020:	4a0a      	ldr	r2, [pc, #40]	; (504c <z_init_cpu+0x3c>)
    5022:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5026:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    502a:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    502c:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    502e:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    5032:	4b07      	ldr	r3, [pc, #28]	; (5050 <z_init_cpu+0x40>)
    5034:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    5038:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    503c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5040:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    5044:	6063      	str	r3, [r4, #4]
}
    5046:	bd10      	pop	{r4, pc}
    5048:	200004d0 	.word	0x200004d0
    504c:	20000d20 	.word	0x20000d20
    5050:	20001b80 	.word	0x20001b80

00005054 <prepare_multithreading>:
{
    5054:	b570      	push	{r4, r5, r6, lr}
    5056:	b086      	sub	sp, #24
	z_sched_init();
    5058:	f000 ffc4 	bl	5fe4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    505c:	4d10      	ldr	r5, [pc, #64]	; (50a0 <prepare_multithreading+0x4c>)
    505e:	4b11      	ldr	r3, [pc, #68]	; (50a4 <prepare_multithreading+0x50>)
    5060:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5062:	4b11      	ldr	r3, [pc, #68]	; (50a8 <prepare_multithreading+0x54>)
    5064:	9305      	str	r3, [sp, #20]
    5066:	2301      	movs	r3, #1
    5068:	9304      	str	r3, [sp, #16]
    506a:	2400      	movs	r4, #0
    506c:	9403      	str	r4, [sp, #12]
    506e:	9402      	str	r4, [sp, #8]
    5070:	9401      	str	r4, [sp, #4]
    5072:	9400      	str	r4, [sp, #0]
    5074:	4b0d      	ldr	r3, [pc, #52]	; (50ac <prepare_multithreading+0x58>)
    5076:	f44f 6280 	mov.w	r2, #1024	; 0x400
    507a:	490d      	ldr	r1, [pc, #52]	; (50b0 <prepare_multithreading+0x5c>)
    507c:	4628      	mov	r0, r5
    507e:	f000 f89d 	bl	51bc <z_setup_new_thread>
    5082:	4606      	mov	r6, r0
    5084:	7b6b      	ldrb	r3, [r5, #13]
    5086:	f023 0304 	bic.w	r3, r3, #4
    508a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    508c:	4628      	mov	r0, r5
    508e:	f002 fe81 	bl	7d94 <z_ready_thread>
	z_init_cpu(0);
    5092:	4620      	mov	r0, r4
    5094:	f7ff ffbc 	bl	5010 <z_init_cpu>
}
    5098:	4630      	mov	r0, r6
    509a:	b006      	add	sp, #24
    509c:	bd70      	pop	{r4, r5, r6, pc}
    509e:	bf00      	nop
    50a0:	20000580 	.word	0x20000580
    50a4:	20000d20 	.word	0x20000d20
    50a8:	00008578 	.word	0x00008578
    50ac:	00004fb1 	.word	0x00004fb1
    50b0:	20001600 	.word	0x20001600

000050b4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    50b4:	b500      	push	{lr}
    50b6:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    50b8:	4b1d      	ldr	r3, [pc, #116]	; (5130 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    50ba:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    50be:	4c1d      	ldr	r4, [pc, #116]	; (5134 <z_cstart+0x80>)
    50c0:	6963      	ldr	r3, [r4, #20]
    50c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    50c6:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    50c8:	23e0      	movs	r3, #224	; 0xe0
    50ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    50ce:	2500      	movs	r5, #0
    50d0:	77e5      	strb	r5, [r4, #31]
    50d2:	7625      	strb	r5, [r4, #24]
    50d4:	7665      	strb	r5, [r4, #25]
    50d6:	76a5      	strb	r5, [r4, #26]
    50d8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    50dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    50de:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    50e2:	6263      	str	r3, [r4, #36]	; 0x24
    50e4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    50e8:	f7fd f962 	bl	23b0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    50ec:	f7fc fee2 	bl	1eb4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    50f0:	f04f 33ff 	mov.w	r3, #4294967295
    50f4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    50f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    50f8:	f7fd fa76 	bl	25e8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    50fc:	f7fd fa06 	bl	250c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    5100:	2401      	movs	r4, #1
    5102:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    5106:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    510a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    510c:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    510e:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    5110:	4b09      	ldr	r3, [pc, #36]	; (5138 <z_cstart+0x84>)
    5112:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5116:	f7ff fee7 	bl	4ee8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    511a:	4628      	mov	r0, r5
    511c:	f7ff fef0 	bl	4f00 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5120:	4620      	mov	r0, r4
    5122:	f7ff feed 	bl	4f00 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5126:	f7ff ff95 	bl	5054 <prepare_multithreading>
    512a:	f7ff ff5b 	bl	4fe4 <switch_to_main_thread>
    512e:	bf00      	nop
    5130:	200023a0 	.word	0x200023a0
    5134:	e000ed00 	.word	0xe000ed00
    5138:	20000d20 	.word	0x20000d20

0000513c <z_thread_monitor_exit>:
	__asm__ volatile(
    513c:	f04f 0320 	mov.w	r3, #32
    5140:	f3ef 8111 	mrs	r1, BASEPRI
    5144:	f383 8812 	msr	BASEPRI_MAX, r3
    5148:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    514c:	4b0a      	ldr	r3, [pc, #40]	; (5178 <z_thread_monitor_exit+0x3c>)
    514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5150:	4283      	cmp	r3, r0
    5152:	d104      	bne.n	515e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    5154:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5156:	4b08      	ldr	r3, [pc, #32]	; (5178 <z_thread_monitor_exit+0x3c>)
    5158:	629a      	str	r2, [r3, #40]	; 0x28
    515a:	e007      	b.n	516c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    515c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    515e:	b113      	cbz	r3, 5166 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    5160:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    5162:	4282      	cmp	r2, r0
    5164:	d1fa      	bne.n	515c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    5166:	b10b      	cbz	r3, 516c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    5168:	6f02      	ldr	r2, [r0, #112]	; 0x70
    516a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    516c:	f381 8811 	msr	BASEPRI, r1
    5170:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    5174:	4770      	bx	lr
    5176:	bf00      	nop
    5178:	20000d20 	.word	0x20000d20

0000517c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    517c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    517e:	4604      	mov	r4, r0
    5180:	b140      	cbz	r0, 5194 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    5182:	221f      	movs	r2, #31
    5184:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5188:	f001 fe8f 	bl	6eaa <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    518c:	2000      	movs	r0, #0
    518e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    5192:	bd10      	pop	{r4, pc}
		thread = _current;
    5194:	4b01      	ldr	r3, [pc, #4]	; (519c <z_impl_k_thread_name_set+0x20>)
    5196:	689c      	ldr	r4, [r3, #8]
    5198:	e7f3      	b.n	5182 <z_impl_k_thread_name_set+0x6>
    519a:	bf00      	nop
    519c:	20000d20 	.word	0x20000d20

000051a0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    51a0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    51a2:	ea53 0102 	orrs.w	r1, r3, r2
    51a6:	d102      	bne.n	51ae <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    51a8:	f002 fd1b 	bl	7be2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    51ac:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    51ae:	4902      	ldr	r1, [pc, #8]	; (51b8 <schedule_new_thread+0x18>)
    51b0:	3018      	adds	r0, #24
    51b2:	f001 f883 	bl	62bc <z_add_timeout>
    51b6:	e7f9      	b.n	51ac <schedule_new_thread+0xc>
    51b8:	00007dcd 	.word	0x00007dcd

000051bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    51bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51c0:	b085      	sub	sp, #20
    51c2:	4604      	mov	r4, r0
    51c4:	460f      	mov	r7, r1
    51c6:	4615      	mov	r5, r2
    51c8:	461e      	mov	r6, r3
    51ca:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    51ce:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    51d2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    51d6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    51da:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    51de:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    51e0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    51e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    51e4:	2204      	movs	r2, #4
    51e6:	9911      	ldr	r1, [sp, #68]	; 0x44
    51e8:	f002 fcff 	bl	7bea <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    51ec:	462a      	mov	r2, r5
    51ee:	4639      	mov	r1, r7
    51f0:	4620      	mov	r0, r4
    51f2:	f002 fcde 	bl	7bb2 <setup_thread_stack>
    51f6:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    51f8:	f8cd 8008 	str.w	r8, [sp, #8]
    51fc:	f8cd 9004 	str.w	r9, [sp, #4]
    5200:	f8cd a000 	str.w	sl, [sp]
    5204:	4633      	mov	r3, r6
    5206:	4602      	mov	r2, r0
    5208:	4639      	mov	r1, r7
    520a:	4620      	mov	r0, r4
    520c:	f7fc ff2e 	bl	206c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    5210:	2300      	movs	r3, #0
    5212:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    5214:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    5216:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    521a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    521e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    5222:	f04f 0320 	mov.w	r3, #32
    5226:	f3ef 8211 	mrs	r2, BASEPRI
    522a:	f383 8812 	msr	BASEPRI_MAX, r3
    522e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    5232:	4b13      	ldr	r3, [pc, #76]	; (5280 <z_setup_new_thread+0xc4>)
    5234:	6a99      	ldr	r1, [r3, #40]	; 0x28
    5236:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    5238:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    523a:	f382 8811 	msr	BASEPRI, r2
    523e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    5242:	f1bb 0f00 	cmp.w	fp, #0
    5246:	d013      	beq.n	5270 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    5248:	221f      	movs	r2, #31
    524a:	4659      	mov	r1, fp
    524c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5250:	f001 fe2b 	bl	6eaa <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    5254:	2300      	movs	r3, #0
    5256:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    525a:	4b09      	ldr	r3, [pc, #36]	; (5280 <z_setup_new_thread+0xc4>)
    525c:	689b      	ldr	r3, [r3, #8]
    525e:	b15b      	cbz	r3, 5278 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    5260:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    5264:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    5268:	4628      	mov	r0, r5
    526a:	b005      	add	sp, #20
    526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    5270:	2300      	movs	r3, #0
    5272:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    5276:	e7f0      	b.n	525a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    5278:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    527c:	e7f4      	b.n	5268 <z_setup_new_thread+0xac>
    527e:	bf00      	nop
    5280:	20000d20 	.word	0x20000d20

00005284 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    5284:	b530      	push	{r4, r5, lr}
    5286:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    5288:	4c21      	ldr	r4, [pc, #132]	; (5310 <z_init_static_threads+0x8c>)
    528a:	e014      	b.n	52b6 <z_init_static_threads+0x32>
		z_setup_new_thread(
    528c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    528e:	9305      	str	r3, [sp, #20]
    5290:	6a23      	ldr	r3, [r4, #32]
    5292:	9304      	str	r3, [sp, #16]
    5294:	69e3      	ldr	r3, [r4, #28]
    5296:	9303      	str	r3, [sp, #12]
    5298:	69a3      	ldr	r3, [r4, #24]
    529a:	9302      	str	r3, [sp, #8]
    529c:	6963      	ldr	r3, [r4, #20]
    529e:	9301      	str	r3, [sp, #4]
    52a0:	6923      	ldr	r3, [r4, #16]
    52a2:	9300      	str	r3, [sp, #0]
    52a4:	68e3      	ldr	r3, [r4, #12]
    52a6:	68a2      	ldr	r2, [r4, #8]
    52a8:	6861      	ldr	r1, [r4, #4]
    52aa:	6820      	ldr	r0, [r4, #0]
    52ac:	f7ff ff86 	bl	51bc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    52b0:	6823      	ldr	r3, [r4, #0]
    52b2:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    52b4:	3430      	adds	r4, #48	; 0x30
    52b6:	4b17      	ldr	r3, [pc, #92]	; (5314 <z_init_static_threads+0x90>)
    52b8:	429c      	cmp	r4, r3
    52ba:	d3e7      	bcc.n	528c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    52bc:	f000 fbfa 	bl	5ab4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    52c0:	4c13      	ldr	r4, [pc, #76]	; (5310 <z_init_static_threads+0x8c>)
    52c2:	e000      	b.n	52c6 <z_init_static_threads+0x42>
    52c4:	3430      	adds	r4, #48	; 0x30
    52c6:	4b13      	ldr	r3, [pc, #76]	; (5314 <z_init_static_threads+0x90>)
    52c8:	429c      	cmp	r4, r3
    52ca:	d21c      	bcs.n	5306 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    52cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    52ce:	f1b0 3fff 	cmp.w	r0, #4294967295
    52d2:	d0f7      	beq.n	52c4 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    52d4:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    52d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    52da:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    52dc:	03c9      	lsls	r1, r1, #15
    52de:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    52e2:	03c0      	lsls	r0, r0, #15
    52e4:	f240 33e7 	movw	r3, #999	; 0x3e7
    52e8:	18c0      	adds	r0, r0, r3
    52ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    52ee:	f04f 0300 	mov.w	r3, #0
    52f2:	f141 0100 	adc.w	r1, r1, #0
    52f6:	f7fb fa6f 	bl	7d8 <__aeabi_uldivmod>
    52fa:	4602      	mov	r2, r0
    52fc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    52fe:	4628      	mov	r0, r5
    5300:	f7ff ff4e 	bl	51a0 <schedule_new_thread>
    5304:	e7de      	b.n	52c4 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    5306:	f000 fdf7 	bl	5ef8 <k_sched_unlock>
}
    530a:	b007      	add	sp, #28
    530c:	bd30      	pop	{r4, r5, pc}
    530e:	bf00      	nop
    5310:	200000d0 	.word	0x200000d0
    5314:	20000190 	.word	0x20000190

00005318 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5318:	b508      	push	{r3, lr}
    531a:	e001      	b.n	5320 <idle+0x8>
	arch_cpu_idle();
    531c:	f7fc fdd0 	bl	1ec0 <arch_cpu_idle>
	__asm__ volatile(
    5320:	f04f 0220 	mov.w	r2, #32
    5324:	f3ef 8311 	mrs	r3, BASEPRI
    5328:	f382 8812 	msr	BASEPRI_MAX, r2
    532c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5330:	f002 fe92 	bl	8058 <z_get_next_timeout_expiry>
    5334:	4b05      	ldr	r3, [pc, #20]	; (534c <idle+0x34>)
    5336:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    5338:	4b05      	ldr	r3, [pc, #20]	; (5350 <idle+0x38>)
    533a:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    533c:	2b00      	cmp	r3, #0
    533e:	d0ed      	beq.n	531c <idle+0x4>
    5340:	f7fc fc96 	bl	1c70 <pm_system_suspend>
    5344:	2800      	cmp	r0, #0
    5346:	d1eb      	bne.n	5320 <idle+0x8>
    5348:	e7e8      	b.n	531c <idle+0x4>
    534a:	bf00      	nop
    534c:	20000d20 	.word	0x20000d20
    5350:	20000d6a 	.word	0x20000d6a

00005354 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    5354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5358:	b082      	sub	sp, #8
    535a:	4604      	mov	r4, r0
    535c:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    535e:	f100 0708 	add.w	r7, r0, #8
    5362:	f04f 0120 	mov.w	r1, #32
    5366:	f3ef 8611 	mrs	r6, BASEPRI
    536a:	f381 8812 	msr	BASEPRI_MAX, r1
    536e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    5372:	6a00      	ldr	r0, [r0, #32]
    5374:	68e1      	ldr	r1, [r4, #12]
    5376:	4288      	cmp	r0, r1
    5378:	d30b      	bcc.n	5392 <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    537a:	ea53 0102 	orrs.w	r1, r3, r2
    537e:	d132      	bne.n	53e6 <z_impl_k_msgq_put+0x92>
		/* don't wait for message space to become available */
		result = -ENOMSG;
    5380:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    5384:	f386 8811 	msr	BASEPRI, r6
    5388:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    538c:	b002      	add	sp, #8
    538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    5392:	4620      	mov	r0, r4
    5394:	f002 fdc5 	bl	7f22 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5398:	4680      	mov	r8, r0
    539a:	b180      	cbz	r0, 53be <z_impl_k_msgq_put+0x6a>
			(void)memcpy(pending_thread->base.swap_data, data,
    539c:	68a2      	ldr	r2, [r4, #8]
    539e:	4629      	mov	r1, r5
    53a0:	6940      	ldr	r0, [r0, #20]
    53a2:	f001 fdaf 	bl	6f04 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    53a6:	2400      	movs	r4, #0
    53a8:	f8c8 40ac 	str.w	r4, [r8, #172]	; 0xac
			z_ready_thread(pending_thread);
    53ac:	4640      	mov	r0, r8
    53ae:	f002 fcf1 	bl	7d94 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    53b2:	4631      	mov	r1, r6
    53b4:	4638      	mov	r0, r7
    53b6:	f000 fb61 	bl	5a7c <z_reschedule>
			return 0;
    53ba:	4620      	mov	r0, r4
    53bc:	e7e6      	b.n	538c <z_impl_k_msgq_put+0x38>
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    53be:	68a2      	ldr	r2, [r4, #8]
    53c0:	4629      	mov	r1, r5
    53c2:	69e0      	ldr	r0, [r4, #28]
    53c4:	f001 fd9e 	bl	6f04 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    53c8:	68a2      	ldr	r2, [r4, #8]
    53ca:	69e3      	ldr	r3, [r4, #28]
    53cc:	4413      	add	r3, r2
    53ce:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    53d0:	6962      	ldr	r2, [r4, #20]
    53d2:	4293      	cmp	r3, r2
    53d4:	d004      	beq.n	53e0 <z_impl_k_msgq_put+0x8c>
			msgq->used_msgs++;
    53d6:	6a23      	ldr	r3, [r4, #32]
    53d8:	3301      	adds	r3, #1
    53da:	6223      	str	r3, [r4, #32]
		result = 0;
    53dc:	2000      	movs	r0, #0
    53de:	e7d1      	b.n	5384 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
    53e0:	6923      	ldr	r3, [r4, #16]
    53e2:	61e3      	str	r3, [r4, #28]
    53e4:	e7f7      	b.n	53d6 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
    53e6:	4905      	ldr	r1, [pc, #20]	; (53fc <z_impl_k_msgq_put+0xa8>)
    53e8:	6889      	ldr	r1, [r1, #8]
    53ea:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    53ec:	9200      	str	r2, [sp, #0]
    53ee:	9301      	str	r3, [sp, #4]
    53f0:	4622      	mov	r2, r4
    53f2:	4631      	mov	r1, r6
    53f4:	4638      	mov	r0, r7
    53f6:	f000 fcc9 	bl	5d8c <z_pend_curr>
		return result;
    53fa:	e7c7      	b.n	538c <z_impl_k_msgq_put+0x38>
    53fc:	20000d20 	.word	0x20000d20

00005400 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    5400:	b5f0      	push	{r4, r5, r6, r7, lr}
    5402:	b083      	sub	sp, #12
    5404:	4604      	mov	r4, r0
    5406:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    5408:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
    540c:	f04f 0120 	mov.w	r1, #32
    5410:	f3ef 8511 	mrs	r5, BASEPRI
    5414:	f381 8812 	msr	BASEPRI_MAX, r1
    5418:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    541c:	6a21      	ldr	r1, [r4, #32]
    541e:	b951      	cbnz	r1, 5436 <z_impl_k_msgq_get+0x36>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5420:	ea53 0102 	orrs.w	r1, r3, r2
    5424:	d13d      	bne.n	54a2 <z_impl_k_msgq_get+0xa2>
		/* don't wait for a message to become available */
		result = -ENOMSG;
    5426:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    542a:	f385 8811 	msr	BASEPRI, r5
    542e:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    5432:	b003      	add	sp, #12
    5434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    5436:	68a2      	ldr	r2, [r4, #8]
    5438:	69a1      	ldr	r1, [r4, #24]
    543a:	f001 fd63 	bl	6f04 <memcpy>
		msgq->read_ptr += msgq->msg_size;
    543e:	68a2      	ldr	r2, [r4, #8]
    5440:	69a3      	ldr	r3, [r4, #24]
    5442:	4413      	add	r3, r2
    5444:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    5446:	6962      	ldr	r2, [r4, #20]
    5448:	4293      	cmp	r3, r2
    544a:	d009      	beq.n	5460 <z_impl_k_msgq_get+0x60>
		msgq->used_msgs--;
    544c:	6a23      	ldr	r3, [r4, #32]
    544e:	3b01      	subs	r3, #1
    5450:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    5452:	4620      	mov	r0, r4
    5454:	f002 fd65 	bl	7f22 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    5458:	4607      	mov	r7, r0
    545a:	b920      	cbnz	r0, 5466 <z_impl_k_msgq_get+0x66>
		result = 0;
    545c:	2000      	movs	r0, #0
    545e:	e7e4      	b.n	542a <z_impl_k_msgq_get+0x2a>
			msgq->read_ptr = msgq->buffer_start;
    5460:	6923      	ldr	r3, [r4, #16]
    5462:	61a3      	str	r3, [r4, #24]
    5464:	e7f2      	b.n	544c <z_impl_k_msgq_get+0x4c>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    5466:	68a2      	ldr	r2, [r4, #8]
    5468:	6941      	ldr	r1, [r0, #20]
    546a:	69e0      	ldr	r0, [r4, #28]
    546c:	f001 fd4a 	bl	6f04 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    5470:	68a2      	ldr	r2, [r4, #8]
    5472:	69e3      	ldr	r3, [r4, #28]
    5474:	4413      	add	r3, r2
    5476:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    5478:	6962      	ldr	r2, [r4, #20]
    547a:	4293      	cmp	r3, r2
    547c:	d00e      	beq.n	549c <z_impl_k_msgq_get+0x9c>
			msgq->used_msgs++;
    547e:	6a23      	ldr	r3, [r4, #32]
    5480:	3301      	adds	r3, #1
    5482:	6223      	str	r3, [r4, #32]
    5484:	2400      	movs	r4, #0
    5486:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
			z_ready_thread(pending_thread);
    548a:	4638      	mov	r0, r7
    548c:	f002 fc82 	bl	7d94 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    5490:	4629      	mov	r1, r5
    5492:	4630      	mov	r0, r6
    5494:	f000 faf2 	bl	5a7c <z_reschedule>
			return 0;
    5498:	4620      	mov	r0, r4
    549a:	e7ca      	b.n	5432 <z_impl_k_msgq_get+0x32>
				msgq->write_ptr = msgq->buffer_start;
    549c:	6923      	ldr	r3, [r4, #16]
    549e:	61e3      	str	r3, [r4, #28]
    54a0:	e7ed      	b.n	547e <z_impl_k_msgq_get+0x7e>
		_current->base.swap_data = data;
    54a2:	4905      	ldr	r1, [pc, #20]	; (54b8 <z_impl_k_msgq_get+0xb8>)
    54a4:	6889      	ldr	r1, [r1, #8]
    54a6:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    54a8:	9200      	str	r2, [sp, #0]
    54aa:	9301      	str	r3, [sp, #4]
    54ac:	4622      	mov	r2, r4
    54ae:	4629      	mov	r1, r5
    54b0:	4630      	mov	r0, r6
    54b2:	f000 fc6b 	bl	5d8c <z_pend_curr>
		return result;
    54b6:	e7bc      	b.n	5432 <z_impl_k_msgq_get+0x32>
    54b8:	20000d20 	.word	0x20000d20

000054bc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    54bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54c0:	b083      	sub	sp, #12
    54c2:	4604      	mov	r4, r0
    54c4:	461d      	mov	r5, r3
	__asm__ volatile(
    54c6:	f04f 0320 	mov.w	r3, #32
    54ca:	f3ef 8711 	mrs	r7, BASEPRI
    54ce:	f383 8812 	msr	BASEPRI_MAX, r3
    54d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    54d6:	68c1      	ldr	r1, [r0, #12]
    54d8:	b999      	cbnz	r1, 5502 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    54da:	2900      	cmp	r1, #0
    54dc:	d14f      	bne.n	557e <z_impl_k_mutex_lock+0xc2>
    54de:	4b3a      	ldr	r3, [pc, #232]	; (55c8 <z_impl_k_mutex_lock+0x10c>)
    54e0:	689b      	ldr	r3, [r3, #8]
    54e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    54e6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    54e8:	3101      	adds	r1, #1
    54ea:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    54ec:	4b36      	ldr	r3, [pc, #216]	; (55c8 <z_impl_k_mutex_lock+0x10c>)
    54ee:	689b      	ldr	r3, [r3, #8]
    54f0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    54f2:	f387 8811 	msr	BASEPRI, r7
    54f6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    54fa:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    54fc:	b003      	add	sp, #12
    54fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5502:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5504:	6882      	ldr	r2, [r0, #8]
    5506:	4b30      	ldr	r3, [pc, #192]	; (55c8 <z_impl_k_mutex_lock+0x10c>)
    5508:	689b      	ldr	r3, [r3, #8]
    550a:	429a      	cmp	r2, r3
    550c:	d0e5      	beq.n	54da <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    550e:	ea55 0106 	orrs.w	r1, r5, r6
    5512:	bf0c      	ite	eq
    5514:	f04f 0801 	moveq.w	r8, #1
    5518:	f04f 0800 	movne.w	r8, #0
    551c:	d031      	beq.n	5582 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    551e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5522:	4649      	mov	r1, r9
    5524:	f993 000e 	ldrsb.w	r0, [r3, #14]
    5528:	f002 fb92 	bl	7c50 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    552c:	4581      	cmp	r9, r0
    552e:	dc2f      	bgt.n	5590 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    5530:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5534:	9600      	str	r6, [sp, #0]
    5536:	9501      	str	r5, [sp, #4]
    5538:	4622      	mov	r2, r4
    553a:	4639      	mov	r1, r7
    553c:	4823      	ldr	r0, [pc, #140]	; (55cc <z_impl_k_mutex_lock+0x110>)
    553e:	f000 fc25 	bl	5d8c <z_pend_curr>
	if (got_mutex == 0) {
    5542:	2800      	cmp	r0, #0
    5544:	d0da      	beq.n	54fc <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    5546:	f04f 0320 	mov.w	r3, #32
    554a:	f3ef 8511 	mrs	r5, BASEPRI
    554e:	f383 8812 	msr	BASEPRI_MAX, r3
    5552:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5556:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5558:	429c      	cmp	r4, r3
    555a:	d01f      	beq.n	559c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    555c:	b1f3      	cbz	r3, 559c <z_impl_k_mutex_lock+0xe0>
    555e:	6921      	ldr	r1, [r4, #16]
    5560:	f993 000e 	ldrsb.w	r0, [r3, #14]
    5564:	f002 fb74 	bl	7c50 <new_prio_for_inheritance>
    5568:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    556a:	4620      	mov	r0, r4
    556c:	f002 fb7b 	bl	7c66 <adjust_owner_prio>
    5570:	b9b0      	cbnz	r0, 55a0 <z_impl_k_mutex_lock+0xe4>
    5572:	f1b9 0f00 	cmp.w	r9, #0
    5576:	d015      	beq.n	55a4 <z_impl_k_mutex_lock+0xe8>
    5578:	f04f 0801 	mov.w	r8, #1
    557c:	e012      	b.n	55a4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    557e:	6923      	ldr	r3, [r4, #16]
    5580:	e7b1      	b.n	54e6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    5582:	f387 8811 	msr	BASEPRI, r7
    5586:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    558a:	f06f 000f 	mvn.w	r0, #15
    558e:	e7b5      	b.n	54fc <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    5590:	4601      	mov	r1, r0
    5592:	4620      	mov	r0, r4
    5594:	f002 fb67 	bl	7c66 <adjust_owner_prio>
    5598:	4681      	mov	r9, r0
    559a:	e7cb      	b.n	5534 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    559c:	6921      	ldr	r1, [r4, #16]
    559e:	e7e4      	b.n	556a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    55a0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    55a4:	f1b8 0f00 	cmp.w	r8, #0
    55a8:	d106      	bne.n	55b8 <z_impl_k_mutex_lock+0xfc>
    55aa:	f385 8811 	msr	BASEPRI, r5
    55ae:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    55b2:	f06f 000a 	mvn.w	r0, #10
    55b6:	e7a1      	b.n	54fc <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    55b8:	4629      	mov	r1, r5
    55ba:	4804      	ldr	r0, [pc, #16]	; (55cc <z_impl_k_mutex_lock+0x110>)
    55bc:	f000 fa5e 	bl	5a7c <z_reschedule>
	return -EAGAIN;
    55c0:	f06f 000a 	mvn.w	r0, #10
    55c4:	e79a      	b.n	54fc <z_impl_k_mutex_lock+0x40>
    55c6:	bf00      	nop
    55c8:	20000d20 	.word	0x20000d20
    55cc:	20000d4c 	.word	0x20000d4c

000055d0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    55d0:	6882      	ldr	r2, [r0, #8]
    55d2:	2a00      	cmp	r2, #0
    55d4:	d035      	beq.n	5642 <z_impl_k_mutex_unlock+0x72>
{
    55d6:	b538      	push	{r3, r4, r5, lr}
    55d8:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    55da:	4b1d      	ldr	r3, [pc, #116]	; (5650 <z_impl_k_mutex_unlock+0x80>)
    55dc:	689b      	ldr	r3, [r3, #8]
    55de:	429a      	cmp	r2, r3
    55e0:	d132      	bne.n	5648 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    55e2:	7bda      	ldrb	r2, [r3, #15]
    55e4:	3a01      	subs	r2, #1
    55e6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    55e8:	68c3      	ldr	r3, [r0, #12]
    55ea:	2b01      	cmp	r3, #1
    55ec:	d905      	bls.n	55fa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    55ee:	3b01      	subs	r3, #1
    55f0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    55f2:	f000 fc81 	bl	5ef8 <k_sched_unlock>

	return 0;
    55f6:	2000      	movs	r0, #0
}
    55f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    55fa:	f04f 0320 	mov.w	r3, #32
    55fe:	f3ef 8511 	mrs	r5, BASEPRI
    5602:	f383 8812 	msr	BASEPRI_MAX, r3
    5606:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    560a:	6901      	ldr	r1, [r0, #16]
    560c:	f002 fb2b 	bl	7c66 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5610:	4620      	mov	r0, r4
    5612:	f002 fc86 	bl	7f22 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5616:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5618:	b160      	cbz	r0, 5634 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    561a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    561e:	6123      	str	r3, [r4, #16]
    5620:	2300      	movs	r3, #0
    5622:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    5626:	f002 fbb5 	bl	7d94 <z_ready_thread>
		z_reschedule(&lock, key);
    562a:	4629      	mov	r1, r5
    562c:	4809      	ldr	r0, [pc, #36]	; (5654 <z_impl_k_mutex_unlock+0x84>)
    562e:	f000 fa25 	bl	5a7c <z_reschedule>
    5632:	e7de      	b.n	55f2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5634:	2300      	movs	r3, #0
    5636:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    5638:	f385 8811 	msr	BASEPRI, r5
    563c:	f3bf 8f6f 	isb	sy
    5640:	e7d7      	b.n	55f2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5642:	f06f 0015 	mvn.w	r0, #21
}
    5646:	4770      	bx	lr
		return -EPERM;
    5648:	f04f 30ff 	mov.w	r0, #4294967295
    564c:	e7d4      	b.n	55f8 <z_impl_k_mutex_unlock+0x28>
    564e:	bf00      	nop
    5650:	20000d20 	.word	0x20000d20
    5654:	20000d4c 	.word	0x20000d4c

00005658 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5658:	b538      	push	{r3, r4, r5, lr}
    565a:	4604      	mov	r4, r0
	__asm__ volatile(
    565c:	f04f 0320 	mov.w	r3, #32
    5660:	f3ef 8511 	mrs	r5, BASEPRI
    5664:	f383 8812 	msr	BASEPRI_MAX, r3
    5668:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    566c:	f002 fc59 	bl	7f22 <z_unpend_first_thread>

	if (thread != NULL) {
    5670:	b148      	cbz	r0, 5686 <z_impl_k_sem_give+0x2e>
    5672:	2200      	movs	r2, #0
    5674:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5678:	f002 fb8c 	bl	7d94 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    567c:	4629      	mov	r1, r5
    567e:	4807      	ldr	r0, [pc, #28]	; (569c <z_impl_k_sem_give+0x44>)
    5680:	f000 f9fc 	bl	5a7c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5684:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5686:	68a3      	ldr	r3, [r4, #8]
    5688:	68e2      	ldr	r2, [r4, #12]
    568a:	4293      	cmp	r3, r2
    568c:	d003      	beq.n	5696 <z_impl_k_sem_give+0x3e>
    568e:	2201      	movs	r2, #1
    5690:	4413      	add	r3, r2
    5692:	60a3      	str	r3, [r4, #8]
}
    5694:	e7f2      	b.n	567c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5696:	2200      	movs	r2, #0
    5698:	e7fa      	b.n	5690 <z_impl_k_sem_give+0x38>
    569a:	bf00      	nop
    569c:	20000d4c 	.word	0x20000d4c

000056a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    56a0:	b510      	push	{r4, lr}
    56a2:	b082      	sub	sp, #8
    56a4:	f04f 0420 	mov.w	r4, #32
    56a8:	f3ef 8111 	mrs	r1, BASEPRI
    56ac:	f384 8812 	msr	BASEPRI_MAX, r4
    56b0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    56b4:	6884      	ldr	r4, [r0, #8]
    56b6:	b144      	cbz	r4, 56ca <z_impl_k_sem_take+0x2a>
		sem->count--;
    56b8:	3c01      	subs	r4, #1
    56ba:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    56bc:	f381 8811 	msr	BASEPRI, r1
    56c0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    56c4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    56c6:	b002      	add	sp, #8
    56c8:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    56ca:	ea53 0402 	orrs.w	r4, r3, r2
    56ce:	d006      	beq.n	56de <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    56d0:	9200      	str	r2, [sp, #0]
    56d2:	9301      	str	r3, [sp, #4]
    56d4:	4602      	mov	r2, r0
    56d6:	4805      	ldr	r0, [pc, #20]	; (56ec <z_impl_k_sem_take+0x4c>)
    56d8:	f000 fb58 	bl	5d8c <z_pend_curr>
	return ret;
    56dc:	e7f3      	b.n	56c6 <z_impl_k_sem_take+0x26>
    56de:	f381 8811 	msr	BASEPRI, r1
    56e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    56e6:	f06f 000f 	mvn.w	r0, #15
    56ea:	e7ec      	b.n	56c6 <z_impl_k_sem_take+0x26>
    56ec:	20000d4c 	.word	0x20000d4c

000056f0 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    56f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56f2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    56f4:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    56f6:	f013 0f02 	tst.w	r3, #2
    56fa:	d15c      	bne.n	57b6 <submit_to_queue_locked+0xc6>
    56fc:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    56fe:	f013 0f04 	tst.w	r3, #4
    5702:	d15d      	bne.n	57c0 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    5704:	680b      	ldr	r3, [r1, #0]
    5706:	2b00      	cmp	r3, #0
    5708:	d038      	beq.n	577c <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
    570a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    570c:	f013 0f01 	tst.w	r3, #1
    5710:	d037      	beq.n	5782 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    5712:	68a3      	ldr	r3, [r4, #8]
    5714:	602b      	str	r3, [r5, #0]
			ret = 2;
    5716:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    5718:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    571a:	2e00      	cmp	r6, #0
    571c:	d03f      	beq.n	579e <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    571e:	4b29      	ldr	r3, [pc, #164]	; (57c4 <submit_to_queue_locked+0xd4>)
    5720:	689b      	ldr	r3, [r3, #8]
    5722:	42b3      	cmp	r3, r6
    5724:	d02f      	beq.n	5786 <submit_to_queue_locked+0x96>
    5726:	2300      	movs	r3, #0
    5728:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    572a:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    572e:	f3c3 0180 	ubfx	r1, r3, #2, #1
    5732:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5736:	f013 0f01 	tst.w	r3, #1
    573a:	d033      	beq.n	57a4 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
    573c:	b101      	cbz	r1, 5740 <submit_to_queue_locked+0x50>
    573e:	b3a2      	cbz	r2, 57aa <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
    5740:	b100      	cbz	r0, 5744 <submit_to_queue_locked+0x54>
    5742:	b3a9      	cbz	r1, 57b0 <submit_to_queue_locked+0xc0>
	parent->next = child;
    5744:	2300      	movs	r3, #0
    5746:	6023      	str	r3, [r4, #0]
	return list->tail;
    5748:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    574c:	b313      	cbz	r3, 5794 <submit_to_queue_locked+0xa4>
	parent->next = child;
    574e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5750:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	if (queue != NULL) {
    5754:	b12e      	cbz	r6, 5762 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    5756:	2200      	movs	r2, #0
    5758:	4611      	mov	r1, r2
    575a:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    575e:	f002 fc0f 	bl	7f80 <z_sched_wake>
		ret = 1;
    5762:	2001      	movs	r0, #1

		if (rc < 0) {
    5764:	2800      	cmp	r0, #0
    5766:	db06      	blt.n	5776 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
    5768:	68e3      	ldr	r3, [r4, #12]
    576a:	f043 0304 	orr.w	r3, r3, #4
    576e:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    5770:	682b      	ldr	r3, [r5, #0]
    5772:	60a3      	str	r3, [r4, #8]
    5774:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    5776:	2800      	cmp	r0, #0
    5778:	dc21      	bgt.n	57be <submit_to_queue_locked+0xce>
    577a:	e01e      	b.n	57ba <submit_to_queue_locked+0xca>
			*queuep = work->queue;
    577c:	6883      	ldr	r3, [r0, #8]
    577e:	600b      	str	r3, [r1, #0]
    5780:	e7c3      	b.n	570a <submit_to_queue_locked+0x1a>
		ret = 1;
    5782:	2701      	movs	r7, #1
    5784:	e7c8      	b.n	5718 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5786:	f002 fa26 	bl	7bd6 <k_is_in_isr>
    578a:	b908      	cbnz	r0, 5790 <submit_to_queue_locked+0xa0>
    578c:	2301      	movs	r3, #1
    578e:	e7cb      	b.n	5728 <submit_to_queue_locked+0x38>
    5790:	2300      	movs	r3, #0
    5792:	e7c9      	b.n	5728 <submit_to_queue_locked+0x38>
    5794:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    5798:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    579c:	e7da      	b.n	5754 <submit_to_queue_locked+0x64>
		return -EINVAL;
    579e:	f06f 0015 	mvn.w	r0, #21
    57a2:	e7df      	b.n	5764 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
    57a4:	f06f 0012 	mvn.w	r0, #18
    57a8:	e7dc      	b.n	5764 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
    57aa:	f06f 000f 	mvn.w	r0, #15
    57ae:	e7d9      	b.n	5764 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
    57b0:	f06f 000f 	mvn.w	r0, #15
    57b4:	e7d6      	b.n	5764 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
    57b6:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    57ba:	2300      	movs	r3, #0
    57bc:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    57be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    57c0:	2000      	movs	r0, #0
    57c2:	e7fa      	b.n	57ba <submit_to_queue_locked+0xca>
    57c4:	20000d20 	.word	0x20000d20

000057c8 <finalize_cancel_locked>:
{
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    57cc:	68c3      	ldr	r3, [r0, #12]
    57ce:	f023 0302 	bic.w	r3, r3, #2
    57d2:	60c3      	str	r3, [r0, #12]
	return list->head;
    57d4:	4b1a      	ldr	r3, [pc, #104]	; (5840 <finalize_cancel_locked+0x78>)
    57d6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    57d8:	b1fb      	cbz	r3, 581a <finalize_cancel_locked+0x52>
    57da:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    57dc:	b103      	cbz	r3, 57e0 <finalize_cancel_locked+0x18>
	return node->next;
    57de:	681c      	ldr	r4, [r3, #0]
    57e0:	2600      	movs	r6, #0
    57e2:	e01f      	b.n	5824 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    57e4:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    57e6:	b166      	cbz	r6, 5802 <finalize_cancel_locked+0x3a>
	return node->next;
    57e8:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
    57ea:	6031      	str	r1, [r6, #0]
	return list->tail;
    57ec:	4914      	ldr	r1, [pc, #80]	; (5840 <finalize_cancel_locked+0x78>)
    57ee:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
    57f0:	428b      	cmp	r3, r1
    57f2:	d00f      	beq.n	5814 <finalize_cancel_locked+0x4c>
	parent->next = child;
    57f4:	2100      	movs	r1, #0
    57f6:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
    57f8:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
    57fc:	f7ff ff2c 	bl	5658 <z_impl_k_sem_give>
}
    5800:	e015      	b.n	582e <finalize_cancel_locked+0x66>
	return node->next;
    5802:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    5804:	490e      	ldr	r1, [pc, #56]	; (5840 <finalize_cancel_locked+0x78>)
    5806:	6008      	str	r0, [r1, #0]
	return list->tail;
    5808:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
    580a:	428b      	cmp	r3, r1
    580c:	d1f2      	bne.n	57f4 <finalize_cancel_locked+0x2c>
	list->tail = node;
    580e:	490c      	ldr	r1, [pc, #48]	; (5840 <finalize_cancel_locked+0x78>)
    5810:	6048      	str	r0, [r1, #4]
}
    5812:	e7ef      	b.n	57f4 <finalize_cancel_locked+0x2c>
	list->tail = node;
    5814:	490a      	ldr	r1, [pc, #40]	; (5840 <finalize_cancel_locked+0x78>)
    5816:	604e      	str	r6, [r1, #4]
}
    5818:	e7ec      	b.n	57f4 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    581a:	461c      	mov	r4, r3
    581c:	e7e0      	b.n	57e0 <finalize_cancel_locked+0x18>
    581e:	4622      	mov	r2, r4
    5820:	4623      	mov	r3, r4
    5822:	4614      	mov	r4, r2
    5824:	b153      	cbz	r3, 583c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
    5826:	685a      	ldr	r2, [r3, #4]
    5828:	42aa      	cmp	r2, r5
    582a:	d0db      	beq.n	57e4 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    582c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    582e:	2c00      	cmp	r4, #0
    5830:	d0f5      	beq.n	581e <finalize_cancel_locked+0x56>
    5832:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5834:	2c00      	cmp	r4, #0
    5836:	d0f3      	beq.n	5820 <finalize_cancel_locked+0x58>
	return node->next;
    5838:	6822      	ldr	r2, [r4, #0]
    583a:	e7f1      	b.n	5820 <finalize_cancel_locked+0x58>
}
    583c:	bd70      	pop	{r4, r5, r6, pc}
    583e:	bf00      	nop
    5840:	20000d4c 	.word	0x20000d4c

00005844 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    5844:	b5f0      	push	{r4, r5, r6, r7, lr}
    5846:	b085      	sub	sp, #20
    5848:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    584a:	e016      	b.n	587a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    584c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    5850:	f023 0204 	bic.w	r2, r3, #4
    5854:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    5858:	f013 0f04 	tst.w	r3, #4
    585c:	d159      	bne.n	5912 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    585e:	2300      	movs	r3, #0
    5860:	9302      	str	r3, [sp, #8]
    5862:	f04f 32ff 	mov.w	r2, #4294967295
    5866:	f04f 33ff 	mov.w	r3, #4294967295
    586a:	e9cd 2300 	strd	r2, r3, [sp]
    586e:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    5872:	4631      	mov	r1, r6
    5874:	482e      	ldr	r0, [pc, #184]	; (5930 <work_queue_main+0xec>)
    5876:	f000 fcab 	bl	61d0 <z_sched_wait>
	__asm__ volatile(
    587a:	f04f 0320 	mov.w	r3, #32
    587e:	f3ef 8611 	mrs	r6, BASEPRI
    5882:	f383 8812 	msr	BASEPRI_MAX, r3
    5886:	f3bf 8f6f 	isb	sy
	return list->head;
    588a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    588e:	2c00      	cmp	r4, #0
    5890:	d0dc      	beq.n	584c <work_queue_main+0x8>
	return node->next;
    5892:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    5894:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    5898:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    589c:	4294      	cmp	r4, r2
    589e:	d035      	beq.n	590c <work_queue_main+0xc8>
	*flagp |= BIT(bit);
    58a0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    58a4:	f043 0302 	orr.w	r3, r3, #2
    58a8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    58ac:	68e3      	ldr	r3, [r4, #12]
    58ae:	f043 0301 	orr.w	r3, r3, #1
    58b2:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
    58b4:	f023 0304 	bic.w	r3, r3, #4
    58b8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    58ba:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    58bc:	2c00      	cmp	r4, #0
    58be:	d0ce      	beq.n	585e <work_queue_main+0x1a>
	__asm__ volatile(
    58c0:	f386 8811 	msr	BASEPRI, r6
    58c4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    58c8:	4620      	mov	r0, r4
    58ca:	4798      	blx	r3
	__asm__ volatile(
    58cc:	f04f 0320 	mov.w	r3, #32
    58d0:	f3ef 8611 	mrs	r6, BASEPRI
    58d4:	f383 8812 	msr	BASEPRI_MAX, r3
    58d8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    58dc:	68e3      	ldr	r3, [r4, #12]
    58de:	f023 0301 	bic.w	r3, r3, #1
    58e2:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    58e4:	f013 0f02 	tst.w	r3, #2
    58e8:	d11e      	bne.n	5928 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    58ea:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    58ee:	f023 0302 	bic.w	r3, r3, #2
    58f2:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    58f6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    58fa:	f386 8811 	msr	BASEPRI, r6
    58fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    5902:	2b00      	cmp	r3, #0
    5904:	d1b9      	bne.n	587a <work_queue_main+0x36>
	z_impl_k_yield();
    5906:	f000 fb79 	bl	5ffc <z_impl_k_yield>
}
    590a:	e7b6      	b.n	587a <work_queue_main+0x36>
	list->tail = node;
    590c:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    5910:	e7c6      	b.n	58a0 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    5912:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    5916:	2200      	movs	r2, #0
    5918:	2101      	movs	r1, #1
    591a:	4638      	mov	r0, r7
    591c:	f002 fb30 	bl	7f80 <z_sched_wake>
    5920:	2800      	cmp	r0, #0
    5922:	d1f8      	bne.n	5916 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
    5924:	2300      	movs	r3, #0
    5926:	e7c9      	b.n	58bc <work_queue_main+0x78>
			finalize_cancel_locked(work);
    5928:	4620      	mov	r0, r4
    592a:	f7ff ff4d 	bl	57c8 <finalize_cancel_locked>
    592e:	e7dc      	b.n	58ea <work_queue_main+0xa6>
    5930:	20000d4c 	.word	0x20000d4c

00005934 <k_work_submit>:
{
    5934:	b508      	push	{r3, lr}
    5936:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    5938:	4801      	ldr	r0, [pc, #4]	; (5940 <k_work_submit+0xc>)
    593a:	f002 f9b5 	bl	7ca8 <k_work_submit_to_queue>
}
    593e:	bd08      	pop	{r3, pc}
    5940:	20000638 	.word	0x20000638

00005944 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    5944:	b5f0      	push	{r4, r5, r6, r7, lr}
    5946:	b089      	sub	sp, #36	; 0x24
    5948:	4604      	mov	r4, r0
    594a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    594c:	2000      	movs	r0, #0
    594e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    5952:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    5956:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    595a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    595e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    5962:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    5966:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    596a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    596e:	b1fd      	cbz	r5, 59b0 <k_work_queue_start+0x6c>
    5970:	7928      	ldrb	r0, [r5, #4]
    5972:	b9f8      	cbnz	r0, 59b4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5974:	2001      	movs	r0, #1
	*flagp = flags;
    5976:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    597a:	f04f 36ff 	mov.w	r6, #4294967295
    597e:	f04f 37ff 	mov.w	r7, #4294967295
    5982:	e9cd 6706 	strd	r6, r7, [sp, #24]
    5986:	2000      	movs	r0, #0
    5988:	9004      	str	r0, [sp, #16]
    598a:	9303      	str	r3, [sp, #12]
    598c:	9002      	str	r0, [sp, #8]
    598e:	9001      	str	r0, [sp, #4]
    5990:	9400      	str	r4, [sp, #0]
    5992:	4b0a      	ldr	r3, [pc, #40]	; (59bc <k_work_queue_start+0x78>)
    5994:	4620      	mov	r0, r4
    5996:	f002 f933 	bl	7c00 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    599a:	b125      	cbz	r5, 59a6 <k_work_queue_start+0x62>
    599c:	6829      	ldr	r1, [r5, #0]
    599e:	b111      	cbz	r1, 59a6 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    59a0:	4620      	mov	r0, r4
    59a2:	f7ff fbeb 	bl	517c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    59a6:	4620      	mov	r0, r4
    59a8:	f002 f91b 	bl	7be2 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    59ac:	b009      	add	sp, #36	; 0x24
    59ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    59b0:	2001      	movs	r0, #1
    59b2:	e7e0      	b.n	5976 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    59b4:	f240 1001 	movw	r0, #257	; 0x101
    59b8:	e7dd      	b.n	5976 <k_work_queue_start+0x32>
    59ba:	bf00      	nop
    59bc:	00005845 	.word	0x00005845

000059c0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    59c4:	bf08      	it	eq
    59c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    59ca:	d100      	bne.n	59ce <add_thread_timeout+0xe>
    59cc:	4770      	bx	lr
{
    59ce:	b508      	push	{r3, lr}
    59d0:	4902      	ldr	r1, [pc, #8]	; (59dc <add_thread_timeout+0x1c>)
    59d2:	3018      	adds	r0, #24
    59d4:	f000 fc72 	bl	62bc <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    59d8:	bd08      	pop	{r3, pc}
    59da:	bf00      	nop
    59dc:	00007dcd 	.word	0x00007dcd

000059e0 <z_reset_time_slice>:
{
    59e0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    59e2:	4b07      	ldr	r3, [pc, #28]	; (5a00 <z_reset_time_slice+0x20>)
    59e4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    59e6:	b904      	cbnz	r4, 59ea <z_reset_time_slice+0xa>
}
    59e8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    59ea:	f7fd fe5d 	bl	36a8 <sys_clock_elapsed>
    59ee:	4404      	add	r4, r0
    59f0:	4b04      	ldr	r3, [pc, #16]	; (5a04 <z_reset_time_slice+0x24>)
    59f2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    59f4:	2100      	movs	r1, #0
    59f6:	4b02      	ldr	r3, [pc, #8]	; (5a00 <z_reset_time_slice+0x20>)
    59f8:	6818      	ldr	r0, [r3, #0]
    59fa:	f002 fb44 	bl	8086 <z_set_timeout_expiry>
}
    59fe:	e7f3      	b.n	59e8 <z_reset_time_slice+0x8>
    5a00:	20000d5c 	.word	0x20000d5c
    5a04:	20000d20 	.word	0x20000d20

00005a08 <k_sched_time_slice_set>:
{
    5a08:	b570      	push	{r4, r5, r6, lr}
    5a0a:	4604      	mov	r4, r0
    5a0c:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    5a0e:	2300      	movs	r3, #0
	__asm__ volatile(
    5a10:	f04f 0220 	mov.w	r2, #32
    5a14:	f3ef 8611 	mrs	r6, BASEPRI
    5a18:	f382 8812 	msr	BASEPRI_MAX, r2
    5a1c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5a20:	e00e      	b.n	5a40 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    5a22:	2802      	cmp	r0, #2
    5a24:	bfb8      	it	lt
    5a26:	2002      	movlt	r0, #2
    5a28:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    5a2a:	4b11      	ldr	r3, [pc, #68]	; (5a70 <k_sched_time_slice_set+0x68>)
    5a2c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5a2e:	4b11      	ldr	r3, [pc, #68]	; (5a74 <k_sched_time_slice_set+0x6c>)
    5a30:	6898      	ldr	r0, [r3, #8]
    5a32:	f7ff ffd5 	bl	59e0 <z_reset_time_slice>
	__asm__ volatile(
    5a36:	f386 8811 	msr	BASEPRI, r6
    5a3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5a3e:	2301      	movs	r3, #1
    5a40:	b9a3      	cbnz	r3, 5a6c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    5a42:	4b0c      	ldr	r3, [pc, #48]	; (5a74 <k_sched_time_slice_set+0x6c>)
    5a44:	2200      	movs	r2, #0
    5a46:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    5a48:	0c61      	lsrs	r1, r4, #17
    5a4a:	03e3      	lsls	r3, r4, #15
    5a4c:	f240 30e7 	movw	r0, #999	; 0x3e7
    5a50:	1818      	adds	r0, r3, r0
    5a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a56:	f04f 0300 	mov.w	r3, #0
    5a5a:	f141 0100 	adc.w	r1, r1, #0
    5a5e:	f7fa febb 	bl	7d8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5a62:	4b05      	ldr	r3, [pc, #20]	; (5a78 <k_sched_time_slice_set+0x70>)
    5a64:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5a66:	2c00      	cmp	r4, #0
    5a68:	dcdb      	bgt.n	5a22 <k_sched_time_slice_set+0x1a>
    5a6a:	e7de      	b.n	5a2a <k_sched_time_slice_set+0x22>
}
    5a6c:	bd70      	pop	{r4, r5, r6, pc}
    5a6e:	bf00      	nop
    5a70:	20000d58 	.word	0x20000d58
    5a74:	20000d20 	.word	0x20000d20
    5a78:	20000d5c 	.word	0x20000d5c

00005a7c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5a7c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    5a7e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5a80:	b921      	cbnz	r1, 5a8c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5a82:	f3ef 8305 	mrs	r3, IPSR
    5a86:	b913      	cbnz	r3, 5a8e <z_reschedule+0x12>
    5a88:	2101      	movs	r1, #1
    5a8a:	e000      	b.n	5a8e <z_reschedule+0x12>
    5a8c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    5a8e:	f011 0f01 	tst.w	r1, #1
    5a92:	d007      	beq.n	5aa4 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    5a94:	4b06      	ldr	r3, [pc, #24]	; (5ab0 <z_reschedule+0x34>)
    5a96:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    5a98:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    5a9a:	429a      	cmp	r2, r3
    5a9c:	d002      	beq.n	5aa4 <z_reschedule+0x28>
	ret = arch_swap(key);
    5a9e:	f7fc fa8d 	bl	1fbc <arch_swap>
		z_swap(lock, key);
    5aa2:	e003      	b.n	5aac <z_reschedule+0x30>
    5aa4:	f380 8811 	msr	BASEPRI, r0
    5aa8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    5aac:	bd08      	pop	{r3, pc}
    5aae:	bf00      	nop
    5ab0:	20000d20 	.word	0x20000d20

00005ab4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    5ab4:	2300      	movs	r3, #0
	__asm__ volatile(
    5ab6:	f04f 0220 	mov.w	r2, #32
    5aba:	f3ef 8111 	mrs	r1, BASEPRI
    5abe:	f382 8812 	msr	BASEPRI_MAX, r2
    5ac2:	f3bf 8f6f 	isb	sy
    5ac6:	e009      	b.n	5adc <k_sched_lock+0x28>
	--_current->base.sched_locked;
    5ac8:	4b06      	ldr	r3, [pc, #24]	; (5ae4 <k_sched_lock+0x30>)
    5aca:	689a      	ldr	r2, [r3, #8]
    5acc:	7bd3      	ldrb	r3, [r2, #15]
    5ace:	3b01      	subs	r3, #1
    5ad0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5ad2:	f381 8811 	msr	BASEPRI, r1
    5ad6:	f3bf 8f6f 	isb	sy
    5ada:	2301      	movs	r3, #1
    5adc:	2b00      	cmp	r3, #0
    5ade:	d0f3      	beq.n	5ac8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5ae0:	4770      	bx	lr
    5ae2:	bf00      	nop
    5ae4:	20000d20 	.word	0x20000d20

00005ae8 <update_cache>:
{
    5ae8:	b538      	push	{r3, r4, r5, lr}
    5aea:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    5aec:	4810      	ldr	r0, [pc, #64]	; (5b30 <update_cache+0x48>)
    5aee:	f002 f94a 	bl	7d86 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5af2:	4605      	mov	r5, r0
    5af4:	b170      	cbz	r0, 5b14 <update_cache+0x2c>
	if (preempt_ok != 0) {
    5af6:	b984      	cbnz	r4, 5b1a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    5af8:	4b0e      	ldr	r3, [pc, #56]	; (5b34 <update_cache+0x4c>)
    5afa:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    5afc:	7b5a      	ldrb	r2, [r3, #13]
    5afe:	f012 0f1f 	tst.w	r2, #31
    5b02:	d10a      	bne.n	5b1a <update_cache+0x32>
	return node->next != NULL;
    5b04:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5b06:	b942      	cbnz	r2, 5b1a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    5b08:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    5b0a:	2a7f      	cmp	r2, #127	; 0x7f
    5b0c:	d905      	bls.n	5b1a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    5b0e:	4a09      	ldr	r2, [pc, #36]	; (5b34 <update_cache+0x4c>)
    5b10:	61d3      	str	r3, [r2, #28]
    5b12:	e00b      	b.n	5b2c <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5b14:	4b07      	ldr	r3, [pc, #28]	; (5b34 <update_cache+0x4c>)
    5b16:	68dd      	ldr	r5, [r3, #12]
    5b18:	e7ed      	b.n	5af6 <update_cache+0xe>
		if (thread != _current) {
    5b1a:	4b06      	ldr	r3, [pc, #24]	; (5b34 <update_cache+0x4c>)
    5b1c:	689b      	ldr	r3, [r3, #8]
    5b1e:	42ab      	cmp	r3, r5
    5b20:	d002      	beq.n	5b28 <update_cache+0x40>
			z_reset_time_slice(thread);
    5b22:	4628      	mov	r0, r5
    5b24:	f7ff ff5c 	bl	59e0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5b28:	4b02      	ldr	r3, [pc, #8]	; (5b34 <update_cache+0x4c>)
    5b2a:	61dd      	str	r5, [r3, #28]
}
    5b2c:	bd38      	pop	{r3, r4, r5, pc}
    5b2e:	bf00      	nop
    5b30:	20000d40 	.word	0x20000d40
    5b34:	20000d20 	.word	0x20000d20

00005b38 <move_thread_to_end_of_prio_q>:
{
    5b38:	b538      	push	{r3, r4, r5, lr}
    5b3a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    5b3c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    5b3e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5b42:	2b00      	cmp	r3, #0
    5b44:	db28      	blt.n	5b98 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    5b46:	7b6b      	ldrb	r3, [r5, #13]
    5b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b4c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    5b4e:	4b1a      	ldr	r3, [pc, #104]	; (5bb8 <move_thread_to_end_of_prio_q+0x80>)
    5b50:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b54:	429c      	cmp	r4, r3
    5b56:	d02d      	beq.n	5bb4 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b58:	b16c      	cbz	r4, 5b76 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b5a:	4621      	mov	r1, r4
    5b5c:	4628      	mov	r0, r5
    5b5e:	f002 f8cb 	bl	7cf8 <z_sched_prio_cmp>
    5b62:	2800      	cmp	r0, #0
    5b64:	dc20      	bgt.n	5ba8 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5b66:	b134      	cbz	r4, 5b76 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    5b68:	4b13      	ldr	r3, [pc, #76]	; (5bb8 <move_thread_to_end_of_prio_q+0x80>)
    5b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5b6c:	429c      	cmp	r4, r3
    5b6e:	d002      	beq.n	5b76 <move_thread_to_end_of_prio_q+0x3e>
    5b70:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b72:	2c00      	cmp	r4, #0
    5b74:	d1f0      	bne.n	5b58 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    5b76:	4b10      	ldr	r3, [pc, #64]	; (5bb8 <move_thread_to_end_of_prio_q+0x80>)
    5b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    5b7a:	f103 0120 	add.w	r1, r3, #32
    5b7e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    5b80:	606a      	str	r2, [r5, #4]

	tail->next = node;
    5b82:	6015      	str	r5, [r2, #0]
	list->tail = node;
    5b84:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    5b86:	4b0c      	ldr	r3, [pc, #48]	; (5bb8 <move_thread_to_end_of_prio_q+0x80>)
    5b88:	6898      	ldr	r0, [r3, #8]
    5b8a:	42a8      	cmp	r0, r5
    5b8c:	bf14      	ite	ne
    5b8e:	2000      	movne	r0, #0
    5b90:	2001      	moveq	r0, #1
    5b92:	f7ff ffa9 	bl	5ae8 <update_cache>
}
    5b96:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5b9c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5b9e:	4601      	mov	r1, r0
    5ba0:	4806      	ldr	r0, [pc, #24]	; (5bbc <move_thread_to_end_of_prio_q+0x84>)
    5ba2:	f002 f8e8 	bl	7d76 <z_priq_dumb_remove>
}
    5ba6:	e7ce      	b.n	5b46 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5ba8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    5baa:	606b      	str	r3, [r5, #4]
	node->next = successor;
    5bac:	602c      	str	r4, [r5, #0]
	prev->next = node;
    5bae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    5bb0:	6065      	str	r5, [r4, #4]
}
    5bb2:	e7e8      	b.n	5b86 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5bb4:	2400      	movs	r4, #0
    5bb6:	e7cf      	b.n	5b58 <move_thread_to_end_of_prio_q+0x20>
    5bb8:	20000d20 	.word	0x20000d20
    5bbc:	20000d40 	.word	0x20000d40

00005bc0 <slice_expired_locked>:
{
    5bc0:	b538      	push	{r3, r4, r5, lr}
    5bc2:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    5bc4:	4b07      	ldr	r3, [pc, #28]	; (5be4 <slice_expired_locked+0x24>)
    5bc6:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    5bc8:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    5bca:	f013 0f1f 	tst.w	r3, #31
    5bce:	d004      	beq.n	5bda <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    5bd0:	4628      	mov	r0, r5
    5bd2:	f7ff ff05 	bl	59e0 <z_reset_time_slice>
}
    5bd6:	4620      	mov	r0, r4
    5bd8:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    5bda:	4628      	mov	r0, r5
    5bdc:	f7ff ffac 	bl	5b38 <move_thread_to_end_of_prio_q>
    5be0:	e7f6      	b.n	5bd0 <slice_expired_locked+0x10>
    5be2:	bf00      	nop
    5be4:	20000d20 	.word	0x20000d20

00005be8 <z_time_slice>:
{
    5be8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5bea:	f04f 0320 	mov.w	r3, #32
    5bee:	f3ef 8411 	mrs	r4, BASEPRI
    5bf2:	f383 8812 	msr	BASEPRI_MAX, r3
    5bf6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5bfa:	4b22      	ldr	r3, [pc, #136]	; (5c84 <z_time_slice+0x9c>)
    5bfc:	689b      	ldr	r3, [r3, #8]
    5bfe:	4a22      	ldr	r2, [pc, #136]	; (5c88 <z_time_slice+0xa0>)
    5c00:	6812      	ldr	r2, [r2, #0]
    5c02:	4293      	cmp	r3, r2
    5c04:	d018      	beq.n	5c38 <z_time_slice+0x50>
    5c06:	4621      	mov	r1, r4
	pending_current = NULL;
    5c08:	4a1f      	ldr	r2, [pc, #124]	; (5c88 <z_time_slice+0xa0>)
    5c0a:	2500      	movs	r5, #0
    5c0c:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    5c0e:	4a1f      	ldr	r2, [pc, #124]	; (5c8c <z_time_slice+0xa4>)
    5c10:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    5c12:	b372      	cbz	r2, 5c72 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    5c14:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    5c16:	2a7f      	cmp	r2, #127	; 0x7f
    5c18:	d816      	bhi.n	5c48 <z_time_slice+0x60>
    5c1a:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    5c1c:	f012 0f1f 	tst.w	r2, #31
    5c20:	d11c      	bne.n	5c5c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5c22:	f993 500e 	ldrsb.w	r5, [r3, #14]
    5c26:	4a1a      	ldr	r2, [pc, #104]	; (5c90 <z_time_slice+0xa8>)
    5c28:	6812      	ldr	r2, [r2, #0]
    5c2a:	4295      	cmp	r5, r2
    5c2c:	db18      	blt.n	5c60 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    5c2e:	4a19      	ldr	r2, [pc, #100]	; (5c94 <z_time_slice+0xac>)
    5c30:	4293      	cmp	r3, r2
    5c32:	d017      	beq.n	5c64 <z_time_slice+0x7c>
    5c34:	2301      	movs	r3, #1
    5c36:	e008      	b.n	5c4a <z_time_slice+0x62>
		z_reset_time_slice(_current);
    5c38:	4618      	mov	r0, r3
    5c3a:	f7ff fed1 	bl	59e0 <z_reset_time_slice>
	__asm__ volatile(
    5c3e:	f384 8811 	msr	BASEPRI, r4
    5c42:	f3bf 8f6f 	isb	sy
		return;
    5c46:	e01b      	b.n	5c80 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    5c48:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    5c4a:	b193      	cbz	r3, 5c72 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    5c4c:	4b0d      	ldr	r3, [pc, #52]	; (5c84 <z_time_slice+0x9c>)
    5c4e:	691b      	ldr	r3, [r3, #16]
    5c50:	4283      	cmp	r3, r0
    5c52:	dd09      	ble.n	5c68 <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    5c54:	1a18      	subs	r0, r3, r0
    5c56:	4b0b      	ldr	r3, [pc, #44]	; (5c84 <z_time_slice+0x9c>)
    5c58:	6118      	str	r0, [r3, #16]
    5c5a:	e00d      	b.n	5c78 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    5c5c:	2300      	movs	r3, #0
    5c5e:	e7f4      	b.n	5c4a <z_time_slice+0x62>
    5c60:	2300      	movs	r3, #0
    5c62:	e7f2      	b.n	5c4a <z_time_slice+0x62>
    5c64:	2300      	movs	r3, #0
    5c66:	e7f0      	b.n	5c4a <z_time_slice+0x62>
			key = slice_expired_locked(key);
    5c68:	4620      	mov	r0, r4
    5c6a:	f7ff ffa9 	bl	5bc0 <slice_expired_locked>
    5c6e:	4601      	mov	r1, r0
    5c70:	e002      	b.n	5c78 <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    5c72:	4b04      	ldr	r3, [pc, #16]	; (5c84 <z_time_slice+0x9c>)
    5c74:	2200      	movs	r2, #0
    5c76:	611a      	str	r2, [r3, #16]
    5c78:	f381 8811 	msr	BASEPRI, r1
    5c7c:	f3bf 8f6f 	isb	sy
}
    5c80:	bd38      	pop	{r3, r4, r5, pc}
    5c82:	bf00      	nop
    5c84:	20000d20 	.word	0x20000d20
    5c88:	20000d54 	.word	0x20000d54
    5c8c:	20000d5c 	.word	0x20000d5c
    5c90:	20000d58 	.word	0x20000d58
    5c94:	200004d0 	.word	0x200004d0

00005c98 <ready_thread>:
{
    5c98:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    5c9a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5c9c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5ca0:	2a00      	cmp	r2, #0
    5ca2:	db2d      	blt.n	5d00 <ready_thread+0x68>
    5ca4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5ca6:	f013 0f1f 	tst.w	r3, #31
    5caa:	d105      	bne.n	5cb8 <ready_thread+0x20>
	return node->next != NULL;
    5cac:	6982      	ldr	r2, [r0, #24]
    5cae:	b10a      	cbz	r2, 5cb4 <ready_thread+0x1c>
    5cb0:	2200      	movs	r2, #0
    5cb2:	e002      	b.n	5cba <ready_thread+0x22>
    5cb4:	2201      	movs	r2, #1
    5cb6:	e000      	b.n	5cba <ready_thread+0x22>
    5cb8:	2200      	movs	r2, #0
    5cba:	b30a      	cbz	r2, 5d00 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    5cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5cc0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    5cc2:	4b14      	ldr	r3, [pc, #80]	; (5d14 <ready_thread+0x7c>)
    5cc4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cc8:	429d      	cmp	r5, r3
    5cca:	d020      	beq.n	5d0e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ccc:	b16d      	cbz	r5, 5cea <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5cce:	4629      	mov	r1, r5
    5cd0:	4620      	mov	r0, r4
    5cd2:	f002 f811 	bl	7cf8 <z_sched_prio_cmp>
    5cd6:	2800      	cmp	r0, #0
    5cd8:	dc13      	bgt.n	5d02 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5cda:	b135      	cbz	r5, 5cea <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    5cdc:	4b0d      	ldr	r3, [pc, #52]	; (5d14 <ready_thread+0x7c>)
    5cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5ce0:	429d      	cmp	r5, r3
    5ce2:	d002      	beq.n	5cea <ready_thread+0x52>
    5ce4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ce6:	2d00      	cmp	r5, #0
    5ce8:	d1f0      	bne.n	5ccc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    5cea:	4b0a      	ldr	r3, [pc, #40]	; (5d14 <ready_thread+0x7c>)
    5cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5cee:	f103 0120 	add.w	r1, r3, #32
    5cf2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    5cf4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    5cf6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5cf8:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    5cfa:	2000      	movs	r0, #0
    5cfc:	f7ff fef4 	bl	5ae8 <update_cache>
}
    5d00:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    5d02:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    5d04:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5d06:	6025      	str	r5, [r4, #0]
	prev->next = node;
    5d08:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5d0a:	606c      	str	r4, [r5, #4]
}
    5d0c:	e7f5      	b.n	5cfa <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5d0e:	2500      	movs	r5, #0
    5d10:	e7dc      	b.n	5ccc <ready_thread+0x34>
    5d12:	bf00      	nop
    5d14:	20000d20 	.word	0x20000d20

00005d18 <z_sched_start>:
{
    5d18:	b510      	push	{r4, lr}
	__asm__ volatile(
    5d1a:	f04f 0320 	mov.w	r3, #32
    5d1e:	f3ef 8411 	mrs	r4, BASEPRI
    5d22:	f383 8812 	msr	BASEPRI_MAX, r3
    5d26:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5d2a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    5d2c:	f013 0f04 	tst.w	r3, #4
    5d30:	d104      	bne.n	5d3c <z_sched_start+0x24>
	__asm__ volatile(
    5d32:	f384 8811 	msr	BASEPRI, r4
    5d36:	f3bf 8f6f 	isb	sy
}
    5d3a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5d3c:	f023 0304 	bic.w	r3, r3, #4
    5d40:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    5d42:	f7ff ffa9 	bl	5c98 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5d46:	4621      	mov	r1, r4
    5d48:	4801      	ldr	r0, [pc, #4]	; (5d50 <z_sched_start+0x38>)
    5d4a:	f7ff fe97 	bl	5a7c <z_reschedule>
    5d4e:	e7f4      	b.n	5d3a <z_sched_start+0x22>
    5d50:	20000d58 	.word	0x20000d58

00005d54 <unready_thread>:
{
    5d54:	b510      	push	{r4, lr}
    5d56:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    5d58:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    5d5a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	db08      	blt.n	5d74 <unready_thread+0x20>
	update_cache(thread == _current);
    5d62:	4b08      	ldr	r3, [pc, #32]	; (5d84 <unready_thread+0x30>)
    5d64:	6898      	ldr	r0, [r3, #8]
    5d66:	42a0      	cmp	r0, r4
    5d68:	bf14      	ite	ne
    5d6a:	2000      	movne	r0, #0
    5d6c:	2001      	moveq	r0, #1
    5d6e:	f7ff febb 	bl	5ae8 <update_cache>
}
    5d72:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5d78:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5d7a:	4601      	mov	r1, r0
    5d7c:	4802      	ldr	r0, [pc, #8]	; (5d88 <unready_thread+0x34>)
    5d7e:	f001 fffa 	bl	7d76 <z_priq_dumb_remove>
}
    5d82:	e7ee      	b.n	5d62 <unready_thread+0xe>
    5d84:	20000d20 	.word	0x20000d20
    5d88:	20000d40 	.word	0x20000d40

00005d8c <z_pend_curr>:
{
    5d8c:	b510      	push	{r4, lr}
    5d8e:	460c      	mov	r4, r1
    5d90:	4611      	mov	r1, r2
	pending_current = _current;
    5d92:	4b06      	ldr	r3, [pc, #24]	; (5dac <z_pend_curr+0x20>)
    5d94:	6898      	ldr	r0, [r3, #8]
    5d96:	4b06      	ldr	r3, [pc, #24]	; (5db0 <z_pend_curr+0x24>)
    5d98:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    5d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5d9e:	f002 f877 	bl	7e90 <pend>
    5da2:	4620      	mov	r0, r4
    5da4:	f7fc f90a 	bl	1fbc <arch_swap>
}
    5da8:	bd10      	pop	{r4, pc}
    5daa:	bf00      	nop
    5dac:	20000d20 	.word	0x20000d20
    5db0:	20000d54 	.word	0x20000d54

00005db4 <z_set_prio>:
{
    5db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5db8:	4604      	mov	r4, r0
    5dba:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    5dbc:	2300      	movs	r3, #0
	__asm__ volatile(
    5dbe:	f04f 0220 	mov.w	r2, #32
    5dc2:	f3ef 8811 	mrs	r8, BASEPRI
    5dc6:	f382 8812 	msr	BASEPRI_MAX, r2
    5dca:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    5dce:	461f      	mov	r7, r3
    5dd0:	e008      	b.n	5de4 <z_set_prio+0x30>
		if (need_sched) {
    5dd2:	f012 0701 	ands.w	r7, r2, #1
    5dd6:	d111      	bne.n	5dfc <z_set_prio+0x48>
			thread->base.prio = prio;
    5dd8:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    5dda:	f388 8811 	msr	BASEPRI, r8
    5dde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5de2:	2301      	movs	r3, #1
    5de4:	461a      	mov	r2, r3
    5de6:	2b00      	cmp	r3, #0
    5de8:	d13d      	bne.n	5e66 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    5dea:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5dec:	f013 0f1f 	tst.w	r3, #31
    5df0:	d1ef      	bne.n	5dd2 <z_set_prio+0x1e>
	return node->next != NULL;
    5df2:	69a1      	ldr	r1, [r4, #24]
    5df4:	2900      	cmp	r1, #0
    5df6:	d1ec      	bne.n	5dd2 <z_set_prio+0x1e>
    5df8:	2201      	movs	r2, #1
    5dfa:	e7ea      	b.n	5dd2 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e00:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5e02:	f8df 9068 	ldr.w	r9, [pc, #104]	; 5e6c <z_set_prio+0xb8>
    5e06:	4621      	mov	r1, r4
    5e08:	4648      	mov	r0, r9
    5e0a:	f001 ffb4 	bl	7d76 <z_priq_dumb_remove>
				thread->base.prio = prio;
    5e0e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5e10:	7b63      	ldrb	r3, [r4, #13]
    5e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5e16:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    5e18:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e1c:	454d      	cmp	r5, r9
    5e1e:	d020      	beq.n	5e62 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e20:	b16d      	cbz	r5, 5e3e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5e22:	4629      	mov	r1, r5
    5e24:	4620      	mov	r0, r4
    5e26:	f001 ff67 	bl	7cf8 <z_sched_prio_cmp>
    5e2a:	2800      	cmp	r0, #0
    5e2c:	dc13      	bgt.n	5e56 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5e2e:	b135      	cbz	r5, 5e3e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    5e30:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <z_set_prio+0xbc>)
    5e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e34:	429d      	cmp	r5, r3
    5e36:	d002      	beq.n	5e3e <z_set_prio+0x8a>
    5e38:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e3a:	2d00      	cmp	r5, #0
    5e3c:	d1f0      	bne.n	5e20 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    5e3e:	4b0c      	ldr	r3, [pc, #48]	; (5e70 <z_set_prio+0xbc>)
    5e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5e42:	f103 0120 	add.w	r1, r3, #32
    5e46:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    5e48:	6062      	str	r2, [r4, #4]
	tail->next = node;
    5e4a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5e4c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    5e4e:	2001      	movs	r0, #1
    5e50:	f7ff fe4a 	bl	5ae8 <update_cache>
    5e54:	e7c1      	b.n	5dda <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    5e56:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    5e58:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5e5a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    5e5c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5e5e:	606c      	str	r4, [r5, #4]
}
    5e60:	e7f5      	b.n	5e4e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e62:	2500      	movs	r5, #0
    5e64:	e7dc      	b.n	5e20 <z_set_prio+0x6c>
}
    5e66:	4638      	mov	r0, r7
    5e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e6c:	20000d40 	.word	0x20000d40
    5e70:	20000d20 	.word	0x20000d20

00005e74 <z_impl_k_thread_suspend>:
{
    5e74:	b538      	push	{r3, r4, r5, lr}
    5e76:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5e78:	3018      	adds	r0, #24
    5e7a:	f002 f8cf 	bl	801c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    5e7e:	2300      	movs	r3, #0
	__asm__ volatile(
    5e80:	f04f 0220 	mov.w	r2, #32
    5e84:	f3ef 8511 	mrs	r5, BASEPRI
    5e88:	f382 8812 	msr	BASEPRI_MAX, r2
    5e8c:	f3bf 8f6f 	isb	sy
    5e90:	e010      	b.n	5eb4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5e92:	7b63      	ldrb	r3, [r4, #13]
    5e94:	f043 0310 	orr.w	r3, r3, #16
    5e98:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    5e9a:	4b15      	ldr	r3, [pc, #84]	; (5ef0 <z_impl_k_thread_suspend+0x7c>)
    5e9c:	6898      	ldr	r0, [r3, #8]
    5e9e:	42a0      	cmp	r0, r4
    5ea0:	bf14      	ite	ne
    5ea2:	2000      	movne	r0, #0
    5ea4:	2001      	moveq	r0, #1
    5ea6:	f7ff fe1f 	bl	5ae8 <update_cache>
	__asm__ volatile(
    5eaa:	f385 8811 	msr	BASEPRI, r5
    5eae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5eb2:	2301      	movs	r3, #1
    5eb4:	b963      	cbnz	r3, 5ed0 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    5eb6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    5eb8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	dae8      	bge.n	5e92 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5ec4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5ec6:	4621      	mov	r1, r4
    5ec8:	480a      	ldr	r0, [pc, #40]	; (5ef4 <z_impl_k_thread_suspend+0x80>)
    5eca:	f001 ff54 	bl	7d76 <z_priq_dumb_remove>
}
    5ece:	e7e0      	b.n	5e92 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    5ed0:	4b07      	ldr	r3, [pc, #28]	; (5ef0 <z_impl_k_thread_suspend+0x7c>)
    5ed2:	689b      	ldr	r3, [r3, #8]
    5ed4:	42a3      	cmp	r3, r4
    5ed6:	d000      	beq.n	5eda <z_impl_k_thread_suspend+0x66>
}
    5ed8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5eda:	f04f 0320 	mov.w	r3, #32
    5ede:	f3ef 8011 	mrs	r0, BASEPRI
    5ee2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ee6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5eea:	f001 ff2f 	bl	7d4c <z_reschedule_irqlock>
    5eee:	e7f3      	b.n	5ed8 <z_impl_k_thread_suspend+0x64>
    5ef0:	20000d20 	.word	0x20000d20
    5ef4:	20000d40 	.word	0x20000d40

00005ef8 <k_sched_unlock>:

void k_sched_unlock(void)
{
    5ef8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    5efa:	2300      	movs	r3, #0
    5efc:	f04f 0220 	mov.w	r2, #32
    5f00:	f3ef 8411 	mrs	r4, BASEPRI
    5f04:	f382 8812 	msr	BASEPRI_MAX, r2
    5f08:	f3bf 8f6f 	isb	sy
    5f0c:	e00c      	b.n	5f28 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    5f0e:	4b0d      	ldr	r3, [pc, #52]	; (5f44 <k_sched_unlock+0x4c>)
    5f10:	689a      	ldr	r2, [r3, #8]
    5f12:	7bd3      	ldrb	r3, [r2, #15]
    5f14:	3301      	adds	r3, #1
    5f16:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5f18:	2000      	movs	r0, #0
    5f1a:	f7ff fde5 	bl	5ae8 <update_cache>
	__asm__ volatile(
    5f1e:	f384 8811 	msr	BASEPRI, r4
    5f22:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    5f26:	2301      	movs	r3, #1
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d0f0      	beq.n	5f0e <k_sched_unlock+0x16>
	__asm__ volatile(
    5f2c:	f04f 0320 	mov.w	r3, #32
    5f30:	f3ef 8011 	mrs	r0, BASEPRI
    5f34:	f383 8812 	msr	BASEPRI_MAX, r3
    5f38:	f3bf 8f6f 	isb	sy
    5f3c:	f001 ff06 	bl	7d4c <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    5f40:	bd10      	pop	{r4, pc}
    5f42:	bf00      	nop
    5f44:	20000d20 	.word	0x20000d20

00005f48 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    5f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    5f4a:	7b43      	ldrb	r3, [r0, #13]
    5f4c:	f013 0f08 	tst.w	r3, #8
    5f50:	d145      	bne.n	5fde <end_thread+0x96>
    5f52:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    5f54:	f043 0308 	orr.w	r3, r3, #8
    5f58:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5f5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5f5e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    5f60:	f013 0f80 	tst.w	r3, #128	; 0x80
    5f64:	d12d      	bne.n	5fc2 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    5f66:	68ab      	ldr	r3, [r5, #8]
    5f68:	b15b      	cbz	r3, 5f82 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5f6a:	4628      	mov	r0, r5
    5f6c:	f001 fec2 	bl	7cf4 <pended_on_thread>
    5f70:	4629      	mov	r1, r5
    5f72:	f001 ff00 	bl	7d76 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5f76:	7b6b      	ldrb	r3, [r5, #13]
    5f78:	f023 0302 	bic.w	r3, r3, #2
    5f7c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    5f7e:	2300      	movs	r3, #0
    5f80:	60ab      	str	r3, [r5, #8]
    5f82:	f105 0018 	add.w	r0, r5, #24
    5f86:	f002 f849 	bl	801c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    5f8a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    5f8e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f90:	42bc      	cmp	r4, r7
    5f92:	d01e      	beq.n	5fd2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5f94:	b1ec      	cbz	r4, 5fd2 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5f96:	4620      	mov	r0, r4
    5f98:	f001 feac 	bl	7cf4 <pended_on_thread>
    5f9c:	4621      	mov	r1, r4
    5f9e:	f001 feea 	bl	7d76 <z_priq_dumb_remove>
    5fa2:	7b63      	ldrb	r3, [r4, #13]
    5fa4:	f023 0302 	bic.w	r3, r3, #2
    5fa8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5faa:	2600      	movs	r6, #0
    5fac:	60a6      	str	r6, [r4, #8]
    5fae:	f104 0018 	add.w	r0, r4, #24
    5fb2:	f002 f833 	bl	801c <z_abort_timeout>
    5fb6:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    5fba:	4620      	mov	r0, r4
    5fbc:	f7ff fe6c 	bl	5c98 <ready_thread>
    5fc0:	e7e5      	b.n	5f8e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5fc6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5fc8:	4601      	mov	r1, r0
    5fca:	4805      	ldr	r0, [pc, #20]	; (5fe0 <end_thread+0x98>)
    5fcc:	f001 fed3 	bl	7d76 <z_priq_dumb_remove>
}
    5fd0:	e7c9      	b.n	5f66 <end_thread+0x1e>
		update_cache(1);
    5fd2:	2001      	movs	r0, #1
    5fd4:	f7ff fd88 	bl	5ae8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    5fd8:	4628      	mov	r0, r5
    5fda:	f7ff f8af 	bl	513c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    5fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fe0:	20000d40 	.word	0x20000d40

00005fe4 <z_sched_init>:
{
    5fe4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    5fe6:	4804      	ldr	r0, [pc, #16]	; (5ff8 <z_sched_init+0x14>)
    5fe8:	f001 ffc6 	bl	7f78 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5fec:	2100      	movs	r1, #0
    5fee:	4608      	mov	r0, r1
    5ff0:	f7ff fd0a 	bl	5a08 <k_sched_time_slice_set>
}
    5ff4:	bd08      	pop	{r3, pc}
    5ff6:	bf00      	nop
    5ff8:	20000d3c 	.word	0x20000d3c

00005ffc <z_impl_k_yield>:
{
    5ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ffe:	f04f 0320 	mov.w	r3, #32
    6002:	f3ef 8611 	mrs	r6, BASEPRI
    6006:	f383 8812 	msr	BASEPRI_MAX, r3
    600a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    600e:	4c1c      	ldr	r4, [pc, #112]	; (6080 <z_impl_k_yield+0x84>)
    6010:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6012:	7b4b      	ldrb	r3, [r1, #13]
    6014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6018:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    601a:	f104 0720 	add.w	r7, r4, #32
    601e:	4638      	mov	r0, r7
    6020:	f001 fea9 	bl	7d76 <z_priq_dumb_remove>
	queue_thread(_current);
    6024:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6026:	7b6b      	ldrb	r3, [r5, #13]
    6028:	f063 037f 	orn	r3, r3, #127	; 0x7f
    602c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    602e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6030:	42bc      	cmp	r4, r7
    6032:	d023      	beq.n	607c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6034:	b16c      	cbz	r4, 6052 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6036:	4621      	mov	r1, r4
    6038:	4628      	mov	r0, r5
    603a:	f001 fe5d 	bl	7cf8 <z_sched_prio_cmp>
    603e:	2800      	cmp	r0, #0
    6040:	dc16      	bgt.n	6070 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6042:	b134      	cbz	r4, 6052 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    6044:	4b0e      	ldr	r3, [pc, #56]	; (6080 <z_impl_k_yield+0x84>)
    6046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6048:	429c      	cmp	r4, r3
    604a:	d002      	beq.n	6052 <z_impl_k_yield+0x56>
    604c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    604e:	2c00      	cmp	r4, #0
    6050:	d1f0      	bne.n	6034 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    6052:	4b0b      	ldr	r3, [pc, #44]	; (6080 <z_impl_k_yield+0x84>)
    6054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6056:	f103 0120 	add.w	r1, r3, #32
    605a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    605c:	606a      	str	r2, [r5, #4]
	tail->next = node;
    605e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6060:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    6062:	2001      	movs	r0, #1
    6064:	f7ff fd40 	bl	5ae8 <update_cache>
    6068:	4630      	mov	r0, r6
    606a:	f7fb ffa7 	bl	1fbc <arch_swap>
}
    606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    6070:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6072:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6074:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6076:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6078:	6065      	str	r5, [r4, #4]
}
    607a:	e7f2      	b.n	6062 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    607c:	2400      	movs	r4, #0
    607e:	e7d9      	b.n	6034 <z_impl_k_yield+0x38>
    6080:	20000d20 	.word	0x20000d20

00006084 <z_tick_sleep>:
{
    6084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    6088:	ea50 0301 	orrs.w	r3, r0, r1
    608c:	d038      	beq.n	6100 <z_tick_sleep+0x7c>
    608e:	4604      	mov	r4, r0
    6090:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    6092:	f06f 0301 	mvn.w	r3, #1
    6096:	1a1b      	subs	r3, r3, r0
    6098:	f04f 32ff 	mov.w	r2, #4294967295
    609c:	eb62 0201 	sbc.w	r2, r2, r1
    60a0:	2b01      	cmp	r3, #1
    60a2:	f172 0300 	sbcs.w	r3, r2, #0
    60a6:	db2f      	blt.n	6108 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    60a8:	f06f 0501 	mvn.w	r5, #1
    60ac:	1a2d      	subs	r5, r5, r0
    60ae:	f04f 0320 	mov.w	r3, #32
    60b2:	f3ef 8811 	mrs	r8, BASEPRI
    60b6:	f383 8812 	msr	BASEPRI_MAX, r3
    60ba:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    60be:	4f14      	ldr	r7, [pc, #80]	; (6110 <z_tick_sleep+0x8c>)
    60c0:	68b8      	ldr	r0, [r7, #8]
    60c2:	4b14      	ldr	r3, [pc, #80]	; (6114 <z_tick_sleep+0x90>)
    60c4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    60c6:	f7ff fe45 	bl	5d54 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    60ca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    60cc:	4622      	mov	r2, r4
    60ce:	4633      	mov	r3, r6
    60d0:	4911      	ldr	r1, [pc, #68]	; (6118 <z_tick_sleep+0x94>)
    60d2:	3018      	adds	r0, #24
    60d4:	f000 f8f2 	bl	62bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    60d8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    60da:	7b53      	ldrb	r3, [r2, #13]
    60dc:	f043 0310 	orr.w	r3, r3, #16
    60e0:	7353      	strb	r3, [r2, #13]
    60e2:	4640      	mov	r0, r8
    60e4:	f7fb ff6a 	bl	1fbc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    60e8:	f001 fff8 	bl	80dc <sys_clock_tick_get_32>
    60ec:	1a28      	subs	r0, r5, r0
    60ee:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    60f2:	2801      	cmp	r0, #1
    60f4:	f173 0300 	sbcs.w	r3, r3, #0
    60f8:	da00      	bge.n	60fc <z_tick_sleep+0x78>
	return 0;
    60fa:	2000      	movs	r0, #0
}
    60fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    6100:	f7ff ff7c 	bl	5ffc <z_impl_k_yield>
		return 0;
    6104:	2000      	movs	r0, #0
    6106:	e7f9      	b.n	60fc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6108:	f001 ffe8 	bl	80dc <sys_clock_tick_get_32>
    610c:	1905      	adds	r5, r0, r4
    610e:	e7ce      	b.n	60ae <z_tick_sleep+0x2a>
    6110:	20000d20 	.word	0x20000d20
    6114:	20000d54 	.word	0x20000d54
    6118:	00007dcd 	.word	0x00007dcd

0000611c <z_impl_k_sleep>:
{
    611c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    611e:	f1b1 3fff 	cmp.w	r1, #4294967295
    6122:	bf08      	it	eq
    6124:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    6128:	d01a      	beq.n	6160 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    612a:	f7ff ffab 	bl	6084 <z_tick_sleep>
    612e:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    6130:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    6132:	0151      	lsls	r1, r2, #5
    6134:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    6138:	0143      	lsls	r3, r0, #5
    613a:	1a1b      	subs	r3, r3, r0
    613c:	eb61 0102 	sbc.w	r1, r1, r2
    6140:	0088      	lsls	r0, r1, #2
    6142:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    6146:	009b      	lsls	r3, r3, #2
    6148:	eb13 030c 	adds.w	r3, r3, ip
    614c:	eb42 0000 	adc.w	r0, r2, r0
    6150:	00c0      	lsls	r0, r0, #3
    6152:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    6156:	f3c3 3310 	ubfx	r3, r3, #12, #17
    615a:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    615e:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    6160:	4b03      	ldr	r3, [pc, #12]	; (6170 <z_impl_k_sleep+0x54>)
    6162:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6164:	f7ff fe86 	bl	5e74 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    6168:	f04f 30ff 	mov.w	r0, #4294967295
    616c:	e7f7      	b.n	615e <z_impl_k_sleep+0x42>
    616e:	bf00      	nop
    6170:	20000d20 	.word	0x20000d20

00006174 <z_impl_z_current_get>:
}
    6174:	4b01      	ldr	r3, [pc, #4]	; (617c <z_impl_z_current_get+0x8>)
    6176:	6898      	ldr	r0, [r3, #8]
    6178:	4770      	bx	lr
    617a:	bf00      	nop
    617c:	20000d20 	.word	0x20000d20

00006180 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    6180:	b538      	push	{r3, r4, r5, lr}
    6182:	f04f 0320 	mov.w	r3, #32
    6186:	f3ef 8511 	mrs	r5, BASEPRI
    618a:	f383 8812 	msr	BASEPRI_MAX, r3
    618e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6192:	7b43      	ldrb	r3, [r0, #13]
    6194:	f013 0f08 	tst.w	r3, #8
    6198:	d004      	beq.n	61a4 <z_thread_abort+0x24>
	__asm__ volatile(
    619a:	f385 8811 	msr	BASEPRI, r5
    619e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    61a2:	bd38      	pop	{r3, r4, r5, pc}
    61a4:	4604      	mov	r4, r0
	end_thread(thread);
    61a6:	f7ff fecf 	bl	5f48 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    61aa:	4b08      	ldr	r3, [pc, #32]	; (61cc <z_thread_abort+0x4c>)
    61ac:	689b      	ldr	r3, [r3, #8]
    61ae:	42a3      	cmp	r3, r4
    61b0:	d004      	beq.n	61bc <z_thread_abort+0x3c>
    61b2:	f385 8811 	msr	BASEPRI, r5
    61b6:	f3bf 8f6f 	isb	sy
    61ba:	e7f2      	b.n	61a2 <z_thread_abort+0x22>
    61bc:	f3ef 8305 	mrs	r3, IPSR
    61c0:	2b00      	cmp	r3, #0
    61c2:	d1f6      	bne.n	61b2 <z_thread_abort+0x32>
    61c4:	4628      	mov	r0, r5
    61c6:	f7fb fef9 	bl	1fbc <arch_swap>
	return ret;
    61ca:	e7f2      	b.n	61b2 <z_thread_abort+0x32>
    61cc:	20000d20 	.word	0x20000d20

000061d0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    61d0:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    61d4:	b083      	sub	sp, #12
    61d6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    61d8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    61dc:	e9cd bc00 	strd	fp, ip, [sp]
    61e0:	f7ff fdd4 	bl	5d8c <z_pend_curr>

	if (data != NULL) {
    61e4:	b11c      	cbz	r4, 61ee <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    61e6:	4b03      	ldr	r3, [pc, #12]	; (61f4 <z_sched_wait+0x24>)
    61e8:	689b      	ldr	r3, [r3, #8]
    61ea:	695b      	ldr	r3, [r3, #20]
    61ec:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    61ee:	b003      	add	sp, #12
    61f0:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    61f4:	20000d20 	.word	0x20000d20

000061f8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    61f8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    61fa:	4806      	ldr	r0, [pc, #24]	; (6214 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    61fc:	4a06      	ldr	r2, [pc, #24]	; (6218 <z_data_copy+0x20>)
    61fe:	1a12      	subs	r2, r2, r0
    6200:	4906      	ldr	r1, [pc, #24]	; (621c <z_data_copy+0x24>)
    6202:	f001 fcd2 	bl	7baa <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6206:	4a06      	ldr	r2, [pc, #24]	; (6220 <z_data_copy+0x28>)
    6208:	4906      	ldr	r1, [pc, #24]	; (6224 <z_data_copy+0x2c>)
    620a:	4807      	ldr	r0, [pc, #28]	; (6228 <z_data_copy+0x30>)
    620c:	f001 fccd 	bl	7baa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6210:	bd08      	pop	{r3, pc}
    6212:	bf00      	nop
    6214:	20000000 	.word	0x20000000
    6218:	200001f0 	.word	0x200001f0
    621c:	000085c4 	.word	0x000085c4
    6220:	00000000 	.word	0x00000000
    6224:	000085c4 	.word	0x000085c4
    6228:	20000000 	.word	0x20000000

0000622c <first>:
	return list->head == list;
    622c:	4b03      	ldr	r3, [pc, #12]	; (623c <first+0x10>)
    622e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6230:	4298      	cmp	r0, r3
    6232:	d000      	beq.n	6236 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    6234:	4770      	bx	lr
    6236:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    6238:	e7fc      	b.n	6234 <first+0x8>
    623a:	bf00      	nop
    623c:	200000b8 	.word	0x200000b8

00006240 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6240:	b130      	cbz	r0, 6250 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    6242:	4a04      	ldr	r2, [pc, #16]	; (6254 <next+0x14>)
    6244:	6852      	ldr	r2, [r2, #4]
    6246:	4290      	cmp	r0, r2
    6248:	d001      	beq.n	624e <next+0xe>
    624a:	6800      	ldr	r0, [r0, #0]
    624c:	4770      	bx	lr
    624e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    6250:	4770      	bx	lr
    6252:	bf00      	nop
    6254:	200000b8 	.word	0x200000b8

00006258 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    6258:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    625a:	4b04      	ldr	r3, [pc, #16]	; (626c <elapsed+0x14>)
    625c:	681b      	ldr	r3, [r3, #0]
    625e:	b10b      	cbz	r3, 6264 <elapsed+0xc>
    6260:	2000      	movs	r0, #0
}
    6262:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6264:	f7fd fa20 	bl	36a8 <sys_clock_elapsed>
    6268:	e7fb      	b.n	6262 <elapsed+0xa>
    626a:	bf00      	nop
    626c:	20000d60 	.word	0x20000d60

00006270 <next_timeout>:

static int32_t next_timeout(void)
{
    6270:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    6272:	f7ff ffdb 	bl	622c <first>
    6276:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    6278:	f7ff ffee 	bl	6258 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    627c:	b17c      	cbz	r4, 629e <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    627e:	6923      	ldr	r3, [r4, #16]
    6280:	6962      	ldr	r2, [r4, #20]
    6282:	1a1b      	subs	r3, r3, r0
    6284:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    628c:	f170 0200 	sbcs.w	r2, r0, #0
    6290:	da08      	bge.n	62a4 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    6292:	2800      	cmp	r0, #0
    6294:	db01      	blt.n	629a <next_timeout+0x2a>
    6296:	4618      	mov	r0, r3
    6298:	e006      	b.n	62a8 <next_timeout+0x38>
    629a:	2300      	movs	r3, #0
    629c:	e7fb      	b.n	6296 <next_timeout+0x26>
		ret = MAX_WAIT;
    629e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    62a2:	e001      	b.n	62a8 <next_timeout+0x38>
    62a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    62a8:	4b03      	ldr	r3, [pc, #12]	; (62b8 <next_timeout+0x48>)
    62aa:	691b      	ldr	r3, [r3, #16]
    62ac:	b113      	cbz	r3, 62b4 <next_timeout+0x44>
    62ae:	4283      	cmp	r3, r0
    62b0:	da00      	bge.n	62b4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    62b2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    62b4:	bd10      	pop	{r4, pc}
    62b6:	bf00      	nop
    62b8:	20000d20 	.word	0x20000d20

000062bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    62bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    62c0:	bf08      	it	eq
    62c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    62c6:	d07d      	beq.n	63c4 <z_add_timeout+0x108>
{
    62c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62cc:	4604      	mov	r4, r0
    62ce:	4692      	mov	sl, r2
    62d0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    62d2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    62d4:	2300      	movs	r3, #0
	__asm__ volatile(
    62d6:	f04f 0220 	mov.w	r2, #32
    62da:	f3ef 8711 	mrs	r7, BASEPRI
    62de:	f382 8812 	msr	BASEPRI_MAX, r2
    62e2:	f3bf 8f6f 	isb	sy
    62e6:	e021      	b.n	632c <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    62e8:	f11a 0801 	adds.w	r8, sl, #1
    62ec:	f145 0900 	adc.w	r9, r5, #0
    62f0:	f7ff ffb2 	bl	6258 <elapsed>
    62f4:	eb18 0300 	adds.w	r3, r8, r0
    62f8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    62fc:	6123      	str	r3, [r4, #16]
    62fe:	6160      	str	r0, [r4, #20]
    6300:	e036      	b.n	6370 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    6302:	1a51      	subs	r1, r2, r1
    6304:	eb66 0303 	sbc.w	r3, r6, r3
    6308:	6101      	str	r1, [r0, #16]
    630a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    630c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    630e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6310:	6020      	str	r0, [r4, #0]
	prev->next = node;
    6312:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6314:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    6316:	2800      	cmp	r0, #0
    6318:	d03e      	beq.n	6398 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    631a:	f7ff ff87 	bl	622c <first>
    631e:	4284      	cmp	r4, r0
    6320:	d041      	beq.n	63a6 <z_add_timeout+0xea>
	__asm__ volatile(
    6322:	f387 8811 	msr	BASEPRI, r7
    6326:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    632a:	2301      	movs	r3, #1
    632c:	2b00      	cmp	r3, #0
    632e:	d147      	bne.n	63c0 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6330:	4653      	mov	r3, sl
    6332:	f06f 0101 	mvn.w	r1, #1
    6336:	ebb1 010a 	subs.w	r1, r1, sl
    633a:	f04f 30ff 	mov.w	r0, #4294967295
    633e:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6342:	2a00      	cmp	r2, #0
    6344:	dbd0      	blt.n	62e8 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6346:	4a20      	ldr	r2, [pc, #128]	; (63c8 <z_add_timeout+0x10c>)
    6348:	6811      	ldr	r1, [r2, #0]
    634a:	6852      	ldr	r2, [r2, #4]
    634c:	185b      	adds	r3, r3, r1
    634e:	eb42 0205 	adc.w	r2, r2, r5
    6352:	f06f 0101 	mvn.w	r1, #1
    6356:	1acb      	subs	r3, r1, r3
    6358:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    635c:	4618      	mov	r0, r3
    635e:	4611      	mov	r1, r2
    6360:	2b01      	cmp	r3, #1
    6362:	f172 0300 	sbcs.w	r3, r2, #0
    6366:	da01      	bge.n	636c <z_add_timeout+0xb0>
    6368:	2001      	movs	r0, #1
    636a:	2100      	movs	r1, #0
    636c:	6120      	str	r0, [r4, #16]
    636e:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    6370:	f7ff ff5c 	bl	622c <first>
    6374:	2800      	cmp	r0, #0
    6376:	d0ce      	beq.n	6316 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    6378:	6902      	ldr	r2, [r0, #16]
    637a:	6946      	ldr	r6, [r0, #20]
    637c:	6921      	ldr	r1, [r4, #16]
    637e:	6963      	ldr	r3, [r4, #20]
    6380:	4291      	cmp	r1, r2
    6382:	eb73 0c06 	sbcs.w	ip, r3, r6
    6386:	dbbc      	blt.n	6302 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    6388:	1a89      	subs	r1, r1, r2
    638a:	eb63 0306 	sbc.w	r3, r3, r6
    638e:	6121      	str	r1, [r4, #16]
    6390:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    6392:	f7ff ff55 	bl	6240 <next>
    6396:	e7ed      	b.n	6374 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    6398:	4b0c      	ldr	r3, [pc, #48]	; (63cc <z_add_timeout+0x110>)
    639a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    639c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    639e:	6062      	str	r2, [r4, #4]
	tail->next = node;
    63a0:	6014      	str	r4, [r2, #0]
	list->tail = node;
    63a2:	605c      	str	r4, [r3, #4]
}
    63a4:	e7b9      	b.n	631a <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    63a6:	f7ff ff63 	bl	6270 <next_timeout>

			if (next_time == 0 ||
    63aa:	4603      	mov	r3, r0
    63ac:	b118      	cbz	r0, 63b6 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    63ae:	4a08      	ldr	r2, [pc, #32]	; (63d0 <z_add_timeout+0x114>)
    63b0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    63b2:	4282      	cmp	r2, r0
    63b4:	d0b5      	beq.n	6322 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    63b6:	2100      	movs	r1, #0
    63b8:	4618      	mov	r0, r3
    63ba:	f7fd f943 	bl	3644 <sys_clock_set_timeout>
    63be:	e7b0      	b.n	6322 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    63c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63c4:	4770      	bx	lr
    63c6:	bf00      	nop
    63c8:	20000630 	.word	0x20000630
    63cc:	200000b8 	.word	0x200000b8
    63d0:	20000d20 	.word	0x20000d20

000063d4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    63d8:	f7ff fc06 	bl	5be8 <z_time_slice>
	__asm__ volatile(
    63dc:	f04f 0320 	mov.w	r3, #32
    63e0:	f3ef 8511 	mrs	r5, BASEPRI
    63e4:	f383 8812 	msr	BASEPRI_MAX, r3
    63e8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    63ec:	4b28      	ldr	r3, [pc, #160]	; (6490 <sys_clock_announce+0xbc>)
    63ee:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    63f0:	e020      	b.n	6434 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    63f2:	4828      	ldr	r0, [pc, #160]	; (6494 <sys_clock_announce+0xc0>)
    63f4:	6801      	ldr	r1, [r0, #0]
    63f6:	6846      	ldr	r6, [r0, #4]
    63f8:	1889      	adds	r1, r1, r2
    63fa:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    63fe:	6001      	str	r1, [r0, #0]
    6400:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    6402:	1a9b      	subs	r3, r3, r2
    6404:	4a22      	ldr	r2, [pc, #136]	; (6490 <sys_clock_announce+0xbc>)
    6406:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    6408:	2200      	movs	r2, #0
    640a:	2300      	movs	r3, #0
    640c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6410:	4620      	mov	r0, r4
    6412:	f001 fdec 	bl	7fee <remove_timeout>
	__asm__ volatile(
    6416:	f385 8811 	msr	BASEPRI, r5
    641a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    641e:	68a3      	ldr	r3, [r4, #8]
    6420:	4620      	mov	r0, r4
    6422:	4798      	blx	r3
	__asm__ volatile(
    6424:	f04f 0320 	mov.w	r3, #32
    6428:	f3ef 8511 	mrs	r5, BASEPRI
    642c:	f383 8812 	msr	BASEPRI_MAX, r3
    6430:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6434:	f7ff fefa 	bl	622c <first>
    6438:	4604      	mov	r4, r0
    643a:	b140      	cbz	r0, 644e <sys_clock_announce+0x7a>
    643c:	6902      	ldr	r2, [r0, #16]
    643e:	6941      	ldr	r1, [r0, #20]
    6440:	4b13      	ldr	r3, [pc, #76]	; (6490 <sys_clock_announce+0xbc>)
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	17d8      	asrs	r0, r3, #31
    6446:	4293      	cmp	r3, r2
    6448:	eb70 0101 	sbcs.w	r1, r0, r1
    644c:	dad1      	bge.n	63f2 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    644e:	b144      	cbz	r4, 6462 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    6450:	4b0f      	ldr	r3, [pc, #60]	; (6490 <sys_clock_announce+0xbc>)
    6452:	6819      	ldr	r1, [r3, #0]
    6454:	6923      	ldr	r3, [r4, #16]
    6456:	6962      	ldr	r2, [r4, #20]
    6458:	1a5b      	subs	r3, r3, r1
    645a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    645e:	6123      	str	r3, [r4, #16]
    6460:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    6462:	4a0c      	ldr	r2, [pc, #48]	; (6494 <sys_clock_announce+0xc0>)
    6464:	4e0a      	ldr	r6, [pc, #40]	; (6490 <sys_clock_announce+0xbc>)
    6466:	6830      	ldr	r0, [r6, #0]
    6468:	6813      	ldr	r3, [r2, #0]
    646a:	6851      	ldr	r1, [r2, #4]
    646c:	181b      	adds	r3, r3, r0
    646e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    6472:	6013      	str	r3, [r2, #0]
    6474:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    6476:	2400      	movs	r4, #0
    6478:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    647a:	f7ff fef9 	bl	6270 <next_timeout>
    647e:	4621      	mov	r1, r4
    6480:	f7fd f8e0 	bl	3644 <sys_clock_set_timeout>
	__asm__ volatile(
    6484:	f385 8811 	msr	BASEPRI, r5
    6488:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    648c:	bd70      	pop	{r4, r5, r6, pc}
    648e:	bf00      	nop
    6490:	20000d60 	.word	0x20000d60
    6494:	20000630 	.word	0x20000630

00006498 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6498:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    649a:	2300      	movs	r3, #0
	__asm__ volatile(
    649c:	f04f 0220 	mov.w	r2, #32
    64a0:	f3ef 8411 	mrs	r4, BASEPRI
    64a4:	f382 8812 	msr	BASEPRI_MAX, r2
    64a8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    64ac:	4618      	mov	r0, r3
    64ae:	4619      	mov	r1, r3
    64b0:	e00c      	b.n	64cc <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    64b2:	f7fd f8f9 	bl	36a8 <sys_clock_elapsed>
    64b6:	4a07      	ldr	r2, [pc, #28]	; (64d4 <sys_clock_tick_get+0x3c>)
    64b8:	6813      	ldr	r3, [r2, #0]
    64ba:	6851      	ldr	r1, [r2, #4]
    64bc:	18c0      	adds	r0, r0, r3
    64be:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    64c2:	f384 8811 	msr	BASEPRI, r4
    64c6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    64ca:	2301      	movs	r3, #1
    64cc:	2b00      	cmp	r3, #0
    64ce:	d0f0      	beq.n	64b2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    64d0:	bd10      	pop	{r4, pc}
    64d2:	bf00      	nop
    64d4:	20000630 	.word	0x20000630

000064d8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    64d8:	b570      	push	{r4, r5, r6, lr}
    64da:	4604      	mov	r4, r0
	__asm__ volatile(
    64dc:	f04f 0320 	mov.w	r3, #32
    64e0:	f3ef 8611 	mrs	r6, BASEPRI
    64e4:	f383 8812 	msr	BASEPRI_MAX, r3
    64e8:	f3bf 8f6f 	isb	sy
    64ec:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    64ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
    64f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    64f2:	ea52 0103 	orrs.w	r1, r2, r3
    64f6:	d005      	beq.n	6504 <z_timer_expiration_handler+0x2c>
    64f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    64fc:	bf08      	it	eq
    64fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6502:	d127      	bne.n	6554 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    6504:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6506:	3301      	adds	r3, #1
    6508:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    650a:	6a23      	ldr	r3, [r4, #32]
    650c:	b173      	cbz	r3, 652c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    650e:	f386 8811 	msr	BASEPRI, r6
    6512:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6516:	6a23      	ldr	r3, [r4, #32]
    6518:	4620      	mov	r0, r4
    651a:	4798      	blx	r3
	__asm__ volatile(
    651c:	f04f 0320 	mov.w	r3, #32
    6520:	f3ef 8511 	mrs	r5, BASEPRI
    6524:	f383 8812 	msr	BASEPRI_MAX, r3
    6528:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    652c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    6530:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6532:	42a3      	cmp	r3, r4
    6534:	d014      	beq.n	6560 <z_timer_expiration_handler+0x88>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6536:	b19c      	cbz	r4, 6560 <z_timer_expiration_handler+0x88>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    6538:	4620      	mov	r0, r4
    653a:	f001 fbe7 	bl	7d0c <z_unpend_thread_no_timeout>
    653e:	2300      	movs	r3, #0
    6540:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    6544:	f385 8811 	msr	BASEPRI, r5
    6548:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    654c:	4620      	mov	r0, r4
    654e:	f001 fc21 	bl	7d94 <z_ready_thread>
}
    6552:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6554:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    6558:	4904      	ldr	r1, [pc, #16]	; (656c <z_timer_expiration_handler+0x94>)
    655a:	f7ff feaf 	bl	62bc <z_add_timeout>
    655e:	e7d1      	b.n	6504 <z_timer_expiration_handler+0x2c>
    6560:	f385 8811 	msr	BASEPRI, r5
    6564:	f3bf 8f6f 	isb	sy
		return;
    6568:	e7f3      	b.n	6552 <z_timer_expiration_handler+0x7a>
    656a:	bf00      	nop
    656c:	000064d9 	.word	0x000064d9

00006570 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6574:	9f06      	ldr	r7, [sp, #24]
    6576:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    657a:	f1b3 3fff 	cmp.w	r3, #4294967295
    657e:	bf08      	it	eq
    6580:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6584:	d02f      	beq.n	65e6 <z_impl_k_timer_start+0x76>
    6586:	4605      	mov	r5, r0
    6588:	4614      	mov	r4, r2
    658a:	461e      	mov	r6, r3
    658c:	4611      	mov	r1, r2
    658e:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6590:	f1b8 3fff 	cmp.w	r8, #4294967295
    6594:	bf08      	it	eq
    6596:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    659a:	d00d      	beq.n	65b8 <z_impl_k_timer_start+0x48>
    659c:	ea57 0c08 	orrs.w	ip, r7, r8
    65a0:	d00a      	beq.n	65b8 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    65a2:	f06f 0c01 	mvn.w	ip, #1
    65a6:	ebbc 0c07 	subs.w	ip, ip, r7
    65aa:	f04f 3cff 	mov.w	ip, #4294967295
    65ae:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    65b2:	f1bc 0f00 	cmp.w	ip, #0
    65b6:	db18      	blt.n	65ea <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    65b8:	f06f 0301 	mvn.w	r3, #1
    65bc:	1a5b      	subs	r3, r3, r1
    65be:	f04f 33ff 	mov.w	r3, #4294967295
    65c2:	eb63 0300 	sbc.w	r3, r3, r0
    65c6:	2b00      	cmp	r3, #0
    65c8:	db1a      	blt.n	6600 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    65ca:	4628      	mov	r0, r5
    65cc:	f001 fd26 	bl	801c <z_abort_timeout>
	timer->period = period;
    65d0:	62af      	str	r7, [r5, #40]	; 0x28
    65d2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    65d6:	2300      	movs	r3, #0
    65d8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    65da:	4622      	mov	r2, r4
    65dc:	4633      	mov	r3, r6
    65de:	490e      	ldr	r1, [pc, #56]	; (6618 <z_impl_k_timer_start+0xa8>)
    65e0:	4628      	mov	r0, r5
    65e2:	f7ff fe6b 	bl	62bc <z_add_timeout>
		     duration);
}
    65e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    65ea:	2f02      	cmp	r7, #2
    65ec:	f178 0300 	sbcs.w	r3, r8, #0
    65f0:	da02      	bge.n	65f8 <z_impl_k_timer_start+0x88>
    65f2:	2702      	movs	r7, #2
    65f4:	f04f 0800 	mov.w	r8, #0
    65f8:	3f01      	subs	r7, #1
    65fa:	f148 38ff 	adc.w	r8, r8, #4294967295
    65fe:	e7db      	b.n	65b8 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6600:	460c      	mov	r4, r1
    6602:	4606      	mov	r6, r0
    6604:	2901      	cmp	r1, #1
    6606:	f170 0300 	sbcs.w	r3, r0, #0
    660a:	da01      	bge.n	6610 <z_impl_k_timer_start+0xa0>
    660c:	2401      	movs	r4, #1
    660e:	2600      	movs	r6, #0
    6610:	3c01      	subs	r4, #1
    6612:	f146 36ff 	adc.w	r6, r6, #4294967295
    6616:	e7d8      	b.n	65ca <z_impl_k_timer_start+0x5a>
    6618:	000064d9 	.word	0x000064d9

0000661c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    661c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    661e:	4a03      	ldr	r2, [pc, #12]	; (662c <boot_banner+0x10>)
    6620:	4903      	ldr	r1, [pc, #12]	; (6630 <boot_banner+0x14>)
    6622:	4804      	ldr	r0, [pc, #16]	; (6634 <boot_banner+0x18>)
    6624:	f000 f8a9 	bl	677a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    6628:	bd08      	pop	{r3, pc}
    662a:	bf00      	nop
    662c:	000083e4 	.word	0x000083e4
    6630:	00008580 	.word	0x00008580
    6634:	00008590 	.word	0x00008590

00006638 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    6638:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    663a:	4c06      	ldr	r4, [pc, #24]	; (6654 <statics_init+0x1c>)
    663c:	e005      	b.n	664a <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    663e:	68a2      	ldr	r2, [r4, #8]
    6640:	6861      	ldr	r1, [r4, #4]
    6642:	4620      	mov	r0, r4
    6644:	f001 fd6f 	bl	8126 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6648:	3414      	adds	r4, #20
    664a:	4b03      	ldr	r3, [pc, #12]	; (6658 <statics_init+0x20>)
    664c:	429c      	cmp	r4, r3
    664e:	d3f6      	bcc.n	663e <statics_init+0x6>
		}
	}
	return 0;
}
    6650:	2000      	movs	r0, #0
    6652:	bd10      	pop	{r4, pc}
    6654:	200001c8 	.word	0x200001c8
    6658:	200001c8 	.word	0x200001c8

0000665c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    665c:	b510      	push	{r4, lr}
    665e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    6660:	4b08      	ldr	r3, [pc, #32]	; (6684 <k_sys_work_q_init+0x28>)
    6662:	9302      	str	r3, [sp, #8]
    6664:	2400      	movs	r4, #0
    6666:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    666a:	ab02      	add	r3, sp, #8
    666c:	9300      	str	r3, [sp, #0]
    666e:	f04f 33ff 	mov.w	r3, #4294967295
    6672:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6676:	4904      	ldr	r1, [pc, #16]	; (6688 <k_sys_work_q_init+0x2c>)
    6678:	4804      	ldr	r0, [pc, #16]	; (668c <k_sys_work_q_init+0x30>)
    667a:	f7ff f963 	bl	5944 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    667e:	4620      	mov	r0, r4
    6680:	b004      	add	sp, #16
    6682:	bd10      	pop	{r4, pc}
    6684:	000085b8 	.word	0x000085b8
    6688:	200023a0 	.word	0x200023a0
    668c:	20000638 	.word	0x20000638

00006690 <blink>:
void blink(struct led led_config){
    6690:	b530      	push	{r4, r5, lr}
    6692:	b085      	sub	sp, #20
    6694:	ac04      	add	r4, sp, #16
    6696:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    669a:	f89d 1004 	ldrb.w	r1, [sp, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    669e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return gpio_pin_configure(spec->port,
    66a2:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
	const struct gpio_driver_api *api =
    66a6:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    66a8:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    66aa:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    66ae:	d004      	beq.n	66ba <blink+0x2a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    66b0:	f013 0f01 	tst.w	r3, #1
    66b4:	d001      	beq.n	66ba <blink+0x2a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    66b6:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    66ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    66be:	f013 0f01 	tst.w	r3, #1
    66c2:	d00b      	beq.n	66dc <blink+0x4c>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    66c4:	2301      	movs	r3, #1
    66c6:	fa03 fc01 	lsl.w	ip, r3, r1
    66ca:	6823      	ldr	r3, [r4, #0]
    66cc:	ea43 030c 	orr.w	r3, r3, ip
    66d0:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    66d2:	682b      	ldr	r3, [r5, #0]
    66d4:	4798      	blx	r3
	if (ret < 0) return;
    66d6:	2800      	cmp	r0, #0
    66d8:	da1d      	bge.n	6716 <blink+0x86>
    66da:	e026      	b.n	672a <blink+0x9a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    66dc:	2301      	movs	r3, #1
    66de:	fa03 fc01 	lsl.w	ip, r3, r1
    66e2:	6823      	ldr	r3, [r4, #0]
    66e4:	ea23 030c 	bic.w	r3, r3, ip
    66e8:	6023      	str	r3, [r4, #0]
    66ea:	e7f2      	b.n	66d2 <blink+0x42>
		k_msleep(led_config.sleep_time);
    66ec:	9802      	ldr	r0, [sp, #8]
	return k_sleep(Z_TIMEOUT_MS(ms));
    66ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    66f2:	17c1      	asrs	r1, r0, #31
    66f4:	03c9      	lsls	r1, r1, #15
    66f6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    66fa:	03c0      	lsls	r0, r0, #15
    66fc:	f240 33e7 	movw	r3, #999	; 0x3e7
    6700:	18c0      	adds	r0, r0, r3
    6702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6706:	f04f 0300 	mov.w	r3, #0
    670a:	f141 0100 	adc.w	r1, r1, #0
    670e:	f7fa f863 	bl	7d8 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    6712:	f7ff fd03 	bl	611c <z_impl_k_sleep>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_toggle(spec->port, spec->pin);
    6716:	9800      	ldr	r0, [sp, #0]
    6718:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    671c:	2101      	movs	r1, #1
    671e:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    6720:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    6722:	695b      	ldr	r3, [r3, #20]
    6724:	4798      	blx	r3
		if (ret < 0) return;
    6726:	2800      	cmp	r0, #0
    6728:	dae0      	bge.n	66ec <blink+0x5c>
}
    672a:	b005      	add	sp, #20
    672c:	bd30      	pop	{r4, r5, pc}

0000672e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    672e:	4602      	mov	r2, r0
    6730:	b158      	cbz	r0, 674a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6732:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6734:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6738:	2b01      	cmp	r3, #1
    673a:	d003      	beq.n	6744 <sys_notify_validate+0x16>
    673c:	2b03      	cmp	r3, #3
    673e:	d107      	bne.n	6750 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6740:	6803      	ldr	r3, [r0, #0]
    6742:	b143      	cbz	r3, 6756 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6744:	2000      	movs	r0, #0
    6746:	6090      	str	r0, [r2, #8]
    6748:	4770      	bx	lr
		return -EINVAL;
    674a:	f06f 0015 	mvn.w	r0, #21
    674e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    6750:	f06f 0015 	mvn.w	r0, #21
    6754:	4770      	bx	lr
			rv = -EINVAL;
    6756:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    675a:	4770      	bx	lr

0000675c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    675c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    675e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6760:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6764:	6081      	str	r1, [r0, #8]
	switch (method) {
    6766:	2a03      	cmp	r2, #3
    6768:	d103      	bne.n	6772 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    676a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    676c:	2200      	movs	r2, #0
    676e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6770:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    6772:	2000      	movs	r0, #0
    6774:	e7fa      	b.n	676c <sys_notify_finalize+0x10>

00006776 <arch_printk_char_out>:
}
    6776:	2000      	movs	r0, #0
    6778:	4770      	bx	lr

0000677a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    677a:	b40f      	push	{r0, r1, r2, r3}
    677c:	b500      	push	{lr}
    677e:	b083      	sub	sp, #12
    6780:	a904      	add	r1, sp, #16
    6782:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6786:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6788:	f7fa fa4a 	bl	c20 <vprintk>

	va_end(ap);
}
    678c:	b003      	add	sp, #12
    678e:	f85d eb04 	ldr.w	lr, [sp], #4
    6792:	b004      	add	sp, #16
    6794:	4770      	bx	lr

00006796 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    6796:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    679a:	8b01      	ldrh	r1, [r0, #24]
    679c:	f021 0107 	bic.w	r1, r1, #7
    67a0:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    67a2:	8301      	strh	r1, [r0, #24]
}
    67a4:	4770      	bx	lr

000067a6 <notify_monitors>:
{
    67a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67aa:	4606      	mov	r6, r0
    67ac:	460f      	mov	r7, r1
    67ae:	4690      	mov	r8, r2
	return list->head;
    67b0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    67b2:	b119      	cbz	r1, 67bc <notify_monitors+0x16>
    67b4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    67b6:	b131      	cbz	r1, 67c6 <notify_monitors+0x20>
	return node->next;
    67b8:	680c      	ldr	r4, [r1, #0]
    67ba:	e004      	b.n	67c6 <notify_monitors+0x20>
    67bc:	460c      	mov	r4, r1
    67be:	e002      	b.n	67c6 <notify_monitors+0x20>
    67c0:	4623      	mov	r3, r4
    67c2:	4621      	mov	r1, r4
    67c4:	461c      	mov	r4, r3
    67c6:	b159      	cbz	r1, 67e0 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    67c8:	684d      	ldr	r5, [r1, #4]
    67ca:	4643      	mov	r3, r8
    67cc:	463a      	mov	r2, r7
    67ce:	4630      	mov	r0, r6
    67d0:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    67d2:	2c00      	cmp	r4, #0
    67d4:	d0f4      	beq.n	67c0 <notify_monitors+0x1a>
    67d6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    67d8:	2c00      	cmp	r4, #0
    67da:	d0f2      	beq.n	67c2 <notify_monitors+0x1c>
	return node->next;
    67dc:	6823      	ldr	r3, [r4, #0]
    67de:	e7f0      	b.n	67c2 <notify_monitors+0x1c>
}
    67e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000067e4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    67e4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    67e6:	f013 0307 	ands.w	r3, r3, #7
    67ea:	d103      	bne.n	67f4 <process_recheck+0x10>
	return list->head;
    67ec:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    67ee:	b10a      	cbz	r2, 67f4 <process_recheck+0x10>
		evt = EVT_START;
    67f0:	2003      	movs	r0, #3
    67f2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    67f4:	2b02      	cmp	r3, #2
    67f6:	d003      	beq.n	6800 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    67f8:	2b01      	cmp	r3, #1
    67fa:	d006      	beq.n	680a <process_recheck+0x26>
	int evt = EVT_NOP;
    67fc:	2000      	movs	r0, #0
    67fe:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    6800:	8b42      	ldrh	r2, [r0, #26]
    6802:	2a00      	cmp	r2, #0
    6804:	d1f8      	bne.n	67f8 <process_recheck+0x14>
		evt = EVT_STOP;
    6806:	2004      	movs	r0, #4
    6808:	4770      	bx	lr
    680a:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    680c:	b10b      	cbz	r3, 6812 <process_recheck+0x2e>
		evt = EVT_RESET;
    680e:	2005      	movs	r0, #5
}
    6810:	4770      	bx	lr
	int evt = EVT_NOP;
    6812:	2000      	movs	r0, #0
    6814:	4770      	bx	lr

00006816 <process_complete>:
{
    6816:	b510      	push	{r4, lr}
    6818:	4604      	mov	r4, r0
    681a:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    681c:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    681e:	2a00      	cmp	r2, #0
    6820:	db07      	blt.n	6832 <process_complete+0x1c>
    6822:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    6826:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    6828:	2a01      	cmp	r2, #1
    682a:	d90e      	bls.n	684a <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    682c:	2b04      	cmp	r3, #4
    682e:	d033      	beq.n	6898 <process_complete+0x82>
}
    6830:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    6832:	e9d0 0100 	ldrd	r0, r1, [r0]
    6836:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    683a:	2300      	movs	r3, #0
    683c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    683e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    6840:	2101      	movs	r1, #1
    6842:	4620      	mov	r0, r4
    6844:	f7ff ffa7 	bl	6796 <set_state>
    6848:	e7f2      	b.n	6830 <process_complete+0x1a>
		*clients = mgr->clients;
    684a:	e9d0 0100 	ldrd	r0, r1, [r0]
    684e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    6852:	2200      	movs	r2, #0
    6854:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    6856:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    6858:	2b06      	cmp	r3, #6
    685a:	d118      	bne.n	688e <process_complete+0x78>
	return list->head;
    685c:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    6860:	b13b      	cbz	r3, 6872 <process_complete+0x5c>
				mgr->refs += 1U;
    6862:	8b62      	ldrh	r2, [r4, #26]
    6864:	3201      	adds	r2, #1
    6866:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    6868:	2b00      	cmp	r3, #0
    686a:	d0f9      	beq.n	6860 <process_complete+0x4a>
	return node->next;
    686c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    686e:	2b00      	cmp	r3, #0
    6870:	d1f6      	bne.n	6860 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    6872:	2102      	movs	r1, #2
    6874:	4620      	mov	r0, r4
    6876:	f7ff ff8e 	bl	6796 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    687a:	4620      	mov	r0, r4
    687c:	f7ff ffb2 	bl	67e4 <process_recheck>
    6880:	2800      	cmp	r0, #0
    6882:	d0d5      	beq.n	6830 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    6884:	8b23      	ldrh	r3, [r4, #24]
    6886:	f043 0320 	orr.w	r3, r3, #32
    688a:	8323      	strh	r3, [r4, #24]
    688c:	e7d0      	b.n	6830 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    688e:	2100      	movs	r1, #0
    6890:	4620      	mov	r0, r4
    6892:	f7ff ff80 	bl	6796 <set_state>
    6896:	e7f0      	b.n	687a <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    6898:	2100      	movs	r1, #0
    689a:	f7ff ff7c 	bl	6796 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    689e:	4620      	mov	r0, r4
    68a0:	f7ff ffa0 	bl	67e4 <process_recheck>
    68a4:	2800      	cmp	r0, #0
    68a6:	d0c3      	beq.n	6830 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    68a8:	8b23      	ldrh	r3, [r4, #24]
    68aa:	f043 0320 	orr.w	r3, r3, #32
    68ae:	8323      	strh	r3, [r4, #24]
}
    68b0:	e7be      	b.n	6830 <process_complete+0x1a>

000068b2 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    68b2:	b158      	cbz	r0, 68cc <validate_args+0x1a>
{
    68b4:	b510      	push	{r4, lr}
    68b6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    68b8:	b159      	cbz	r1, 68d2 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    68ba:	1d08      	adds	r0, r1, #4
    68bc:	f7ff ff37 	bl	672e <sys_notify_validate>
	if ((rv == 0)
    68c0:	b918      	cbnz	r0, 68ca <validate_args+0x18>
	    && ((cli->notify.flags
    68c2:	68a3      	ldr	r3, [r4, #8]
    68c4:	f033 0303 	bics.w	r3, r3, #3
    68c8:	d106      	bne.n	68d8 <validate_args+0x26>
}
    68ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
    68cc:	f06f 0015 	mvn.w	r0, #21
}
    68d0:	4770      	bx	lr
		return -EINVAL;
    68d2:	f06f 0015 	mvn.w	r0, #21
    68d6:	e7f8      	b.n	68ca <validate_args+0x18>
		rv = -EINVAL;
    68d8:	f06f 0015 	mvn.w	r0, #21
    68dc:	e7f5      	b.n	68ca <validate_args+0x18>

000068de <notify_one>:
{
    68de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68e2:	4607      	mov	r7, r0
    68e4:	460c      	mov	r4, r1
    68e6:	4616      	mov	r6, r2
    68e8:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    68ea:	4619      	mov	r1, r3
    68ec:	1d20      	adds	r0, r4, #4
    68ee:	f7ff ff35 	bl	675c <sys_notify_finalize>
	if (cb) {
    68f2:	b128      	cbz	r0, 6900 <notify_one+0x22>
    68f4:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    68f6:	462b      	mov	r3, r5
    68f8:	4632      	mov	r2, r6
    68fa:	4621      	mov	r1, r4
    68fc:	4638      	mov	r0, r7
    68fe:	47c0      	blx	r8
}
    6900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006904 <notify_all>:
{
    6904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6908:	4680      	mov	r8, r0
    690a:	460c      	mov	r4, r1
    690c:	4617      	mov	r7, r2
    690e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    6910:	e004      	b.n	691c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    6912:	4633      	mov	r3, r6
    6914:	463a      	mov	r2, r7
    6916:	4640      	mov	r0, r8
    6918:	f7ff ffe1 	bl	68de <notify_one>
	return list->head;
    691c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    691e:	b131      	cbz	r1, 692e <notify_all+0x2a>
	return node->next;
    6920:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    6922:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6924:	6863      	ldr	r3, [r4, #4]
    6926:	428b      	cmp	r3, r1
    6928:	d1f3      	bne.n	6912 <notify_all+0xe>
	list->tail = node;
    692a:	6065      	str	r5, [r4, #4]
}
    692c:	e7f1      	b.n	6912 <notify_all+0xe>
}
    692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006932 <transition_complete>:
{
    6932:	b508      	push	{r3, lr}
	__asm__ volatile(
    6934:	f04f 0c20 	mov.w	ip, #32
    6938:	f3ef 8211 	mrs	r2, BASEPRI
    693c:	f38c 8812 	msr	BASEPRI_MAX, ip
    6940:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6944:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    6946:	2101      	movs	r1, #1
    6948:	f7fa f97a 	bl	c40 <process_event>
}
    694c:	bd08      	pop	{r3, pc}

0000694e <onoff_manager_init>:
	if ((mgr == NULL)
    694e:	4603      	mov	r3, r0
    6950:	b170      	cbz	r0, 6970 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    6952:	b181      	cbz	r1, 6976 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    6954:	680a      	ldr	r2, [r1, #0]
    6956:	b18a      	cbz	r2, 697c <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    6958:	684a      	ldr	r2, [r1, #4]
    695a:	b192      	cbz	r2, 6982 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    695c:	2000      	movs	r0, #0
    695e:	6018      	str	r0, [r3, #0]
    6960:	6058      	str	r0, [r3, #4]
    6962:	6098      	str	r0, [r3, #8]
    6964:	60d8      	str	r0, [r3, #12]
    6966:	6118      	str	r0, [r3, #16]
    6968:	6158      	str	r0, [r3, #20]
    696a:	6198      	str	r0, [r3, #24]
    696c:	6119      	str	r1, [r3, #16]
	return 0;
    696e:	4770      	bx	lr
		return -EINVAL;
    6970:	f06f 0015 	mvn.w	r0, #21
    6974:	4770      	bx	lr
    6976:	f06f 0015 	mvn.w	r0, #21
    697a:	4770      	bx	lr
    697c:	f06f 0015 	mvn.w	r0, #21
    6980:	4770      	bx	lr
    6982:	f06f 0015 	mvn.w	r0, #21
}
    6986:	4770      	bx	lr

00006988 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    698a:	4604      	mov	r4, r0
    698c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    698e:	f7ff ff90 	bl	68b2 <validate_args>

	if (rv < 0) {
    6992:	1e06      	subs	r6, r0, #0
    6994:	db37      	blt.n	6a06 <onoff_request+0x7e>
    6996:	f04f 0320 	mov.w	r3, #32
    699a:	f3ef 8211 	mrs	r2, BASEPRI
    699e:	f383 8812 	msr	BASEPRI_MAX, r3
    69a2:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    69a6:	8b25      	ldrh	r5, [r4, #24]
    69a8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    69ac:	8b63      	ldrh	r3, [r4, #26]
    69ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    69b2:	428b      	cmp	r3, r1
    69b4:	d02f      	beq.n	6a16 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    69b6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    69b8:	2d02      	cmp	r5, #2
    69ba:	d00c      	beq.n	69d6 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    69bc:	b18d      	cbz	r5, 69e2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    69be:	2d04      	cmp	r5, #4
    69c0:	d00f      	beq.n	69e2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    69c2:	2d06      	cmp	r5, #6
    69c4:	d00d      	beq.n	69e2 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    69c6:	2d05      	cmp	r5, #5
    69c8:	d01f      	beq.n	6a0a <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    69ca:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    69ce:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    69d0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    69d2:	4608      	mov	r0, r1
    69d4:	e00a      	b.n	69ec <onoff_request+0x64>
		mgr->refs += 1U;
    69d6:	3301      	adds	r3, #1
    69d8:	8363      	strh	r3, [r4, #26]
		notify = true;
    69da:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    69dc:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    69de:	4618      	mov	r0, r3
    69e0:	e004      	b.n	69ec <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    69e2:	fab5 f385 	clz	r3, r5
    69e6:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    69e8:	2100      	movs	r1, #0
		add_client = true;
    69ea:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    69ec:	b128      	cbz	r0, 69fa <onoff_request+0x72>
	parent->next = child;
    69ee:	2000      	movs	r0, #0
    69f0:	6038      	str	r0, [r7, #0]
	return list->tail;
    69f2:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    69f4:	b1a8      	cbz	r0, 6a22 <onoff_request+0x9a>
	parent->next = child;
    69f6:	6007      	str	r7, [r0, #0]
	list->tail = node;
    69f8:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    69fa:	b9ab      	cbnz	r3, 6a28 <onoff_request+0xa0>
	__asm__ volatile(
    69fc:	f382 8811 	msr	BASEPRI, r2
    6a00:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6a04:	b9a9      	cbnz	r1, 6a32 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6a06:	4630      	mov	r0, r6
    6a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    6a0a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    6a0e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6a10:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6a12:	4608      	mov	r0, r1
    6a14:	e7ea      	b.n	69ec <onoff_request+0x64>
		rv = -EAGAIN;
    6a16:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    6a1a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    6a1c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    6a1e:	4608      	mov	r0, r1
    6a20:	e7e4      	b.n	69ec <onoff_request+0x64>
    6a22:	6067      	str	r7, [r4, #4]
	list->head = node;
    6a24:	6027      	str	r7, [r4, #0]
}
    6a26:	e7e8      	b.n	69fa <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    6a28:	2102      	movs	r1, #2
    6a2a:	4620      	mov	r0, r4
    6a2c:	f7fa f908 	bl	c40 <process_event>
    6a30:	e7e9      	b.n	6a06 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    6a32:	2300      	movs	r3, #0
    6a34:	462a      	mov	r2, r5
    6a36:	4639      	mov	r1, r7
    6a38:	4620      	mov	r0, r4
    6a3a:	f7ff ff50 	bl	68de <notify_one>
    6a3e:	e7e2      	b.n	6a06 <onoff_request+0x7e>

00006a40 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    6a40:	b510      	push	{r4, lr}
	__asm__ volatile(
    6a42:	f04f 0320 	mov.w	r3, #32
    6a46:	f3ef 8211 	mrs	r2, BASEPRI
    6a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a4e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6a52:	8b03      	ldrh	r3, [r0, #24]
    6a54:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    6a58:	2b02      	cmp	r3, #2
    6a5a:	d007      	beq.n	6a6c <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    6a5c:	2b01      	cmp	r3, #1
    6a5e:	d002      	beq.n	6a66 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    6a60:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    6a64:	e008      	b.n	6a78 <onoff_release+0x38>
			rv = -EIO;
    6a66:	f06f 0404 	mvn.w	r4, #4
    6a6a:	e005      	b.n	6a78 <onoff_release+0x38>
    6a6c:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    6a6e:	8b43      	ldrh	r3, [r0, #26]
    6a70:	3b01      	subs	r3, #1
    6a72:	b29b      	uxth	r3, r3
    6a74:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6a76:	b12b      	cbz	r3, 6a84 <onoff_release+0x44>
	__asm__ volatile(
    6a78:	f382 8811 	msr	BASEPRI, r2
    6a7c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    6a80:	4620      	mov	r0, r4
    6a82:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    6a84:	2102      	movs	r1, #2
    6a86:	f7fa f8db 	bl	c40 <process_event>
    6a8a:	e7f9      	b.n	6a80 <onoff_release+0x40>

00006a8c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6a8c:	b508      	push	{r3, lr}
    6a8e:	4604      	mov	r4, r0
    6a90:	4608      	mov	r0, r1
    6a92:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6a94:	461a      	mov	r2, r3
    6a96:	47a0      	blx	r4
	return z_impl_z_current_get();
    6a98:	f7ff fb6c 	bl	6174 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6a9c:	f7fb fd1c 	bl	24d8 <z_impl_k_thread_abort>

00006aa0 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    6aa0:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    6aa2:	1d13      	adds	r3, r2, #4
    6aa4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    6aa8:	b97c      	cbnz	r4, 6aca <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    6aaa:	2301      	movs	r3, #1
    6aac:	fa03 f402 	lsl.w	r4, r3, r2
    6ab0:	68c3      	ldr	r3, [r0, #12]
    6ab2:	4323      	orrs	r3, r4
    6ab4:	60c3      	str	r3, [r0, #12]
		b->next = c;
    6ab6:	3204      	adds	r2, #4
    6ab8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    6abc:	00cb      	lsls	r3, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    6abe:	1d1a      	adds	r2, r3, #4
    6ac0:	b289      	uxth	r1, r1
    6ac2:	5281      	strh	r1, [r0, r2]
    6ac4:	3306      	adds	r3, #6
    6ac6:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    6ac8:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    6aca:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    6acc:	3204      	adds	r2, #4
    6ace:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    6ad0:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    6ad4:	f10c 0e04 	add.w	lr, ip, #4
    6ad8:	f820 300e 	strh.w	r3, [r0, lr]
    6adc:	f10c 0c06 	add.w	ip, ip, #6
    6ae0:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    6ae4:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    6ae6:	3306      	adds	r3, #6
    6ae8:	b289      	uxth	r1, r1
    6aea:	52c1      	strh	r1, [r0, r3]
    6aec:	5281      	strh	r1, [r0, r2]
    6aee:	e7eb      	b.n	6ac8 <free_list_add_bidx+0x28>

00006af0 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    6af0:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    6af2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    6af6:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    6af8:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    6afa:	fab2 f282 	clz	r2, r2
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    6afe:	f1c2 021f 	rsb	r2, r2, #31
    6b02:	f7ff ffcd 	bl	6aa0 <free_list_add_bidx>
	}
}
    6b06:	bd08      	pop	{r3, pc}

00006b08 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    6b08:	b570      	push	{r4, r5, r6, lr}
    6b0a:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    6b0c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    6b0e:	1dc8      	adds	r0, r1, #7
    6b10:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    6b14:	440a      	add	r2, r1
    6b16:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    6b1a:	1a12      	subs	r2, r2, r0
    6b1c:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    6b1e:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    6b20:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
    6b22:	2300      	movs	r3, #0
    6b24:	60c3      	str	r3, [r0, #12]
    6b26:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    6b2a:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    6b2e:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    6b32:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    6b34:	1dce      	adds	r6, r1, #7
    6b36:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    6b38:	e005      	b.n	6b46 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
    6b3a:	f103 0c04 	add.w	ip, r3, #4
    6b3e:	2400      	movs	r4, #0
    6b40:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    6b44:	3301      	adds	r3, #1
    6b46:	4573      	cmp	r3, lr
    6b48:	dbf7      	blt.n	6b3a <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6b4a:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
    6b4c:	b2a4      	uxth	r4, r4
    6b4e:	8044      	strh	r4, [r0, #2]
    6b50:	f04f 0c00 	mov.w	ip, #0
    6b54:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6b58:	f044 0401 	orr.w	r4, r4, #1
    6b5c:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    6b5e:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    6b60:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
    6b64:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
    6b68:	1ca5      	adds	r5, r4, #2
    6b6a:	f820 e005 	strh.w	lr, [r0, r5]
    6b6e:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
    6b70:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
    6b74:	1c95      	adds	r5, r2, #2
    6b76:	f820 c005 	strh.w	ip, [r0, r5]
    6b7a:	4402      	add	r2, r0
    6b7c:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6b7e:	8853      	ldrh	r3, [r2, #2]
    6b80:	f043 0301 	orr.w	r3, r3, #1
    6b84:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    6b86:	f7ff ffb3 	bl	6af0 <free_list_add>
}
    6b8a:	bd70      	pop	{r4, r5, r6, pc}

00006b8c <extract_decimal>:
{
    6b8c:	4684      	mov	ip, r0
	const char *sp = *str;
    6b8e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    6b90:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    6b92:	e005      	b.n	6ba0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    6b94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6b98:	3201      	adds	r2, #1
    6b9a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    6b9e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    6ba0:	7813      	ldrb	r3, [r2, #0]
    6ba2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    6ba6:	2909      	cmp	r1, #9
    6ba8:	d9f4      	bls.n	6b94 <extract_decimal+0x8>
	*str = sp;
    6baa:	f8cc 2000 	str.w	r2, [ip]
}
    6bae:	4770      	bx	lr

00006bb0 <_ldiv5>:
{
    6bb0:	b500      	push	{lr}
	uint32_t v_lo = *v;
    6bb2:	6802      	ldr	r2, [r0, #0]
    6bb4:	6841      	ldr	r1, [r0, #4]
	__asm__ ("" : "+r" (m));
    6bb6:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    6bba:	fba2 2c03 	umull	r2, ip, r2, r3
    6bbe:	eb12 0e03 	adds.w	lr, r2, r3
    6bc2:	eb43 0e0c 	adc.w	lr, r3, ip
	result += (uint64_t)v_lo * m;
    6bc6:	eb12 020e 	adds.w	r2, r2, lr
    6bca:	f14c 0c00 	adc.w	ip, ip, #0
	result += (uint64_t)v_hi * m;
    6bce:	fba1 1303 	umull	r1, r3, r1, r3
    6bd2:	188a      	adds	r2, r1, r2
    6bd4:	eb43 020c 	adc.w	r2, r3, ip
	result += (uint64_t)v_hi * m;
    6bd8:	1889      	adds	r1, r1, r2
    6bda:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    6bde:	6001      	str	r1, [r0, #0]
    6be0:	6043      	str	r3, [r0, #4]
}
    6be2:	f85d fb04 	ldr.w	pc, [sp], #4

00006be6 <_ldiv10>:
{
    6be6:	b508      	push	{r3, lr}
	*v >>= 1;
    6be8:	6802      	ldr	r2, [r0, #0]
    6bea:	6841      	ldr	r1, [r0, #4]
    6bec:	0852      	lsrs	r2, r2, #1
    6bee:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    6bf2:	0849      	lsrs	r1, r1, #1
    6bf4:	6002      	str	r2, [r0, #0]
    6bf6:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
    6bf8:	f7ff ffda 	bl	6bb0 <_ldiv5>
}
    6bfc:	bd08      	pop	{r3, pc}

00006bfe <_get_digit>:
{
    6bfe:	4684      	mov	ip, r0
	if (*digit_count > 0) {
    6c00:	680b      	ldr	r3, [r1, #0]
    6c02:	2b00      	cmp	r3, #0
    6c04:	dd17      	ble.n	6c36 <_get_digit+0x38>
		--*digit_count;
    6c06:	3b01      	subs	r3, #1
    6c08:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    6c0a:	6801      	ldr	r1, [r0, #0]
    6c0c:	6843      	ldr	r3, [r0, #4]
    6c0e:	0098      	lsls	r0, r3, #2
    6c10:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
    6c14:	008a      	lsls	r2, r1, #2
    6c16:	1852      	adds	r2, r2, r1
    6c18:	eb43 0300 	adc.w	r3, r3, r0
    6c1c:	1892      	adds	r2, r2, r2
    6c1e:	415b      	adcs	r3, r3
    6c20:	f8cc 2000 	str.w	r2, [ip]
    6c24:	f8cc 3004 	str.w	r3, [ip, #4]
		rval = ((*fr >> 60) & 0xF) + '0';
    6c28:	0f18      	lsrs	r0, r3, #28
    6c2a:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
    6c2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    6c30:	f8cc 3004 	str.w	r3, [ip, #4]
    6c34:	4770      	bx	lr
		rval = '0';
    6c36:	2030      	movs	r0, #48	; 0x30
}
    6c38:	4770      	bx	lr

00006c3a <encode_uint>:
{
    6c3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c3e:	b083      	sub	sp, #12
    6c40:	4604      	mov	r4, r0
    6c42:	460d      	mov	r5, r1
    6c44:	9201      	str	r2, [sp, #4]
    6c46:	469a      	mov	sl, r3
    6c48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    6c4a:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6c4c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6c50:	2b6f      	cmp	r3, #111	; 0x6f
    6c52:	d00f      	beq.n	6c74 <encode_uint+0x3a>
    6c54:	d906      	bls.n	6c64 <encode_uint+0x2a>
    6c56:	2b70      	cmp	r3, #112	; 0x70
    6c58:	d00f      	beq.n	6c7a <encode_uint+0x40>
    6c5a:	2b78      	cmp	r3, #120	; 0x78
    6c5c:	d110      	bne.n	6c80 <encode_uint+0x46>
		return 16;
    6c5e:	f04f 0910 	mov.w	r9, #16
    6c62:	e026      	b.n	6cb2 <encode_uint+0x78>
	switch (specifier) {
    6c64:	2b58      	cmp	r3, #88	; 0x58
    6c66:	d002      	beq.n	6c6e <encode_uint+0x34>
    6c68:	f04f 090a 	mov.w	r9, #10
    6c6c:	e021      	b.n	6cb2 <encode_uint+0x78>
		return 16;
    6c6e:	f04f 0910 	mov.w	r9, #16
    6c72:	e01e      	b.n	6cb2 <encode_uint+0x78>
		return 8;
    6c74:	f04f 0908 	mov.w	r9, #8
    6c78:	e01b      	b.n	6cb2 <encode_uint+0x78>
		return 16;
    6c7a:	f04f 0910 	mov.w	r9, #16
    6c7e:	e018      	b.n	6cb2 <encode_uint+0x78>
	switch (specifier) {
    6c80:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    6c84:	e015      	b.n	6cb2 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6c86:	f1bb 0f19 	cmp.w	fp, #25
    6c8a:	d821      	bhi.n	6cd0 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6c8c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6c8e:	3237      	adds	r2, #55	; 0x37
    6c90:	b2d2      	uxtb	r2, r2
    6c92:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    6c96:	463a      	mov	r2, r7
    6c98:	4643      	mov	r3, r8
    6c9a:	4620      	mov	r0, r4
    6c9c:	4629      	mov	r1, r5
    6c9e:	f7f9 fd9b 	bl	7d8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    6ca2:	42bc      	cmp	r4, r7
    6ca4:	f175 0300 	sbcs.w	r3, r5, #0
    6ca8:	d316      	bcc.n	6cd8 <encode_uint+0x9e>
    6caa:	4556      	cmp	r6, sl
    6cac:	d914      	bls.n	6cd8 <encode_uint+0x9e>
		value /= radix;
    6cae:	4604      	mov	r4, r0
    6cb0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    6cb2:	f04f 0800 	mov.w	r8, #0
    6cb6:	464f      	mov	r7, r9
    6cb8:	464a      	mov	r2, r9
    6cba:	4643      	mov	r3, r8
    6cbc:	4620      	mov	r0, r4
    6cbe:	4629      	mov	r1, r5
    6cc0:	f7f9 fd8a 	bl	7d8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6cc4:	2a09      	cmp	r2, #9
    6cc6:	d8de      	bhi.n	6c86 <encode_uint+0x4c>
    6cc8:	b2d2      	uxtb	r2, r2
    6cca:	3230      	adds	r2, #48	; 0x30
    6ccc:	b2d2      	uxtb	r2, r2
    6cce:	e7e0      	b.n	6c92 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    6cd0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6cd2:	3257      	adds	r2, #87	; 0x57
    6cd4:	b2d2      	uxtb	r2, r2
    6cd6:	e7dc      	b.n	6c92 <encode_uint+0x58>
	if (conv->flag_hash) {
    6cd8:	9b01      	ldr	r3, [sp, #4]
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	f013 0f20 	tst.w	r3, #32
    6ce0:	d005      	beq.n	6cee <encode_uint+0xb4>
		if (radix == 8) {
    6ce2:	f1b9 0f08 	cmp.w	r9, #8
    6ce6:	d006      	beq.n	6cf6 <encode_uint+0xbc>
		} else if (radix == 16) {
    6ce8:	f1b9 0f10 	cmp.w	r9, #16
    6cec:	d009      	beq.n	6d02 <encode_uint+0xc8>
}
    6cee:	4630      	mov	r0, r6
    6cf0:	b003      	add	sp, #12
    6cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    6cf6:	9a01      	ldr	r2, [sp, #4]
    6cf8:	7893      	ldrb	r3, [r2, #2]
    6cfa:	f043 0308 	orr.w	r3, r3, #8
    6cfe:	7093      	strb	r3, [r2, #2]
    6d00:	e7f5      	b.n	6cee <encode_uint+0xb4>
			conv->altform_0c = true;
    6d02:	9a01      	ldr	r2, [sp, #4]
    6d04:	7893      	ldrb	r3, [r2, #2]
    6d06:	f043 0310 	orr.w	r3, r3, #16
    6d0a:	7093      	strb	r3, [r2, #2]
    6d0c:	e7ef      	b.n	6cee <encode_uint+0xb4>

00006d0e <outs>:
{
    6d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d12:	4607      	mov	r7, r0
    6d14:	460e      	mov	r6, r1
    6d16:	4614      	mov	r4, r2
    6d18:	4698      	mov	r8, r3
	size_t count = 0;
    6d1a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6d1c:	e006      	b.n	6d2c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    6d1e:	4631      	mov	r1, r6
    6d20:	f814 0b01 	ldrb.w	r0, [r4], #1
    6d24:	47b8      	blx	r7
		if (rc < 0) {
    6d26:	2800      	cmp	r0, #0
    6d28:	db09      	blt.n	6d3e <outs+0x30>
		++count;
    6d2a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6d2c:	4544      	cmp	r4, r8
    6d2e:	d3f6      	bcc.n	6d1e <outs+0x10>
    6d30:	f1b8 0f00 	cmp.w	r8, #0
    6d34:	d102      	bne.n	6d3c <outs+0x2e>
    6d36:	7823      	ldrb	r3, [r4, #0]
    6d38:	2b00      	cmp	r3, #0
    6d3a:	d1f0      	bne.n	6d1e <outs+0x10>
	return (int)count;
    6d3c:	4628      	mov	r0, r5
}
    6d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006d42 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6d42:	4770      	bx	lr

00006d44 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6d44:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6d46:	f000 ff12 	bl	7b6e <z_fatal_error>
}
    6d4a:	bd08      	pop	{r3, pc}

00006d4c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6d4c:	b508      	push	{r3, lr}
    6d4e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6d50:	6800      	ldr	r0, [r0, #0]
    6d52:	f7ff fff7 	bl	6d44 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    6d56:	bd08      	pop	{r3, pc}

00006d58 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    6d58:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6d5a:	2100      	movs	r1, #0
    6d5c:	2001      	movs	r0, #1
    6d5e:	f7ff fff1 	bl	6d44 <z_arm_fatal_error>
}
    6d62:	bd08      	pop	{r3, pc}

00006d64 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6d64:	b508      	push	{r3, lr}
	handler();
    6d66:	f7fb f909 	bl	1f7c <z_SysNmiOnReset>
	z_arm_int_exit();
    6d6a:	f7fb f9ff 	bl	216c <z_arm_exc_exit>
}
    6d6e:	bd08      	pop	{r3, pc}

00006d70 <memory_fault_recoverable>:
}
    6d70:	2000      	movs	r0, #0
    6d72:	4770      	bx	lr

00006d74 <debug_monitor>:
	*recoverable = false;
    6d74:	2300      	movs	r3, #0
    6d76:	700b      	strb	r3, [r1, #0]
}
    6d78:	4770      	bx	lr

00006d7a <fault_handle>:
{
    6d7a:	b508      	push	{r3, lr}
	*recoverable = false;
    6d7c:	2300      	movs	r3, #0
    6d7e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    6d80:	1ecb      	subs	r3, r1, #3
    6d82:	2b09      	cmp	r3, #9
    6d84:	d81a      	bhi.n	6dbc <fault_handle+0x42>
    6d86:	e8df f003 	tbb	[pc, r3]
    6d8a:	0905      	.short	0x0905
    6d8c:	1919110d 	.word	0x1919110d
    6d90:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    6d94:	4611      	mov	r1, r2
    6d96:	f7fb fa83 	bl	22a0 <hard_fault>
		break;
    6d9a:	e010      	b.n	6dbe <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    6d9c:	2100      	movs	r1, #0
    6d9e:	f7fb fa2f 	bl	2200 <mem_manage_fault>
		break;
    6da2:	e00c      	b.n	6dbe <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    6da4:	2100      	movs	r1, #0
    6da6:	f7fb f9ef 	bl	2188 <bus_fault>
		break;
    6daa:	e008      	b.n	6dbe <fault_handle+0x44>
		reason = usage_fault(esf);
    6dac:	f7fb fa16 	bl	21dc <usage_fault>
		break;
    6db0:	e005      	b.n	6dbe <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    6db2:	4611      	mov	r1, r2
    6db4:	f7ff ffde 	bl	6d74 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6db8:	2000      	movs	r0, #0
		break;
    6dba:	e000      	b.n	6dbe <fault_handle+0x44>
	switch (fault) {
    6dbc:	2000      	movs	r0, #0
}
    6dbe:	bd08      	pop	{r3, pc}

00006dc0 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    6dc0:	6843      	ldr	r3, [r0, #4]
    6dc2:	1e5a      	subs	r2, r3, #1
		&&
    6dc4:	4213      	tst	r3, r2
    6dc6:	d106      	bne.n	6dd6 <mpu_partition_is_valid+0x16>
		&&
    6dc8:	2b1f      	cmp	r3, #31
    6dca:	d906      	bls.n	6dda <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    6dcc:	6803      	ldr	r3, [r0, #0]
		&&
    6dce:	421a      	tst	r2, r3
    6dd0:	d005      	beq.n	6dde <mpu_partition_is_valid+0x1e>
    6dd2:	2000      	movs	r0, #0
    6dd4:	4770      	bx	lr
    6dd6:	2000      	movs	r0, #0
    6dd8:	4770      	bx	lr
    6dda:	2000      	movs	r0, #0
    6ddc:	4770      	bx	lr
    6dde:	2001      	movs	r0, #1
}
    6de0:	4770      	bx	lr

00006de2 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    6de2:	2807      	cmp	r0, #7
    6de4:	d805      	bhi.n	6df2 <region_allocate_and_init+0x10>
{
    6de6:	b510      	push	{r4, lr}
    6de8:	4604      	mov	r4, r0
	region_init(index, region_conf);
    6dea:	f7fb fbaf 	bl	254c <region_init>
	return index;
    6dee:	4620      	mov	r0, r4
}
    6df0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    6df2:	f06f 0015 	mvn.w	r0, #21
}
    6df6:	4770      	bx	lr

00006df8 <mpu_configure_region>:
{
    6df8:	b500      	push	{lr}
    6dfa:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    6dfc:	680b      	ldr	r3, [r1, #0]
    6dfe:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    6e00:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6e02:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    6e04:	2b20      	cmp	r3, #32
    6e06:	d912      	bls.n	6e2e <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    6e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6e0c:	d811      	bhi.n	6e32 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6e0e:	3b01      	subs	r3, #1
    6e10:	fab3 f383 	clz	r3, r3
    6e14:	f1c3 031f 	rsb	r3, r3, #31
    6e18:	005b      	lsls	r3, r3, #1
    6e1a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6e1e:	4313      	orrs	r3, r2
    6e20:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    6e22:	a901      	add	r1, sp, #4
    6e24:	f7ff ffdd 	bl	6de2 <region_allocate_and_init>
}
    6e28:	b005      	add	sp, #20
    6e2a:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    6e2e:	2308      	movs	r3, #8
    6e30:	e7f5      	b.n	6e1e <mpu_configure_region+0x26>
		return REGION_4G;
    6e32:	233e      	movs	r3, #62	; 0x3e
    6e34:	e7f3      	b.n	6e1e <mpu_configure_region+0x26>

00006e36 <mpu_configure_regions>:
{
    6e36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e3a:	4680      	mov	r8, r0
    6e3c:	460f      	mov	r7, r1
    6e3e:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    6e40:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    6e42:	2500      	movs	r5, #0
    6e44:	e009      	b.n	6e5a <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6e46:	4621      	mov	r1, r4
    6e48:	b2f0      	uxtb	r0, r6
    6e4a:	f7ff ffd5 	bl	6df8 <mpu_configure_region>
    6e4e:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    6e50:	f110 0f16 	cmn.w	r0, #22
    6e54:	d014      	beq.n	6e80 <mpu_configure_regions+0x4a>
		reg_index++;
    6e56:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    6e58:	3501      	adds	r5, #1
    6e5a:	42bd      	cmp	r5, r7
    6e5c:	da10      	bge.n	6e80 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    6e5e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    6e62:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    6e66:	6862      	ldr	r2, [r4, #4]
    6e68:	2a00      	cmp	r2, #0
    6e6a:	d0f5      	beq.n	6e58 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    6e6c:	f1b9 0f00 	cmp.w	r9, #0
    6e70:	d0e9      	beq.n	6e46 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    6e72:	4620      	mov	r0, r4
    6e74:	f7ff ffa4 	bl	6dc0 <mpu_partition_is_valid>
		if (do_sanity_check &&
    6e78:	2800      	cmp	r0, #0
    6e7a:	d1e4      	bne.n	6e46 <mpu_configure_regions+0x10>
			return -EINVAL;
    6e7c:	f06f 0615 	mvn.w	r6, #21
}
    6e80:	4630      	mov	r0, r6
    6e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006e86 <arm_core_mpu_configure_static_mpu_regions>:
{
    6e86:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6e88:	f7fb fb74 	bl	2574 <mpu_configure_static_mpu_regions>
}
    6e8c:	bd08      	pop	{r3, pc}

00006e8e <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    6e8e:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    6e90:	f7fb fb7a 	bl	2588 <mpu_configure_dynamic_mpu_regions>
}
    6e94:	bd08      	pop	{r3, pc}

00006e96 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6e96:	4602      	mov	r2, r0
    6e98:	e002      	b.n	6ea0 <strcpy+0xa>
		*d = *s;
    6e9a:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    6e9e:	3101      	adds	r1, #1
	while (*s != '\0') {
    6ea0:	780b      	ldrb	r3, [r1, #0]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d1f9      	bne.n	6e9a <strcpy+0x4>
	}

	*d = '\0';
    6ea6:	7013      	strb	r3, [r2, #0]

	return dest;
}
    6ea8:	4770      	bx	lr

00006eaa <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6eaa:	4603      	mov	r3, r0
    6eac:	b1a2      	cbz	r2, 6ed8 <strncpy+0x2e>
{
    6eae:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    6eb0:	780c      	ldrb	r4, [r1, #0]
    6eb2:	b12c      	cbz	r4, 6ec0 <strncpy+0x16>
		*d = *s;
    6eb4:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    6eb8:	3101      	adds	r1, #1
		d++;
		n--;
    6eba:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    6ebc:	2a00      	cmp	r2, #0
    6ebe:	d1f7      	bne.n	6eb0 <strncpy+0x6>
	}

	while (n > 0) {
    6ec0:	b122      	cbz	r2, 6ecc <strncpy+0x22>
		*d = '\0';
    6ec2:	2100      	movs	r1, #0
    6ec4:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    6ec8:	3a01      	subs	r2, #1
    6eca:	e7f9      	b.n	6ec0 <strncpy+0x16>
	}

	return dest;
}
    6ecc:	bc10      	pop	{r4}
    6ece:	4770      	bx	lr
		*d = '\0';
    6ed0:	2100      	movs	r1, #0
    6ed2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6ed6:	3a01      	subs	r2, #1
	while (n > 0) {
    6ed8:	2a00      	cmp	r2, #0
    6eda:	d1f9      	bne.n	6ed0 <strncpy+0x26>
    6edc:	4770      	bx	lr

00006ede <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6ede:	4603      	mov	r3, r0
	size_t n = 0;
    6ee0:	2000      	movs	r0, #0

	while (*s != '\0') {
    6ee2:	e001      	b.n	6ee8 <strlen+0xa>
		s++;
    6ee4:	3301      	adds	r3, #1
		n++;
    6ee6:	3001      	adds	r0, #1
	while (*s != '\0') {
    6ee8:	781a      	ldrb	r2, [r3, #0]
    6eea:	2a00      	cmp	r2, #0
    6eec:	d1fa      	bne.n	6ee4 <strlen+0x6>
	}

	return n;
}
    6eee:	4770      	bx	lr

00006ef0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6ef0:	4603      	mov	r3, r0
	size_t n = 0;
    6ef2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6ef4:	e001      	b.n	6efa <strnlen+0xa>
		s++;
    6ef6:	3301      	adds	r3, #1
		n++;
    6ef8:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    6efa:	781a      	ldrb	r2, [r3, #0]
    6efc:	b10a      	cbz	r2, 6f02 <strnlen+0x12>
    6efe:	4288      	cmp	r0, r1
    6f00:	d3f9      	bcc.n	6ef6 <strnlen+0x6>
	}

	return n;
}
    6f02:	4770      	bx	lr

00006f04 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6f04:	ea80 0301 	eor.w	r3, r0, r1
    6f08:	f013 0f03 	tst.w	r3, #3
    6f0c:	d001      	beq.n	6f12 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    6f0e:	4603      	mov	r3, r0
    6f10:	e023      	b.n	6f5a <memcpy+0x56>
    6f12:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    6f14:	f013 0f03 	tst.w	r3, #3
    6f18:	d00f      	beq.n	6f3a <memcpy+0x36>
			if (n == 0) {
    6f1a:	b30a      	cbz	r2, 6f60 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    6f1c:	f811 cb01 	ldrb.w	ip, [r1], #1
    6f20:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    6f24:	3a01      	subs	r2, #1
    6f26:	e7f5      	b.n	6f14 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    6f28:	f811 cb01 	ldrb.w	ip, [r1], #1
    6f2c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6f30:	3a01      	subs	r2, #1
	while (n > 0) {
    6f32:	2a00      	cmp	r2, #0
    6f34:	d1f8      	bne.n	6f28 <memcpy+0x24>
	}

	return d;
}
    6f36:	bc10      	pop	{r4}
    6f38:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    6f3a:	2a03      	cmp	r2, #3
    6f3c:	d90d      	bls.n	6f5a <memcpy+0x56>
{
    6f3e:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    6f40:	f851 4b04 	ldr.w	r4, [r1], #4
    6f44:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    6f48:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    6f4a:	2a03      	cmp	r2, #3
    6f4c:	d8f8      	bhi.n	6f40 <memcpy+0x3c>
    6f4e:	e7f0      	b.n	6f32 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    6f50:	f811 cb01 	ldrb.w	ip, [r1], #1
    6f54:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6f58:	3a01      	subs	r2, #1
	while (n > 0) {
    6f5a:	2a00      	cmp	r2, #0
    6f5c:	d1f8      	bne.n	6f50 <memcpy+0x4c>
    6f5e:	4770      	bx	lr
}
    6f60:	4770      	bx	lr

00006f62 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6f62:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6f66:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6f68:	e002      	b.n	6f70 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    6f6a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6f6e:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6f70:	f013 0f03 	tst.w	r3, #3
    6f74:	d002      	beq.n	6f7c <memset+0x1a>
		if (n == 0) {
    6f76:	2a00      	cmp	r2, #0
    6f78:	d1f7      	bne.n	6f6a <memset+0x8>
    6f7a:	e00f      	b.n	6f9c <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    6f7c:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    6f7e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    6f82:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6f86:	2a03      	cmp	r2, #3
    6f88:	d906      	bls.n	6f98 <memset+0x36>
		*(d_word++) = c_word;
    6f8a:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6f8e:	3a04      	subs	r2, #4
    6f90:	e7f9      	b.n	6f86 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    6f92:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6f96:	3a01      	subs	r2, #1
	while (n > 0) {
    6f98:	2a00      	cmp	r2, #0
    6f9a:	d1fa      	bne.n	6f92 <memset+0x30>
	}

	return buf;
}
    6f9c:	4770      	bx	lr

00006f9e <_stdout_hook_default>:
}
    6f9e:	f04f 30ff 	mov.w	r0, #4294967295
    6fa2:	4770      	bx	lr

00006fa4 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6fa4:	2806      	cmp	r0, #6
    6fa6:	d000      	beq.n	6faa <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6fa8:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6faa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fae:	2201      	movs	r2, #1
    6fb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6fb4:	f3bf 8f4f 	dsb	sy
        __WFE();
    6fb8:	bf20      	wfe
    while (true)
    6fba:	e7fd      	b.n	6fb8 <pm_state_set+0x14>

00006fbc <pm_state_exit_post_ops>:
    6fbc:	2300      	movs	r3, #0
    6fbe:	f383 8811 	msr	BASEPRI, r3
    6fc2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6fc6:	4770      	bx	lr

00006fc8 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    6fc8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6fca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6fce:	0089      	lsls	r1, r1, #2
    6fd0:	3138      	adds	r1, #56	; 0x38
}
    6fd2:	4408      	add	r0, r1
    6fd4:	4770      	bx	lr

00006fd6 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    6fd6:	6840      	ldr	r0, [r0, #4]
}
    6fd8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6fdc:	4770      	bx	lr

00006fde <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    6fde:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    6fe0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    6fe4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6fe8:	4770      	bx	lr

00006fea <get_status>:
{
    6fea:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6fec:	b2c9      	uxtb	r1, r1
    6fee:	f7ff ffeb 	bl	6fc8 <get_sub_data>
    6ff2:	6880      	ldr	r0, [r0, #8]
}
    6ff4:	f000 0007 	and.w	r0, r0, #7
    6ff8:	bd08      	pop	{r3, pc}

00006ffa <set_off_state>:
	__asm__ volatile(
    6ffa:	f04f 0320 	mov.w	r3, #32
    6ffe:	f3ef 8211 	mrs	r2, BASEPRI
    7002:	f383 8812 	msr	BASEPRI_MAX, r3
    7006:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    700a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    700c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7010:	d001      	beq.n	7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7012:	428b      	cmp	r3, r1
    7014:	d107      	bne.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7016:	2301      	movs	r3, #1
    7018:	6003      	str	r3, [r0, #0]
	int err = 0;
    701a:	2000      	movs	r0, #0
	__asm__ volatile(
    701c:	f382 8811 	msr	BASEPRI, r2
    7020:	f3bf 8f6f 	isb	sy
}
    7024:	4770      	bx	lr
		err = -EPERM;
    7026:	f04f 30ff 	mov.w	r0, #4294967295
    702a:	e7f7      	b.n	701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>

0000702c <set_starting_state>:
	__asm__ volatile(
    702c:	f04f 0320 	mov.w	r3, #32
    7030:	f3ef 8211 	mrs	r2, BASEPRI
    7034:	f383 8812 	msr	BASEPRI_MAX, r3
    7038:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    703c:	6803      	ldr	r3, [r0, #0]
    703e:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7042:	f003 0307 	and.w	r3, r3, #7
    7046:	2b01      	cmp	r3, #1
    7048:	d008      	beq.n	705c <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    704a:	458c      	cmp	ip, r1
    704c:	d009      	beq.n	7062 <set_starting_state+0x36>
		err = -EPERM;
    704e:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    7052:	f382 8811 	msr	BASEPRI, r2
    7056:	f3bf 8f6f 	isb	sy
}
    705a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    705c:	6001      	str	r1, [r0, #0]
	int err = 0;
    705e:	2000      	movs	r0, #0
    7060:	e7f7      	b.n	7052 <set_starting_state+0x26>
		err = -EALREADY;
    7062:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7066:	e7f4      	b.n	7052 <set_starting_state+0x26>

00007068 <set_on_state>:
	__asm__ volatile(
    7068:	f04f 0320 	mov.w	r3, #32
    706c:	f3ef 8211 	mrs	r2, BASEPRI
    7070:	f383 8812 	msr	BASEPRI_MAX, r3
    7074:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7078:	6803      	ldr	r3, [r0, #0]
    707a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    707e:	f043 0302 	orr.w	r3, r3, #2
    7082:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7084:	f382 8811 	msr	BASEPRI, r2
    7088:	f3bf 8f6f 	isb	sy
}
    708c:	4770      	bx	lr

0000708e <clkstarted_handle>:
{
    708e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7090:	4606      	mov	r6, r0
    7092:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    7094:	f7ff ff98 	bl	6fc8 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    7098:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    709a:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    709c:	2300      	movs	r3, #0
    709e:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    70a2:	f7ff ffe1 	bl	7068 <set_on_state>
	if (callback) {
    70a6:	b11d      	cbz	r5, 70b0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    70a8:	463a      	mov	r2, r7
    70aa:	4621      	mov	r1, r4
    70ac:	4630      	mov	r0, r6
    70ae:	47a8      	blx	r5
}
    70b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000070b2 <stop>:
{
    70b2:	b570      	push	{r4, r5, r6, lr}
    70b4:	4606      	mov	r6, r0
    70b6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    70b8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    70ba:	4621      	mov	r1, r4
    70bc:	f7ff ff84 	bl	6fc8 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    70c0:	4629      	mov	r1, r5
    70c2:	3008      	adds	r0, #8
    70c4:	f7ff ff99 	bl	6ffa <set_off_state>
	if (err < 0) {
    70c8:	2800      	cmp	r0, #0
    70ca:	db06      	blt.n	70da <stop+0x28>
	get_sub_config(dev, type)->stop();
    70cc:	4621      	mov	r1, r4
    70ce:	4630      	mov	r0, r6
    70d0:	f7ff ff81 	bl	6fd6 <get_sub_config>
    70d4:	6843      	ldr	r3, [r0, #4]
    70d6:	4798      	blx	r3
	return 0;
    70d8:	2000      	movs	r0, #0
}
    70da:	bd70      	pop	{r4, r5, r6, pc}

000070dc <api_stop>:
{
    70dc:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    70de:	2280      	movs	r2, #128	; 0x80
    70e0:	f7ff ffe7 	bl	70b2 <stop>
}
    70e4:	bd08      	pop	{r3, pc}

000070e6 <async_start>:
{
    70e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70ea:	4606      	mov	r6, r0
    70ec:	4690      	mov	r8, r2
    70ee:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    70f0:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    70f2:	4629      	mov	r1, r5
    70f4:	f7ff ff68 	bl	6fc8 <get_sub_data>
    70f8:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    70fa:	9906      	ldr	r1, [sp, #24]
    70fc:	3008      	adds	r0, #8
    70fe:	f7ff ff95 	bl	702c <set_starting_state>
	if (err < 0) {
    7102:	2800      	cmp	r0, #0
    7104:	db09      	blt.n	711a <async_start+0x34>
	subdata->cb = cb;
    7106:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    710a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    710c:	4629      	mov	r1, r5
    710e:	4630      	mov	r0, r6
    7110:	f7ff ff61 	bl	6fd6 <get_sub_config>
    7114:	6803      	ldr	r3, [r0, #0]
    7116:	4798      	blx	r3
	return 0;
    7118:	2000      	movs	r0, #0
}
    711a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000711e <api_start>:
{
    711e:	b510      	push	{r4, lr}
    7120:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7122:	2480      	movs	r4, #128	; 0x80
    7124:	9400      	str	r4, [sp, #0]
    7126:	f7ff ffde 	bl	70e6 <async_start>
}
    712a:	b002      	add	sp, #8
    712c:	bd10      	pop	{r4, pc}

0000712e <onoff_started_callback>:
{
    712e:	b510      	push	{r4, lr}
    7130:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    7132:	b2c9      	uxtb	r1, r1
    7134:	f7ff ff53 	bl	6fde <get_onoff_manager>
	notify(mgr, 0);
    7138:	2100      	movs	r1, #0
    713a:	47a0      	blx	r4
}
    713c:	bd10      	pop	{r4, pc}

0000713e <hfclk_start>:
{
    713e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7140:	2001      	movs	r0, #1
    7142:	f000 fb3f 	bl	77c4 <nrfx_clock_start>
}
    7146:	bd08      	pop	{r3, pc}

00007148 <hfclk_stop>:
{
    7148:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    714a:	2001      	movs	r0, #1
    714c:	f000 fb8b 	bl	7866 <nrfx_clock_stop>
}
    7150:	bd08      	pop	{r3, pc}

00007152 <blocking_start_callback>:
{
    7152:	b508      	push	{r3, lr}
    7154:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7156:	f7fe fa7f 	bl	5658 <z_impl_k_sem_give>
}
    715a:	bd08      	pop	{r3, pc}

0000715c <lfclk_stop>:
{
    715c:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    715e:	f7fb fd09 	bl	2b74 <z_nrf_clock_calibration_lfclk_stopped>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7162:	2000      	movs	r0, #0
    7164:	f000 fb7f 	bl	7866 <nrfx_clock_stop>
}
    7168:	bd08      	pop	{r3, pc}

0000716a <clk_release>:
{
    716a:	b508      	push	{r3, lr}
	err = onoff_release(mgr);
    716c:	f7ff fc68 	bl	6a40 <onoff_release>
}
    7170:	bd08      	pop	{r3, pc}

00007172 <clk_request>:
{
    7172:	b510      	push	{r4, lr}
	*notify = (struct sys_notify){
    7174:	2400      	movs	r4, #0
    7176:	604c      	str	r4, [r1, #4]
    7178:	608c      	str	r4, [r1, #8]
    717a:	60cc      	str	r4, [r1, #12]
    717c:	604a      	str	r2, [r1, #4]
    717e:	2203      	movs	r2, #3
    7180:	608a      	str	r2, [r1, #8]
	err = onoff_request(mgr, cli);
    7182:	f7ff fc01 	bl	6988 <onoff_request>
}
    7186:	bd10      	pop	{r4, pc}

00007188 <timeout_handler>:
{
    7188:	b508      	push	{r3, lr}
	start_cal_process();
    718a:	f7fb fcb5 	bl	2af8 <start_cal_process>
}
    718e:	bd08      	pop	{r3, pc}

00007190 <z_nrf_clock_calibration_lfclk_started>:
{
    7190:	b508      	push	{r3, lr}
	start_unconditional_cal_process();
    7192:	f7fb fcc7 	bl	2b24 <start_unconditional_cal_process>
}
    7196:	bd08      	pop	{r3, pc}

00007198 <wait>:
{
    7198:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    719a:	f000 fd1c 	bl	7bd6 <k_is_in_isr>
    719e:	b100      	cbz	r0, 71a2 <wait+0xa>
}
    71a0:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
    71a2:	2042      	movs	r0, #66	; 0x42
    71a4:	2100      	movs	r1, #0
    71a6:	f7fe ffb9 	bl	611c <z_impl_k_sleep>
    71aa:	e7f9      	b.n	71a0 <wait+0x8>

000071ac <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    71ac:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    71b0:	f020 0001 	bic.w	r0, r0, #1
    71b4:	0540      	lsls	r0, r0, #21
    71b6:	0d40      	lsrs	r0, r0, #21
    71b8:	f240 2306 	movw	r3, #518	; 0x206
    71bc:	4298      	cmp	r0, r3
    71be:	d033      	beq.n	7228 <get_drive+0x7c>
    71c0:	d816      	bhi.n	71f0 <get_drive+0x44>
    71c2:	2806      	cmp	r0, #6
    71c4:	d02c      	beq.n	7220 <get_drive+0x74>
    71c6:	d906      	bls.n	71d6 <get_drive+0x2a>
    71c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    71cc:	d10d      	bne.n	71ea <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    71ce:	2301      	movs	r3, #1
    71d0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    71d2:	2000      	movs	r0, #0
		break;
    71d4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    71d6:	b300      	cbz	r0, 721a <get_drive+0x6e>
    71d8:	2802      	cmp	r0, #2
    71da:	d103      	bne.n	71e4 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    71dc:	2304      	movs	r3, #4
    71de:	700b      	strb	r3, [r1, #0]
	int err = 0;
    71e0:	2000      	movs	r0, #0
		break;
    71e2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    71e4:	f06f 0015 	mvn.w	r0, #21
    71e8:	4770      	bx	lr
    71ea:	f06f 0015 	mvn.w	r0, #21
    71ee:	4770      	bx	lr
    71f0:	f240 4302 	movw	r3, #1026	; 0x402
    71f4:	4298      	cmp	r0, r3
    71f6:	d01b      	beq.n	7230 <get_drive+0x84>
    71f8:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    71fc:	d103      	bne.n	7206 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    71fe:	2303      	movs	r3, #3
    7200:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7202:	2000      	movs	r0, #0
		break;
    7204:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    7206:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    720a:	d103      	bne.n	7214 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    720c:	2302      	movs	r3, #2
    720e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7210:	2000      	movs	r0, #0
		break;
    7212:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    7214:	f06f 0015 	mvn.w	r0, #21
    7218:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    721a:	2000      	movs	r0, #0
    721c:	7008      	strb	r0, [r1, #0]
		break;
    721e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    7220:	2306      	movs	r3, #6
    7222:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7224:	2000      	movs	r0, #0
		break;
    7226:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    7228:	2307      	movs	r3, #7
    722a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    722c:	2000      	movs	r0, #0
		break;
    722e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    7230:	2305      	movs	r3, #5
    7232:	700b      	strb	r3, [r1, #0]
	int err = 0;
    7234:	2000      	movs	r0, #0
}
    7236:	4770      	bx	lr

00007238 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    7238:	f010 0f10 	tst.w	r0, #16
    723c:	d104      	bne.n	7248 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    723e:	f010 0f20 	tst.w	r0, #32
    7242:	d103      	bne.n	724c <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    7244:	2000      	movs	r0, #0
    7246:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    7248:	2003      	movs	r0, #3
    724a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    724c:	2001      	movs	r0, #1
}
    724e:	4770      	bx	lr

00007250 <gpio_nrfx_port_get_raw>:
	return port->config;
    7250:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7252:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7254:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7258:	600b      	str	r3, [r1, #0]
}
    725a:	2000      	movs	r0, #0
    725c:	4770      	bx	lr

0000725e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    725e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7260:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7262:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7266:	4042      	eors	r2, r0
    7268:	400a      	ands	r2, r1
    726a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    726c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7270:	2000      	movs	r0, #0
    7272:	4770      	bx	lr

00007274 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    7274:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7276:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    7278:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    727c:	2000      	movs	r0, #0
    727e:	4770      	bx	lr

00007280 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    7280:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7282:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7284:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    7288:	2000      	movs	r0, #0
    728a:	4770      	bx	lr

0000728c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    728c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    728e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7290:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7294:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7296:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    729a:	2000      	movs	r0, #0
    729c:	4770      	bx	lr

0000729e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    729e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    72a2:	d007      	beq.n	72b4 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    72a4:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    72a8:	d00d      	beq.n	72c6 <get_trigger+0x28>
    72aa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    72ae:	d008      	beq.n	72c2 <get_trigger+0x24>
    72b0:	2001      	movs	r0, #1
}
    72b2:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    72b4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    72b8:	d001      	beq.n	72be <get_trigger+0x20>
    72ba:	2005      	movs	r0, #5
    72bc:	4770      	bx	lr
    72be:	2004      	movs	r0, #4
    72c0:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    72c2:	2002      	movs	r0, #2
    72c4:	4770      	bx	lr
    72c6:	2003      	movs	r0, #3
    72c8:	4770      	bx	lr

000072ca <gpio_nrfx_manage_callback>:
{
    72ca:	b410      	push	{r4}
	return port->data;
    72cc:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    72ce:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    72d2:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    72d4:	b1fb      	cbz	r3, 7316 <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72d6:	2000      	movs	r0, #0
    72d8:	e00d      	b.n	72f6 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    72da:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    72dc:	6063      	str	r3, [r4, #4]
	return list->tail;
    72de:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    72e2:	4281      	cmp	r1, r0
    72e4:	d112      	bne.n	730c <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    72e6:	f8cc 3004 	str.w	r3, [ip, #4]
}
    72ea:	e00f      	b.n	730c <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    72ec:	f8cc 0004 	str.w	r0, [ip, #4]
}
    72f0:	e00c      	b.n	730c <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72f2:	4618      	mov	r0, r3
    72f4:	681b      	ldr	r3, [r3, #0]
    72f6:	b163      	cbz	r3, 7312 <gpio_nrfx_manage_callback+0x48>
    72f8:	4299      	cmp	r1, r3
    72fa:	d1fa      	bne.n	72f2 <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    72fc:	2800      	cmp	r0, #0
    72fe:	d0ec      	beq.n	72da <gpio_nrfx_manage_callback+0x10>
	return node->next;
    7300:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    7302:	6003      	str	r3, [r0, #0]
	return list->tail;
    7304:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    7308:	4299      	cmp	r1, r3
    730a:	d0ef      	beq.n	72ec <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    730c:	2300      	movs	r3, #0
    730e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7310:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7312:	b903      	cbnz	r3, 7316 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    7314:	b162      	cbz	r2, 7330 <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    7316:	b172      	cbz	r2, 7336 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    7318:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    731a:	600b      	str	r3, [r1, #0]
	list->head = node;
    731c:	6061      	str	r1, [r4, #4]
	return list->tail;
    731e:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    7322:	b10b      	cbz	r3, 7328 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7324:	2000      	movs	r0, #0
    7326:	e007      	b.n	7338 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    7328:	f8cc 1004 	str.w	r1, [ip, #4]
    732c:	2000      	movs	r0, #0
}
    732e:	e003      	b.n	7338 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    7330:	f06f 0015 	mvn.w	r0, #21
    7334:	e000      	b.n	7338 <gpio_nrfx_manage_callback+0x6e>
	return 0;
    7336:	2000      	movs	r0, #0
}
    7338:	bc10      	pop	{r4}
    733a:	4770      	bx	lr

0000733c <nrfx_gpio_handler>:
{
    733c:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    733e:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    7342:	0940      	lsrs	r0, r0, #5
    7344:	f7fb fc5e 	bl	2c04 <get_dev>
	if (port == NULL) {
    7348:	b1d8      	cbz	r0, 7382 <nrfx_gpio_handler+0x46>
    734a:	4606      	mov	r6, r0
	return port->data;
    734c:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    734e:	2501      	movs	r5, #1
    7350:	40a5      	lsls	r5, r4
	return list->head;
    7352:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7354:	b119      	cbz	r1, 735e <nrfx_gpio_handler+0x22>
    7356:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7358:	b149      	cbz	r1, 736e <nrfx_gpio_handler+0x32>
	return node->next;
    735a:	680c      	ldr	r4, [r1, #0]
    735c:	e007      	b.n	736e <nrfx_gpio_handler+0x32>
    735e:	460c      	mov	r4, r1
    7360:	e005      	b.n	736e <nrfx_gpio_handler+0x32>
    7362:	b164      	cbz	r4, 737e <nrfx_gpio_handler+0x42>
    7364:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    7366:	b104      	cbz	r4, 736a <nrfx_gpio_handler+0x2e>
	return node->next;
    7368:	6823      	ldr	r3, [r4, #0]
    736a:	4621      	mov	r1, r4
    736c:	461c      	mov	r4, r3
    736e:	b141      	cbz	r1, 7382 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    7370:	688a      	ldr	r2, [r1, #8]
    7372:	402a      	ands	r2, r5
    7374:	d0f5      	beq.n	7362 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7376:	684b      	ldr	r3, [r1, #4]
    7378:	4630      	mov	r0, r6
    737a:	4798      	blx	r3
    737c:	e7f1      	b.n	7362 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    737e:	4623      	mov	r3, r4
    7380:	e7f3      	b.n	736a <nrfx_gpio_handler+0x2e>
}
    7382:	bd70      	pop	{r4, r5, r6, pc}

00007384 <deinit_twim>:
{
    7384:	b510      	push	{r4, lr}
    7386:	4603      	mov	r3, r0
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    7388:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    738a:	691c      	ldr	r4, [r3, #16]
	if (dev_data->twim_initialized) {
    738c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    7390:	b903      	cbnz	r3, 7394 <deinit_twim+0x10>
}
    7392:	bd10      	pop	{r4, pc}
		nrfx_twim_uninit(&dev_config->twim);
    7394:	f7fd fc8e 	bl	4cb4 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    7398:	2300      	movs	r3, #0
    739a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    739e:	e7f8      	b.n	7392 <deinit_twim+0xe>

000073a0 <i2c_nrfx_twim_configure>:
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    73a0:	6903      	ldr	r3, [r0, #16]
	if (I2C_ADDR_10_BITS & i2c_config) {
    73a2:	f011 0f01 	tst.w	r1, #1
    73a6:	d119      	bne.n	73dc <i2c_nrfx_twim_configure+0x3c>
{
    73a8:	b510      	push	{r4, lr}
    73aa:	4604      	mov	r4, r0
	switch (I2C_SPEED_GET(i2c_config)) {
    73ac:	f3c1 0142 	ubfx	r1, r1, #1, #3
    73b0:	2901      	cmp	r1, #1
    73b2:	d008      	beq.n	73c6 <i2c_nrfx_twim_configure+0x26>
    73b4:	2902      	cmp	r1, #2
    73b6:	d114      	bne.n	73e2 <i2c_nrfx_twim_configure+0x42>
		frequency = NRF_TWIM_FREQ_400K;
    73b8:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
	if (frequency != dev_data->twim_config.frequency) {
    73bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    73be:	428a      	cmp	r2, r1
    73c0:	d104      	bne.n	73cc <i2c_nrfx_twim_configure+0x2c>
	return 0;
    73c2:	2000      	movs	r0, #0
    73c4:	e00f      	b.n	73e6 <i2c_nrfx_twim_configure+0x46>
	switch (I2C_SPEED_GET(i2c_config)) {
    73c6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    73ca:	e7f7      	b.n	73bc <i2c_nrfx_twim_configure+0x1c>
		dev_data->twim_config.frequency = frequency;
    73cc:	629a      	str	r2, [r3, #40]	; 0x28
		deinit_twim(dev);
    73ce:	4620      	mov	r0, r4
    73d0:	f7ff ffd8 	bl	7384 <deinit_twim>
		return init_twim(dev);
    73d4:	4620      	mov	r0, r4
    73d6:	f7fb fd53 	bl	2e80 <init_twim>
    73da:	e004      	b.n	73e6 <i2c_nrfx_twim_configure+0x46>
		return -EINVAL;
    73dc:	f06f 0015 	mvn.w	r0, #21
}
    73e0:	4770      	bx	lr
	switch (I2C_SPEED_GET(i2c_config)) {
    73e2:	f06f 0015 	mvn.w	r0, #21
}
    73e6:	bd10      	pop	{r4, pc}

000073e8 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    73e8:	b530      	push	{r4, r5, lr}
    73ea:	b083      	sub	sp, #12
    73ec:	4604      	mov	r4, r0
    73ee:	2200      	movs	r2, #0
    73f0:	2101      	movs	r1, #1
    73f2:	2003      	movs	r0, #3
    73f4:	f7fa fdac 	bl	1f50 <z_arm_irq_priority_set>
    73f8:	6863      	ldr	r3, [r4, #4]
    73fa:	68dd      	ldr	r5, [r3, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    73fc:	aa01      	add	r2, sp, #4
    73fe:	2100      	movs	r1, #0
    7400:	4628      	mov	r0, r5
    7402:	f000 f885 	bl	7510 <pinctrl_lookup_state>
	if (ret < 0) {
    7406:	2800      	cmp	r0, #0
    7408:	db05      	blt.n	7416 <twim_0_init+0x2e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    740a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    740c:	682a      	ldr	r2, [r5, #0]
    740e:	7919      	ldrb	r1, [r3, #4]
    7410:	6818      	ldr	r0, [r3, #0]
    7412:	f7fc f953 	bl	36bc <pinctrl_configure_pins>
    7416:	2800      	cmp	r0, #0
    7418:	db02      	blt.n	7420 <twim_0_init+0x38>
    741a:	4620      	mov	r0, r4
    741c:	f7fb fd30 	bl	2e80 <init_twim>
    7420:	b003      	add	sp, #12
    7422:	bd30      	pop	{r4, r5, pc}

00007424 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7424:	4770      	bx	lr

00007426 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    7426:	1a40      	subs	r0, r0, r1
}
    7428:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    742c:	4770      	bx	lr

0000742e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    742e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7432:	009b      	lsls	r3, r3, #2
    7434:	b29b      	uxth	r3, r3
    7436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    743a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    743e:	2200      	movs	r2, #0
    7440:	601a      	str	r2, [r3, #0]
    7442:	681b      	ldr	r3, [r3, #0]
}
    7444:	4770      	bx	lr

00007446 <absolute_time_to_cc>:
}
    7446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    744a:	4770      	bx	lr

0000744c <full_int_lock>:
	__asm__ volatile(
    744c:	f04f 0320 	mov.w	r3, #32
    7450:	f3ef 8011 	mrs	r0, BASEPRI
    7454:	f383 8812 	msr	BASEPRI_MAX, r3
    7458:	f3bf 8f6f 	isb	sy
}
    745c:	4770      	bx	lr

0000745e <full_int_unlock>:
	__asm__ volatile(
    745e:	f380 8811 	msr	BASEPRI, r0
    7462:	f3bf 8f6f 	isb	sy
}
    7466:	4770      	bx	lr

00007468 <set_absolute_alarm>:
{
    7468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    746a:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    746c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    7470:	f7fb fee0 	bl	3234 <get_comparator>
    7474:	4607      	mov	r7, r0
    7476:	e019      	b.n	74ac <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    7478:	2013      	movs	r0, #19
    747a:	f000 fe33 	bl	80e4 <z_impl_k_busy_wait>
}
    747e:	e022      	b.n	74c6 <set_absolute_alarm+0x5e>
		event_clear(chan);
    7480:	4630      	mov	r0, r6
    7482:	f7ff ffd4 	bl	742e <event_clear>
		event_enable(chan);
    7486:	4630      	mov	r0, r6
    7488:	f7fb fedc 	bl	3244 <event_enable>
		set_comparator(chan, cc_val);
    748c:	4629      	mov	r1, r5
    748e:	4630      	mov	r0, r6
    7490:	f7fb fec6 	bl	3220 <set_comparator>
		now2 = counter();
    7494:	f7fb feea 	bl	326c <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    7498:	4284      	cmp	r4, r0
    749a:	d01e      	beq.n	74da <set_absolute_alarm+0x72>
    749c:	1c81      	adds	r1, r0, #2
    749e:	4628      	mov	r0, r5
    74a0:	f7ff ffc1 	bl	7426 <counter_sub>
	} while ((now2 != now) &&
    74a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    74a8:	d917      	bls.n	74da <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    74aa:	462f      	mov	r7, r5
		now = counter();
    74ac:	f7fb fede 	bl	326c <counter>
    74b0:	4604      	mov	r4, r0
		set_comparator(chan, now);
    74b2:	4601      	mov	r1, r0
    74b4:	4630      	mov	r0, r6
    74b6:	f7fb feb3 	bl	3220 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    74ba:	4621      	mov	r1, r4
    74bc:	4638      	mov	r0, r7
    74be:	f7ff ffb2 	bl	7426 <counter_sub>
    74c2:	2801      	cmp	r0, #1
    74c4:	d0d8      	beq.n	7478 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    74c6:	1ca7      	adds	r7, r4, #2
    74c8:	4639      	mov	r1, r7
    74ca:	4628      	mov	r0, r5
    74cc:	f7ff ffab 	bl	7426 <counter_sub>
    74d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    74d4:	d9d4      	bls.n	7480 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    74d6:	463d      	mov	r5, r7
    74d8:	e7d2      	b.n	7480 <set_absolute_alarm+0x18>
}
    74da:	4628      	mov	r0, r5
    74dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000074de <compare_set>:
{
    74de:	b5f0      	push	{r4, r5, r6, r7, lr}
    74e0:	b083      	sub	sp, #12
    74e2:	4604      	mov	r4, r0
    74e4:	4617      	mov	r7, r2
    74e6:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    74e8:	f7fb fec6 	bl	3278 <compare_int_lock>
    74ec:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    74ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74f0:	9301      	str	r3, [sp, #4]
    74f2:	9b08      	ldr	r3, [sp, #32]
    74f4:	9300      	str	r3, [sp, #0]
    74f6:	463a      	mov	r2, r7
    74f8:	462b      	mov	r3, r5
    74fa:	4620      	mov	r0, r4
    74fc:	f7fb ffac 	bl	3458 <compare_set_nolocks>
    7500:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    7502:	4631      	mov	r1, r6
    7504:	4620      	mov	r0, r4
    7506:	f7fb ff1b 	bl	3340 <compare_int_unlock>
}
    750a:	4628      	mov	r0, r5
    750c:	b003      	add	sp, #12
    750e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007510 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7510:	b410      	push	{r4}
	*state = &config->states[0];
    7512:	6843      	ldr	r3, [r0, #4]
    7514:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7516:	e001      	b.n	751c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    7518:	3408      	adds	r4, #8
    751a:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    751c:	6814      	ldr	r4, [r2, #0]
    751e:	7a03      	ldrb	r3, [r0, #8]
    7520:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    7524:	3b01      	subs	r3, #1
    7526:	f8d0 c004 	ldr.w	ip, [r0, #4]
    752a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    752e:	429c      	cmp	r4, r3
    7530:	d804      	bhi.n	753c <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    7532:	7963      	ldrb	r3, [r4, #5]
    7534:	428b      	cmp	r3, r1
    7536:	d1ef      	bne.n	7518 <pinctrl_lookup_state+0x8>
			return 0;
    7538:	2000      	movs	r0, #0
    753a:	e001      	b.n	7540 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    753c:	f06f 0001 	mvn.w	r0, #1
}
    7540:	bc10      	pop	{r4}
    7542:	4770      	bx	lr

00007544 <nrf_pin_configure>:
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    7544:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    7548:	d001      	beq.n	754e <nrf_pin_configure+0xa>
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    754a:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    754c:	2100      	movs	r1, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    754e:	f3c0 1c81 	ubfx	ip, r0, #6, #2
    7552:	f000 031f 	and.w	r3, r0, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7556:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    755a:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    755e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7562:	4301      	orrs	r1, r0
    reg->PIN_CNF[pin_number] = cnf;
    7564:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    756c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    7570:	4770      	bx	lr

00007572 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7572:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7574:	2000      	movs	r0, #0
    7576:	f7fb f877 	bl	2668 <sys_arch_reboot>

0000757a <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    757a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    757e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7582:	f1b3 3fff 	cmp.w	r3, #4294967295
    7586:	d003      	beq.n	7590 <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7588:	2b06      	cmp	r3, #6
    758a:	d006      	beq.n	759a <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    758c:	2000      	movs	r0, #0
    758e:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7590:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7594:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7598:	e7f6      	b.n	7588 <nrf52_errata_12+0xe>
                        return true;
    759a:	2001      	movs	r0, #1
    #endif
}
    759c:	4770      	bx	lr

0000759e <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    759e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    75a2:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    75a6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    75aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    75ae:	2a06      	cmp	r2, #6
    75b0:	d001      	beq.n	75b6 <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    75b2:	2000      	movs	r0, #0
    75b4:	4770      	bx	lr
                switch(var2)
    75b6:	3b03      	subs	r3, #3
    75b8:	2b00      	cmp	r3, #0
    75ba:	d804      	bhi.n	75c6 <nrf52_errata_16+0x28>
    75bc:	e8df f003 	tbb	[pc, r3]
    75c0:	01          	.byte	0x01
    75c1:	00          	.byte	0x00
    75c2:	2001      	movs	r0, #1
    75c4:	4770      	bx	lr
                        return false;
    75c6:	2000      	movs	r0, #0
    #endif
}
    75c8:	4770      	bx	lr

000075ca <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    75ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    75ce:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    75d2:	f1b3 3fff 	cmp.w	r3, #4294967295
    75d6:	d003      	beq.n	75e0 <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    75d8:	2b06      	cmp	r3, #6
    75da:	d006      	beq.n	75ea <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    75dc:	2000      	movs	r0, #0
    75de:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    75e0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    75e4:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    75e8:	e7f6      	b.n	75d8 <nrf52_errata_31+0xe>
                        return true;
    75ea:	2001      	movs	r0, #1
    #endif
}
    75ec:	4770      	bx	lr

000075ee <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    75ee:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    75f2:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    75f6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    75fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    75fe:	2a06      	cmp	r2, #6
    7600:	d001      	beq.n	7606 <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7602:	2000      	movs	r0, #0
    7604:	4770      	bx	lr
                switch(var2)
    7606:	3b03      	subs	r3, #3
    7608:	2b00      	cmp	r3, #0
    760a:	d804      	bhi.n	7616 <nrf52_errata_32+0x28>
    760c:	e8df f003 	tbb	[pc, r3]
    7610:	01          	.byte	0x01
    7611:	00          	.byte	0x00
    7612:	2001      	movs	r0, #1
    7614:	4770      	bx	lr
                        return false;
    7616:	2000      	movs	r0, #0
    #endif
}
    7618:	4770      	bx	lr

0000761a <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    761a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    761e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7622:	f1b3 3fff 	cmp.w	r3, #4294967295
    7626:	d003      	beq.n	7630 <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7628:	2b06      	cmp	r3, #6
    762a:	d006      	beq.n	763a <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    762c:	2000      	movs	r0, #0
    762e:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7630:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7634:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7638:	e7f6      	b.n	7628 <nrf52_errata_36+0xe>
                        return true;
    763a:	2001      	movs	r0, #1
    #endif
}
    763c:	4770      	bx	lr

0000763e <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    763e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7642:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7646:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    764a:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    764e:	2a06      	cmp	r2, #6
    7650:	d001      	beq.n	7656 <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7652:	2000      	movs	r0, #0
    7654:	4770      	bx	lr
                switch(var2)
    7656:	3b03      	subs	r3, #3
    7658:	2b00      	cmp	r3, #0
    765a:	d804      	bhi.n	7666 <nrf52_errata_37+0x28>
    765c:	e8df f003 	tbb	[pc, r3]
    7660:	01          	.byte	0x01
    7661:	00          	.byte	0x00
    7662:	2001      	movs	r0, #1
    7664:	4770      	bx	lr
                        return false;
    7666:	2000      	movs	r0, #0
    #endif
}
    7668:	4770      	bx	lr

0000766a <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    766a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    766e:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    7672:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    7676:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    767a:	2a06      	cmp	r2, #6
    767c:	d001      	beq.n	7682 <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    767e:	2000      	movs	r0, #0
    7680:	4770      	bx	lr
                switch(var2)
    7682:	3b03      	subs	r3, #3
    7684:	2b00      	cmp	r3, #0
    7686:	d804      	bhi.n	7692 <nrf52_errata_57+0x28>
    7688:	e8df f003 	tbb	[pc, r3]
    768c:	01          	.byte	0x01
    768d:	00          	.byte	0x00
    768e:	2001      	movs	r0, #1
    7690:	4770      	bx	lr
                        return false;
    7692:	2000      	movs	r0, #0
    #endif
}
    7694:	4770      	bx	lr

00007696 <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7696:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    769a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    769e:	f1b3 3fff 	cmp.w	r3, #4294967295
    76a2:	d007      	beq.n	76b4 <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    76a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    76a8:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    76ac:	2b06      	cmp	r3, #6
    76ae:	d00a      	beq.n	76c6 <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    76b0:	2000      	movs	r0, #0
    76b2:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    76b4:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
    76b8:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    76bc:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
    76c0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    76c4:	e7f2      	b.n	76ac <nrf52_errata_66+0x16>
                switch(var2)
    76c6:	3a03      	subs	r2, #3
    76c8:	2a01      	cmp	r2, #1
    76ca:	d804      	bhi.n	76d6 <nrf52_errata_66+0x40>
    76cc:	e8df f002 	tbb	[pc, r2]
    76d0:	0101      	.short	0x0101
    76d2:	2000      	movs	r0, #0
    76d4:	4770      	bx	lr
                        return true;
    76d6:	2001      	movs	r0, #1
    #endif
}
    76d8:	4770      	bx	lr

000076da <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    76da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    76de:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    76e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    76e6:	d003      	beq.n	76f0 <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    76e8:	2b06      	cmp	r3, #6
    76ea:	d006      	beq.n	76fa <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    76ec:	2000      	movs	r0, #0
    76ee:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    76f0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    76f4:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    76f8:	e7f6      	b.n	76e8 <nrf52_errata_108+0xe>
                        return true;
    76fa:	2001      	movs	r0, #1
    #endif
}
    76fc:	4770      	bx	lr

000076fe <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    76fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7702:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7706:	f1b3 3fff 	cmp.w	r3, #4294967295
    770a:	d003      	beq.n	7714 <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    770c:	2b06      	cmp	r3, #6
    770e:	d006      	beq.n	771e <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7710:	2000      	movs	r0, #0
    7712:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7714:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    7718:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    771c:	e7f6      	b.n	770c <nrf52_errata_136+0xe>
                        return true;
    771e:	2001      	movs	r0, #1
    #endif
}
    7720:	4770      	bx	lr

00007722 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7722:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7726:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    772a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    772e:	2a06      	cmp	r2, #6
    7730:	d001      	beq.n	7736 <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7732:	2000      	movs	r0, #0
    7734:	4770      	bx	lr
                switch(var2)
    7736:	2b05      	cmp	r3, #5
    7738:	d803      	bhi.n	7742 <nrf52_errata_182+0x20>
    773a:	2b03      	cmp	r3, #3
    773c:	d303      	bcc.n	7746 <nrf52_errata_182+0x24>
    773e:	2000      	movs	r0, #0
    7740:	4770      	bx	lr
                        return true;
    7742:	2001      	movs	r0, #1
    7744:	4770      	bx	lr
                        return true;
    7746:	2001      	movs	r0, #1
    #endif
}
    7748:	4770      	bx	lr

0000774a <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    774a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    774e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7752:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    7756:	2a06      	cmp	r2, #6
    7758:	d001      	beq.n	775e <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    775a:	2000      	movs	r0, #0
    775c:	4770      	bx	lr
                switch(var2)
    775e:	2b06      	cmp	r3, #6
    7760:	d803      	bhi.n	776a <nrf52_configuration_249+0x20>
    7762:	2b03      	cmp	r3, #3
    7764:	d303      	bcc.n	776e <nrf52_configuration_249+0x24>
    7766:	2000      	movs	r0, #0
    7768:	4770      	bx	lr
                        return true;
    776a:	2001      	movs	r0, #1
    776c:	4770      	bx	lr
                        return true;
    776e:	2001      	movs	r0, #1
    #endif
}
    7770:	4770      	bx	lr

00007772 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    7772:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    7774:	4780      	blx	r0
}
    7776:	bd08      	pop	{r3, pc}

00007778 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    7778:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    777a:	f000 fcb3 	bl	80e4 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    777e:	bd08      	pop	{r3, pc}

00007780 <clock_initial_lfclksrc_get>:
}
    7780:	2000      	movs	r0, #0
    7782:	4770      	bx	lr

00007784 <clock_lfclksrc_tweak>:
{
    7784:	b538      	push	{r3, r4, r5, lr}
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    7786:	6803      	ldr	r3, [r0, #0]
    7788:	2b00      	cmp	r3, #0
    778a:	bf0c      	ite	eq
    778c:	2501      	moveq	r5, #1
    778e:	2500      	movne	r5, #0
    if (!is_correct_clk)
    7790:	d101      	bne.n	7796 <clock_lfclksrc_tweak+0x12>
}
    7792:	4628      	mov	r0, r5
    7794:	bd38      	pop	{r3, r4, r5, pc}
    7796:	4604      	mov	r4, r0
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7798:	2000      	movs	r0, #0
    779a:	f7fc fa9f 	bl	3cdc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    779e:	f7ff ffef 	bl	7780 <clock_initial_lfclksrc_get>
    77a2:	6020      	str	r0, [r4, #0]
    77a4:	e7f5      	b.n	7792 <clock_lfclksrc_tweak+0xe>

000077a6 <nrfx_clock_enable>:
{
    77a6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    77a8:	2000      	movs	r0, #0
    77aa:	f7fa fbc3 	bl	1f34 <arch_irq_is_enabled>
    77ae:	b130      	cbz	r0, 77be <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    77b0:	f7ff ffe6 	bl	7780 <clock_initial_lfclksrc_get>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    77b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77b8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    77bc:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    77be:	f7fa fb97 	bl	1ef0 <arch_irq_enable>
    77c2:	e7f5      	b.n	77b0 <nrfx_clock_enable+0xa>

000077c4 <nrfx_clock_start>:
    switch (domain)
    77c4:	b110      	cbz	r0, 77cc <nrfx_clock_start+0x8>
    77c6:	2801      	cmp	r0, #1
    77c8:	d041      	beq.n	784e <nrfx_clock_start+0x8a>
    77ca:	4770      	bx	lr
{
    77cc:	b510      	push	{r4, lr}
    77ce:	b082      	sub	sp, #8
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    77d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    77d4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    77d8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    77dc:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    77de:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    77e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    77e6:	d11c      	bne.n	7822 <nrfx_clock_start+0x5e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    77e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77ec:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    77f0:	f013 0f01 	tst.w	r3, #1
    77f4:	d119      	bne.n	782a <nrfx_clock_start+0x66>
                    lfclksrc = clock_initial_lfclksrc_get();
    77f6:	f7ff ffc3 	bl	7780 <clock_initial_lfclksrc_get>
    77fa:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    77fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7800:	9b01      	ldr	r3, [sp, #4]
    7802:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7806:	2300      	movs	r3, #0
    7808:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    780c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->INTENSET = mask;
    7810:	2302      	movs	r3, #2
    7812:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrfx_clock_anomaly_132();
    7816:	f7fc fa41 	bl	3c9c <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    781a:	2301      	movs	r3, #1
    781c:	60a3      	str	r3, [r4, #8]
}
    781e:	b002      	add	sp, #8
    7820:	bd10      	pop	{r4, pc}
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    7822:	a801      	add	r0, sp, #4
    7824:	f7ff ffae 	bl	7784 <clock_lfclksrc_tweak>
    7828:	e7e8      	b.n	77fc <nrfx_clock_start+0x38>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    782a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    782e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7832:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    7836:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    7838:	a801      	add	r0, sp, #4
    783a:	f7ff ffa3 	bl	7784 <clock_lfclksrc_tweak>
    783e:	2800      	cmp	r0, #0
    7840:	d0dc      	beq.n	77fc <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    7842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7846:	2202      	movs	r2, #2
    7848:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    784c:	e7e7      	b.n	781e <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    784e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7852:	2200      	movs	r2, #0
    7854:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7858:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    785c:	2201      	movs	r2, #1
    785e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7862:	601a      	str	r2, [r3, #0]
    7864:	4770      	bx	lr

00007866 <nrfx_clock_stop>:
{
    7866:	b508      	push	{r3, lr}
    clock_stop(domain);
    7868:	f7fc fa38 	bl	3cdc <clock_stop>
}
    786c:	bd08      	pop	{r3, pc}

0000786e <pin_is_task_output>:
{
    786e:	b510      	push	{r4, lr}
    7870:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7872:	f7fc fb5d 	bl	3f30 <pin_is_output>
    7876:	b128      	cbz	r0, 7884 <pin_is_task_output+0x16>
    7878:	4620      	mov	r0, r4
    787a:	f7fc fb43 	bl	3f04 <pin_in_use_by_te>
    787e:	b118      	cbz	r0, 7888 <pin_is_task_output+0x1a>
    7880:	2001      	movs	r0, #1
    7882:	e000      	b.n	7886 <pin_is_task_output+0x18>
    7884:	2000      	movs	r0, #0
}
    7886:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7888:	2000      	movs	r0, #0
    788a:	e7fc      	b.n	7886 <pin_is_task_output+0x18>

0000788c <pin_is_input>:
{
    788c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    788e:	f7fc fb4f 	bl	3f30 <pin_is_output>
    7892:	f080 0001 	eor.w	r0, r0, #1
}
    7896:	b2c0      	uxtb	r0, r0
    7898:	bd08      	pop	{r3, pc}

0000789a <gpiote_polarity_to_trigger>:
}
    789a:	4770      	bx	lr

0000789c <gpiote_trigger_to_polarity>:
}
    789c:	4770      	bx	lr

0000789e <is_level>:
}
    789e:	2803      	cmp	r0, #3
    78a0:	bf94      	ite	ls
    78a2:	2000      	movls	r0, #0
    78a4:	2001      	movhi	r0, #1
    78a6:	4770      	bx	lr

000078a8 <next_sense_cond_call_handler>:
{
    78a8:	b570      	push	{r4, r5, r6, lr}
    78aa:	4604      	mov	r4, r0
    78ac:	460d      	mov	r5, r1
    78ae:	4616      	mov	r6, r2
    if (is_level(trigger))
    78b0:	4608      	mov	r0, r1
    78b2:	f7ff fff4 	bl	789e <is_level>
    78b6:	b9b8      	cbnz	r0, 78e8 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    78b8:	2e02      	cmp	r6, #2
    78ba:	d037      	beq.n	792c <next_sense_cond_call_handler+0x84>
    78bc:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    78be:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    78c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    78c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    78ca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    78ce:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    78d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    78d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    78da:	2d03      	cmp	r5, #3
    78dc:	d02a      	beq.n	7934 <next_sense_cond_call_handler+0x8c>
    78de:	2e02      	cmp	r6, #2
    78e0:	d026      	beq.n	7930 <next_sense_cond_call_handler+0x88>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    78e2:	2e03      	cmp	r6, #3
    78e4:	d02b      	beq.n	793e <next_sense_cond_call_handler+0x96>
}
    78e6:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    78e8:	4629      	mov	r1, r5
    78ea:	4620      	mov	r0, r4
    78ec:	f7fc fb72 	bl	3fd4 <call_handler>
    *p_pin = pin_number & 0x1F;
    78f0:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    78f4:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
    78f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    78fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7900:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7904:	429e      	cmp	r6, r3
    7906:	d1ee      	bne.n	78e6 <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    790c:	4614      	mov	r4, r2
    790e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
    7912:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7916:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    791a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
    791e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7922:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7926:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
    792a:	e7dc      	b.n	78e6 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    792c:	2003      	movs	r0, #3
    792e:	e7c6      	b.n	78be <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7930:	2d01      	cmp	r5, #1
    7932:	d1d6      	bne.n	78e2 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
    7934:	4629      	mov	r1, r5
    7936:	4620      	mov	r0, r4
    7938:	f7fc fb4c 	bl	3fd4 <call_handler>
}
    793c:	e7d3      	b.n	78e6 <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    793e:	2d02      	cmp	r5, #2
    7940:	d1d1      	bne.n	78e6 <next_sense_cond_call_handler+0x3e>
    7942:	e7f7      	b.n	7934 <next_sense_cond_call_handler+0x8c>

00007944 <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
    7944:	4684      	mov	ip, r0
    7946:	2300      	movs	r3, #0
    7948:	e008      	b.n	795c <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
    794a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    794e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7952:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
    7956:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    795a:	3301      	adds	r3, #1
    795c:	2b00      	cmp	r3, #0
    795e:	d0f4      	beq.n	794a <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    7960:	2300      	movs	r3, #0
    7962:	b10b      	cbz	r3, 7968 <latch_pending_read_and_check+0x24>
    return false;
    7964:	2000      	movs	r0, #0
    7966:	4770      	bx	lr
        if (latch[port_idx])
    7968:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    796c:	b90a      	cbnz	r2, 7972 <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    796e:	3301      	adds	r3, #1
    7970:	e7f7      	b.n	7962 <latch_pending_read_and_check+0x1e>
            return true;
    7972:	2001      	movs	r0, #1
}
    7974:	4770      	bx	lr

00007976 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    7976:	7b0b      	ldrb	r3, [r1, #12]
    7978:	2b03      	cmp	r3, #3
    797a:	d839      	bhi.n	79f0 <xfer_completeness_check+0x7a>
    797c:	e8df f003 	tbb	[pc, r3]
    7980:	0216312a 	.word	0x0216312a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7984:	688b      	ldr	r3, [r1, #8]
    7986:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    798a:	d004      	beq.n	7996 <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    798c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    7990:	690a      	ldr	r2, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7992:	429a      	cmp	r2, r3
    7994:	d10f      	bne.n	79b6 <xfer_completeness_check+0x40>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7996:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    7998:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    799c:	d12a      	bne.n	79f4 <xfer_completeness_check+0x7e>
    799e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
    79a2:	694a      	ldr	r2, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    79a4:	429a      	cmp	r2, r3
    79a6:	d106      	bne.n	79b6 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    79a8:	2001      	movs	r0, #1
    79aa:	4770      	bx	lr
    79ac:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    79b0:	690a      	ldr	r2, [r1, #16]
    79b2:	429a      	cmp	r2, r3
    79b4:	d007      	beq.n	79c6 <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    79b6:	2300      	movs	r3, #0
    79b8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    79bc:	2206      	movs	r2, #6
    79be:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
    79c2:	4618      	mov	r0, r3
    79c4:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    79c6:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
    79ca:	694a      	ldr	r2, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    79cc:	429a      	cmp	r2, r3
    79ce:	d1f2      	bne.n	79b6 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    79d0:	2001      	movs	r0, #1
    79d2:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    79d4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    79d8:	690a      	ldr	r2, [r1, #16]
    79da:	429a      	cmp	r2, r3
    79dc:	d1eb      	bne.n	79b6 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    79de:	2001      	movs	r0, #1
    79e0:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
    79e2:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    79e6:	690a      	ldr	r2, [r1, #16]
    79e8:	429a      	cmp	r2, r3
    79ea:	d1e4      	bne.n	79b6 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    79ec:	2001      	movs	r0, #1
}
    79ee:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
    79f0:	2001      	movs	r0, #1
    79f2:	4770      	bx	lr
    bool transfer_complete = true;
    79f4:	2001      	movs	r0, #1
    79f6:	4770      	bx	lr

000079f8 <twim_pins_configure>:
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    79f8:	7b8b      	ldrb	r3, [r1, #14]
    79fa:	b10b      	cbz	r3, 7a00 <twim_pins_configure+0x8>
    79fc:	7bca      	ldrb	r2, [r1, #15]
    79fe:	bb32      	cbnz	r2, 7a4e <twim_pins_configure+0x56>
    if (!p_config->skip_gpio_cfg)
    7a00:	b9eb      	cbnz	r3, 7a3e <twim_pins_configure+0x46>
{
    7a02:	b410      	push	{r4}
        TWIM_PIN_INIT(p_config->scl, drive);
    7a04:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    7a06:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7a0e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7a12:	f240 640c 	movw	r4, #1548	; 0x60c
    7a16:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    7a1a:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
    7a1c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7a20:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7a24:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    7a28:	7bcb      	ldrb	r3, [r1, #15]
    7a2a:	b92b      	cbnz	r3, 7a38 <twim_pins_configure+0x40>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    7a2c:	680a      	ldr	r2, [r1, #0]
    7a2e:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    7a30:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    7a34:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    7a38:	2001      	movs	r0, #1
    7a3a:	bc10      	pop	{r4}
    7a3c:	4770      	bx	lr
    if (!p_config->skip_psel_cfg)
    7a3e:	7bcb      	ldrb	r3, [r1, #15]
    7a40:	b92b      	cbnz	r3, 7a4e <twim_pins_configure+0x56>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    7a42:	680a      	ldr	r2, [r1, #0]
    7a44:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    7a46:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    7a4a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    7a4e:	2001      	movs	r0, #1
    7a50:	4770      	bx	lr

00007a52 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    7a52:	f011 0f01 	tst.w	r1, #1
    7a56:	d009      	beq.n	7a6c <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    7a58:	2301      	movs	r3, #1
    7a5a:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    7a5e:	f011 0f02 	tst.w	r1, #2
    7a62:	d007      	beq.n	7a74 <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    7a64:	2301      	movs	r3, #1
    7a66:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    7a6a:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    7a6c:	2300      	movs	r3, #0
    7a6e:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
    7a72:	e7f4      	b.n	7a5e <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    7a74:	2300      	movs	r3, #0
    7a76:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    7a7a:	4770      	bx	lr

00007a7c <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    7a7c:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    7a7e:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    7a80:	4293      	cmp	r3, r2
    7a82:	d804      	bhi.n	7a8e <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    7a84:	6880      	ldr	r0, [r0, #8]
    7a86:	1a80      	subs	r0, r0, r2
    7a88:	4403      	add	r3, r0
    7a8a:	1e58      	subs	r0, r3, #1
    7a8c:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
    7a8e:	1a9b      	subs	r3, r3, r2
    7a90:	1e58      	subs	r0, r3, #1
}
    7a92:	4770      	bx	lr

00007a94 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7a98:	4604      	mov	r4, r0
    7a9a:	4688      	mov	r8, r1
    7a9c:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
    7a9e:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    7aa0:	6887      	ldr	r7, [r0, #8]
    7aa2:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
    7aa6:	4591      	cmp	r9, r2
    7aa8:	d909      	bls.n	7abe <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7aaa:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    7aac:	4428      	add	r0, r5
    7aae:	f7ff fa29 	bl	6f04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7ab2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    7ab6:	4435      	add	r5, r6
    7ab8:	60e5      	str	r5, [r4, #12]
}
    7aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7abe:	6840      	ldr	r0, [r0, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7ac0:	464a      	mov	r2, r9
    7ac2:	4428      	add	r0, r5
    7ac4:	f7ff fa1e 	bl	6f04 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    7ac8:	1bed      	subs	r5, r5, r7
    7aca:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7acc:	462a      	mov	r2, r5
    7ace:	eb08 0109 	add.w	r1, r8, r9
    7ad2:	6860      	ldr	r0, [r4, #4]
    7ad4:	f7ff fa16 	bl	6f04 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7ad8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    7adc:	60e5      	str	r5, [r4, #12]
}
    7ade:	e7ec      	b.n	7aba <_WriteNoCheck+0x26>

00007ae0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ae4:	4606      	mov	r6, r0
    7ae6:	4688      	mov	r8, r1
    7ae8:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
    7aea:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
    7aec:	f04f 0900 	mov.w	r9, #0
    7af0:	e01a      	b.n	7b28 <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
    7af2:	1b64      	subs	r4, r4, r5
    7af4:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    7af6:	68b3      	ldr	r3, [r6, #8]
    7af8:	1b5c      	subs	r4, r3, r5
    7afa:	4294      	cmp	r4, r2
    7afc:	bf28      	it	cs
    7afe:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7b00:	42bc      	cmp	r4, r7
    7b02:	bf28      	it	cs
    7b04:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7b06:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    7b08:	4622      	mov	r2, r4
    7b0a:	4641      	mov	r1, r8
    7b0c:	4428      	add	r0, r5
    7b0e:	f7ff f9f9 	bl	6f04 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    7b12:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
    7b14:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
    7b16:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
    7b18:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
    7b1a:	68b3      	ldr	r3, [r6, #8]
    7b1c:	42ab      	cmp	r3, r5
    7b1e:	d00b      	beq.n	7b38 <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    7b20:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    7b24:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    7b26:	b14f      	cbz	r7, 7b3c <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    7b28:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
    7b2a:	42a5      	cmp	r5, r4
    7b2c:	d3e1      	bcc.n	7af2 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7b2e:	68b2      	ldr	r2, [r6, #8]
    7b30:	1b64      	subs	r4, r4, r5
    7b32:	4414      	add	r4, r2
    7b34:	1e62      	subs	r2, r4, #1
    7b36:	e7de      	b.n	7af6 <_WriteBlocking+0x16>
      WrOff = 0u;
    7b38:	2500      	movs	r5, #0
    7b3a:	e7f1      	b.n	7b20 <_WriteBlocking+0x40>
}
    7b3c:	4648      	mov	r0, r9
    7b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007b42 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    7b42:	b508      	push	{r3, lr}
  _DoInit();
    7b44:	f7fd f964 	bl	4e10 <_DoInit>
}
    7b48:	bd08      	pop	{r3, pc}

00007b4a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7b4a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7b4c:	f7ff fff9 	bl	7b42 <SEGGER_RTT_Init>

	return 0;
}
    7b50:	2000      	movs	r0, #0
    7b52:	bd08      	pop	{r3, pc}

00007b54 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7b54:	b148      	cbz	r0, 7b6a <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7b56:	68c3      	ldr	r3, [r0, #12]
    7b58:	8818      	ldrh	r0, [r3, #0]
    7b5a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7b5e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    7b62:	bf14      	ite	ne
    7b64:	2000      	movne	r0, #0
    7b66:	2001      	moveq	r0, #1
    7b68:	4770      	bx	lr
		return false;
    7b6a:	2000      	movs	r0, #0
}
    7b6c:	4770      	bx	lr

00007b6e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b70:	4605      	mov	r5, r0
    7b72:	460e      	mov	r6, r1
	__asm__ volatile(
    7b74:	f04f 0320 	mov.w	r3, #32
    7b78:	f3ef 8711 	mrs	r7, BASEPRI
    7b7c:	f383 8812 	msr	BASEPRI_MAX, r3
    7b80:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7b84:	f7fe faf6 	bl	6174 <z_impl_z_current_get>
    7b88:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7b8a:	4631      	mov	r1, r6
    7b8c:	4628      	mov	r0, r5
    7b8e:	f7ff fcf0 	bl	7572 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7b92:	f387 8811 	msr	BASEPRI, r7
    7b96:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7b9a:	4620      	mov	r0, r4
    7b9c:	f7fa fc9c 	bl	24d8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007ba2 <z_early_memset>:
{
    7ba2:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    7ba4:	f7ff f9dd 	bl	6f62 <memset>
}
    7ba8:	bd08      	pop	{r3, pc}

00007baa <z_early_memcpy>:
{
    7baa:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    7bac:	f7ff f9aa 	bl	6f04 <memcpy>
}
    7bb0:	bd08      	pop	{r3, pc}

00007bb2 <setup_thread_stack>:
{
    7bb2:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7bb4:	3207      	adds	r2, #7
    7bb6:	f022 0207 	bic.w	r2, r2, #7
    7bba:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7bbe:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    7bc2:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    7bc6:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    7bca:	2200      	movs	r2, #0
    7bcc:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    7bd0:	18c8      	adds	r0, r1, r3
    7bd2:	bc10      	pop	{r4}
    7bd4:	4770      	bx	lr

00007bd6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7bd6:	f3ef 8005 	mrs	r0, IPSR
}
    7bda:	3800      	subs	r0, #0
    7bdc:	bf18      	it	ne
    7bde:	2001      	movne	r0, #1
    7be0:	4770      	bx	lr

00007be2 <z_impl_k_thread_start>:
{
    7be2:	b508      	push	{r3, lr}
	z_sched_start(thread);
    7be4:	f7fe f898 	bl	5d18 <z_sched_start>
}
    7be8:	bd08      	pop	{r3, pc}

00007bea <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    7bea:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    7bec:	2400      	movs	r4, #0
    7bee:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    7bf0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7bf2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    7bf4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    7bf6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    7bf8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    7bfa:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    7bfc:	bc10      	pop	{r4}
    7bfe:	4770      	bx	lr

00007c00 <z_impl_k_thread_create>:
{
    7c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c02:	b087      	sub	sp, #28
    7c04:	4604      	mov	r4, r0
    7c06:	9e12      	ldr	r6, [sp, #72]	; 0x48
    7c08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7c0a:	2700      	movs	r7, #0
    7c0c:	9705      	str	r7, [sp, #20]
    7c0e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    7c10:	9704      	str	r7, [sp, #16]
    7c12:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7c14:	9703      	str	r7, [sp, #12]
    7c16:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7c18:	9702      	str	r7, [sp, #8]
    7c1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7c1c:	9701      	str	r7, [sp, #4]
    7c1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7c20:	9700      	str	r7, [sp, #0]
    7c22:	f7fd facb 	bl	51bc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7c26:	f1b5 3fff 	cmp.w	r5, #4294967295
    7c2a:	bf08      	it	eq
    7c2c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    7c30:	d102      	bne.n	7c38 <z_impl_k_thread_create+0x38>
}
    7c32:	4620      	mov	r0, r4
    7c34:	b007      	add	sp, #28
    7c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    7c38:	4632      	mov	r2, r6
    7c3a:	462b      	mov	r3, r5
    7c3c:	4620      	mov	r0, r4
    7c3e:	f7fd faaf 	bl	51a0 <schedule_new_thread>
    7c42:	e7f6      	b.n	7c32 <z_impl_k_thread_create+0x32>

00007c44 <z_pm_save_idle_exit>:
{
    7c44:	b508      	push	{r3, lr}
	pm_system_resume();
    7c46:	f7f9 ffb3 	bl	1bb0 <pm_system_resume>
	sys_clock_idle_exit();
    7c4a:	f7ff fbeb 	bl	7424 <sys_clock_idle_exit>
}
    7c4e:	bd08      	pop	{r3, pc}

00007c50 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    7c50:	4288      	cmp	r0, r1
    7c52:	da00      	bge.n	7c56 <new_prio_for_inheritance+0x6>
    7c54:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7c56:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    7c5a:	db01      	blt.n	7c60 <new_prio_for_inheritance+0x10>
    7c5c:	4608      	mov	r0, r1
    7c5e:	4770      	bx	lr
    7c60:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    7c64:	4770      	bx	lr

00007c66 <adjust_owner_prio>:
{
    7c66:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    7c68:	6880      	ldr	r0, [r0, #8]
    7c6a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7c6e:	428b      	cmp	r3, r1
    7c70:	d101      	bne.n	7c76 <adjust_owner_prio+0x10>
	return false;
    7c72:	2000      	movs	r0, #0
}
    7c74:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    7c76:	f7fe f89d 	bl	5db4 <z_set_prio>
    7c7a:	e7fb      	b.n	7c74 <adjust_owner_prio+0xe>

00007c7c <z_impl_k_mutex_init>:
{
    7c7c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7c7e:	2000      	movs	r0, #0
    7c80:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    7c82:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    7c84:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    7c86:	605b      	str	r3, [r3, #4]
}
    7c88:	4770      	bx	lr

00007c8a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    7c8a:	b13a      	cbz	r2, 7c9c <z_impl_k_sem_init+0x12>
    7c8c:	428a      	cmp	r2, r1
    7c8e:	d308      	bcc.n	7ca2 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    7c90:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    7c92:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    7c94:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    7c96:	6040      	str	r0, [r0, #4]
	return 0;
    7c98:	2000      	movs	r0, #0
    7c9a:	4770      	bx	lr
		return -EINVAL;
    7c9c:	f06f 0015 	mvn.w	r0, #21
    7ca0:	4770      	bx	lr
    7ca2:	f06f 0015 	mvn.w	r0, #21
}
    7ca6:	4770      	bx	lr

00007ca8 <k_work_submit_to_queue>:
{
    7ca8:	b530      	push	{r4, r5, lr}
    7caa:	b083      	sub	sp, #12
    7cac:	9001      	str	r0, [sp, #4]
    7cae:	4608      	mov	r0, r1
	__asm__ volatile(
    7cb0:	f04f 0320 	mov.w	r3, #32
    7cb4:	f3ef 8511 	mrs	r5, BASEPRI
    7cb8:	f383 8812 	msr	BASEPRI_MAX, r3
    7cbc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    7cc0:	a901      	add	r1, sp, #4
    7cc2:	f7fd fd15 	bl	56f0 <submit_to_queue_locked>
    7cc6:	4604      	mov	r4, r0
	__asm__ volatile(
    7cc8:	f385 8811 	msr	BASEPRI, r5
    7ccc:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    7cd0:	2800      	cmp	r0, #0
    7cd2:	dc02      	bgt.n	7cda <k_work_submit_to_queue+0x32>
}
    7cd4:	4620      	mov	r0, r4
    7cd6:	b003      	add	sp, #12
    7cd8:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
    7cda:	f04f 0320 	mov.w	r3, #32
    7cde:	f3ef 8011 	mrs	r0, BASEPRI
    7ce2:	f383 8812 	msr	BASEPRI_MAX, r3
    7ce6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7cea:	f000 f82f 	bl	7d4c <z_reschedule_irqlock>
	return ret;
    7cee:	e7f1      	b.n	7cd4 <k_work_submit_to_queue+0x2c>

00007cf0 <thread_active_elsewhere>:
}
    7cf0:	2000      	movs	r0, #0
    7cf2:	4770      	bx	lr

00007cf4 <pended_on_thread>:
}
    7cf4:	6880      	ldr	r0, [r0, #8]
    7cf6:	4770      	bx	lr

00007cf8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    7cf8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7cfc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    7d00:	4283      	cmp	r3, r0
    7d02:	d001      	beq.n	7d08 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    7d04:	1ac0      	subs	r0, r0, r3
    7d06:	4770      	bx	lr
	return 0;
    7d08:	2000      	movs	r0, #0
}
    7d0a:	4770      	bx	lr

00007d0c <z_unpend_thread_no_timeout>:
{
    7d0c:	b538      	push	{r3, r4, r5, lr}
    7d0e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    7d10:	2300      	movs	r3, #0
    7d12:	f04f 0220 	mov.w	r2, #32
    7d16:	f3ef 8511 	mrs	r5, BASEPRI
    7d1a:	f382 8812 	msr	BASEPRI_MAX, r2
    7d1e:	f3bf 8f6f 	isb	sy
    7d22:	e010      	b.n	7d46 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7d24:	4620      	mov	r0, r4
    7d26:	f7ff ffe5 	bl	7cf4 <pended_on_thread>
    7d2a:	4621      	mov	r1, r4
    7d2c:	f000 f823 	bl	7d76 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7d30:	7b63      	ldrb	r3, [r4, #13]
    7d32:	f023 0302 	bic.w	r3, r3, #2
    7d36:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7d38:	2300      	movs	r3, #0
    7d3a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    7d3c:	f385 8811 	msr	BASEPRI, r5
    7d40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7d44:	2301      	movs	r3, #1
    7d46:	2b00      	cmp	r3, #0
    7d48:	d0ec      	beq.n	7d24 <z_unpend_thread_no_timeout+0x18>
}
    7d4a:	bd38      	pop	{r3, r4, r5, pc}

00007d4c <z_reschedule_irqlock>:
{
    7d4c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7d4e:	4603      	mov	r3, r0
    7d50:	b920      	cbnz	r0, 7d5c <z_reschedule_irqlock+0x10>
    7d52:	f3ef 8205 	mrs	r2, IPSR
    7d56:	b942      	cbnz	r2, 7d6a <z_reschedule_irqlock+0x1e>
    7d58:	2201      	movs	r2, #1
    7d5a:	e000      	b.n	7d5e <z_reschedule_irqlock+0x12>
    7d5c:	2200      	movs	r2, #0
	if (resched(key)) {
    7d5e:	b932      	cbnz	r2, 7d6e <z_reschedule_irqlock+0x22>
    7d60:	f383 8811 	msr	BASEPRI, r3
    7d64:	f3bf 8f6f 	isb	sy
}
    7d68:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7d6a:	2200      	movs	r2, #0
    7d6c:	e7f7      	b.n	7d5e <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    7d6e:	4618      	mov	r0, r3
    7d70:	f7fa f924 	bl	1fbc <arch_swap>
	return ret;
    7d74:	e7f8      	b.n	7d68 <z_reschedule_irqlock+0x1c>

00007d76 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7d76:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    7d78:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    7d7a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7d7c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7d7e:	2300      	movs	r3, #0
    7d80:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    7d82:	604b      	str	r3, [r1, #4]
}
    7d84:	4770      	bx	lr

00007d86 <z_priq_dumb_best>:
{
    7d86:	4603      	mov	r3, r0
	return list->head == list;
    7d88:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d8a:	4283      	cmp	r3, r0
    7d8c:	d000      	beq.n	7d90 <z_priq_dumb_best+0xa>
}
    7d8e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    7d90:	2000      	movs	r0, #0
	return thread;
    7d92:	e7fc      	b.n	7d8e <z_priq_dumb_best+0x8>

00007d94 <z_ready_thread>:
{
    7d94:	b538      	push	{r3, r4, r5, lr}
    7d96:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    7d98:	2300      	movs	r3, #0
	__asm__ volatile(
    7d9a:	f04f 0220 	mov.w	r2, #32
    7d9e:	f3ef 8511 	mrs	r5, BASEPRI
    7da2:	f382 8812 	msr	BASEPRI_MAX, r2
    7da6:	f3bf 8f6f 	isb	sy
    7daa:	e004      	b.n	7db6 <z_ready_thread+0x22>
	__asm__ volatile(
    7dac:	f385 8811 	msr	BASEPRI, r5
    7db0:	f3bf 8f6f 	isb	sy
    7db4:	2301      	movs	r3, #1
    7db6:	b943      	cbnz	r3, 7dca <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    7db8:	4620      	mov	r0, r4
    7dba:	f7ff ff99 	bl	7cf0 <thread_active_elsewhere>
    7dbe:	2800      	cmp	r0, #0
    7dc0:	d1f4      	bne.n	7dac <z_ready_thread+0x18>
			ready_thread(thread);
    7dc2:	4620      	mov	r0, r4
    7dc4:	f7fd ff68 	bl	5c98 <ready_thread>
    7dc8:	e7f0      	b.n	7dac <z_ready_thread+0x18>
}
    7dca:	bd38      	pop	{r3, r4, r5, pc}

00007dcc <z_thread_timeout>:
{
    7dcc:	b570      	push	{r4, r5, r6, lr}
    7dce:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    7dd0:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    7dd4:	2300      	movs	r3, #0
	__asm__ volatile(
    7dd6:	f04f 0220 	mov.w	r2, #32
    7dda:	f3ef 8611 	mrs	r6, BASEPRI
    7dde:	f382 8812 	msr	BASEPRI_MAX, r2
    7de2:	f3bf 8f6f 	isb	sy
    7de6:	e011      	b.n	7e0c <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7de8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7dec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    7df0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7df4:	f023 0310 	bic.w	r3, r3, #16
    7df8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    7dfc:	4628      	mov	r0, r5
    7dfe:	f7fd ff4b 	bl	5c98 <ready_thread>
	__asm__ volatile(
    7e02:	f386 8811 	msr	BASEPRI, r6
    7e06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7e0a:	2301      	movs	r3, #1
    7e0c:	b9ab      	cbnz	r3, 7e3a <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    7e0e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    7e12:	f013 0f28 	tst.w	r3, #40	; 0x28
    7e16:	d1f4      	bne.n	7e02 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    7e18:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d0e3      	beq.n	7de8 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7e20:	4628      	mov	r0, r5
    7e22:	f7ff ff67 	bl	7cf4 <pended_on_thread>
    7e26:	4629      	mov	r1, r5
    7e28:	f7ff ffa5 	bl	7d76 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7e2c:	7b6b      	ldrb	r3, [r5, #13]
    7e2e:	f023 0302 	bic.w	r3, r3, #2
    7e32:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    7e34:	2300      	movs	r3, #0
    7e36:	60ab      	str	r3, [r5, #8]
}
    7e38:	e7d6      	b.n	7de8 <z_thread_timeout+0x1c>
}
    7e3a:	bd70      	pop	{r4, r5, r6, pc}

00007e3c <add_to_waitq_locked>:
{
    7e3c:	b570      	push	{r4, r5, r6, lr}
    7e3e:	4605      	mov	r5, r0
    7e40:	460e      	mov	r6, r1
	unready_thread(thread);
    7e42:	f7fd ff87 	bl	5d54 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7e46:	7b6b      	ldrb	r3, [r5, #13]
    7e48:	f043 0302 	orr.w	r3, r3, #2
    7e4c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    7e4e:	b1b6      	cbz	r6, 7e7e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    7e50:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    7e52:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e54:	42a6      	cmp	r6, r4
    7e56:	d019      	beq.n	7e8c <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e58:	b164      	cbz	r4, 7e74 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7e5a:	4621      	mov	r1, r4
    7e5c:	4628      	mov	r0, r5
    7e5e:	f7ff ff4b 	bl	7cf8 <z_sched_prio_cmp>
    7e62:	2800      	cmp	r0, #0
    7e64:	dc0c      	bgt.n	7e80 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7e66:	b12c      	cbz	r4, 7e74 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    7e68:	6873      	ldr	r3, [r6, #4]
    7e6a:	429c      	cmp	r4, r3
    7e6c:	d002      	beq.n	7e74 <add_to_waitq_locked+0x38>
    7e6e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e70:	2c00      	cmp	r4, #0
    7e72:	d1f1      	bne.n	7e58 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    7e74:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    7e76:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    7e78:	606b      	str	r3, [r5, #4]
	tail->next = node;
    7e7a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7e7c:	6075      	str	r5, [r6, #4]
}
    7e7e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    7e80:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7e82:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7e84:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7e86:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7e88:	6065      	str	r5, [r4, #4]
}
    7e8a:	e7f8      	b.n	7e7e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e8c:	2400      	movs	r4, #0
    7e8e:	e7e3      	b.n	7e58 <add_to_waitq_locked+0x1c>

00007e90 <pend>:
{
    7e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e94:	4605      	mov	r5, r0
    7e96:	460e      	mov	r6, r1
    7e98:	4691      	mov	r9, r2
    7e9a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    7e9c:	2400      	movs	r4, #0
	__asm__ volatile(
    7e9e:	f04f 0320 	mov.w	r3, #32
    7ea2:	f3ef 8711 	mrs	r7, BASEPRI
    7ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    7eaa:	f3bf 8f6f 	isb	sy
    7eae:	e008      	b.n	7ec2 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    7eb0:	4631      	mov	r1, r6
    7eb2:	4628      	mov	r0, r5
    7eb4:	f7ff ffc2 	bl	7e3c <add_to_waitq_locked>
	__asm__ volatile(
    7eb8:	f387 8811 	msr	BASEPRI, r7
    7ebc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7ec0:	2401      	movs	r4, #1
    7ec2:	2c00      	cmp	r4, #0
    7ec4:	d0f4      	beq.n	7eb0 <pend+0x20>
	add_thread_timeout(thread, timeout);
    7ec6:	464a      	mov	r2, r9
    7ec8:	4643      	mov	r3, r8
    7eca:	4628      	mov	r0, r5
    7ecc:	f7fd fd78 	bl	59c0 <add_thread_timeout>
}
    7ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007ed4 <z_unpend1_no_timeout>:
{
    7ed4:	b570      	push	{r4, r5, r6, lr}
    7ed6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    7ed8:	2300      	movs	r3, #0
	__asm__ volatile(
    7eda:	f04f 0220 	mov.w	r2, #32
    7ede:	f3ef 8611 	mrs	r6, BASEPRI
    7ee2:	f382 8812 	msr	BASEPRI_MAX, r2
    7ee6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7eea:	461c      	mov	r4, r3
    7eec:	e004      	b.n	7ef8 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    7eee:	f386 8811 	msr	BASEPRI, r6
    7ef2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7ef6:	2301      	movs	r3, #1
    7ef8:	b98b      	cbnz	r3, 7f1e <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    7efa:	4628      	mov	r0, r5
    7efc:	f7ff ff43 	bl	7d86 <z_priq_dumb_best>
		if (thread != NULL) {
    7f00:	4604      	mov	r4, r0
    7f02:	2800      	cmp	r0, #0
    7f04:	d0f3      	beq.n	7eee <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7f06:	f7ff fef5 	bl	7cf4 <pended_on_thread>
    7f0a:	4621      	mov	r1, r4
    7f0c:	f7ff ff33 	bl	7d76 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7f10:	7b63      	ldrb	r3, [r4, #13]
    7f12:	f023 0302 	bic.w	r3, r3, #2
    7f16:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7f18:	2300      	movs	r3, #0
    7f1a:	60a3      	str	r3, [r4, #8]
}
    7f1c:	e7e7      	b.n	7eee <z_unpend1_no_timeout+0x1a>
}
    7f1e:	4620      	mov	r0, r4
    7f20:	bd70      	pop	{r4, r5, r6, pc}

00007f22 <z_unpend_first_thread>:
{
    7f22:	b570      	push	{r4, r5, r6, lr}
    7f24:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    7f26:	2300      	movs	r3, #0
	__asm__ volatile(
    7f28:	f04f 0220 	mov.w	r2, #32
    7f2c:	f3ef 8611 	mrs	r6, BASEPRI
    7f30:	f382 8812 	msr	BASEPRI_MAX, r2
    7f34:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7f38:	461c      	mov	r4, r3
    7f3a:	e004      	b.n	7f46 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    7f3c:	f386 8811 	msr	BASEPRI, r6
    7f40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7f44:	2301      	movs	r3, #1
    7f46:	b9ab      	cbnz	r3, 7f74 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    7f48:	4628      	mov	r0, r5
    7f4a:	f7ff ff1c 	bl	7d86 <z_priq_dumb_best>
		if (thread != NULL) {
    7f4e:	4604      	mov	r4, r0
    7f50:	2800      	cmp	r0, #0
    7f52:	d0f3      	beq.n	7f3c <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7f54:	f7ff fece 	bl	7cf4 <pended_on_thread>
    7f58:	4621      	mov	r1, r4
    7f5a:	f7ff ff0c 	bl	7d76 <z_priq_dumb_remove>
    7f5e:	7b63      	ldrb	r3, [r4, #13]
    7f60:	f023 0302 	bic.w	r3, r3, #2
    7f64:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7f66:	2300      	movs	r3, #0
    7f68:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    7f6a:	f104 0018 	add.w	r0, r4, #24
    7f6e:	f000 f855 	bl	801c <z_abort_timeout>
    7f72:	e7e3      	b.n	7f3c <z_unpend_first_thread+0x1a>
}
    7f74:	4620      	mov	r0, r4
    7f76:	bd70      	pop	{r4, r5, r6, pc}

00007f78 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    7f78:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    7f7a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    7f7c:	6083      	str	r3, [r0, #8]
}
    7f7e:	4770      	bx	lr

00007f80 <z_sched_wake>:
{
    7f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f84:	4605      	mov	r5, r0
    7f86:	4688      	mov	r8, r1
    7f88:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    7f8a:	2300      	movs	r3, #0
	__asm__ volatile(
    7f8c:	f04f 0220 	mov.w	r2, #32
    7f90:	f3ef 8611 	mrs	r6, BASEPRI
    7f94:	f382 8812 	msr	BASEPRI_MAX, r2
    7f98:	f3bf 8f6f 	isb	sy
	bool ret = false;
    7f9c:	4699      	mov	r9, r3
    7f9e:	e004      	b.n	7faa <z_sched_wake+0x2a>
	__asm__ volatile(
    7fa0:	f386 8811 	msr	BASEPRI, r6
    7fa4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7fa8:	2301      	movs	r3, #1
    7faa:	b9eb      	cbnz	r3, 7fe8 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    7fac:	4628      	mov	r0, r5
    7fae:	f7ff feea 	bl	7d86 <z_priq_dumb_best>
		if (thread != NULL) {
    7fb2:	4604      	mov	r4, r0
    7fb4:	2800      	cmp	r0, #0
    7fb6:	d0f3      	beq.n	7fa0 <z_sched_wake+0x20>
    7fb8:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7fbc:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7fbe:	f7ff fe99 	bl	7cf4 <pended_on_thread>
    7fc2:	4621      	mov	r1, r4
    7fc4:	f7ff fed7 	bl	7d76 <z_priq_dumb_remove>
    7fc8:	7b63      	ldrb	r3, [r4, #13]
    7fca:	f023 0302 	bic.w	r3, r3, #2
    7fce:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7fd0:	2300      	movs	r3, #0
    7fd2:	60a3      	str	r3, [r4, #8]
    7fd4:	f104 0018 	add.w	r0, r4, #24
    7fd8:	f000 f820 	bl	801c <z_abort_timeout>
			ready_thread(thread);
    7fdc:	4620      	mov	r0, r4
    7fde:	f7fd fe5b 	bl	5c98 <ready_thread>
			ret = true;
    7fe2:	f04f 0901 	mov.w	r9, #1
    7fe6:	e7db      	b.n	7fa0 <z_sched_wake+0x20>
}
    7fe8:	4648      	mov	r0, r9
    7fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007fee <remove_timeout>:
{
    7fee:	b510      	push	{r4, lr}
    7ff0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    7ff2:	f7fe f925 	bl	6240 <next>
    7ff6:	b148      	cbz	r0, 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7ff8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    7ffa:	6920      	ldr	r0, [r4, #16]
    7ffc:	6961      	ldr	r1, [r4, #20]
    7ffe:	6913      	ldr	r3, [r2, #16]
    8000:	181b      	adds	r3, r3, r0
    8002:	6950      	ldr	r0, [r2, #20]
    8004:	eb41 0100 	adc.w	r1, r1, r0
    8008:	6113      	str	r3, [r2, #16]
    800a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    800c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    800e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    8010:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8012:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8014:	2300      	movs	r3, #0
    8016:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8018:	6063      	str	r3, [r4, #4]
}
    801a:	bd10      	pop	{r4, pc}

0000801c <z_abort_timeout>:
{
    801c:	b570      	push	{r4, r5, r6, lr}
    801e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    8020:	2300      	movs	r3, #0
	__asm__ volatile(
    8022:	f04f 0220 	mov.w	r2, #32
    8026:	f3ef 8611 	mrs	r6, BASEPRI
    802a:	f382 8812 	msr	BASEPRI_MAX, r2
    802e:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    8032:	f06f 0015 	mvn.w	r0, #21
    8036:	e004      	b.n	8042 <z_abort_timeout+0x26>
	__asm__ volatile(
    8038:	f386 8811 	msr	BASEPRI, r6
    803c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8040:	2301      	movs	r3, #1
    8042:	461d      	mov	r5, r3
    8044:	b93b      	cbnz	r3, 8056 <z_abort_timeout+0x3a>
	return node->next != NULL;
    8046:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    8048:	2b00      	cmp	r3, #0
    804a:	d0f5      	beq.n	8038 <z_abort_timeout+0x1c>
			remove_timeout(to);
    804c:	4620      	mov	r0, r4
    804e:	f7ff ffce 	bl	7fee <remove_timeout>
			ret = 0;
    8052:	4628      	mov	r0, r5
    8054:	e7f0      	b.n	8038 <z_abort_timeout+0x1c>
}
    8056:	bd70      	pop	{r4, r5, r6, pc}

00008058 <z_get_next_timeout_expiry>:
{
    8058:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    805a:	2300      	movs	r3, #0
	__asm__ volatile(
    805c:	f04f 0220 	mov.w	r2, #32
    8060:	f3ef 8411 	mrs	r4, BASEPRI
    8064:	f382 8812 	msr	BASEPRI_MAX, r2
    8068:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    806c:	f04f 30ff 	mov.w	r0, #4294967295
    8070:	e006      	b.n	8080 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    8072:	f7fe f8fd 	bl	6270 <next_timeout>
	__asm__ volatile(
    8076:	f384 8811 	msr	BASEPRI, r4
    807a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    807e:	2301      	movs	r3, #1
    8080:	2b00      	cmp	r3, #0
    8082:	d0f6      	beq.n	8072 <z_get_next_timeout_expiry+0x1a>
}
    8084:	bd10      	pop	{r4, pc}

00008086 <z_set_timeout_expiry>:
{
    8086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8088:	4605      	mov	r5, r0
    808a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    808c:	2300      	movs	r3, #0
	__asm__ volatile(
    808e:	f04f 0220 	mov.w	r2, #32
    8092:	f3ef 8611 	mrs	r6, BASEPRI
    8096:	f382 8812 	msr	BASEPRI_MAX, r2
    809a:	f3bf 8f6f 	isb	sy
    809e:	e00a      	b.n	80b6 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    80a0:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    80a2:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    80a6:	2801      	cmp	r0, #1
    80a8:	dd00      	ble.n	80ac <z_set_timeout_expiry+0x26>
    80aa:	b97c      	cbnz	r4, 80cc <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    80ac:	f386 8811 	msr	BASEPRI, r6
    80b0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    80b4:	2301      	movs	r3, #1
    80b6:	461c      	mov	r4, r3
    80b8:	b97b      	cbnz	r3, 80da <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    80ba:	f7fe f8d9 	bl	6270 <next_timeout>
			      || (ticks <= next_to);
    80be:	f1b0 3fff 	cmp.w	r0, #4294967295
    80c2:	d0ed      	beq.n	80a0 <z_set_timeout_expiry+0x1a>
    80c4:	42a8      	cmp	r0, r5
    80c6:	dbec      	blt.n	80a2 <z_set_timeout_expiry+0x1c>
    80c8:	2401      	movs	r4, #1
    80ca:	e7ea      	b.n	80a2 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    80cc:	4639      	mov	r1, r7
    80ce:	42a8      	cmp	r0, r5
    80d0:	bfa8      	it	ge
    80d2:	4628      	movge	r0, r5
    80d4:	f7fb fab6 	bl	3644 <sys_clock_set_timeout>
    80d8:	e7e8      	b.n	80ac <z_set_timeout_expiry+0x26>
}
    80da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000080dc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    80dc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    80de:	f7fe f9db 	bl	6498 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    80e2:	bd08      	pop	{r3, pc}

000080e4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    80e4:	b900      	cbnz	r0, 80e8 <z_impl_k_busy_wait+0x4>
    80e6:	4770      	bx	lr
{
    80e8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    80ea:	f7fa fad3 	bl	2694 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    80ee:	bd08      	pop	{r3, pc}

000080f0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    80f0:	b510      	push	{r4, lr}
    80f2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    80f4:	f7ff ff92 	bl	801c <z_abort_timeout>

	if (inactive) {
    80f8:	b9a0      	cbnz	r0, 8124 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    80fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    80fc:	b10b      	cbz	r3, 8102 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    80fe:	4620      	mov	r0, r4
    8100:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8102:	f104 0018 	add.w	r0, r4, #24
    8106:	f7ff fee5 	bl	7ed4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    810a:	b158      	cbz	r0, 8124 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    810c:	f7ff fe42 	bl	7d94 <z_ready_thread>
	__asm__ volatile(
    8110:	f04f 0320 	mov.w	r3, #32
    8114:	f3ef 8011 	mrs	r0, BASEPRI
    8118:	f383 8812 	msr	BASEPRI_MAX, r3
    811c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8120:	f7ff fe14 	bl	7d4c <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    8124:	bd10      	pop	{r4, pc}

00008126 <k_heap_init>:
{
    8126:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    8128:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    812c:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    812e:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    8130:	f7fe fcea 	bl	6b08 <sys_heap_init>
}
    8134:	bd10      	pop	{r4, pc}

00008136 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8136:	4770      	bx	lr

00008138 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8138:	f7fb bc52 	b.w	39e0 <SystemInit>
