
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 16 00 20 ed 16 00 00 df 5f 00 00 a5 16 00 00     ... ....._......
  10:	a5 16 00 00 a5 16 00 00 a5 16 00 00 00 00 00 00     ................
	...
  2c:	31 13 00 00 a5 16 00 00 00 00 00 00 d9 12 00 00     1...............
  3c:	a5 16 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  50:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  60:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  70:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  80:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  90:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  a0:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  b0:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  c0:	11 14 00 00 11 14 00 00 11 14 00 00 11 14 00 00     ................
  d0:	11 14 00 00 11 14 00 00 11 14 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	4607      	mov	r7, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     11c:	4615      	mov	r5, r2
     11e:	463c      	mov	r4, r7
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c6 	bne.w	2b4 <CONFIG_FLASH_SIZE+0xb4>
     128:	4282      	cmp	r2, r0
     12a:	fab2 f782 	clz	r7, r2
     12e:	d946      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     130:	b14f      	cbz	r7, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c7 0e20 	rsb	lr, r7, #32
     136:	fa24 fe0e 	lsr.w	lr, r4, lr
     13a:	fa00 f307 	lsl.w	r3, r0, r7
     13e:	40bd      	lsls	r5, r7
     140:	ea4e 0c03 	orr.w	ip, lr, r3
     144:	40bc      	lsls	r4, r7
     146:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14a:	fa1f fe85 	uxth.w	lr, r5
     14e:	fbbc f9f8 	udiv	r9, ip, r8
     152:	0c22      	lsrs	r2, r4, #16
     154:	fb08 c319 	mls	r3, r8, r9, ip
     158:	fb09 fa0e 	mul.w	sl, r9, lr
     15c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     160:	459a      	cmp	sl, r3
     162:	d928      	bls.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     164:	18eb      	adds	r3, r5, r3
     166:	f109 30ff 	add.w	r0, r9, #4294967295
     16a:	d204      	bcs.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     16c:	459a      	cmp	sl, r3
     16e:	d902      	bls.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     170:	f1a9 0002 	sub.w	r0, r9, #2
     174:	442b      	add	r3, r5
     176:	eba3 030a 	sub.w	r3, r3, sl
     17a:	b2a4      	uxth	r4, r4
     17c:	fbb3 f2f8 	udiv	r2, r3, r8
     180:	fb08 3312 	mls	r3, r8, r2, r3
     184:	fb02 fe0e 	mul.w	lr, r2, lr
     188:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18c:	45a6      	cmp	lr, r4
     18e:	d914      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     190:	192c      	adds	r4, r5, r4
     192:	f102 33ff 	add.w	r3, r2, #4294967295
     196:	d203      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     198:	45a6      	cmp	lr, r4
     19a:	d901      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19c:	1e93      	subs	r3, r2, #2
     19e:	442c      	add	r4, r5
     1a0:	eba4 040e 	sub.w	r4, r4, lr
     1a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     1aa:	40fc      	lsrs	r4, r7
     1ac:	2300      	movs	r3, #0
     1ae:	6034      	str	r4, [r6, #0]
     1b0:	6073      	str	r3, [r6, #4]
     1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1b6:	4648      	mov	r0, r9
     1b8:	e7dd      	b.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     1ba:	4613      	mov	r3, r2
     1bc:	e7f0      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1be:	b902      	cbnz	r2, 1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     1c0:	deff      	udf	#255	; 0xff
     1c2:	bb87      	cbnz	r7, 226 <CONFIG_FLASH_SIZE+0x26>
     1c4:	1a83      	subs	r3, r0, r2
     1c6:	2101      	movs	r1, #1
     1c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1cc:	b2aa      	uxth	r2, r5
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c20      	lsrs	r0, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	fb0c f802 	mul.w	r8, ip, r2
     1dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e0:	4598      	cmp	r8, r3
     1e2:	d963      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     1e4:	18eb      	adds	r3, r5, r3
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d204      	bcs.n	1f6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2>
     1ec:	4598      	cmp	r8, r3
     1ee:	d902      	bls.n	1f6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2>
     1f0:	f1ac 0002 	sub.w	r0, ip, #2
     1f4:	442b      	add	r3, r5
     1f6:	eba3 0308 	sub.w	r3, r3, r8
     1fa:	b2a4      	uxth	r4, r4
     1fc:	fbb3 fcfe 	udiv	ip, r3, lr
     200:	fb0e 331c 	mls	r3, lr, ip, r3
     204:	fb0c f202 	mul.w	r2, ip, r2
     208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     20c:	42a2      	cmp	r2, r4
     20e:	d94f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     210:	192c      	adds	r4, r5, r4
     212:	f10c 33ff 	add.w	r3, ip, #4294967295
     216:	d204      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     218:	42a2      	cmp	r2, r4
     21a:	d902      	bls.n	222 <CONFIG_FLASH_SIZE+0x22>
     21c:	f1ac 0302 	sub.w	r3, ip, #2
     220:	442c      	add	r4, r5
     222:	1aa4      	subs	r4, r4, r2
     224:	e7be      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     226:	f1c7 0c20 	rsb	ip, r7, #32
     22a:	fa20 f80c 	lsr.w	r8, r0, ip
     22e:	fa00 f307 	lsl.w	r3, r0, r7
     232:	fa24 fc0c 	lsr.w	ip, r4, ip
     236:	40bd      	lsls	r5, r7
     238:	ea4c 0203 	orr.w	r2, ip, r3
     23c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     240:	b2ab      	uxth	r3, r5
     242:	fbb8 fcfe 	udiv	ip, r8, lr
     246:	0c11      	lsrs	r1, r2, #16
     248:	fb0e 801c 	mls	r0, lr, ip, r8
     24c:	fb0c f903 	mul.w	r9, ip, r3
     250:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     254:	4581      	cmp	r9, r0
     256:	fa04 f407 	lsl.w	r4, r4, r7
     25a:	d923      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
     25c:	1828      	adds	r0, r5, r0
     25e:	f10c 31ff 	add.w	r1, ip, #4294967295
     262:	d204      	bcs.n	26e <CONFIG_FLASH_SIZE+0x6e>
     264:	4581      	cmp	r9, r0
     266:	d902      	bls.n	26e <CONFIG_FLASH_SIZE+0x6e>
     268:	f1ac 0102 	sub.w	r1, ip, #2
     26c:	4428      	add	r0, r5
     26e:	eba0 0009 	sub.w	r0, r0, r9
     272:	b292      	uxth	r2, r2
     274:	fbb0 fcfe 	udiv	ip, r0, lr
     278:	fb0e 001c 	mls	r0, lr, ip, r0
     27c:	fb0c f803 	mul.w	r8, ip, r3
     280:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     284:	4598      	cmp	r8, r3
     286:	d90f      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     288:	18eb      	adds	r3, r5, r3
     28a:	f10c 32ff 	add.w	r2, ip, #4294967295
     28e:	d204      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     290:	4598      	cmp	r8, r3
     292:	d902      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     294:	f1ac 0202 	sub.w	r2, ip, #2
     298:	442b      	add	r3, r5
     29a:	eba3 0308 	sub.w	r3, r3, r8
     29e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a2:	e791      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     2a4:	4661      	mov	r1, ip
     2a6:	e7e2      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     2a8:	4662      	mov	r2, ip
     2aa:	e7f6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     2ac:	4660      	mov	r0, ip
     2ae:	e7a2      	b.n	1f6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2>
     2b0:	4663      	mov	r3, ip
     2b2:	e7b6      	b.n	222 <CONFIG_FLASH_SIZE+0x22>
     2b4:	4283      	cmp	r3, r0
     2b6:	d905      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2b8:	b10e      	cbz	r6, 2be <CONFIG_FLASH_SIZE+0xbe>
     2ba:	e9c6 7000 	strd	r7, r0, [r6]
     2be:	2100      	movs	r1, #0
     2c0:	4608      	mov	r0, r1
     2c2:	e776      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2c4:	fab3 f183 	clz	r1, r3
     2c8:	b981      	cbnz	r1, 2ec <CONFIG_FLASH_SIZE+0xec>
     2ca:	4283      	cmp	r3, r0
     2cc:	d301      	bcc.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     2ce:	42ba      	cmp	r2, r7
     2d0:	d80a      	bhi.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2d2:	1abc      	subs	r4, r7, r2
     2d4:	eb60 0303 	sbc.w	r3, r0, r3
     2d8:	2001      	movs	r0, #1
     2da:	469c      	mov	ip, r3
     2dc:	2e00      	cmp	r6, #0
     2de:	d068      	beq.n	3b2 <CONFIG_FLASH_SIZE+0x1b2>
     2e0:	e9c6 4c00 	strd	r4, ip, [r6]
     2e4:	2100      	movs	r1, #0
     2e6:	e764      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2e8:	4608      	mov	r0, r1
     2ea:	e7f7      	b.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     2ec:	f1c1 0c20 	rsb	ip, r1, #32
     2f0:	408b      	lsls	r3, r1
     2f2:	fa22 f40c 	lsr.w	r4, r2, ip
     2f6:	431c      	orrs	r4, r3
     2f8:	fa02 f501 	lsl.w	r5, r2, r1
     2fc:	fa00 f301 	lsl.w	r3, r0, r1
     300:	fa27 f20c 	lsr.w	r2, r7, ip
     304:	fa20 fb0c 	lsr.w	fp, r0, ip
     308:	ea4f 4914 	mov.w	r9, r4, lsr #16
     30c:	4313      	orrs	r3, r2
     30e:	fbbb f8f9 	udiv	r8, fp, r9
     312:	fa1f fe84 	uxth.w	lr, r4
     316:	fb09 bb18 	mls	fp, r9, r8, fp
     31a:	0c1a      	lsrs	r2, r3, #16
     31c:	fb08 fa0e 	mul.w	sl, r8, lr
     320:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     324:	4592      	cmp	sl, r2
     326:	fa07 f701 	lsl.w	r7, r7, r1
     32a:	d93e      	bls.n	3aa <CONFIG_FLASH_SIZE+0x1aa>
     32c:	18a2      	adds	r2, r4, r2
     32e:	f108 30ff 	add.w	r0, r8, #4294967295
     332:	d204      	bcs.n	33e <CONFIG_FLASH_SIZE+0x13e>
     334:	4592      	cmp	sl, r2
     336:	d902      	bls.n	33e <CONFIG_FLASH_SIZE+0x13e>
     338:	f1a8 0002 	sub.w	r0, r8, #2
     33c:	4422      	add	r2, r4
     33e:	eba2 020a 	sub.w	r2, r2, sl
     342:	b29b      	uxth	r3, r3
     344:	fbb2 f8f9 	udiv	r8, r2, r9
     348:	fb09 2218 	mls	r2, r9, r8, r2
     34c:	fb08 fe0e 	mul.w	lr, r8, lr
     350:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     354:	4596      	cmp	lr, r2
     356:	d92a      	bls.n	3ae <CONFIG_FLASH_SIZE+0x1ae>
     358:	18a2      	adds	r2, r4, r2
     35a:	f108 33ff 	add.w	r3, r8, #4294967295
     35e:	d204      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     360:	4596      	cmp	lr, r2
     362:	d902      	bls.n	36a <CONFIG_FLASH_SIZE+0x16a>
     364:	f1a8 0302 	sub.w	r3, r8, #2
     368:	4422      	add	r2, r4
     36a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     36e:	fba0 9305 	umull	r9, r3, r0, r5
     372:	eba2 020e 	sub.w	r2, r2, lr
     376:	429a      	cmp	r2, r3
     378:	46ce      	mov	lr, r9
     37a:	4698      	mov	r8, r3
     37c:	d302      	bcc.n	384 <CONFIG_FLASH_SIZE+0x184>
     37e:	d106      	bne.n	38e <CONFIG_FLASH_SIZE+0x18e>
     380:	454f      	cmp	r7, r9
     382:	d204      	bcs.n	38e <CONFIG_FLASH_SIZE+0x18e>
     384:	ebb9 0e05 	subs.w	lr, r9, r5
     388:	eb63 0804 	sbc.w	r8, r3, r4
     38c:	3801      	subs	r0, #1
     38e:	b186      	cbz	r6, 3b2 <CONFIG_FLASH_SIZE+0x1b2>
     390:	ebb7 030e 	subs.w	r3, r7, lr
     394:	eb62 0708 	sbc.w	r7, r2, r8
     398:	fa07 fc0c 	lsl.w	ip, r7, ip
     39c:	40cb      	lsrs	r3, r1
     39e:	ea4c 0303 	orr.w	r3, ip, r3
     3a2:	40cf      	lsrs	r7, r1
     3a4:	e9c6 3700 	strd	r3, r7, [r6]
     3a8:	e79c      	b.n	2e4 <CONFIG_FLASH_SIZE+0xe4>
     3aa:	4640      	mov	r0, r8
     3ac:	e7c7      	b.n	33e <CONFIG_FLASH_SIZE+0x13e>
     3ae:	4643      	mov	r3, r8
     3b0:	e7db      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3b2:	4631      	mov	r1, r6
     3b4:	e6fd      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
	...

000003b8 <blink_red>:
	struct gpio_dt_spec spec; 
	int sleep_time;
	int id;
};

void blink_red(void) {
     3b8:	b510      	push	{r4, lr}
     3ba:	b084      	sub	sp, #16
	struct led led_config = {
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <blink_red+0x20>)
     3be:	466c      	mov	r4, sp
     3c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     3c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.sleep_time = 333,
		.spec = GPIO_DT_SPEC_GET(RED_LED_NODE, gpios),
		.id = 0xff0000,
	};
	printk("Enabling Red LED");
     3c6:	4805      	ldr	r0, [pc, #20]	; (3dc <blink_red+0x24>)
     3c8:	f005 fbcf 	bl	5b6a <printk>
	blink(led_config);
     3cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
     3d0:	f005 fb56 	bl	5a80 <blink>
};
     3d4:	b004      	add	sp, #16
     3d6:	bd10      	pop	{r4, pc}
     3d8:	00007550 	.word	0x00007550
     3dc:	00007588 	.word	0x00007588

000003e0 <blink_green>:

void blink_green(void) {
     3e0:	b500      	push	{lr}
     3e2:	b085      	sub	sp, #20
	struct led led_config = {
     3e4:	46ec      	mov	ip, sp
     3e6:	4b04      	ldr	r3, [pc, #16]	; (3f8 <blink_green+0x18>)
     3e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     3ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		.sleep_time = 250,
		.spec = GPIO_DT_SPEC_GET(GREEN_LED_NODE, gpios),
		.id = 0x00ff00,
	};
	blink(led_config);
     3ee:	f005 fb47 	bl	5a80 <blink>
};
     3f2:	b005      	add	sp, #20
     3f4:	f85d fb04 	ldr.w	pc, [sp], #4
     3f8:	00007560 	.word	0x00007560

000003fc <blink_blue>:

void blink_blue(void) {
     3fc:	b500      	push	{lr}
     3fe:	b085      	sub	sp, #20
	struct led led_config = {
     400:	46ec      	mov	ip, sp
     402:	4b04      	ldr	r3, [pc, #16]	; (414 <CONFIG_MAIN_STACK_SIZE+0x14>)
     404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     406:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		.sleep_time = 653,
		.spec = GPIO_DT_SPEC_GET(BLUE_LED_NODE, gpios),
		.id = 0x0000ff,
	};
	blink(led_config);
     40a:	f005 fb39 	bl	5a80 <blink>
};
     40e:	b005      	add	sp, #20
     410:	f85d fb04 	ldr.w	pc, [sp], #4
     414:	00007570 	.word	0x00007570

00000418 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     418:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     41a:	680b      	ldr	r3, [r1, #0]
     41c:	3301      	adds	r3, #1
     41e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     420:	4b01      	ldr	r3, [pc, #4]	; (428 <char_out+0x10>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	4798      	blx	r3
}
     426:	bd08      	pop	{r3, pc}
     428:	20000000 	.word	0x20000000

0000042c <__printk_hook_install>:
	_char_out = fn;
     42c:	4b01      	ldr	r3, [pc, #4]	; (434 <__printk_hook_install+0x8>)
     42e:	6018      	str	r0, [r3, #0]
}
     430:	4770      	bx	lr
     432:	bf00      	nop
     434:	20000000 	.word	0x20000000

00000438 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     438:	b500      	push	{lr}
     43a:	b083      	sub	sp, #12
     43c:	4602      	mov	r2, r0
     43e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     440:	2100      	movs	r1, #0
     442:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     444:	a901      	add	r1, sp, #4
     446:	4803      	ldr	r0, [pc, #12]	; (454 <vprintk+0x1c>)
     448:	f000 fa3c 	bl	8c4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     44c:	b003      	add	sp, #12
     44e:	f85d fb04 	ldr.w	pc, [sp], #4
     452:	bf00      	nop
     454:	00000419 	.word	0x00000419

00000458 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     45c:	b083      	sub	sp, #12
     45e:	4604      	mov	r4, r0
     460:	4608      	mov	r0, r1
     462:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     464:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     466:	f013 0f08 	tst.w	r3, #8
     46a:	d105      	bne.n	478 <process_event+0x20>
     46c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     470:	2300      	movs	r3, #0
     472:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     474:	9301      	str	r3, [sp, #4]
}
     476:	e069      	b.n	54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
		if (evt == EVT_COMPLETE) {
     478:	2901      	cmp	r1, #1
     47a:	d009      	beq.n	490 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     47c:	f043 0320 	orr.w	r3, r3, #32
     480:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     482:	f385 8811 	msr	BASEPRI, r5
     486:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     48a:	b003      	add	sp, #12
     48c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     490:	f043 0310 	orr.w	r3, r3, #16
     494:	8323      	strh	r3, [r4, #24]
     496:	e7f4      	b.n	482 <process_event+0x2a>
			evt = process_recheck(mgr);
     498:	4620      	mov	r0, r4
     49a:	f005 fb9b 	bl	5bd4 <process_recheck>
     49e:	e057      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
			res = mgr->last_res;
     4a0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     4a4:	464a      	mov	r2, r9
     4a6:	4669      	mov	r1, sp
     4a8:	4620      	mov	r0, r4
     4aa:	f005 fbac 	bl	5c06 <process_complete>
		onoff_transition_fn transit = NULL;
     4ae:	2700      	movs	r7, #0
     4b0:	e05a      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
			transit = mgr->transitions->start;
     4b2:	6923      	ldr	r3, [r4, #16]
     4b4:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     4b6:	2106      	movs	r1, #6
     4b8:	4620      	mov	r0, r4
     4ba:	f005 fb64 	bl	5b86 <set_state>
		res = 0;
     4be:	f04f 0900 	mov.w	r9, #0
     4c2:	e051      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
			transit = mgr->transitions->stop;
     4c4:	6923      	ldr	r3, [r4, #16]
     4c6:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     4c8:	2104      	movs	r1, #4
     4ca:	4620      	mov	r0, r4
     4cc:	f005 fb5b 	bl	5b86 <set_state>
		res = 0;
     4d0:	f04f 0900 	mov.w	r9, #0
     4d4:	e048      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
			transit = mgr->transitions->reset;
     4d6:	6923      	ldr	r3, [r4, #16]
     4d8:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     4da:	2105      	movs	r1, #5
     4dc:	4620      	mov	r0, r4
     4de:	f005 fb52 	bl	5b86 <set_state>
		res = 0;
     4e2:	f04f 0900 	mov.w	r9, #0
     4e6:	e03f      	b.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
				   && !sys_slist_is_empty(&mgr->monitors);
     4e8:	2200      	movs	r2, #0
     4ea:	e046      	b.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
     4ec:	2200      	movs	r2, #0
     4ee:	e044      	b.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     4f0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     4f4:	8323      	strh	r3, [r4, #24]
     4f6:	f385 8811 	msr	BASEPRI, r5
     4fa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     4fe:	2900      	cmp	r1, #0
     500:	d144      	bne.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     502:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     504:	b12b      	cbz	r3, 512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
				notify_all(mgr, &clients, state, res);
     506:	464b      	mov	r3, r9
     508:	4642      	mov	r2, r8
     50a:	4669      	mov	r1, sp
     50c:	4620      	mov	r0, r4
     50e:	f005 fbf1 	bl	5cf4 <notify_all>
			if (transit != NULL) {
     512:	b117      	cbz	r7, 51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
				transit(mgr, transition_complete);
     514:	4925      	ldr	r1, [pc, #148]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     516:	4620      	mov	r0, r4
     518:	47b8      	blx	r7
	__asm__ volatile(
     51a:	f04f 0320 	mov.w	r3, #32
     51e:	f3ef 8511 	mrs	r5, BASEPRI
     522:	f383 8812 	msr	BASEPRI_MAX, r3
     526:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     52a:	8b23      	ldrh	r3, [r4, #24]
     52c:	f023 0308 	bic.w	r3, r3, #8
     530:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     532:	8b23      	ldrh	r3, [r4, #24]
     534:	f013 0f10 	tst.w	r3, #16
     538:	d02e      	beq.n	598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     53a:	f023 0310 	bic.w	r3, r3, #16
     53e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     540:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     542:	8b26      	ldrh	r6, [r4, #24]
     544:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     548:	2800      	cmp	r0, #0
     54a:	d09a      	beq.n	482 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     54c:	2802      	cmp	r0, #2
     54e:	d0a3      	beq.n	498 <process_event+0x40>
		if (evt == EVT_NOP) {
     550:	2800      	cmp	r0, #0
     552:	d096      	beq.n	482 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     554:	2801      	cmp	r0, #1
     556:	d0a3      	beq.n	4a0 <process_event+0x48>
		} else if (evt == EVT_START) {
     558:	2803      	cmp	r0, #3
     55a:	d0aa      	beq.n	4b2 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     55c:	2804      	cmp	r0, #4
     55e:	d0b1      	beq.n	4c4 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     560:	2805      	cmp	r0, #5
     562:	d0b8      	beq.n	4d6 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     564:	2700      	movs	r7, #0
		res = 0;
     566:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     568:	8b23      	ldrh	r3, [r4, #24]
     56a:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     56e:	45b0      	cmp	r8, r6
     570:	d0ba      	beq.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     572:	68a2      	ldr	r2, [r4, #8]
     574:	2a00      	cmp	r2, #0
     576:	d0b9      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     578:	2201      	movs	r2, #1
		if (do_monitors
     57a:	4611      	mov	r1, r2
     57c:	2a00      	cmp	r2, #0
     57e:	d1b7      	bne.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
     580:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     582:	2a00      	cmp	r2, #0
     584:	d1b4      	bne.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
		    || (transit != NULL)) {
     586:	2f00      	cmp	r7, #0
     588:	d1b2      	bne.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
     58a:	e7d2      	b.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
				notify_monitors(mgr, state, res);
     58c:	464a      	mov	r2, r9
     58e:	4641      	mov	r1, r8
     590:	4620      	mov	r0, r4
     592:	f005 fb00 	bl	5b96 <notify_monitors>
     596:	e7b4      	b.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     598:	f013 0f20 	tst.w	r3, #32
     59c:	d004      	beq.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     59e:	f023 0320 	bic.w	r3, r3, #32
     5a2:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     5a4:	2002      	movs	r0, #2
     5a6:	e7cc      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
		evt = EVT_NOP;
     5a8:	2000      	movs	r0, #0
     5aa:	e7ca      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
     5ac:	00005d23 	.word	0x00005d23

000005b0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     5b0:	b570      	push	{r4, r5, r6, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	4604      	mov	r4, r0
	*conv = (struct conversion) {
     5b6:	2300      	movs	r3, #0
     5b8:	6003      	str	r3, [r0, #0]
     5ba:	6043      	str	r3, [r0, #4]
     5bc:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     5be:	784b      	ldrb	r3, [r1, #1]
     5c0:	2b25      	cmp	r3, #37	; 0x25
     5c2:	d002      	beq.n	5ca <extract_conversion+0x1a>
     5c4:	1c4e      	adds	r6, r1, #1
	bool loop = true;
     5c6:	2501      	movs	r5, #1
     5c8:	e01f      	b.n	60a <extract_conversion+0x5a>
		conv->specifier = *sp++;
     5ca:	1c88      	adds	r0, r1, #2
     5cc:	70e3      	strb	r3, [r4, #3]
		return sp;
     5ce:	e145      	b.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
			conv->flag_dash = true;
     5d0:	7823      	ldrb	r3, [r4, #0]
     5d2:	f043 0304 	orr.w	r3, r3, #4
     5d6:	7023      	strb	r3, [r4, #0]
		if (loop) {
     5d8:	b1b5      	cbz	r5, 608 <extract_conversion+0x58>
			++sp;
     5da:	3601      	adds	r6, #1
     5dc:	e014      	b.n	608 <extract_conversion+0x58>
			conv->flag_plus = true;
     5de:	7823      	ldrb	r3, [r4, #0]
     5e0:	f043 0308 	orr.w	r3, r3, #8
     5e4:	7023      	strb	r3, [r4, #0]
			break;
     5e6:	e7f7      	b.n	5d8 <extract_conversion+0x28>
			conv->flag_space = true;
     5e8:	7823      	ldrb	r3, [r4, #0]
     5ea:	f043 0310 	orr.w	r3, r3, #16
     5ee:	7023      	strb	r3, [r4, #0]
			break;
     5f0:	e7f2      	b.n	5d8 <extract_conversion+0x28>
			conv->flag_hash = true;
     5f2:	7823      	ldrb	r3, [r4, #0]
     5f4:	f043 0320 	orr.w	r3, r3, #32
     5f8:	7023      	strb	r3, [r4, #0]
			break;
     5fa:	e7ed      	b.n	5d8 <extract_conversion+0x28>
			conv->flag_zero = true;
     5fc:	7823      	ldrb	r3, [r4, #0]
     5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     602:	7023      	strb	r3, [r4, #0]
			break;
     604:	e7e8      	b.n	5d8 <extract_conversion+0x28>
		switch (*sp) {
     606:	2500      	movs	r5, #0
	} while (loop);
     608:	b345      	cbz	r5, 65c <extract_conversion+0xac>
		switch (*sp) {
     60a:	7833      	ldrb	r3, [r6, #0]
     60c:	3b20      	subs	r3, #32
     60e:	2b10      	cmp	r3, #16
     610:	d8f9      	bhi.n	606 <extract_conversion+0x56>
     612:	a201      	add	r2, pc, #4	; (adr r2, 618 <extract_conversion+0x68>)
     614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     618:	000005e9 	.word	0x000005e9
     61c:	00000607 	.word	0x00000607
     620:	00000607 	.word	0x00000607
     624:	000005f3 	.word	0x000005f3
     628:	00000607 	.word	0x00000607
     62c:	00000607 	.word	0x00000607
     630:	00000607 	.word	0x00000607
     634:	00000607 	.word	0x00000607
     638:	00000607 	.word	0x00000607
     63c:	00000607 	.word	0x00000607
     640:	00000607 	.word	0x00000607
     644:	000005df 	.word	0x000005df
     648:	00000607 	.word	0x00000607
     64c:	000005d1 	.word	0x000005d1
     650:	00000607 	.word	0x00000607
     654:	00000607 	.word	0x00000607
     658:	000005fd 	.word	0x000005fd
	if (conv->flag_zero && conv->flag_dash) {
     65c:	7823      	ldrb	r3, [r4, #0]
     65e:	f003 0344 	and.w	r3, r3, #68	; 0x44
     662:	2b44      	cmp	r3, #68	; 0x44
     664:	d05f      	beq.n	726 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
     666:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
     668:	7823      	ldrb	r3, [r4, #0]
     66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     66e:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
     670:	7833      	ldrb	r3, [r6, #0]
     672:	2b2a      	cmp	r3, #42	; 0x2a
     674:	d05c      	beq.n	730 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
     676:	a801      	add	r0, sp, #4
     678:	f005 fc0a 	bl	5e90 <extract_decimal>
	if (sp != wp) {
     67c:	9b01      	ldr	r3, [sp, #4]
     67e:	429e      	cmp	r6, r3
     680:	d00f      	beq.n	6a2 <extract_conversion+0xf2>
		conv->width_present = true;
     682:	7823      	ldrb	r3, [r4, #0]
     684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     688:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
     68a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
     68c:	b2db      	uxtb	r3, r3
     68e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     692:	2800      	cmp	r0, #0
     694:	db54      	blt.n	740 <extract_conversion+0x190>
     696:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     698:	4313      	orrs	r3, r2
     69a:	7822      	ldrb	r2, [r4, #0]
     69c:	f363 0241 	bfi	r2, r3, #1, #1
     6a0:	7022      	strb	r2, [r4, #0]
	return sp;
     6a2:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
     6a4:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
     6a6:	781b      	ldrb	r3, [r3, #0]
     6a8:	2b2e      	cmp	r3, #46	; 0x2e
     6aa:	bf14      	ite	ne
     6ac:	2300      	movne	r3, #0
     6ae:	2301      	moveq	r3, #1
     6b0:	7862      	ldrb	r2, [r4, #1]
     6b2:	f363 0241 	bfi	r2, r3, #1, #1
     6b6:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
     6b8:	2b00      	cmp	r3, #0
     6ba:	d043      	beq.n	744 <extract_conversion+0x194>
	++sp;
     6bc:	9b01      	ldr	r3, [sp, #4]
     6be:	1c5a      	adds	r2, r3, #1
     6c0:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
     6c2:	785b      	ldrb	r3, [r3, #1]
     6c4:	2b2a      	cmp	r3, #42	; 0x2a
     6c6:	d03f      	beq.n	748 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
     6c8:	a801      	add	r0, sp, #4
     6ca:	f005 fbe1 	bl	5e90 <extract_decimal>
	conv->prec_value = prec;
     6ce:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
     6d0:	7823      	ldrb	r3, [r4, #0]
     6d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     6d6:	2800      	cmp	r0, #0
     6d8:	db3e      	blt.n	758 <extract_conversion+0x1a8>
     6da:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     6dc:	4313      	orrs	r3, r2
     6de:	7822      	ldrb	r2, [r4, #0]
     6e0:	f363 0241 	bfi	r2, r3, #1, #1
     6e4:	7022      	strb	r2, [r4, #0]
	return sp;
     6e6:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
     6e8:	7803      	ldrb	r3, [r0, #0]
     6ea:	3b4c      	subs	r3, #76	; 0x4c
     6ec:	2b2e      	cmp	r3, #46	; 0x2e
     6ee:	f200 809d 	bhi.w	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     6f2:	e8df f003 	tbb	[pc, r3]
     6f6:	9b90      	.short	0x9b90
     6f8:	9b9b9b9b 	.word	0x9b9b9b9b
     6fc:	9b9b9b9b 	.word	0x9b9b9b9b
     700:	9b9b9b9b 	.word	0x9b9b9b9b
     704:	9b9b9b9b 	.word	0x9b9b9b9b
     708:	9b9b9b9b 	.word	0x9b9b9b9b
     70c:	9b9b9b9b 	.word	0x9b9b9b9b
     710:	9b339b9b 	.word	0x9b339b9b
     714:	9b459b57 	.word	0x9b459b57
     718:	9b9b9b9b 	.word	0x9b9b9b9b
     71c:	9b899b9b 	.word	0x9b899b9b
     720:	9b9b9b9b 	.word	0x9b9b9b9b
     724:	82          	.byte	0x82
     725:	00          	.byte	0x00
		conv->flag_zero = false;
     726:	7823      	ldrb	r3, [r4, #0]
     728:	f36f 1386 	bfc	r3, #6, #1
     72c:	7023      	strb	r3, [r4, #0]
     72e:	e79a      	b.n	666 <extract_conversion+0xb6>
		conv->width_star = true;
     730:	7863      	ldrb	r3, [r4, #1]
     732:	f043 0301 	orr.w	r3, r3, #1
     736:	7063      	strb	r3, [r4, #1]
		return ++sp;
     738:	4633      	mov	r3, r6
     73a:	3301      	adds	r3, #1
     73c:	9301      	str	r3, [sp, #4]
     73e:	e7b1      	b.n	6a4 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
     740:	2201      	movs	r2, #1
     742:	e7a9      	b.n	698 <extract_conversion+0xe8>
		return sp;
     744:	9801      	ldr	r0, [sp, #4]
     746:	e7cf      	b.n	6e8 <extract_conversion+0x138>
		conv->prec_star = true;
     748:	7863      	ldrb	r3, [r4, #1]
     74a:	f043 0304 	orr.w	r3, r3, #4
     74e:	7063      	strb	r3, [r4, #1]
		return ++sp;
     750:	4610      	mov	r0, r2
     752:	3001      	adds	r0, #1
     754:	9001      	str	r0, [sp, #4]
     756:	e7c7      	b.n	6e8 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
     758:	2201      	movs	r2, #1
     75a:	e7bf      	b.n	6dc <extract_conversion+0x12c>
		if (*++sp == 'h') {
     75c:	1c42      	adds	r2, r0, #1
     75e:	7843      	ldrb	r3, [r0, #1]
     760:	2b68      	cmp	r3, #104	; 0x68
     762:	d006      	beq.n	772 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
     764:	7863      	ldrb	r3, [r4, #1]
     766:	2102      	movs	r1, #2
     768:	f361 03c6 	bfi	r3, r1, #3, #4
     76c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
     76e:	4610      	mov	r0, r2
     770:	e01e      	b.n	7b0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
     772:	7863      	ldrb	r3, [r4, #1]
     774:	2201      	movs	r2, #1
     776:	f362 03c6 	bfi	r3, r2, #3, #4
     77a:	7063      	strb	r3, [r4, #1]
			++sp;
     77c:	3002      	adds	r0, #2
     77e:	e017      	b.n	7b0 <extract_conversion+0x200>
		if (*++sp == 'l') {
     780:	1c42      	adds	r2, r0, #1
     782:	7843      	ldrb	r3, [r0, #1]
     784:	2b6c      	cmp	r3, #108	; 0x6c
     786:	d006      	beq.n	796 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
     788:	7863      	ldrb	r3, [r4, #1]
     78a:	2103      	movs	r1, #3
     78c:	f361 03c6 	bfi	r3, r1, #3, #4
     790:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
     792:	4610      	mov	r0, r2
     794:	e00c      	b.n	7b0 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
     796:	7863      	ldrb	r3, [r4, #1]
     798:	2204      	movs	r2, #4
     79a:	f362 03c6 	bfi	r3, r2, #3, #4
     79e:	7063      	strb	r3, [r4, #1]
			++sp;
     7a0:	3002      	adds	r0, #2
     7a2:	e005      	b.n	7b0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
     7a4:	7863      	ldrb	r3, [r4, #1]
     7a6:	2205      	movs	r2, #5
     7a8:	f362 03c6 	bfi	r3, r2, #3, #4
     7ac:	7063      	strb	r3, [r4, #1]
		++sp;
     7ae:	3001      	adds	r0, #1
	conv->specifier = *sp++;
     7b0:	f810 3b01 	ldrb.w	r3, [r0], #1
     7b4:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
     7b6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     7ba:	2a37      	cmp	r2, #55	; 0x37
     7bc:	d87d      	bhi.n	8ba <CONFIG_ISR_STACK_SIZE+0xba>
     7be:	e8df f002 	tbb	[pc, r2]
     7c2:	7c5e      	.short	0x7c5e
     7c4:	5e5e7c7c 	.word	0x5e5e7c7c
     7c8:	7c7c7c5e 	.word	0x7c7c7c5e
     7cc:	7c7c7c7c 	.word	0x7c7c7c7c
     7d0:	7c7c7c7c 	.word	0x7c7c7c7c
     7d4:	7c7c7c7c 	.word	0x7c7c7c7c
     7d8:	7c7c4f7c 	.word	0x7c7c4f7c
     7dc:	7c7c7c7c 	.word	0x7c7c7c7c
     7e0:	7c5e7c7c 	.word	0x7c5e7c7c
     7e4:	5e5e3a4f 	.word	0x5e5e3a4f
     7e8:	7c3a7c5e 	.word	0x7c3a7c5e
     7ec:	657c7c7c 	.word	0x657c7c7c
     7f0:	7c7c714f 	.word	0x7c7c714f
     7f4:	7c4f7c71 	.word	0x7c4f7c71
     7f8:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
     7fa:	7863      	ldrb	r3, [r4, #1]
     7fc:	2206      	movs	r2, #6
     7fe:	f362 03c6 	bfi	r3, r2, #3, #4
     802:	7063      	strb	r3, [r4, #1]
		++sp;
     804:	3001      	adds	r0, #1
		break;
     806:	e7d3      	b.n	7b0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
     808:	7863      	ldrb	r3, [r4, #1]
     80a:	2207      	movs	r2, #7
     80c:	f362 03c6 	bfi	r3, r2, #3, #4
     810:	7063      	strb	r3, [r4, #1]
		++sp;
     812:	3001      	adds	r0, #1
		break;
     814:	e7cc      	b.n	7b0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
     816:	7863      	ldrb	r3, [r4, #1]
     818:	2208      	movs	r2, #8
     81a:	f362 03c6 	bfi	r3, r2, #3, #4
     81e:	7063      	strb	r3, [r4, #1]
		++sp;
     820:	3001      	adds	r0, #1
		conv->unsupported = true;
     822:	7823      	ldrb	r3, [r4, #0]
     824:	f043 0302 	orr.w	r3, r3, #2
     828:	7023      	strb	r3, [r4, #0]
		break;
     82a:	e7c1      	b.n	7b0 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
     82c:	7863      	ldrb	r3, [r4, #1]
     82e:	f36f 03c6 	bfc	r3, #3, #4
     832:	7063      	strb	r3, [r4, #1]
		break;
     834:	e7bc      	b.n	7b0 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
     836:	78a2      	ldrb	r2, [r4, #2]
     838:	2101      	movs	r1, #1
     83a:	f361 0202 	bfi	r2, r1, #0, #3
     83e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     840:	7862      	ldrb	r2, [r4, #1]
     842:	f002 0278 	and.w	r2, r2, #120	; 0x78
     846:	2a40      	cmp	r2, #64	; 0x40
     848:	d010      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
		if (conv->specifier == 'c') {
     84a:	2b63      	cmp	r3, #99	; 0x63
     84c:	d013      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
	conv->unsupported |= unsupported;
     84e:	7823      	ldrb	r3, [r4, #0]
     850:	f3c3 0240 	ubfx	r2, r3, #1, #1
     854:	4315      	orrs	r5, r2
     856:	f365 0341 	bfi	r3, r5, #1, #1
     85a:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     85c:	b002      	add	sp, #8
     85e:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
     860:	78a2      	ldrb	r2, [r4, #2]
     862:	2102      	movs	r1, #2
     864:	f361 0202 	bfi	r2, r1, #0, #3
     868:	70a2      	strb	r2, [r4, #2]
     86a:	e7e9      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			conv->invalid = true;
     86c:	7821      	ldrb	r1, [r4, #0]
     86e:	f041 0101 	orr.w	r1, r1, #1
     872:	7021      	strb	r1, [r4, #0]
     874:	e7e9      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     876:	1e15      	subs	r5, r2, #0
     878:	bf18      	it	ne
     87a:	2501      	movne	r5, #1
     87c:	e7e7      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		conv->specifier_cat = SPECIFIER_FP;
     87e:	78a3      	ldrb	r3, [r4, #2]
     880:	2204      	movs	r2, #4
     882:	f362 0302 	bfi	r3, r2, #0, #3
     886:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
     888:	2501      	movs	r5, #1
			break;
     88a:	e7e0      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		conv->specifier_cat = SPECIFIER_PTR;
     88c:	78a3      	ldrb	r3, [r4, #2]
     88e:	2203      	movs	r2, #3
     890:	f362 0302 	bfi	r3, r2, #0, #3
     894:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     896:	7863      	ldrb	r3, [r4, #1]
     898:	f003 0378 	and.w	r3, r3, #120	; 0x78
     89c:	2b40      	cmp	r3, #64	; 0x40
     89e:	d1d6      	bne.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
			unsupported = true;
     8a0:	2501      	movs	r5, #1
     8a2:	e7d4      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		conv->specifier_cat = SPECIFIER_PTR;
     8a4:	78a3      	ldrb	r3, [r4, #2]
     8a6:	2203      	movs	r2, #3
     8a8:	f362 0302 	bfi	r3, r2, #0, #3
     8ac:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
     8ae:	7863      	ldrb	r3, [r4, #1]
     8b0:	f013 0f78 	tst.w	r3, #120	; 0x78
     8b4:	d0cb      	beq.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
			unsupported = true;
     8b6:	2501      	movs	r5, #1
     8b8:	e7c9      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		conv->invalid = true;
     8ba:	7823      	ldrb	r3, [r4, #0]
     8bc:	f043 0301 	orr.w	r3, r3, #1
     8c0:	7023      	strb	r3, [r4, #0]
		break;
     8c2:	e7c4      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>

000008c4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c8:	b091      	sub	sp, #68	; 0x44
     8ca:	4606      	mov	r6, r0
     8cc:	460d      	mov	r5, r1
     8ce:	4691      	mov	r9, r2
     8d0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     8d2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     8d4:	f899 0000 	ldrb.w	r0, [r9]
     8d8:	2800      	cmp	r0, #0
     8da:	f000 82d5 	beq.w	e88 <cbvprintf+0x5c4>
		if (*fp != '%') {
     8de:	2825      	cmp	r0, #37	; 0x25
     8e0:	d008      	beq.n	8f4 <cbvprintf+0x30>
			OUTC(*fp++);
     8e2:	f109 0901 	add.w	r9, r9, #1
     8e6:	4629      	mov	r1, r5
     8e8:	47b0      	blx	r6
     8ea:	2800      	cmp	r0, #0
     8ec:	f2c0 82cd 	blt.w	e8a <cbvprintf+0x5c6>
     8f0:	3401      	adds	r4, #1
			continue;
     8f2:	e7ef      	b.n	8d4 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     8f4:	2300      	movs	r3, #0
     8f6:	9304      	str	r3, [sp, #16]
     8f8:	9305      	str	r3, [sp, #20]
     8fa:	9306      	str	r3, [sp, #24]
     8fc:	9307      	str	r3, [sp, #28]
     8fe:	9308      	str	r3, [sp, #32]
     900:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     902:	4649      	mov	r1, r9
     904:	a806      	add	r0, sp, #24
     906:	f7ff fe53 	bl	5b0 <extract_conversion>
     90a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     90c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     910:	f013 0f01 	tst.w	r3, #1
     914:	f000 8097 	beq.w	a46 <cbvprintf+0x182>
			width = va_arg(ap, int);
     918:	9b03      	ldr	r3, [sp, #12]
     91a:	1d1a      	adds	r2, r3, #4
     91c:	9203      	str	r2, [sp, #12]
     91e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     920:	2f00      	cmp	r7, #0
     922:	f2c0 8088 	blt.w	a36 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     926:	f89d 3019 	ldrb.w	r3, [sp, #25]
     92a:	f013 0f04 	tst.w	r3, #4
     92e:	f000 809c 	beq.w	a6a <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
     932:	9b03      	ldr	r3, [sp, #12]
     934:	1d1a      	adds	r2, r3, #4
     936:	9203      	str	r2, [sp, #12]
     938:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     93c:	f1ba 0f00 	cmp.w	sl, #0
     940:	f2c0 808a 	blt.w	a58 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     944:	2300      	movs	r3, #0
     946:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     948:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     94a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     94e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     952:	f89d 1019 	ldrb.w	r1, [sp, #25]
     956:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     95a:	2b01      	cmp	r3, #1
     95c:	f000 808e 	beq.w	a7c <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     960:	2b02      	cmp	r3, #2
     962:	f000 80d3 	beq.w	b0c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     966:	2b04      	cmp	r3, #4
     968:	f000 8124 	beq.w	bb4 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     96c:	2b03      	cmp	r3, #3
     96e:	f000 813b 	beq.w	be8 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     972:	f89d 8018 	ldrb.w	r8, [sp, #24]
     976:	f018 0b03 	ands.w	fp, r8, #3
     97a:	f040 813b 	bne.w	bf4 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     97e:	f89d 301b 	ldrb.w	r3, [sp, #27]
     982:	3b25      	subs	r3, #37	; 0x25
     984:	2b53      	cmp	r3, #83	; 0x53
     986:	f200 81e6 	bhi.w	d56 <cbvprintf+0x492>
     98a:	e8df f013 	tbh	[pc, r3, lsl #1]
     98e:	0140      	.short	0x0140
     990:	01e401e4 	.word	0x01e401e4
     994:	01e401e4 	.word	0x01e401e4
     998:	01e401e4 	.word	0x01e401e4
     99c:	01e401e4 	.word	0x01e401e4
     9a0:	01e401e4 	.word	0x01e401e4
     9a4:	01e401e4 	.word	0x01e401e4
     9a8:	01e401e4 	.word	0x01e401e4
     9ac:	01e401e4 	.word	0x01e401e4
     9b0:	01e401e4 	.word	0x01e401e4
     9b4:	01e401e4 	.word	0x01e401e4
     9b8:	01e401e4 	.word	0x01e401e4
     9bc:	01e401e4 	.word	0x01e401e4
     9c0:	01e401e4 	.word	0x01e401e4
     9c4:	01e401e4 	.word	0x01e401e4
     9c8:	01e401e4 	.word	0x01e401e4
     9cc:	01e401e4 	.word	0x01e401e4
     9d0:	01e401e4 	.word	0x01e401e4
     9d4:	01e401e4 	.word	0x01e401e4
     9d8:	01e401e4 	.word	0x01e401e4
     9dc:	01e401e4 	.word	0x01e401e4
     9e0:	01e401e4 	.word	0x01e401e4
     9e4:	01e401e4 	.word	0x01e401e4
     9e8:	01e401e4 	.word	0x01e401e4
     9ec:	01e401e4 	.word	0x01e401e4
     9f0:	01e401e4 	.word	0x01e401e4
     9f4:	01e40181 	.word	0x01e40181
     9f8:	01e401e4 	.word	0x01e401e4
     9fc:	01e401e4 	.word	0x01e401e4
     a00:	01e401e4 	.word	0x01e401e4
     a04:	01e401e4 	.word	0x01e401e4
     a08:	015e01e4 	.word	0x015e01e4
     a0c:	01e40167 	.word	0x01e40167
     a10:	01e401e4 	.word	0x01e401e4
     a14:	016701e4 	.word	0x016701e4
     a18:	01e401e4 	.word	0x01e401e4
     a1c:	01e401e4 	.word	0x01e401e4
     a20:	018101be 	.word	0x018101be
     a24:	01e401a2 	.word	0x01e401a2
     a28:	014d01e4 	.word	0x014d01e4
     a2c:	018101e4 	.word	0x018101e4
     a30:	01e401e4 	.word	0x01e401e4
     a34:	0181      	.short	0x0181
				conv->flag_dash = true;
     a36:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a3a:	f043 0304 	orr.w	r3, r3, #4
     a3e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     a42:	427f      	negs	r7, r7
     a44:	e76f      	b.n	926 <cbvprintf+0x62>
		} else if (conv->width_present) {
     a46:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     a4a:	2b00      	cmp	r3, #0
     a4c:	db02      	blt.n	a54 <cbvprintf+0x190>
		int width = -1;
     a4e:	f04f 37ff 	mov.w	r7, #4294967295
     a52:	e768      	b.n	926 <cbvprintf+0x62>
			width = conv->width_value;
     a54:	9f07      	ldr	r7, [sp, #28]
     a56:	e766      	b.n	926 <cbvprintf+0x62>
				conv->prec_present = false;
     a58:	f89d 3019 	ldrb.w	r3, [sp, #25]
     a5c:	f36f 0341 	bfc	r3, #1, #1
     a60:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     a64:	f04f 3aff 	mov.w	sl, #4294967295
     a68:	e76c      	b.n	944 <cbvprintf+0x80>
		} else if (conv->prec_present) {
     a6a:	f013 0f02 	tst.w	r3, #2
     a6e:	d002      	beq.n	a76 <cbvprintf+0x1b2>
			precision = conv->prec_value;
     a70:	f8dd a020 	ldr.w	sl, [sp, #32]
     a74:	e766      	b.n	944 <cbvprintf+0x80>
		int precision = -1;
     a76:	f04f 3aff 	mov.w	sl, #4294967295
     a7a:	e763      	b.n	944 <cbvprintf+0x80>
			switch (length_mod) {
     a7c:	1ecb      	subs	r3, r1, #3
     a7e:	2b04      	cmp	r3, #4
     a80:	d804      	bhi.n	a8c <cbvprintf+0x1c8>
     a82:	e8df f003 	tbb	[pc, r3]
     a86:	1d0b      	.short	0x1d0b
     a88:	3529      	.short	0x3529
     a8a:	35          	.byte	0x35
     a8b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a8c:	9b03      	ldr	r3, [sp, #12]
     a8e:	1d1a      	adds	r2, r3, #4
     a90:	9203      	str	r2, [sp, #12]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	17da      	asrs	r2, r3, #31
     a96:	9304      	str	r3, [sp, #16]
     a98:	9205      	str	r2, [sp, #20]
				break;
     a9a:	e006      	b.n	aaa <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	1d1a      	adds	r2, r3, #4
     aa0:	9203      	str	r2, [sp, #12]
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	17da      	asrs	r2, r3, #31
     aa6:	9304      	str	r3, [sp, #16]
     aa8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     aaa:	2901      	cmp	r1, #1
     aac:	d028      	beq.n	b00 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
     aae:	2902      	cmp	r1, #2
     ab0:	f47f af5f 	bne.w	972 <cbvprintf+0xae>
				value->sint = (short)value->sint;
     ab4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     ab8:	17da      	asrs	r2, r3, #31
     aba:	9304      	str	r3, [sp, #16]
     abc:	9205      	str	r2, [sp, #20]
     abe:	e758      	b.n	972 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
     ac0:	9b03      	ldr	r3, [sp, #12]
     ac2:	3307      	adds	r3, #7
     ac4:	f023 0307 	bic.w	r3, r3, #7
     ac8:	f103 0208 	add.w	r2, r3, #8
     acc:	9203      	str	r2, [sp, #12]
     ace:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     ad6:	e7e8      	b.n	aaa <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     ad8:	9b03      	ldr	r3, [sp, #12]
     ada:	3307      	adds	r3, #7
     adc:	f023 0307 	bic.w	r3, r3, #7
     ae0:	f103 0208 	add.w	r2, r3, #8
     ae4:	9203      	str	r2, [sp, #12]
     ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     aee:	e7dc      	b.n	aaa <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af0:	9b03      	ldr	r3, [sp, #12]
     af2:	1d1a      	adds	r2, r3, #4
     af4:	9203      	str	r2, [sp, #12]
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	17da      	asrs	r2, r3, #31
				value->sint =
     afa:	9304      	str	r3, [sp, #16]
     afc:	9205      	str	r2, [sp, #20]
				break;
     afe:	e7d4      	b.n	aaa <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
     b00:	f89d 3010 	ldrb.w	r3, [sp, #16]
     b04:	9304      	str	r3, [sp, #16]
     b06:	2300      	movs	r3, #0
     b08:	9305      	str	r3, [sp, #20]
     b0a:	e732      	b.n	972 <cbvprintf+0xae>
			switch (length_mod) {
     b0c:	1ecb      	subs	r3, r1, #3
     b0e:	2b04      	cmp	r3, #4
     b10:	d804      	bhi.n	b1c <cbvprintf+0x258>
     b12:	e8df f003 	tbb	[pc, r3]
     b16:	1f0b      	.short	0x1f0b
     b18:	4135      	.short	0x4135
     b1a:	41          	.byte	0x41
     b1b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     b1c:	9b03      	ldr	r3, [sp, #12]
     b1e:	1d1a      	adds	r2, r3, #4
     b20:	9203      	str	r2, [sp, #12]
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	9304      	str	r3, [sp, #16]
     b26:	2300      	movs	r3, #0
     b28:	9305      	str	r3, [sp, #20]
				break;
     b2a:	e01e      	b.n	b6a <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
     b2c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     b30:	2b63      	cmp	r3, #99	; 0x63
     b32:	d007      	beq.n	b44 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
     b34:	9b03      	ldr	r3, [sp, #12]
     b36:	1d1a      	adds	r2, r3, #4
     b38:	9203      	str	r2, [sp, #12]
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	9304      	str	r3, [sp, #16]
     b3e:	2300      	movs	r3, #0
     b40:	9305      	str	r3, [sp, #20]
     b42:	e012      	b.n	b6a <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     b44:	9b03      	ldr	r3, [sp, #12]
     b46:	1d1a      	adds	r2, r3, #4
     b48:	9203      	str	r2, [sp, #12]
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	9304      	str	r3, [sp, #16]
     b4e:	2300      	movs	r3, #0
     b50:	9305      	str	r3, [sp, #20]
     b52:	e00a      	b.n	b6a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
     b54:	9b03      	ldr	r3, [sp, #12]
     b56:	3307      	adds	r3, #7
     b58:	f023 0307 	bic.w	r3, r3, #7
     b5c:	f103 0208 	add.w	r2, r3, #8
     b60:	9203      	str	r2, [sp, #12]
     b62:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     b66:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     b6a:	2901      	cmp	r1, #1
     b6c:	d01c      	beq.n	ba8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
     b6e:	2902      	cmp	r1, #2
     b70:	f47f aeff 	bne.w	972 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
     b74:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     b78:	9304      	str	r3, [sp, #16]
     b7a:	2300      	movs	r3, #0
     b7c:	9305      	str	r3, [sp, #20]
     b7e:	e6f8      	b.n	972 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
     b80:	9b03      	ldr	r3, [sp, #12]
     b82:	3307      	adds	r3, #7
     b84:	f023 0307 	bic.w	r3, r3, #7
     b88:	f103 0208 	add.w	r2, r3, #8
     b8c:	9203      	str	r2, [sp, #12]
     b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     b92:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b96:	e7e8      	b.n	b6a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     b98:	9b03      	ldr	r3, [sp, #12]
     b9a:	1d1a      	adds	r2, r3, #4
     b9c:	9203      	str	r2, [sp, #12]
     b9e:	681b      	ldr	r3, [r3, #0]
				value->uint =
     ba0:	9304      	str	r3, [sp, #16]
     ba2:	2300      	movs	r3, #0
     ba4:	9305      	str	r3, [sp, #20]
				break;
     ba6:	e7e0      	b.n	b6a <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
     ba8:	f89d 3010 	ldrb.w	r3, [sp, #16]
     bac:	9304      	str	r3, [sp, #16]
     bae:	2300      	movs	r3, #0
     bb0:	9305      	str	r3, [sp, #20]
     bb2:	e6de      	b.n	972 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     bb4:	2908      	cmp	r1, #8
     bb6:	d00b      	beq.n	bd0 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
     bb8:	9b03      	ldr	r3, [sp, #12]
     bba:	3307      	adds	r3, #7
     bbc:	f023 0307 	bic.w	r3, r3, #7
     bc0:	f103 0208 	add.w	r2, r3, #8
     bc4:	9203      	str	r2, [sp, #12]
     bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
     bca:	e9cd 2304 	strd	r2, r3, [sp, #16]
     bce:	e6d0      	b.n	972 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
     bd0:	9b03      	ldr	r3, [sp, #12]
     bd2:	3307      	adds	r3, #7
     bd4:	f023 0307 	bic.w	r3, r3, #7
     bd8:	f103 0208 	add.w	r2, r3, #8
     bdc:	9203      	str	r2, [sp, #12]
     bde:	e9d3 2300 	ldrd	r2, r3, [r3]
     be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
     be6:	e6c4      	b.n	972 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
     be8:	9b03      	ldr	r3, [sp, #12]
     bea:	1d1a      	adds	r2, r3, #4
     bec:	9203      	str	r2, [sp, #12]
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	9304      	str	r3, [sp, #16]
     bf2:	e6be      	b.n	972 <cbvprintf+0xae>
			OUTS(sp, fp);
     bf4:	9f02      	ldr	r7, [sp, #8]
     bf6:	463b      	mov	r3, r7
     bf8:	464a      	mov	r2, r9
     bfa:	4629      	mov	r1, r5
     bfc:	4630      	mov	r0, r6
     bfe:	f005 f9c3 	bl	5f88 <outs>
     c02:	2800      	cmp	r0, #0
     c04:	f2c0 8141 	blt.w	e8a <cbvprintf+0x5c6>
     c08:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     c0a:	46b9      	mov	r9, r7
			continue;
     c0c:	e662      	b.n	8d4 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     c0e:	4629      	mov	r1, r5
     c10:	2025      	movs	r0, #37	; 0x25
     c12:	47b0      	blx	r6
     c14:	2800      	cmp	r0, #0
     c16:	f2c0 8138 	blt.w	e8a <cbvprintf+0x5c6>
     c1a:	3401      	adds	r4, #1
		char sign = 0;
     c1c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     c1e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     c22:	f04f 0900 	mov.w	r9, #0
			break;
     c26:	e09b      	b.n	d60 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
     c28:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     c2c:	f1ba 0f00 	cmp.w	sl, #0
     c30:	db07      	blt.n	c42 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
     c32:	4651      	mov	r1, sl
     c34:	4648      	mov	r0, r9
     c36:	f005 fa98 	bl	616a <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     c3a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     c3e:	46d8      	mov	r8, fp
			precision = -1;

			break;
     c40:	e08e      	b.n	d60 <cbvprintf+0x49c>
				len = strlen(bps);
     c42:	4648      	mov	r0, r9
     c44:	f005 fa88 	bl	6158 <strlen>
     c48:	e7f7      	b.n	c3a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c4a:	9b04      	ldr	r3, [sp, #16]
     c4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     c50:	46d8      	mov	r8, fp
			bpe = buf + 1;
     c52:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     c56:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     c5a:	e081      	b.n	d60 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     c5c:	f018 0f08 	tst.w	r8, #8
     c60:	d105      	bne.n	c6e <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     c62:	f018 0810 	ands.w	r8, r8, #16
     c66:	d004      	beq.n	c72 <cbvprintf+0x3ae>
				sign = ' ';
     c68:	f04f 0820 	mov.w	r8, #32
     c6c:	e001      	b.n	c72 <cbvprintf+0x3ae>
				sign = '+';
     c6e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     c72:	9a04      	ldr	r2, [sp, #16]
     c74:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     c76:	2b00      	cmp	r3, #0
     c78:	db02      	blt.n	c80 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     c7a:	9204      	str	r2, [sp, #16]
     c7c:	9305      	str	r3, [sp, #20]
     c7e:	e008      	b.n	c92 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
     c80:	4252      	negs	r2, r2
     c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c86:	9204      	str	r2, [sp, #16]
     c88:	9305      	str	r3, [sp, #20]
				sign = '-';
     c8a:	f04f 082d 	mov.w	r8, #45	; 0x2d
     c8e:	e000      	b.n	c92 <cbvprintf+0x3ce>
		switch (conv->specifier) {
     c90:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     c92:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     c96:	9300      	str	r3, [sp, #0]
     c98:	ab0a      	add	r3, sp, #40	; 0x28
     c9a:	aa06      	add	r2, sp, #24
     c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     ca0:	f005 f908 	bl	5eb4 <encode_uint>
     ca4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     ca6:	f1ba 0f00 	cmp.w	sl, #0
     caa:	f2c0 8088 	blt.w	dbe <cbvprintf+0x4fa>
				size_t len = bpe - bps;
     cae:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cb2:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     cb6:	f89d 2018 	ldrb.w	r2, [sp, #24]
     cba:	f36f 1286 	bfc	r2, #6, #1
     cbe:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     cc2:	459a      	cmp	sl, r3
     cc4:	d97e      	bls.n	dc4 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
     cc6:	ebaa 0303 	sub.w	r3, sl, r3
     cca:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     ccc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     cd0:	e046      	b.n	d60 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     cd2:	9804      	ldr	r0, [sp, #16]
     cd4:	b928      	cbnz	r0, ce2 <cbvprintf+0x41e>
		char sign = 0;
     cd6:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     cd8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; e90 <cbvprintf+0x5cc>
			bps = "(nil)";
     cdc:	f1aa 0905 	sub.w	r9, sl, #5
     ce0:	e03e      	b.n	d60 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     ce2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ce6:	9300      	str	r3, [sp, #0]
     ce8:	ab0a      	add	r3, sp, #40	; 0x28
     cea:	aa06      	add	r2, sp, #24
     cec:	2100      	movs	r1, #0
     cee:	f005 f8e1 	bl	5eb4 <encode_uint>
     cf2:	4681      	mov	r9, r0
				conv->altform_0c = true;
     cf4:	f89d 301a 	ldrb.w	r3, [sp, #26]
     cf8:	f043 0310 	orr.w	r3, r3, #16
     cfc:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     d00:	2378      	movs	r3, #120	; 0x78
     d02:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     d06:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     d08:	e7cd      	b.n	ca6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     d0a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
     d0c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     d10:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     d14:	2b07      	cmp	r3, #7
     d16:	d806      	bhi.n	d26 <cbvprintf+0x462>
     d18:	e8df f003 	tbb	[pc, r3]
     d1c:	0f0d0b04 	.word	0x0f0d0b04
     d20:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
     d24:	6014      	str	r4, [r2, #0]
		char sign = 0;
     d26:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     d28:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     d2c:	f04f 0900 	mov.w	r9, #0
}
     d30:	e016      	b.n	d60 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
     d32:	7014      	strb	r4, [r2, #0]
		break;
     d34:	e7f7      	b.n	d26 <cbvprintf+0x462>
		*(short *)dp = (short)count;
     d36:	8014      	strh	r4, [r2, #0]
		break;
     d38:	e7f5      	b.n	d26 <cbvprintf+0x462>
		*(long *)dp = (long)count;
     d3a:	6014      	str	r4, [r2, #0]
		break;
     d3c:	e7f3      	b.n	d26 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
     d3e:	17e3      	asrs	r3, r4, #31
     d40:	6014      	str	r4, [r2, #0]
     d42:	6053      	str	r3, [r2, #4]
		break;
     d44:	e7ef      	b.n	d26 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
     d46:	17e3      	asrs	r3, r4, #31
     d48:	6014      	str	r4, [r2, #0]
     d4a:	6053      	str	r3, [r2, #4]
		break;
     d4c:	e7eb      	b.n	d26 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
     d4e:	6014      	str	r4, [r2, #0]
		break;
     d50:	e7e9      	b.n	d26 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d52:	6014      	str	r4, [r2, #0]
		break;
     d54:	e7e7      	b.n	d26 <cbvprintf+0x462>
		switch (conv->specifier) {
     d56:	46d8      	mov	r8, fp
     d58:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d5c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     d60:	f1b9 0f00 	cmp.w	r9, #0
     d64:	f000 808d 	beq.w	e82 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     d68:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     d6c:	f1b8 0f00 	cmp.w	r8, #0
     d70:	d000      	beq.n	d74 <cbvprintf+0x4b0>
			nj_len += 1U;
     d72:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     d74:	f89d 201a 	ldrb.w	r2, [sp, #26]
     d78:	f012 0f10 	tst.w	r2, #16
     d7c:	d025      	beq.n	dca <cbvprintf+0x506>
			nj_len += 2U;
     d7e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     d80:	9907      	ldr	r1, [sp, #28]
     d82:	440b      	add	r3, r1
		if (conv->pad_fp) {
     d84:	f012 0f40 	tst.w	r2, #64	; 0x40
     d88:	d001      	beq.n	d8e <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
     d8a:	9a08      	ldr	r2, [sp, #32]
     d8c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     d8e:	2f00      	cmp	r7, #0
     d90:	dd31      	ble.n	df6 <cbvprintf+0x532>
			width -= (int)nj_len;
     d92:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     d94:	f89d 3018 	ldrb.w	r3, [sp, #24]
     d98:	f013 0f04 	tst.w	r3, #4
     d9c:	d12b      	bne.n	df6 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     d9e:	f013 0f40 	tst.w	r3, #64	; 0x40
     da2:	d017      	beq.n	dd4 <cbvprintf+0x510>
					if (sign != 0) {
     da4:	f1b8 0f00 	cmp.w	r8, #0
     da8:	d017      	beq.n	dda <cbvprintf+0x516>
						OUTC(sign);
     daa:	4629      	mov	r1, r5
     dac:	4640      	mov	r0, r8
     dae:	47b0      	blx	r6
     db0:	2800      	cmp	r0, #0
     db2:	db6a      	blt.n	e8a <cbvprintf+0x5c6>
     db4:	3401      	adds	r4, #1
						sign = 0;
     db6:	46d8      	mov	r8, fp
					}
					pad = '0';
     db8:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dbc:	e00f      	b.n	dde <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
     dbe:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dc2:	e7cd      	b.n	d60 <cbvprintf+0x49c>
     dc4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dc8:	e7ca      	b.n	d60 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
     dca:	f012 0f08 	tst.w	r2, #8
     dce:	d0d7      	beq.n	d80 <cbvprintf+0x4bc>
			nj_len += 1U;
     dd0:	3301      	adds	r3, #1
     dd2:	e7d5      	b.n	d80 <cbvprintf+0x4bc>
				char pad = ' ';
     dd4:	f04f 0b20 	mov.w	fp, #32
     dd8:	e001      	b.n	dde <cbvprintf+0x51a>
					pad = '0';
     dda:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dde:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     de0:	1e5f      	subs	r7, r3, #1
     de2:	2b00      	cmp	r3, #0
     de4:	dd07      	ble.n	df6 <cbvprintf+0x532>
					OUTC(pad);
     de6:	4629      	mov	r1, r5
     de8:	4658      	mov	r0, fp
     dea:	47b0      	blx	r6
     dec:	2800      	cmp	r0, #0
     dee:	db4c      	blt.n	e8a <cbvprintf+0x5c6>
     df0:	3401      	adds	r4, #1
				while (width-- > 0) {
     df2:	463b      	mov	r3, r7
     df4:	e7f4      	b.n	de0 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     df6:	f1b8 0f00 	cmp.w	r8, #0
     dfa:	d005      	beq.n	e08 <cbvprintf+0x544>
			OUTC(sign);
     dfc:	4629      	mov	r1, r5
     dfe:	4640      	mov	r0, r8
     e00:	47b0      	blx	r6
     e02:	2800      	cmp	r0, #0
     e04:	db41      	blt.n	e8a <cbvprintf+0x5c6>
     e06:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     e08:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e0c:	f3c3 1200 	ubfx	r2, r3, #4, #1
     e10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     e14:	4313      	orrs	r3, r2
     e16:	d005      	beq.n	e24 <cbvprintf+0x560>
				OUTC('0');
     e18:	4629      	mov	r1, r5
     e1a:	2030      	movs	r0, #48	; 0x30
     e1c:	47b0      	blx	r6
     e1e:	2800      	cmp	r0, #0
     e20:	db33      	blt.n	e8a <cbvprintf+0x5c6>
     e22:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     e24:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e28:	f013 0f10 	tst.w	r3, #16
     e2c:	d006      	beq.n	e3c <cbvprintf+0x578>
				OUTC(conv->specifier);
     e2e:	4629      	mov	r1, r5
     e30:	f89d 001b 	ldrb.w	r0, [sp, #27]
     e34:	47b0      	blx	r6
     e36:	2800      	cmp	r0, #0
     e38:	db27      	blt.n	e8a <cbvprintf+0x5c6>
     e3a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     e3c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     e3e:	f103 38ff 	add.w	r8, r3, #4294967295
     e42:	2b00      	cmp	r3, #0
     e44:	dd07      	ble.n	e56 <cbvprintf+0x592>
				OUTC('0');
     e46:	4629      	mov	r1, r5
     e48:	2030      	movs	r0, #48	; 0x30
     e4a:	47b0      	blx	r6
     e4c:	2800      	cmp	r0, #0
     e4e:	db1c      	blt.n	e8a <cbvprintf+0x5c6>
     e50:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     e52:	4643      	mov	r3, r8
     e54:	e7f3      	b.n	e3e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
     e56:	4653      	mov	r3, sl
     e58:	464a      	mov	r2, r9
     e5a:	4629      	mov	r1, r5
     e5c:	4630      	mov	r0, r6
     e5e:	f005 f893 	bl	5f88 <outs>
     e62:	2800      	cmp	r0, #0
     e64:	db11      	blt.n	e8a <cbvprintf+0x5c6>
     e66:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     e68:	2f00      	cmp	r7, #0
     e6a:	dd07      	ble.n	e7c <cbvprintf+0x5b8>
			OUTC(' ');
     e6c:	4629      	mov	r1, r5
     e6e:	2020      	movs	r0, #32
     e70:	47b0      	blx	r6
     e72:	2800      	cmp	r0, #0
     e74:	db09      	blt.n	e8a <cbvprintf+0x5c6>
     e76:	3401      	adds	r4, #1
			--width;
     e78:	3f01      	subs	r7, #1
     e7a:	e7f5      	b.n	e68 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
     e7c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e80:	e528      	b.n	8d4 <cbvprintf+0x10>
     e82:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e86:	e525      	b.n	8d4 <cbvprintf+0x10>
		}
	}

	return count;
     e88:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     e8a:	b011      	add	sp, #68	; 0x44
     e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e90:	000075cd 	.word	0x000075cd

00000e94 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
     e94:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
     e96:	4b2a      	ldr	r3, [pc, #168]	; (f40 <pm_system_resume+0xac>)
     e98:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e9a:	f005 031f 	and.w	r3, r5, #31
     e9e:	2201      	movs	r2, #1
     ea0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     ea2:	0969      	lsrs	r1, r5, #5
     ea4:	4b27      	ldr	r3, [pc, #156]	; (f44 <pm_system_resume+0xb0>)
     ea6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     eaa:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     eac:	f3bf 8f5b 	dmb	ish
     eb0:	e853 1f00 	ldrex	r1, [r3]
     eb4:	ea01 0400 	and.w	r4, r1, r0
     eb8:	e843 4600 	strex	r6, r4, [r3]
     ebc:	2e00      	cmp	r6, #0
     ebe:	d1f7      	bne.n	eb0 <pm_system_resume+0x1c>
     ec0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     ec4:	420a      	tst	r2, r1
     ec6:	d100      	bne.n	eca <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     ec8:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     eca:	481f      	ldr	r0, [pc, #124]	; (f48 <pm_system_resume+0xb4>)
     ecc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
     ed0:	0093      	lsls	r3, r2, #2
     ed2:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
     ed4:	4a1d      	ldr	r2, [pc, #116]	; (f4c <pm_system_resume+0xb8>)
     ed6:	b172      	cbz	r2, ef6 <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
     ed8:	7849      	ldrb	r1, [r1, #1]
     eda:	5cc0      	ldrb	r0, [r0, r3]
     edc:	f005 f9ab 	bl	6236 <pm_state_exit_post_ops>
     ee0:	f04f 0320 	mov.w	r3, #32
     ee4:	f3ef 8611 	mrs	r6, BASEPRI
     ee8:	f383 8812 	msr	BASEPRI_MAX, r3
     eec:	f3bf 8f6f 	isb	sy
     ef0:	4b17      	ldr	r3, [pc, #92]	; (f50 <pm_system_resume+0xbc>)
     ef2:	681c      	ldr	r4, [r3, #0]
     ef4:	e010      	b.n	f18 <pm_system_resume+0x84>
	__asm__ volatile(
     ef6:	2300      	movs	r3, #0
     ef8:	f383 8811 	msr	BASEPRI, r3
     efc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     f00:	e7ee      	b.n	ee0 <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f02:	4b0f      	ldr	r3, [pc, #60]	; (f40 <pm_system_resume+0xac>)
     f04:	7d1b      	ldrb	r3, [r3, #20]
     f06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f0a:	0099      	lsls	r1, r3, #2
     f0c:	4b0e      	ldr	r3, [pc, #56]	; (f48 <pm_system_resume+0xb4>)
     f0e:	5c58      	ldrb	r0, [r3, r1]
     f10:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     f12:	b10c      	cbz	r4, f18 <pm_system_resume+0x84>
	return node->next;
     f14:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f16:	b124      	cbz	r4, f22 <pm_system_resume+0x8e>
     f18:	b11c      	cbz	r4, f22 <pm_system_resume+0x8e>
			callback = notifier->state_exit;
     f1a:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
     f1c:	2a00      	cmp	r2, #0
     f1e:	d1f0      	bne.n	f02 <pm_system_resume+0x6e>
     f20:	e7f7      	b.n	f12 <pm_system_resume+0x7e>
	__asm__ volatile(
     f22:	f386 8811 	msr	BASEPRI, r6
     f26:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f2a:	4807      	ldr	r0, [pc, #28]	; (f48 <pm_system_resume+0xb4>)
     f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
     f30:	00aa      	lsls	r2, r5, #2
     f32:	1881      	adds	r1, r0, r2
     f34:	2300      	movs	r3, #0
     f36:	5083      	str	r3, [r0, r2]
     f38:	604b      	str	r3, [r1, #4]
     f3a:	608b      	str	r3, [r1, #8]
}
     f3c:	e7c4      	b.n	ec8 <pm_system_resume+0x34>
     f3e:	bf00      	nop
     f40:	20000c30 	.word	0x20000c30
     f44:	20000628 	.word	0x20000628
     f48:	20000618 	.word	0x20000618
     f4c:	00006237 	.word	0x00006237
     f50:	20000610 	.word	0x20000610

00000f54 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     f54:	b570      	push	{r4, r5, r6, lr}
     f56:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
     f58:	4b57      	ldr	r3, [pc, #348]	; (10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
     f5a:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
     f5c:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     f5e:	f3bf 8f5b 	dmb	ish
     f62:	4b56      	ldr	r3, [pc, #344]	; (10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
     f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     f68:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
     f6c:	f005 021f 	and.w	r2, r5, #31
     f70:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
     f72:	f013 0f01 	tst.w	r3, #1
     f76:	d015      	beq.n	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     f78:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     f7c:	4a50      	ldr	r2, [pc, #320]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     f7e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     f82:	b1f3      	cbz	r3, fc2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x22>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
     f84:	f1b4 3fff 	cmp.w	r4, #4294967295
     f88:	d131      	bne.n	fee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4e>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f8a:	f003 ff9d 	bl	4ec8 <k_sched_lock>
	__asm__ volatile(
     f8e:	f04f 0320 	mov.w	r3, #32
     f92:	f3ef 8611 	mrs	r6, BASEPRI
     f96:	f383 8812 	msr	BASEPRI_MAX, r3
     f9a:	f3bf 8f6f 	isb	sy
	return list->head;
     f9e:	4b49      	ldr	r3, [pc, #292]	; (10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
     fa0:	681c      	ldr	r4, [r3, #0]
     fa2:	e045      	b.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
		info = pm_policy_next_state(id, ticks);
     fa4:	4601      	mov	r1, r0
     fa6:	4628      	mov	r0, r5
     fa8:	f000 f8a4 	bl	10f4 <pm_policy_next_state>
		if (info != NULL) {
     fac:	2800      	cmp	r0, #0
     fae:	d0e3      	beq.n	f78 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
     fb0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     fb4:	4a42      	ldr	r2, [pc, #264]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     fb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     fba:	c807      	ldmia	r0, {r0, r1, r2}
     fbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     fc0:	e7da      	b.n	f78 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fc2:	f005 021f 	and.w	r2, r5, #31
     fc6:	2301      	movs	r3, #1
     fc8:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fca:	096d      	lsrs	r5, r5, #5
     fcc:	4a3b      	ldr	r2, [pc, #236]	; (10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
     fce:	eb02 0585 	add.w	r5, r2, r5, lsl #2
     fd2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fd4:	f3bf 8f5b 	dmb	ish
     fd8:	e855 2f00 	ldrex	r2, [r5]
     fdc:	401a      	ands	r2, r3
     fde:	e845 2100 	strex	r1, r2, [r5]
     fe2:	2900      	cmp	r1, #0
     fe4:	d1f8      	bne.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
     fe6:	f3bf 8f5b 	dmb	ish
		ret = false;
     fea:	2000      	movs	r0, #0
		goto end;
     fec:	e062      	b.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
		     k_us_to_ticks_ceil32(
     fee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     ff2:	4a33      	ldr	r2, [pc, #204]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     ff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ff8:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     ffa:	0c41      	lsrs	r1, r0, #17
     ffc:	03c0      	lsls	r0, r0, #15
     ffe:	4b32      	ldr	r3, [pc, #200]	; (10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>)
    1000:	18c0      	adds	r0, r0, r3
    1002:	4a32      	ldr	r2, [pc, #200]	; (10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>)
    1004:	f04f 0300 	mov.w	r3, #0
    1008:	f141 0100 	adc.w	r1, r1, #0
    100c:	f7ff f866 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1010:	2101      	movs	r1, #1
    1012:	1a20      	subs	r0, r4, r0
    1014:	f006 f90f 	bl	7236 <z_set_timeout_expiry>
    1018:	e7b7      	b.n	f8a <pm_system_suspend+0x36>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    101a:	4b27      	ldr	r3, [pc, #156]	; (10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    101c:	7d1b      	ldrb	r3, [r3, #20]
    101e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1022:	4927      	ldr	r1, [pc, #156]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    1024:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1028:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    102a:	b10c      	cbz	r4, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
	return node->next;
    102c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    102e:	b124      	cbz	r4, 103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    1030:	b11c      	cbz	r4, 103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
			callback = notifier->state_entry;
    1032:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    1034:	2a00      	cmp	r2, #0
    1036:	d1f0      	bne.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1038:	e7f7      	b.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
	__asm__ volatile(
    103a:	f386 8811 	msr	BASEPRI, r6
    103e:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1042:	f005 031f 	and.w	r3, r5, #31
    1046:	2101      	movs	r1, #1
    1048:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    104a:	096b      	lsrs	r3, r5, #5
    104c:	4a20      	ldr	r2, [pc, #128]	; (10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    104e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1052:	f3bf 8f5b 	dmb	ish
    1056:	e853 2f00 	ldrex	r2, [r3]
    105a:	430a      	orrs	r2, r1
    105c:	e843 2000 	strex	r0, r2, [r3]
    1060:	2800      	cmp	r0, #0
    1062:	d1f8      	bne.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    1064:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1068:	4b1a      	ldr	r3, [pc, #104]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    106a:	b14b      	cbz	r3, 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
		pm_state_set(info->state, info->substate_id);
    106c:	4b14      	ldr	r3, [pc, #80]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    106e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    1072:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1076:	7849      	ldrb	r1, [r1, #1]
    1078:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    107c:	f005 f8cf 	bl	621e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1080:	f7ff ff08 	bl	e94 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    1084:	f005 031f 	and.w	r3, r5, #31
    1088:	2401      	movs	r4, #1
    108a:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    108e:	096d      	lsrs	r5, r5, #5
    1090:	4a0a      	ldr	r2, [pc, #40]	; (10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    1092:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1096:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1098:	f3bf 8f5b 	dmb	ish
    109c:	e855 2f00 	ldrex	r2, [r5]
    10a0:	401a      	ands	r2, r3
    10a2:	e845 2100 	strex	r1, r2, [r5]
    10a6:	2900      	cmp	r1, #0
    10a8:	d1f8      	bne.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
    10aa:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    10ae:	f004 f92d 	bl	530c <k_sched_unlock>
	bool ret = true;
    10b2:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    10b4:	bd70      	pop	{r4, r5, r6, pc}
    10b6:	bf00      	nop
    10b8:	20000c30 	.word	0x20000c30
    10bc:	20000624 	.word	0x20000624
    10c0:	20000618 	.word	0x20000618
    10c4:	20000610 	.word	0x20000610
    10c8:	000f423f 	.word	0x000f423f
    10cc:	000f4240 	.word	0x000f4240
    10d0:	20000628 	.word	0x20000628
    10d4:	0000621f 	.word	0x0000621f

000010d8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    10d8:	f3bf 8f5b 	dmb	ish
    10dc:	4b04      	ldr	r3, [pc, #16]	; (10f0 <pm_policy_state_lock_is_active+0x18>)
    10de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    10e2:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    10e6:	3800      	subs	r0, #0
    10e8:	bf18      	it	ne
    10ea:	2001      	movne	r0, #1
    10ec:	4770      	bx	lr
    10ee:	bf00      	nop
    10f0:	2000062c 	.word	0x2000062c

000010f4 <pm_policy_next_state>:
{
    10f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10f8:	b082      	sub	sp, #8
    10fa:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    10fc:	a901      	add	r1, sp, #4
    10fe:	f000 f843 	bl	1188 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1102:	1e44      	subs	r4, r0, #1
    1104:	b224      	sxth	r4, r4
    1106:	e007      	b.n	1118 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    1108:	f1b6 3fff 	cmp.w	r6, #4294967295
    110c:	d032      	beq.n	1174 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    110e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    1110:	42b0      	cmp	r0, r6
    1112:	d92f      	bls.n	1174 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1114:	3c01      	subs	r4, #1
    1116:	b224      	sxth	r4, r4
    1118:	2c00      	cmp	r4, #0
    111a:	db2a      	blt.n	1172 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    111c:	9b01      	ldr	r3, [sp, #4]
    111e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1122:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1126:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    112a:	f7ff ffd5 	bl	10d8 <pm_policy_state_lock_is_active>
    112e:	2800      	cmp	r0, #0
    1130:	d1f0      	bne.n	1114 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1132:	6868      	ldr	r0, [r5, #4]
    1134:	0c41      	lsrs	r1, r0, #17
    1136:	03c0      	lsls	r0, r0, #15
    1138:	4f10      	ldr	r7, [pc, #64]	; (117c <pm_policy_next_state+0x88>)
    113a:	19c0      	adds	r0, r0, r7
    113c:	4a10      	ldr	r2, [pc, #64]	; (1180 <pm_policy_next_state+0x8c>)
    113e:	f04f 0300 	mov.w	r3, #0
    1142:	f141 0100 	adc.w	r1, r1, #0
    1146:	f7fe ffc9 	bl	dc <__aeabi_uldivmod>
    114a:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    114c:	68ab      	ldr	r3, [r5, #8]
    114e:	0c59      	lsrs	r1, r3, #17
    1150:	03db      	lsls	r3, r3, #15
    1152:	19d8      	adds	r0, r3, r7
    1154:	4a0a      	ldr	r2, [pc, #40]	; (1180 <pm_policy_next_state+0x8c>)
    1156:	f04f 0300 	mov.w	r3, #0
    115a:	f141 0100 	adc.w	r1, r1, #0
    115e:	f7fe ffbd 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1162:	4b08      	ldr	r3, [pc, #32]	; (1184 <pm_policy_next_state+0x90>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	f1b3 3fff 	cmp.w	r3, #4294967295
    116a:	d0cd      	beq.n	1108 <pm_policy_next_state+0x14>
    116c:	4283      	cmp	r3, r0
    116e:	d8cb      	bhi.n	1108 <pm_policy_next_state+0x14>
    1170:	e7d0      	b.n	1114 <pm_policy_next_state+0x20>
	return NULL;
    1172:	2500      	movs	r5, #0
}
    1174:	4628      	mov	r0, r5
    1176:	b002      	add	sp, #8
    1178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    117c:	000f423f 	.word	0x000f423f
    1180:	000f4240 	.word	0x000f4240
    1184:	20000004 	.word	0x20000004

00001188 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1188:	b908      	cbnz	r0, 118e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    118a:	4b02      	ldr	r3, [pc, #8]	; (1194 <pm_state_cpu_get_all+0xc>)
    118c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    118e:	2000      	movs	r0, #0
    1190:	4770      	bx	lr
    1192:	bf00      	nop
    1194:	000075d0 	.word	0x000075d0

00001198 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1198:	4901      	ldr	r1, [pc, #4]	; (11a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    119a:	2210      	movs	r2, #16
	str	r2, [r1]
    119c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    119e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    11a0:	e000ed10 	.word	0xe000ed10

000011a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    11a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    11a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    11a8:	f380 8811 	msr	BASEPRI, r0
	isb
    11ac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    11b0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    11b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    11b6:	b662      	cpsie	i
	isb
    11b8:	f3bf 8f6f 	isb	sy

	bx	lr
    11bc:	4770      	bx	lr
    11be:	bf00      	nop

000011c0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    11c0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    11c2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    11c4:	f381 8811 	msr	BASEPRI, r1

	wfe
    11c8:	bf20      	wfe

	msr	BASEPRI, r0
    11ca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    11ce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    11d0:	4770      	bx	lr
    11d2:	bf00      	nop

000011d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    11d4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11d6:	2800      	cmp	r0, #0
    11d8:	db07      	blt.n	11ea <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11da:	f000 021f 	and.w	r2, r0, #31
    11de:	0940      	lsrs	r0, r0, #5
    11e0:	2301      	movs	r3, #1
    11e2:	4093      	lsls	r3, r2
    11e4:	4a01      	ldr	r2, [pc, #4]	; (11ec <arch_irq_enable+0x18>)
    11e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    11ea:	4770      	bx	lr
    11ec:	e000e100 	.word	0xe000e100

000011f0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    11f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11f2:	2800      	cmp	r0, #0
    11f4:	db0c      	blt.n	1210 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11f6:	f000 021f 	and.w	r2, r0, #31
    11fa:	0940      	lsrs	r0, r0, #5
    11fc:	2301      	movs	r3, #1
    11fe:	4093      	lsls	r3, r2
    1200:	3020      	adds	r0, #32
    1202:	4a04      	ldr	r2, [pc, #16]	; (1214 <arch_irq_disable+0x24>)
    1204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    120c:	f3bf 8f6f 	isb	sy
}
    1210:	4770      	bx	lr
    1212:	bf00      	nop
    1214:	e000e100 	.word	0xe000e100

00001218 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1218:	0942      	lsrs	r2, r0, #5
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <arch_irq_is_enabled+0x18>)
    121c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1220:	f000 001f 	and.w	r0, r0, #31
    1224:	2301      	movs	r3, #1
    1226:	fa03 f000 	lsl.w	r0, r3, r0
}
    122a:	4010      	ands	r0, r2
    122c:	4770      	bx	lr
    122e:	bf00      	nop
    1230:	e000e100 	.word	0xe000e100

00001234 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1234:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1236:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1238:	2800      	cmp	r0, #0
    123a:	db08      	blt.n	124e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    123c:	0149      	lsls	r1, r1, #5
    123e:	b2c9      	uxtb	r1, r1
    1240:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1244:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1248:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    124c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    124e:	f000 000f 	and.w	r0, r0, #15
    1252:	0149      	lsls	r1, r1, #5
    1254:	b2c9      	uxtb	r1, r1
    1256:	4b01      	ldr	r3, [pc, #4]	; (125c <z_arm_irq_priority_set+0x28>)
    1258:	5419      	strb	r1, [r3, r0]
}
    125a:	4770      	bx	lr
    125c:	e000ed14 	.word	0xe000ed14

00001260 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1260:	bf30      	wfi
    b z_SysNmiOnReset
    1262:	f7ff bffd 	b.w	1260 <z_SysNmiOnReset>
    1266:	bf00      	nop

00001268 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1268:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <z_arm_prep_c+0x30>)
    126c:	4a0b      	ldr	r2, [pc, #44]	; (129c <z_arm_prep_c+0x34>)
    126e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1272:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1278:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    127c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1280:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1288:	f003 f974 	bl	4574 <z_bss_zero>
	z_data_copy();
    128c:	f004 f9be 	bl	560c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1290:	f000 fa12 	bl	16b8 <z_arm_interrupt_init>
	z_cstart();
    1294:	f003 f9cc 	bl	4630 <z_cstart>
    1298:	e000ed00 	.word	0xe000ed00
    129c:	00000000 	.word	0x00000000

000012a0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    12a0:	4a0a      	ldr	r2, [pc, #40]	; (12cc <arch_swap+0x2c>)
    12a2:	6893      	ldr	r3, [r2, #8]
    12a4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    12a8:	4909      	ldr	r1, [pc, #36]	; (12d0 <arch_swap+0x30>)
    12aa:	6809      	ldr	r1, [r1, #0]
    12ac:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12b0:	4908      	ldr	r1, [pc, #32]	; (12d4 <arch_swap+0x34>)
    12b2:	684b      	ldr	r3, [r1, #4]
    12b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    12b8:	604b      	str	r3, [r1, #4]
    12ba:	2300      	movs	r3, #0
    12bc:	f383 8811 	msr	BASEPRI, r3
    12c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    12c4:	6893      	ldr	r3, [r2, #8]
}
    12c6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    12ca:	4770      	bx	lr
    12cc:	20000c30 	.word	0x20000c30
    12d0:	00007754 	.word	0x00007754
    12d4:	e000ed00 	.word	0xe000ed00

000012d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    12d8:	4913      	ldr	r1, [pc, #76]	; (1328 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    12da:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    12dc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    12e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    12e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    12e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12ea:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    12ec:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    12f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    12f4:	4f0d      	ldr	r7, [pc, #52]	; (132c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    12f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    12fa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    12fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    12fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1300:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1304:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1306:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    130a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    130e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1310:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1312:	f000 fa7b 	bl	180c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1316:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    131a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    131e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1322:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1326:	4770      	bx	lr
    ldr r1, =_kernel
    1328:	20000c30 	.word	0x20000c30
    ldr v4, =_SCS_ICSR
    132c:	e000ed04 	.word	0xe000ed04

00001330 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1330:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1334:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1336:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    133a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    133e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1340:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1344:	2902      	cmp	r1, #2
    beq _oops
    1346:	d0ff      	beq.n	1348 <_oops>

00001348 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1348:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    134a:	f004 fe3c 	bl	5fc6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    134e:	bd01      	pop	{r0, pc}

00001350 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1350:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1352:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1356:	490e      	ldr	r1, [pc, #56]	; (1390 <arch_new_thread+0x40>)
    1358:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    135c:	f021 0101 	bic.w	r1, r1, #1
    1360:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1364:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1368:	9b01      	ldr	r3, [sp, #4]
    136a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    136e:	9b02      	ldr	r3, [sp, #8]
    1370:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1374:	9b03      	ldr	r3, [sp, #12]
    1376:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    137a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    137e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    1382:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1384:	2300      	movs	r3, #0
    1386:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    138a:	bc10      	pop	{r4}
    138c:	4770      	bx	lr
    138e:	bf00      	nop
    1390:	00005e7d 	.word	0x00005e7d

00001394 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1394:	4b12      	ldr	r3, [pc, #72]	; (13e0 <z_check_thread_stack_fail+0x4c>)
    1396:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    1398:	b302      	cbz	r2, 13dc <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    139a:	f110 0f16 	cmn.w	r0, #22
    139e:	d011      	beq.n	13c4 <z_check_thread_stack_fail+0x30>
    13a0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    13a4:	f1a3 0c20 	sub.w	ip, r3, #32
    13a8:	4584      	cmp	ip, r0
    13aa:	d805      	bhi.n	13b8 <z_check_thread_stack_fail+0x24>
    13ac:	4283      	cmp	r3, r0
    13ae:	d905      	bls.n	13bc <z_check_thread_stack_fail+0x28>
    13b0:	428b      	cmp	r3, r1
    13b2:	d805      	bhi.n	13c0 <z_check_thread_stack_fail+0x2c>
    13b4:	2100      	movs	r1, #0
    13b6:	e00b      	b.n	13d0 <z_check_thread_stack_fail+0x3c>
    13b8:	2100      	movs	r1, #0
    13ba:	e009      	b.n	13d0 <z_check_thread_stack_fail+0x3c>
    13bc:	2100      	movs	r1, #0
    13be:	e007      	b.n	13d0 <z_check_thread_stack_fail+0x3c>
    13c0:	2101      	movs	r1, #1
    13c2:	e005      	b.n	13d0 <z_check_thread_stack_fail+0x3c>
    13c4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    13c8:	428b      	cmp	r3, r1
    13ca:	bf94      	ite	ls
    13cc:	2100      	movls	r1, #0
    13ce:	2101      	movhi	r1, #1
    13d0:	b909      	cbnz	r1, 13d6 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    13d2:	2000      	movs	r0, #0
}
    13d4:	4770      	bx	lr
		return thread->stack_info.start;
    13d6:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    13da:	4770      	bx	lr
		return 0;
    13dc:	2000      	movs	r0, #0
    13de:	4770      	bx	lr
    13e0:	20000c30 	.word	0x20000c30

000013e4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    13e4:	b508      	push	{r3, lr}
    13e6:	460d      	mov	r5, r1
    13e8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    13ea:	4b08      	ldr	r3, [pc, #32]	; (140c <arch_switch_to_main_thread+0x28>)
    13ec:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    13ee:	f000 fa0d 	bl	180c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    13f2:	4620      	mov	r0, r4
    13f4:	f385 8809 	msr	PSP, r5
    13f8:	2100      	movs	r1, #0
    13fa:	b663      	cpsie	if
    13fc:	f381 8811 	msr	BASEPRI, r1
    1400:	f3bf 8f6f 	isb	sy
    1404:	2200      	movs	r2, #0
    1406:	2300      	movs	r3, #0
    1408:	f004 fd38 	bl	5e7c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    140c:	20000c30 	.word	0x20000c30

00001410 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1410:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1412:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1414:	4a0b      	ldr	r2, [pc, #44]	; (1444 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1416:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1418:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    141a:	bf1e      	ittt	ne
	movne	r1, #0
    141c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    141e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1420:	f005 fce8 	blne	6df4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1424:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1426:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    142a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    142e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1432:	4905      	ldr	r1, [pc, #20]	; (1448 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1434:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1436:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1438:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    143a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    143e:	4903      	ldr	r1, [pc, #12]	; (144c <_isr_wrapper+0x3c>)
	bx r1
    1440:	4708      	bx	r1
    1442:	0000      	.short	0x0000
	ldr r2, =_kernel
    1444:	20000c30 	.word	0x20000c30
	ldr r1, =_sw_isr_table
    1448:	000073b8 	.word	0x000073b8
	ldr r1, =z_arm_int_exit
    144c:	00001451 	.word	0x00001451

00001450 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1450:	4b04      	ldr	r3, [pc, #16]	; (1464 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1452:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1454:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1456:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1458:	d003      	beq.n	1462 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    145a:	4903      	ldr	r1, [pc, #12]	; (1468 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    145c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1460:	600a      	str	r2, [r1, #0]

00001462 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1462:	4770      	bx	lr
	ldr r3, =_kernel
    1464:	20000c30 	.word	0x20000c30
	ldr r1, =_SCS_ICSR
    1468:	e000ed04 	.word	0xe000ed04

0000146c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    146c:	b510      	push	{r4, lr}
    146e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1470:	4b12      	ldr	r3, [pc, #72]	; (14bc <bus_fault+0x50>)
    1472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1478:	f413 7f00 	tst.w	r3, #512	; 0x200
    147c:	d00b      	beq.n	1496 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    147e:	4b0f      	ldr	r3, [pc, #60]	; (14bc <bus_fault+0x50>)
    1480:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1484:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1488:	d005      	beq.n	1496 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    148a:	b121      	cbz	r1, 1496 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    148c:	4a0b      	ldr	r2, [pc, #44]	; (14bc <bus_fault+0x50>)
    148e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1494:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1496:	4b09      	ldr	r3, [pc, #36]	; (14bc <bus_fault+0x50>)
    1498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    149c:	f413 7f80 	tst.w	r3, #256	; 0x100
    14a0:	d101      	bne.n	14a6 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <bus_fault+0x50>)
    14a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14a6:	4a05      	ldr	r2, [pc, #20]	; (14bc <bus_fault+0x50>)
    14a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14aa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    14ae:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    14b0:	2101      	movs	r1, #1
    14b2:	f004 fd9a 	bl	5fea <memory_fault_recoverable>
    14b6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    14b8:	2000      	movs	r0, #0
    14ba:	bd10      	pop	{r4, pc}
    14bc:	e000ed00 	.word	0xe000ed00

000014c0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <usage_fault+0x20>)
    14c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    14c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    14c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    14c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    14ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    14cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    14ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14d0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    14d4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    14d8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    14da:	2000      	movs	r0, #0
    14dc:	4770      	bx	lr
    14de:	bf00      	nop
    14e0:	e000ed00 	.word	0xe000ed00

000014e4 <mem_manage_fault>:
{
    14e4:	b570      	push	{r4, r5, r6, lr}
    14e6:	4605      	mov	r5, r0
    14e8:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    14ea:	4b25      	ldr	r3, [pc, #148]	; (1580 <mem_manage_fault+0x9c>)
    14ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    14ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    14f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14f2:	f013 0f02 	tst.w	r3, #2
    14f6:	d00c      	beq.n	1512 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    14f8:	4b21      	ldr	r3, [pc, #132]	; (1580 <mem_manage_fault+0x9c>)
    14fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    14fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14fe:	f013 0f80 	tst.w	r3, #128	; 0x80
    1502:	d02f      	beq.n	1564 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    1504:	b139      	cbz	r1, 1516 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1506:	4a1e      	ldr	r2, [pc, #120]	; (1580 <mem_manage_fault+0x9c>)
    1508:	6a93      	ldr	r3, [r2, #40]	; 0x28
    150a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    150e:	6293      	str	r3, [r2, #40]	; 0x28
    1510:	e001      	b.n	1516 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    1512:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1516:	4b1a      	ldr	r3, [pc, #104]	; (1580 <mem_manage_fault+0x9c>)
    1518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    151a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    151e:	f013 0f10 	tst.w	r3, #16
    1522:	d104      	bne.n	152e <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1524:	4b16      	ldr	r3, [pc, #88]	; (1580 <mem_manage_fault+0x9c>)
    1526:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1528:	f014 0402 	ands.w	r4, r4, #2
    152c:	d004      	beq.n	1538 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    152e:	4b14      	ldr	r3, [pc, #80]	; (1580 <mem_manage_fault+0x9c>)
    1530:	685c      	ldr	r4, [r3, #4]
    1532:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1536:	d118      	bne.n	156a <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1538:	4b11      	ldr	r3, [pc, #68]	; (1580 <mem_manage_fault+0x9c>)
    153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    153c:	f013 0f20 	tst.w	r3, #32
    1540:	d004      	beq.n	154c <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1542:	4a0f      	ldr	r2, [pc, #60]	; (1580 <mem_manage_fault+0x9c>)
    1544:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    154a:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    154c:	4a0c      	ldr	r2, [pc, #48]	; (1580 <mem_manage_fault+0x9c>)
    154e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1550:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1554:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1556:	2101      	movs	r1, #1
    1558:	4628      	mov	r0, r5
    155a:	f004 fd46 	bl	5fea <memory_fault_recoverable>
    155e:	7030      	strb	r0, [r6, #0]
}
    1560:	4620      	mov	r0, r4
    1562:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1564:	f06f 0015 	mvn.w	r0, #21
    1568:	e7d5      	b.n	1516 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    156a:	4629      	mov	r1, r5
    156c:	f7ff ff12 	bl	1394 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1570:	4604      	mov	r4, r0
    1572:	2800      	cmp	r0, #0
    1574:	d0e0      	beq.n	1538 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1576:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    157a:	2402      	movs	r4, #2
    157c:	e7dc      	b.n	1538 <mem_manage_fault+0x54>
    157e:	bf00      	nop
    1580:	e000ed00 	.word	0xe000ed00

00001584 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1584:	b508      	push	{r3, lr}
    1586:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1588:	2300      	movs	r3, #0
    158a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    158c:	4b1b      	ldr	r3, [pc, #108]	; (15fc <hard_fault+0x78>)
    158e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1590:	f010 0002 	ands.w	r0, r0, #2
    1594:	d12e      	bne.n	15f4 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1598:	2b00      	cmp	r3, #0
    159a:	db2c      	blt.n	15f6 <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    159c:	4b17      	ldr	r3, [pc, #92]	; (15fc <hard_fault+0x78>)
    159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15a0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    15a4:	d028      	beq.n	15f8 <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    15a6:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    15aa:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    15ae:	f64d 7302 	movw	r3, #57090	; 0xdf02
    15b2:	429a      	cmp	r2, r3
    15b4:	d00f      	beq.n	15d6 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    15b6:	4b11      	ldr	r3, [pc, #68]	; (15fc <hard_fault+0x78>)
    15b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    15bc:	b973      	cbnz	r3, 15dc <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    15be:	4b0f      	ldr	r3, [pc, #60]	; (15fc <hard_fault+0x78>)
    15c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    15c4:	b983      	cbnz	r3, 15e8 <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    15c6:	4b0d      	ldr	r3, [pc, #52]	; (15fc <hard_fault+0x78>)
    15c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    15ca:	b29b      	uxth	r3, r3
    15cc:	b19b      	cbz	r3, 15f6 <hard_fault+0x72>
			reason = usage_fault(esf);
    15ce:	4660      	mov	r0, ip
    15d0:	f7ff ff76 	bl	14c0 <usage_fault>
    15d4:	e00f      	b.n	15f6 <hard_fault+0x72>
			reason = esf->basic.r0;
    15d6:	f8dc 0000 	ldr.w	r0, [ip]
    15da:	e00c      	b.n	15f6 <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    15dc:	460a      	mov	r2, r1
    15de:	2101      	movs	r1, #1
    15e0:	4660      	mov	r0, ip
    15e2:	f7ff ff7f 	bl	14e4 <mem_manage_fault>
    15e6:	e006      	b.n	15f6 <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    15e8:	460a      	mov	r2, r1
    15ea:	2101      	movs	r1, #1
    15ec:	4660      	mov	r0, ip
    15ee:	f7ff ff3d 	bl	146c <bus_fault>
    15f2:	e000      	b.n	15f6 <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    15f4:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    15f6:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    15f8:	4618      	mov	r0, r3
	return reason;
    15fa:	e7fc      	b.n	15f6 <hard_fault+0x72>
    15fc:	e000ed00 	.word	0xe000ed00

00001600 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1600:	b570      	push	{r4, r5, r6, lr}
    1602:	b08a      	sub	sp, #40	; 0x28
    1604:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1606:	4b22      	ldr	r3, [pc, #136]	; (1690 <z_arm_fault+0x90>)
    1608:	6859      	ldr	r1, [r3, #4]
    160a:	f3c1 0108 	ubfx	r1, r1, #0, #9
    160e:	2300      	movs	r3, #0
    1610:	f383 8811 	msr	BASEPRI, r3
    1614:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1618:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    161c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1620:	d115      	bne.n	164e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1622:	f002 030c 	and.w	r3, r2, #12
    1626:	2b08      	cmp	r3, #8
    1628:	d014      	beq.n	1654 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    162a:	f012 0f08 	tst.w	r2, #8
    162e:	d00b      	beq.n	1648 <z_arm_fault+0x48>
	*nested_exc = false;
    1630:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1632:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1636:	4620      	mov	r0, r4
    1638:	f004 fcdc 	bl	5ff4 <fault_handle>
    163c:	4605      	mov	r5, r0
	if (recoverable) {
    163e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1642:	b153      	cbz	r3, 165a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1644:	b00a      	add	sp, #40	; 0x28
    1646:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1648:	4604      	mov	r4, r0
			*nested_exc = true;
    164a:	2601      	movs	r6, #1
    164c:	e7f1      	b.n	1632 <z_arm_fault+0x32>
	*nested_exc = false;
    164e:	2600      	movs	r6, #0
		return NULL;
    1650:	4634      	mov	r4, r6
    1652:	e7ee      	b.n	1632 <z_arm_fault+0x32>
	*nested_exc = false;
    1654:	2600      	movs	r6, #0
		return NULL;
    1656:	4634      	mov	r4, r6
    1658:	e7eb      	b.n	1632 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    165a:	2220      	movs	r2, #32
    165c:	4621      	mov	r1, r4
    165e:	a801      	add	r0, sp, #4
    1660:	f004 fd8d 	bl	617e <memcpy>
	if (nested_exc) {
    1664:	b14e      	cbz	r6, 167a <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1666:	9b08      	ldr	r3, [sp, #32]
    1668:	f3c3 0208 	ubfx	r2, r3, #0, #9
    166c:	b95a      	cbnz	r2, 1686 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    166e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1672:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1676:	9308      	str	r3, [sp, #32]
    1678:	e005      	b.n	1686 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    167a:	9b08      	ldr	r3, [sp, #32]
    167c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1680:	f023 0301 	bic.w	r3, r3, #1
    1684:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1686:	a901      	add	r1, sp, #4
    1688:	4628      	mov	r0, r5
    168a:	f004 fc98 	bl	5fbe <z_arm_fatal_error>
    168e:	e7d9      	b.n	1644 <z_arm_fault+0x44>
    1690:	e000ed00 	.word	0xe000ed00

00001694 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1694:	4a02      	ldr	r2, [pc, #8]	; (16a0 <z_arm_fault_init+0xc>)
    1696:	6953      	ldr	r3, [r2, #20]
    1698:	f043 0310 	orr.w	r3, r3, #16
    169c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    169e:	4770      	bx	lr
    16a0:	e000ed00 	.word	0xe000ed00

000016a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    16a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    16a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    16ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    16ae:	4672      	mov	r2, lr
	bl z_arm_fault
    16b0:	f7ff ffa6 	bl	1600 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    16b4:	bd01      	pop	{r0, pc}
    16b6:	bf00      	nop

000016b8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    16b8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    16ba:	e006      	b.n	16ca <z_arm_interrupt_init+0x12>
    16bc:	f002 010f 	and.w	r1, r2, #15
    16c0:	4b09      	ldr	r3, [pc, #36]	; (16e8 <z_arm_interrupt_init+0x30>)
    16c2:	440b      	add	r3, r1
    16c4:	2120      	movs	r1, #32
    16c6:	7619      	strb	r1, [r3, #24]
    16c8:	3201      	adds	r2, #1
    16ca:	2a26      	cmp	r2, #38	; 0x26
    16cc:	dc0a      	bgt.n	16e4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    16ce:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    16d0:	2b00      	cmp	r3, #0
    16d2:	dbf3      	blt.n	16bc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16d4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    16d8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    16dc:	2120      	movs	r1, #32
    16de:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    16e2:	e7f1      	b.n	16c8 <z_arm_interrupt_init+0x10>
	}
}
    16e4:	4770      	bx	lr
    16e6:	bf00      	nop
    16e8:	e000ecfc 	.word	0xe000ecfc

000016ec <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    16ec:	2000      	movs	r0, #0
    msr CONTROL, r0
    16ee:	f380 8814 	msr	CONTROL, r0
    isb
    16f2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    16f6:	f005 fdf1 	bl	72dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    16fa:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    16fc:	490d      	ldr	r1, [pc, #52]	; (1734 <__start+0x48>)
    str r0, [r1]
    16fe:	6008      	str	r0, [r1, #0]
    dsb
    1700:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1704:	480c      	ldr	r0, [pc, #48]	; (1738 <__start+0x4c>)
    msr msp, r0
    1706:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    170a:	f000 f82d 	bl	1768 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    170e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1710:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1714:	4809      	ldr	r0, [pc, #36]	; (173c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1716:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    171a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    171c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1720:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1724:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1726:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1728:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    172c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1730:	f7ff fd9a 	bl	1268 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1734:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1738:	200016e0 	.word	0x200016e0
    ldr r0, =z_interrupt_stacks
    173c:	20001860 	.word	0x20001860

00001740 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1740:	4b08      	ldr	r3, [pc, #32]	; (1764 <z_arm_clear_arm_mpu_config+0x24>)
    1742:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1746:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    174a:	2300      	movs	r3, #0
    174c:	e006      	b.n	175c <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    174e:	4a05      	ldr	r2, [pc, #20]	; (1764 <z_arm_clear_arm_mpu_config+0x24>)
    1750:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1754:	2100      	movs	r1, #0
    1756:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    175a:	3301      	adds	r3, #1
    175c:	4283      	cmp	r3, r0
    175e:	dbf6      	blt.n	174e <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1760:	4770      	bx	lr
    1762:	bf00      	nop
    1764:	e000ed00 	.word	0xe000ed00

00001768 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1768:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    176a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    176c:	2400      	movs	r4, #0
    176e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1772:	f7ff ffe5 	bl	1740 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1776:	4623      	mov	r3, r4
    1778:	e008      	b.n	178c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    177a:	f103 0120 	add.w	r1, r3, #32
    177e:	4a0e      	ldr	r2, [pc, #56]	; (17b8 <z_arm_init_arch_hw_at_boot+0x50>)
    1780:	f04f 30ff 	mov.w	r0, #4294967295
    1784:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1788:	3301      	adds	r3, #1
    178a:	b2db      	uxtb	r3, r3
    178c:	2b07      	cmp	r3, #7
    178e:	d9f4      	bls.n	177a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1790:	2300      	movs	r3, #0
    1792:	e008      	b.n	17a6 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1794:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1798:	4a07      	ldr	r2, [pc, #28]	; (17b8 <z_arm_init_arch_hw_at_boot+0x50>)
    179a:	f04f 30ff 	mov.w	r0, #4294967295
    179e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17a2:	3301      	adds	r3, #1
    17a4:	b2db      	uxtb	r3, r3
    17a6:	2b07      	cmp	r3, #7
    17a8:	d9f4      	bls.n	1794 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    17aa:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    17ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17b0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    17b4:	bd10      	pop	{r4, pc}
    17b6:	bf00      	nop
    17b8:	e000e100 	.word	0xe000e100

000017bc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    17bc:	b508      	push	{r3, lr}
	if (_current == thread) {
    17be:	4b0a      	ldr	r3, [pc, #40]	; (17e8 <z_impl_k_thread_abort+0x2c>)
    17c0:	689b      	ldr	r3, [r3, #8]
    17c2:	4283      	cmp	r3, r0
    17c4:	d002      	beq.n	17cc <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    17c6:	f003 fee5 	bl	5594 <z_thread_abort>
}
    17ca:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    17cc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    17d0:	2b00      	cmp	r3, #0
    17d2:	d0f8      	beq.n	17c6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    17d4:	4b05      	ldr	r3, [pc, #20]	; (17ec <z_impl_k_thread_abort+0x30>)
    17d6:	685a      	ldr	r2, [r3, #4]
    17d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    17dc:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    17de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    17e4:	625a      	str	r2, [r3, #36]	; 0x24
    17e6:	e7ee      	b.n	17c6 <z_impl_k_thread_abort+0xa>
    17e8:	20000c30 	.word	0x20000c30
    17ec:	e000ed00 	.word	0xe000ed00

000017f0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    17f0:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    17f2:	4b03      	ldr	r3, [pc, #12]	; (1800 <z_arm_configure_static_mpu_regions+0x10>)
    17f4:	4a03      	ldr	r2, [pc, #12]	; (1804 <z_arm_configure_static_mpu_regions+0x14>)
    17f6:	2101      	movs	r1, #1
    17f8:	4803      	ldr	r0, [pc, #12]	; (1808 <z_arm_configure_static_mpu_regions+0x18>)
    17fa:	f004 fc81 	bl	6100 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    17fe:	bd08      	pop	{r3, pc}
    1800:	20010000 	.word	0x20010000
    1804:	20000000 	.word	0x20000000
    1808:	000075d0 	.word	0x000075d0

0000180c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    180c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    180e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    1812:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1814:	4804      	ldr	r0, [pc, #16]	; (1828 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1816:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    1818:	2320      	movs	r3, #32
    181a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    181c:	4b03      	ldr	r3, [pc, #12]	; (182c <z_arm_configure_dynamic_mpu_regions+0x20>)
    181e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1820:	2101      	movs	r1, #1
    1822:	f004 fc71 	bl	6108 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    1826:	bd08      	pop	{r3, pc}
    1828:	20000648 	.word	0x20000648
    182c:	150b0000 	.word	0x150b0000

00001830 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1830:	4a08      	ldr	r2, [pc, #32]	; (1854 <region_init+0x24>)
    1832:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1836:	680b      	ldr	r3, [r1, #0]
    1838:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    183c:	4303      	orrs	r3, r0
    183e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1842:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1846:	688b      	ldr	r3, [r1, #8]
    1848:	f043 0301 	orr.w	r3, r3, #1
    184c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1850:	4770      	bx	lr
    1852:	bf00      	nop
    1854:	e000ed00 	.word	0xe000ed00

00001858 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1858:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    185a:	4c03      	ldr	r4, [pc, #12]	; (1868 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    185c:	2301      	movs	r3, #1
    185e:	7822      	ldrb	r2, [r4, #0]
    1860:	f004 fc26 	bl	60b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1864:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1866:	bd10      	pop	{r4, pc}
    1868:	20000c76 	.word	0x20000c76

0000186c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    186c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    186e:	2300      	movs	r3, #0
    1870:	4a09      	ldr	r2, [pc, #36]	; (1898 <mpu_configure_dynamic_mpu_regions+0x2c>)
    1872:	7812      	ldrb	r2, [r2, #0]
    1874:	f004 fc1c 	bl	60b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1878:	f110 0f16 	cmn.w	r0, #22
    187c:	d00a      	beq.n	1894 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    187e:	4603      	mov	r3, r0
    1880:	e006      	b.n	1890 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    1882:	4a06      	ldr	r2, [pc, #24]	; (189c <mpu_configure_dynamic_mpu_regions+0x30>)
    1884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1888:	2100      	movs	r1, #0
    188a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    188e:	3301      	adds	r3, #1
    1890:	2b07      	cmp	r3, #7
    1892:	ddf6      	ble.n	1882 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1894:	bd08      	pop	{r3, pc}
    1896:	bf00      	nop
    1898:	20000c76 	.word	0x20000c76
    189c:	e000ed00 	.word	0xe000ed00

000018a0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    18a0:	4b04      	ldr	r3, [pc, #16]	; (18b4 <arm_core_mpu_enable+0x14>)
    18a2:	2205      	movs	r2, #5
    18a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    18a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18ac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop
    18b4:	e000ed00 	.word	0xe000ed00

000018b8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    18b8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    18bc:	4b02      	ldr	r3, [pc, #8]	; (18c8 <arm_core_mpu_disable+0x10>)
    18be:	2200      	movs	r2, #0
    18c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    18c4:	4770      	bx	lr
    18c6:	bf00      	nop
    18c8:	e000ed00 	.word	0xe000ed00

000018cc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    18cc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    18ce:	4b0e      	ldr	r3, [pc, #56]	; (1908 <z_arm_mpu_init+0x3c>)
    18d0:	681d      	ldr	r5, [r3, #0]
    18d2:	2d08      	cmp	r5, #8
    18d4:	d815      	bhi.n	1902 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    18d6:	f7ff ffef 	bl	18b8 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18da:	2400      	movs	r4, #0
    18dc:	e009      	b.n	18f2 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    18de:	4b0a      	ldr	r3, [pc, #40]	; (1908 <z_arm_mpu_init+0x3c>)
    18e0:	6859      	ldr	r1, [r3, #4]
    18e2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    18e6:	0093      	lsls	r3, r2, #2
    18e8:	4419      	add	r1, r3
    18ea:	4620      	mov	r0, r4
    18ec:	f7ff ffa0 	bl	1830 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18f0:	3401      	adds	r4, #1
    18f2:	42a5      	cmp	r5, r4
    18f4:	d8f3      	bhi.n	18de <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    18f6:	4b05      	ldr	r3, [pc, #20]	; (190c <z_arm_mpu_init+0x40>)
    18f8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    18fa:	f7ff ffd1 	bl	18a0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    18fe:	2000      	movs	r0, #0
}
    1900:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1902:	f04f 30ff 	mov.w	r0, #4294967295
    1906:	e7fb      	b.n	1900 <z_arm_mpu_init+0x34>
    1908:	000075ec 	.word	0x000075ec
    190c:	20000c76 	.word	0x20000c76

00001910 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1910:	4b01      	ldr	r3, [pc, #4]	; (1918 <__stdout_hook_install+0x8>)
    1912:	6018      	str	r0, [r3, #0]
}
    1914:	4770      	bx	lr
    1916:	bf00      	nop
    1918:	20000008 	.word	0x20000008

0000191c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    191c:	f04f 0320 	mov.w	r3, #32
    1920:	f3ef 8211 	mrs	r2, BASEPRI
    1924:	f383 8812 	msr	BASEPRI_MAX, r3
    1928:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    192c:	2301      	movs	r3, #1
    192e:	4906      	ldr	r1, [pc, #24]	; (1948 <nordicsemi_nrf52_init+0x2c>)
    1930:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1934:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1938:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    193c:	f382 8811 	msr	BASEPRI, r2
    1940:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1944:	2000      	movs	r0, #0
    1946:	4770      	bx	lr
    1948:	4001e000 	.word	0x4001e000

0000194c <sys_arch_reboot>:
    *p_gpregret = val;
    194c:	b2c0      	uxtb	r0, r0
    194e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1952:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1956:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    195a:	4905      	ldr	r1, [pc, #20]	; (1970 <sys_arch_reboot+0x24>)
    195c:	68ca      	ldr	r2, [r1, #12]
    195e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1962:	4b04      	ldr	r3, [pc, #16]	; (1974 <sys_arch_reboot+0x28>)
    1964:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1966:	60cb      	str	r3, [r1, #12]
    1968:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    196c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    196e:	e7fd      	b.n	196c <sys_arch_reboot+0x20>
    1970:	e000ed00 	.word	0xe000ed00
    1974:	05fa0004 	.word	0x05fa0004

00001978 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1978:	b130      	cbz	r0, 1988 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    197a:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    197c:	0180      	lsls	r0, r0, #6
    197e:	4b03      	ldr	r3, [pc, #12]	; (198c <arch_busy_wait+0x14>)
    1980:	f043 0301 	orr.w	r3, r3, #1
    1984:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1986:	bd08      	pop	{r3, pc}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	00007580 	.word	0x00007580

00001990 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1990:	4800      	ldr	r0, [pc, #0]	; (1994 <get_hf_flags+0x4>)
    1992:	4770      	bx	lr
    1994:	200006a4 	.word	0x200006a4

00001998 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1998:	4b03      	ldr	r3, [pc, #12]	; (19a8 <get_subsys+0x10>)
    199a:	1ac0      	subs	r0, r0, r3
    199c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    199e:	4b03      	ldr	r3, [pc, #12]	; (19ac <get_subsys+0x14>)
    19a0:	fb03 f000 	mul.w	r0, r3, r0
    19a4:	4770      	bx	lr
    19a6:	bf00      	nop
    19a8:	20000664 	.word	0x20000664
    19ac:	b6db6db7 	.word	0xb6db6db7

000019b0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19b0:	b538      	push	{r3, r4, r5, lr}
    19b2:	4605      	mov	r5, r0
    19b4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    19b6:	f7ff ffef 	bl	1998 <get_subsys>
    19ba:	4601      	mov	r1, r0
    19bc:	2240      	movs	r2, #64	; 0x40
    19be:	4803      	ldr	r0, [pc, #12]	; (19cc <onoff_stop+0x1c>)
    19c0:	f004 fcb4 	bl	632c <stop>
    19c4:	4601      	mov	r1, r0
	notify(mgr, res);
    19c6:	4628      	mov	r0, r5
    19c8:	47a0      	blx	r4
}
    19ca:	bd38      	pop	{r3, r4, r5, pc}
    19cc:	00007340 	.word	0x00007340

000019d0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19d0:	b530      	push	{r4, r5, lr}
    19d2:	b083      	sub	sp, #12
    19d4:	4605      	mov	r5, r0
    19d6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19d8:	f7ff ffde 	bl	1998 <get_subsys>
    19dc:	4601      	mov	r1, r0
    19de:	2340      	movs	r3, #64	; 0x40
    19e0:	9300      	str	r3, [sp, #0]
    19e2:	4623      	mov	r3, r4
    19e4:	4a05      	ldr	r2, [pc, #20]	; (19fc <onoff_start+0x2c>)
    19e6:	4806      	ldr	r0, [pc, #24]	; (1a00 <onoff_start+0x30>)
    19e8:	f004 fcba 	bl	6360 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    19ec:	1e01      	subs	r1, r0, #0
    19ee:	db01      	blt.n	19f4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    19f0:	b003      	add	sp, #12
    19f2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    19f4:	4628      	mov	r0, r5
    19f6:	47a0      	blx	r4
}
    19f8:	e7fa      	b.n	19f0 <onoff_start+0x20>
    19fa:	bf00      	nop
    19fc:	000063a9 	.word	0x000063a9
    1a00:	00007340 	.word	0x00007340

00001a04 <generic_hfclk_start>:
{
    1a04:	b510      	push	{r4, lr}
	__asm__ volatile(
    1a06:	f04f 0320 	mov.w	r3, #32
    1a0a:	f3ef 8411 	mrs	r4, BASEPRI
    1a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    1a12:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1a16:	4a13      	ldr	r2, [pc, #76]	; (1a64 <generic_hfclk_start+0x60>)
    1a18:	6813      	ldr	r3, [r2, #0]
    1a1a:	f043 0302 	orr.w	r3, r3, #2
    1a1e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1a20:	f013 0f01 	tst.w	r3, #1
    1a24:	d108      	bne.n	1a38 <generic_hfclk_start+0x34>
	bool already_started = false;
    1a26:	2300      	movs	r3, #0
	__asm__ volatile(
    1a28:	f384 8811 	msr	BASEPRI, r4
    1a2c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1a30:	b99b      	cbnz	r3, 1a5a <generic_hfclk_start+0x56>
	hfclk_start();
    1a32:	f004 fcc1 	bl	63b8 <hfclk_start>
}
    1a36:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a3c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1a40:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1a44:	f012 0f01 	tst.w	r2, #1
    1a48:	d101      	bne.n	1a4e <generic_hfclk_start+0x4a>
	bool already_started = false;
    1a4a:	2300      	movs	r3, #0
    1a4c:	e7ec      	b.n	1a28 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    1a4e:	f7ff ff9f 	bl	1990 <get_hf_flags>
    1a52:	f004 fc46 	bl	62e2 <set_on_state>
			already_started = true;
    1a56:	2301      	movs	r3, #1
    1a58:	e7e6      	b.n	1a28 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    1a5a:	2100      	movs	r1, #0
    1a5c:	4802      	ldr	r0, [pc, #8]	; (1a68 <generic_hfclk_start+0x64>)
    1a5e:	f004 fc53 	bl	6308 <clkstarted_handle>
		return;
    1a62:	e7e8      	b.n	1a36 <generic_hfclk_start+0x32>
    1a64:	200006b4 	.word	0x200006b4
    1a68:	00007340 	.word	0x00007340

00001a6c <generic_hfclk_stop>:
{
    1a6c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a6e:	4b0a      	ldr	r3, [pc, #40]	; (1a98 <generic_hfclk_stop+0x2c>)
    1a70:	f3bf 8f5b 	dmb	ish
    1a74:	e853 2f00 	ldrex	r2, [r3]
    1a78:	f022 0102 	bic.w	r1, r2, #2
    1a7c:	e843 1000 	strex	r0, r1, [r3]
    1a80:	2800      	cmp	r0, #0
    1a82:	d1f7      	bne.n	1a74 <generic_hfclk_stop+0x8>
    1a84:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1a88:	f012 0f01 	tst.w	r2, #1
    1a8c:	d000      	beq.n	1a90 <generic_hfclk_stop+0x24>
}
    1a8e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1a90:	f004 fc97 	bl	63c2 <hfclk_stop>
    1a94:	e7fb      	b.n	1a8e <generic_hfclk_stop+0x22>
    1a96:	bf00      	nop
    1a98:	200006b4 	.word	0x200006b4

00001a9c <api_blocking_start>:
{
    1a9c:	b500      	push	{lr}
    1a9e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1aa0:	f8cd d000 	str.w	sp, [sp]
    1aa4:	f8cd d004 	str.w	sp, [sp, #4]
    1aa8:	2300      	movs	r3, #0
    1aaa:	9302      	str	r3, [sp, #8]
    1aac:	2301      	movs	r3, #1
    1aae:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1ab0:	466b      	mov	r3, sp
    1ab2:	4a07      	ldr	r2, [pc, #28]	; (1ad0 <api_blocking_start+0x34>)
    1ab4:	f004 fc70 	bl	6398 <api_start>
	if (err < 0) {
    1ab8:	2800      	cmp	r0, #0
    1aba:	db05      	blt.n	1ac8 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1abc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1ac0:	2300      	movs	r3, #0
    1ac2:	4668      	mov	r0, sp
    1ac4:	f002 fff6 	bl	4ab4 <z_impl_k_sem_take>
}
    1ac8:	b005      	add	sp, #20
    1aca:	f85d fb04 	ldr.w	pc, [sp], #4
    1ace:	bf00      	nop
    1ad0:	000063cd 	.word	0x000063cd

00001ad4 <lfclk_start>:
{
    1ad4:	b508      	push	{r3, lr}
	if (!once) {
    1ad6:	4b07      	ldr	r3, [pc, #28]	; (1af4 <lfclk_start+0x20>)
    1ad8:	781b      	ldrb	r3, [r3, #0]
    1ada:	b11b      	cbz	r3, 1ae4 <lfclk_start+0x10>
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1adc:	2000      	movs	r0, #0
    1ade:	f004 ffac 	bl	6a3a <nrfx_clock_start>
}
    1ae2:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    1ae4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1ae8:	f005 fbd4 	bl	7294 <z_impl_k_busy_wait>
		once = true;
    1aec:	4b01      	ldr	r3, [pc, #4]	; (1af4 <lfclk_start+0x20>)
    1aee:	2201      	movs	r2, #1
    1af0:	701a      	strb	r2, [r3, #0]
    1af2:	e7f3      	b.n	1adc <lfclk_start+0x8>
    1af4:	20000c77 	.word	0x20000c77

00001af8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1af8:	b570      	push	{r4, r5, r6, lr}
    1afa:	4605      	mov	r5, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1afc:	2200      	movs	r2, #0
    1afe:	2101      	movs	r1, #1
    1b00:	4610      	mov	r0, r2
    1b02:	f7ff fb97 	bl	1234 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1b06:	4813      	ldr	r0, [pc, #76]	; (1b54 <clk_init+0x5c>)
    1b08:	f001 fc46 	bl	3398 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1b0c:	4b12      	ldr	r3, [pc, #72]	; (1b58 <clk_init+0x60>)
    1b0e:	4298      	cmp	r0, r3
    1b10:	d11c      	bne.n	1b4c <clk_init+0x54>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    1b12:	6928      	ldr	r0, [r5, #16]
    1b14:	f000 f992 	bl	1e3c <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    1b18:	f004 ff80 	bl	6a1c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1b1c:	2400      	movs	r4, #0
    1b1e:	2c01      	cmp	r4, #1
    1b20:	d812      	bhi.n	1b48 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1b22:	4621      	mov	r1, r4
    1b24:	4628      	mov	r0, r5
    1b26:	f004 fb8c 	bl	6242 <get_sub_data>
    1b2a:	4606      	mov	r6, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b2c:	4621      	mov	r1, r4
    1b2e:	4628      	mov	r0, r5
    1b30:	f004 fb92 	bl	6258 <get_onoff_manager>
    1b34:	4909      	ldr	r1, [pc, #36]	; (1b5c <clk_init+0x64>)
    1b36:	f004 f902 	bl	5d3e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1b3a:	2800      	cmp	r0, #0
    1b3c:	db05      	blt.n	1b4a <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1b3e:	2301      	movs	r3, #1
    1b40:	60b3      	str	r3, [r6, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1b42:	441c      	add	r4, r3
    1b44:	b2e4      	uxtb	r4, r4
    1b46:	e7ea      	b.n	1b1e <clk_init+0x26>
	}

	return 0;
    1b48:	2000      	movs	r0, #0
}
    1b4a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1b4c:	f06f 0004 	mvn.w	r0, #4
    1b50:	e7fb      	b.n	1b4a <clk_init+0x52>
    1b52:	bf00      	nop
    1b54:	00001b61 	.word	0x00001b61
    1b58:	0bad0000 	.word	0x0bad0000
    1b5c:	0000763c 	.word	0x0000763c

00001b60 <clock_event_handler>:
{
    1b60:	b508      	push	{r3, lr}
	switch (event) {
    1b62:	2801      	cmp	r0, #1
    1b64:	d010      	beq.n	1b88 <clock_event_handler+0x28>
    1b66:	2803      	cmp	r0, #3
    1b68:	d015      	beq.n	1b96 <clock_event_handler+0x36>
    1b6a:	b100      	cbz	r0, 1b6e <clock_event_handler+0xe>
}
    1b6c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1b6e:	2100      	movs	r1, #0
    1b70:	480a      	ldr	r0, [pc, #40]	; (1b9c <clock_event_handler+0x3c>)
    1b72:	f004 fb66 	bl	6242 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b76:	6883      	ldr	r3, [r0, #8]
    1b78:	f013 0f07 	tst.w	r3, #7
    1b7c:	d1f6      	bne.n	1b6c <clock_event_handler+0xc>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1b7e:	2100      	movs	r1, #0
    1b80:	4806      	ldr	r0, [pc, #24]	; (1b9c <clock_event_handler+0x3c>)
    1b82:	f004 fbc1 	bl	6308 <clkstarted_handle>
    1b86:	e7f1      	b.n	1b6c <clock_event_handler+0xc>
			z_nrf_clock_calibration_lfclk_started();
    1b88:	f004 fc3f 	bl	640a <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b8c:	2101      	movs	r1, #1
    1b8e:	4803      	ldr	r0, [pc, #12]	; (1b9c <clock_event_handler+0x3c>)
    1b90:	f004 fbba 	bl	6308 <clkstarted_handle>
		break;
    1b94:	e7ea      	b.n	1b6c <clock_event_handler+0xc>
			z_nrf_clock_calibration_done_handler();
    1b96:	f000 f967 	bl	1e68 <z_nrf_clock_calibration_done_handler>
}
    1b9a:	e7e7      	b.n	1b6c <clock_event_handler+0xc>
    1b9c:	00007340 	.word	0x00007340

00001ba0 <lfclk_spinwait>:
{
    1ba0:	b570      	push	{r4, r5, r6, lr}
    1ba2:	4605      	mov	r5, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ba4:	f005 f8ef 	bl	6d86 <k_is_in_isr>
    1ba8:	b920      	cbnz	r0, 1bb4 <lfclk_spinwait+0x14>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1baa:	4b21      	ldr	r3, [pc, #132]	; (1c30 <lfclk_spinwait+0x90>)
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	b19b      	cbz	r3, 1bd8 <lfclk_spinwait+0x38>
    1bb0:	2300      	movs	r3, #0
    1bb2:	e000      	b.n	1bb6 <lfclk_spinwait+0x16>
    1bb4:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    1bb6:	461c      	mov	r4, r3
    1bb8:	b183      	cbz	r3, 1bdc <lfclk_spinwait+0x3c>
	__asm__ volatile(
    1bba:	f04f 0320 	mov.w	r3, #32
    1bbe:	f3ef 8611 	mrs	r6, BASEPRI
    1bc2:	f383 8812 	msr	BASEPRI_MAX, r3
    1bc6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    1bca:	b96c      	cbnz	r4, 1be8 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    1bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bd0:	2202      	movs	r2, #2
    1bd2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1bd6:	e007      	b.n	1be8 <lfclk_spinwait+0x48>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1bd8:	2301      	movs	r3, #1
    1bda:	e7ec      	b.n	1bb6 <lfclk_spinwait+0x16>
	int key = isr_mode ? irq_lock() : 0;
    1bdc:	2600      	movs	r6, #0
    1bde:	e7f4      	b.n	1bca <lfclk_spinwait+0x2a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1be0:	b1cc      	cbz	r4, 1c16 <lfclk_spinwait+0x76>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1be2:	4630      	mov	r0, r6
    1be4:	f7ff faec 	bl	11c0 <arch_cpu_atomic_idle>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1bec:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1bf0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1bf4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1bf8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    1bfc:	d110      	bne.n	1c20 <lfclk_spinwait+0x80>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
    1bfe:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1c00:	2a00      	cmp	r2, #0
    1c02:	d0ed      	beq.n	1be0 <lfclk_spinwait+0x40>
    1c04:	b10b      	cbz	r3, 1c0a <lfclk_spinwait+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1c06:	2d01      	cmp	r5, #1
    1c08:	d1ea      	bne.n	1be0 <lfclk_spinwait+0x40>
	if (isr_mode) {
    1c0a:	b15c      	cbz	r4, 1c24 <lfclk_spinwait+0x84>
	__asm__ volatile(
    1c0c:	f386 8811 	msr	BASEPRI, r6
    1c10:	f3bf 8f6f 	isb	sy
}
    1c14:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    1c16:	2021      	movs	r0, #33	; 0x21
    1c18:	2100      	movs	r1, #0
    1c1a:	f003 fc89 	bl	5530 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1c1e:	e7e3      	b.n	1be8 <lfclk_spinwait+0x48>
                return true;
    1c20:	2201      	movs	r2, #1
    1c22:	e7ed      	b.n	1c00 <lfclk_spinwait+0x60>
    p_reg->INTENSET = mask;
    1c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c28:	2202      	movs	r2, #2
    1c2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1c2e:	e7f1      	b.n	1c14 <lfclk_spinwait+0x74>
    1c30:	20000c79 	.word	0x20000c79

00001c34 <z_nrf_clock_control_get_onoff>:
{
    1c34:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    1c36:	b2c1      	uxtb	r1, r0
    1c38:	4801      	ldr	r0, [pc, #4]	; (1c40 <z_nrf_clock_control_get_onoff+0xc>)
    1c3a:	f004 fb0d 	bl	6258 <get_onoff_manager>
}
    1c3e:	bd08      	pop	{r3, pc}
    1c40:	00007340 	.word	0x00007340

00001c44 <z_nrf_clock_control_lf_on>:
{
    1c44:	b510      	push	{r4, lr}
    1c46:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c48:	4b10      	ldr	r3, [pc, #64]	; (1c8c <z_nrf_clock_control_lf_on+0x48>)
    1c4a:	2101      	movs	r1, #1
    1c4c:	f3bf 8f5b 	dmb	ish
    1c50:	e853 2f00 	ldrex	r2, [r3]
    1c54:	e843 1000 	strex	r0, r1, [r3]
    1c58:	2800      	cmp	r0, #0
    1c5a:	d1f9      	bne.n	1c50 <z_nrf_clock_control_lf_on+0xc>
    1c5c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c60:	b11a      	cbz	r2, 1c6a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1c62:	1e63      	subs	r3, r4, #1
    1c64:	2b01      	cmp	r3, #1
    1c66:	d90d      	bls.n	1c84 <z_nrf_clock_control_lf_on+0x40>
}
    1c68:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1c6a:	4809      	ldr	r0, [pc, #36]	; (1c90 <z_nrf_clock_control_lf_on+0x4c>)
    1c6c:	f004 faf4 	bl	6258 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c70:	4908      	ldr	r1, [pc, #32]	; (1c94 <z_nrf_clock_control_lf_on+0x50>)
    1c72:	2300      	movs	r3, #0
    1c74:	604b      	str	r3, [r1, #4]
    1c76:	608b      	str	r3, [r1, #8]
    1c78:	60cb      	str	r3, [r1, #12]
    1c7a:	2301      	movs	r3, #1
    1c7c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1c7e:	f004 f87b 	bl	5d78 <onoff_request>
    1c82:	e7ee      	b.n	1c62 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1c84:	4620      	mov	r0, r4
    1c86:	f7ff ff8b 	bl	1ba0 <lfclk_spinwait>
		break;
    1c8a:	e7ed      	b.n	1c68 <z_nrf_clock_control_lf_on+0x24>
    1c8c:	200006b8 	.word	0x200006b8
    1c90:	00007340 	.word	0x00007340
    1c94:	20000654 	.word	0x20000654

00001c98 <get_temperature>:
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
}

/* Function reads from temperature sensor and converts to 0.25'C units. */
static int get_temperature(int16_t *tvp)
{
    1c98:	b510      	push	{r4, lr}
    1c9a:	b082      	sub	sp, #8
    1c9c:	4604      	mov	r4, r0
	struct sensor_value sensor_val;
	int rc = sensor_sample_fetch(temp_sensor);
    1c9e:	4b0e      	ldr	r3, [pc, #56]	; (1cd8 <get_temperature+0x40>)
    1ca0:	6818      	ldr	r0, [r3, #0]
 */
__syscall int sensor_sample_fetch(const struct device *dev);

static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
    1ca2:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    1ca4:	68db      	ldr	r3, [r3, #12]
    1ca6:	2139      	movs	r1, #57	; 0x39
    1ca8:	4798      	blx	r3

	if (rc == 0) {
    1caa:	b930      	cbnz	r0, 1cba <get_temperature+0x22>
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    1cac:	4b0a      	ldr	r3, [pc, #40]	; (1cd8 <get_temperature+0x40>)
    1cae:	6818      	ldr	r0, [r3, #0]

static inline int z_impl_sensor_channel_get(const struct device *dev,
					    enum sensor_channel chan,
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
    1cb0:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    1cb2:	691b      	ldr	r3, [r3, #16]
    1cb4:	466a      	mov	r2, sp
    1cb6:	210c      	movs	r1, #12
    1cb8:	4798      	blx	r3
					&sensor_val);
	}
	if (rc == 0) {
    1cba:	b950      	cbnz	r0, 1cd2 <get_temperature+0x3a>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    1cbc:	9b01      	ldr	r3, [sp, #4]
    1cbe:	4a07      	ldr	r2, [pc, #28]	; (1cdc <get_temperature+0x44>)
    1cc0:	fb82 1203 	smull	r1, r2, r2, r3
    1cc4:	17db      	asrs	r3, r3, #31
    1cc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
    1cca:	9a00      	ldr	r2, [sp, #0]
    1ccc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		*tvp = sensor_value_to_temp_unit(&sensor_val);
    1cd0:	8023      	strh	r3, [r4, #0]
	}
	return rc;
}
    1cd2:	b002      	add	sp, #8
    1cd4:	bd10      	pop	{r4, pc}
    1cd6:	bf00      	nop
    1cd8:	200006d4 	.word	0x200006d4
    1cdc:	431bde83 	.word	0x431bde83

00001ce0 <hf_release>:
{
    1ce0:	b508      	push	{r3, lr}
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    1ce2:	4b02      	ldr	r3, [pc, #8]	; (1cec <hf_release+0xc>)
    1ce4:	6818      	ldr	r0, [r3, #0]
    1ce6:	f004 fb7d 	bl	63e4 <clk_release>
}
    1cea:	bd08      	pop	{r3, pc}
    1cec:	200006d0 	.word	0x200006d0

00001cf0 <start_cycle>:
{
    1cf0:	b500      	push	{lr}
    1cf2:	b083      	sub	sp, #12
	z_impl_k_timer_start(timer, duration, period);
    1cf4:	2200      	movs	r2, #0
    1cf6:	2300      	movs	r3, #0
    1cf8:	e9cd 2300 	strd	r2, r3, [sp]
    1cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1d00:	2300      	movs	r3, #0
    1d02:	4805      	ldr	r0, [pc, #20]	; (1d18 <start_cycle+0x28>)
    1d04:	f003 fe3e 	bl	5984 <z_impl_k_timer_start>
	hf_release();
    1d08:	f7ff ffea 	bl	1ce0 <hf_release>
	cal_process_in_progress = 0;
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <start_cycle+0x2c>)
    1d0e:	2200      	movs	r2, #0
    1d10:	601a      	str	r2, [r3, #0]
}
    1d12:	b003      	add	sp, #12
    1d14:	f85d fb04 	ldr.w	pc, [sp], #4
    1d18:	20000170 	.word	0x20000170
    1d1c:	200006bc 	.word	0x200006bc

00001d20 <start_hw_cal>:
{
    1d20:	b508      	push	{r3, lr}
	nrfx_clock_calibration_start();
    1d22:	f001 fb4d 	bl	33c0 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    1d26:	4b02      	ldr	r3, [pc, #8]	; (1d30 <start_hw_cal+0x10>)
    1d28:	2201      	movs	r2, #1
    1d2a:	701a      	strb	r2, [r3, #0]
}
    1d2c:	bd08      	pop	{r3, pc}
    1d2e:	bf00      	nop
    1d30:	20000c78 	.word	0x20000c78

00001d34 <cal_hf_callback>:
{
    1d34:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1d36:	4b05      	ldr	r3, [pc, #20]	; (1d4c <cal_hf_callback+0x18>)
    1d38:	681b      	ldr	r3, [r3, #0]
    1d3a:	b11b      	cbz	r3, 1d44 <cal_hf_callback+0x10>
		k_work_submit(&temp_measure_work);
    1d3c:	4804      	ldr	r0, [pc, #16]	; (1d50 <cal_hf_callback+0x1c>)
    1d3e:	f003 f803 	bl	4d48 <k_work_submit>
}
    1d42:	bd08      	pop	{r3, pc}
		start_hw_cal();
    1d44:	f7ff ffec 	bl	1d20 <start_hw_cal>
    1d48:	e7fb      	b.n	1d42 <cal_hf_callback+0xe>
    1d4a:	bf00      	nop
    1d4c:	200006d4 	.word	0x200006d4
    1d50:	2000000c 	.word	0x2000000c

00001d54 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
    1d54:	b500      	push	{lr}
    1d56:	b083      	sub	sp, #12
	int16_t temperature = 0;
    1d58:	2300      	movs	r3, #0
    1d5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	int16_t diff = 0;
	bool started = false;
	int rc;

	rc = get_temperature(&temperature);
    1d5e:	f10d 0006 	add.w	r0, sp, #6
    1d62:	f7ff ff99 	bl	1c98 <get_temperature>

	if (rc != 0) {
    1d66:	b180      	cbz	r0, 1d8a <measure_temperature+0x36>
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
    1d68:	2300      	movs	r3, #0
    1d6a:	4a12      	ldr	r2, [pc, #72]	; (1db4 <measure_temperature+0x60>)
    1d6c:	7013      	strb	r3, [r2, #0]
	} else {
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
    1d6e:	4a11      	ldr	r2, [pc, #68]	; (1db4 <measure_temperature+0x60>)
    1d70:	7812      	ldrb	r2, [r2, #0]
    1d72:	b10a      	cbz	r2, 1d78 <measure_temperature+0x24>
    1d74:	2b01      	cmp	r3, #1
    1d76:	dd13      	ble.n	1da0 <measure_temperature+0x4c>
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
    1d78:	4b0f      	ldr	r3, [pc, #60]	; (1db8 <measure_temperature+0x64>)
    1d7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    1d7e:	801a      	strh	r2, [r3, #0]
		started = true;
		start_hw_cal();
    1d80:	f7ff ffce 	bl	1d20 <start_hw_cal>
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
    1d84:	b003      	add	sp, #12
    1d86:	f85d fb04 	ldr.w	pc, [sp], #4
		diff = abs(temperature - prev_temperature);
    1d8a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    1d8e:	4a0a      	ldr	r2, [pc, #40]	; (1db8 <measure_temperature+0x64>)
    1d90:	f9b2 2000 	ldrsh.w	r2, [r2]
    1d94:	1a9b      	subs	r3, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    1d96:	2b00      	cmp	r3, #0
    1d98:	bfb8      	it	lt
    1d9a:	425b      	neglt	r3, r3
    1d9c:	b21b      	sxth	r3, r3
    1d9e:	e7e6      	b.n	1d6e <measure_temperature+0x1a>
		calib_skip_cnt--;
    1da0:	3a01      	subs	r2, #1
    1da2:	4b04      	ldr	r3, [pc, #16]	; (1db4 <measure_temperature+0x60>)
    1da4:	701a      	strb	r2, [r3, #0]
		total_skips_cnt++;
    1da6:	4a05      	ldr	r2, [pc, #20]	; (1dbc <measure_temperature+0x68>)
    1da8:	6813      	ldr	r3, [r2, #0]
    1daa:	3301      	adds	r3, #1
    1dac:	6013      	str	r3, [r2, #0]
		start_cycle();
    1dae:	f7ff ff9f 	bl	1cf0 <start_cycle>
}
    1db2:	e7e7      	b.n	1d84 <measure_temperature+0x30>
    1db4:	20000c78 	.word	0x20000c78
    1db8:	20000c74 	.word	0x20000c74
    1dbc:	200006dc 	.word	0x200006dc

00001dc0 <hf_request>:
{
    1dc0:	b508      	push	{r3, lr}
	clk_request(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK], &cli, cal_hf_callback);
    1dc2:	4a03      	ldr	r2, [pc, #12]	; (1dd0 <hf_request+0x10>)
    1dc4:	4903      	ldr	r1, [pc, #12]	; (1dd4 <hf_request+0x14>)
    1dc6:	4b04      	ldr	r3, [pc, #16]	; (1dd8 <hf_request+0x18>)
    1dc8:	6818      	ldr	r0, [r3, #0]
    1dca:	f004 fb0f 	bl	63ec <clk_request>
}
    1dce:	bd08      	pop	{r3, pc}
    1dd0:	00001d35 	.word	0x00001d35
    1dd4:	200006c0 	.word	0x200006c0
    1dd8:	200006d0 	.word	0x200006d0

00001ddc <start_cal_process>:
{
    1ddc:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1dde:	4b09      	ldr	r3, [pc, #36]	; (1e04 <start_cal_process+0x28>)
    1de0:	2201      	movs	r2, #1
    1de2:	f3bf 8f5b 	dmb	ish
    1de6:	e853 1f00 	ldrex	r1, [r3]
    1dea:	2900      	cmp	r1, #0
    1dec:	d103      	bne.n	1df6 <start_cal_process+0x1a>
    1dee:	e843 2000 	strex	r0, r2, [r3]
    1df2:	2800      	cmp	r0, #0
    1df4:	d1f7      	bne.n	1de6 <start_cal_process+0xa>
    1df6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    1dfa:	d101      	bne.n	1e00 <start_cal_process+0x24>
		hf_request();
    1dfc:	f7ff ffe0 	bl	1dc0 <hf_request>
}
    1e00:	bd08      	pop	{r3, pc}
    1e02:	bf00      	nop
    1e04:	200006bc 	.word	0x200006bc

00001e08 <start_unconditional_cal_process>:

SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
    1e08:	b508      	push	{r3, lr}
	calib_skip_cnt = 0;
    1e0a:	4b03      	ldr	r3, [pc, #12]	; (1e18 <start_unconditional_cal_process+0x10>)
    1e0c:	2200      	movs	r2, #0
    1e0e:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    1e10:	f7ff ffe4 	bl	1ddc <start_cal_process>
}
    1e14:	bd08      	pop	{r3, pc}
    1e16:	bf00      	nop
    1e18:	20000c78 	.word	0x20000c78

00001e1c <temp_sensor_init>:
{
    1e1c:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    1e1e:	4805      	ldr	r0, [pc, #20]	; (1e34 <temp_sensor_init+0x18>)
    1e20:	4b05      	ldr	r3, [pc, #20]	; (1e38 <temp_sensor_init+0x1c>)
    1e22:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1e24:	f004 ff6e 	bl	6d04 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    1e28:	b108      	cbz	r0, 1e2e <temp_sensor_init+0x12>
	return 0;
    1e2a:	2000      	movs	r0, #0
}
    1e2c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1e2e:	f06f 0012 	mvn.w	r0, #18
    1e32:	e7fb      	b.n	1e2c <temp_sensor_init+0x10>
    1e34:	000073a0 	.word	0x000073a0
    1e38:	200006d4 	.word	0x200006d4

00001e3c <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    1e3c:	4b03      	ldr	r3, [pc, #12]	; (1e4c <z_nrf_clock_calibration_init+0x10>)
    1e3e:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    1e40:	2300      	movs	r3, #0
    1e42:	4a03      	ldr	r2, [pc, #12]	; (1e50 <z_nrf_clock_calibration_init+0x14>)
    1e44:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    1e46:	4a03      	ldr	r2, [pc, #12]	; (1e54 <z_nrf_clock_calibration_init+0x18>)
    1e48:	6013      	str	r3, [r2, #0]
}
    1e4a:	4770      	bx	lr
    1e4c:	200006d0 	.word	0x200006d0
    1e50:	200006d8 	.word	0x200006d8
    1e54:	200006dc 	.word	0x200006dc

00001e58 <z_nrf_clock_calibration_lfclk_stopped>:
{
	start_unconditional_cal_process();
}

void z_nrf_clock_calibration_lfclk_stopped(void)
{
    1e58:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
    1e5a:	4802      	ldr	r0, [pc, #8]	; (1e64 <z_nrf_clock_calibration_lfclk_stopped+0xc>)
    1e5c:	f005 fa20 	bl	72a0 <z_impl_k_timer_stop>
	k_timer_stop(&backoff_timer);
	LOG_DBG("Calibration stopped");
}
    1e60:	bd08      	pop	{r3, pc}
    1e62:	bf00      	nop
    1e64:	20000170 	.word	0x20000170

00001e68 <z_nrf_clock_calibration_done_handler>:

void z_nrf_clock_calibration_done_handler(void)
{
    1e68:	b508      	push	{r3, lr}
	total_cnt++;
    1e6a:	4a03      	ldr	r2, [pc, #12]	; (1e78 <z_nrf_clock_calibration_done_handler+0x10>)
    1e6c:	6813      	ldr	r3, [r2, #0]
    1e6e:	3301      	adds	r3, #1
    1e70:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    1e72:	f7ff ff3d 	bl	1cf0 <start_cycle>
}
    1e76:	bd08      	pop	{r3, pc}
    1e78:	200006d8 	.word	0x200006d8

00001e7c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1e7c:	b510      	push	{r4, lr}
    1e7e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1e80:	280a      	cmp	r0, #10
    1e82:	d007      	beq.n	1e94 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1e84:	4b07      	ldr	r3, [pc, #28]	; (1ea4 <console_out+0x28>)
    1e86:	6818      	ldr	r0, [r3, #0]
    1e88:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1e8a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1e8c:	685b      	ldr	r3, [r3, #4]
    1e8e:	4798      	blx	r3

	return c;
}
    1e90:	4620      	mov	r0, r4
    1e92:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1e94:	4b03      	ldr	r3, [pc, #12]	; (1ea4 <console_out+0x28>)
    1e96:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1e98:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1e9a:	685b      	ldr	r3, [r3, #4]
    1e9c:	210d      	movs	r1, #13
    1e9e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1ea0:	e7f0      	b.n	1e84 <console_out+0x8>
    1ea2:	bf00      	nop
    1ea4:	200006e0 	.word	0x200006e0

00001ea8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1ea8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1eaa:	4c04      	ldr	r4, [pc, #16]	; (1ebc <uart_console_hook_install+0x14>)
    1eac:	4620      	mov	r0, r4
    1eae:	f7ff fd2f 	bl	1910 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1eb2:	4620      	mov	r0, r4
    1eb4:	f7fe faba 	bl	42c <__printk_hook_install>
#endif
}
    1eb8:	bd10      	pop	{r4, pc}
    1eba:	bf00      	nop
    1ebc:	00001e7d 	.word	0x00001e7d

00001ec0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ec0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1ec2:	4806      	ldr	r0, [pc, #24]	; (1edc <uart_console_init+0x1c>)
    1ec4:	4b06      	ldr	r3, [pc, #24]	; (1ee0 <uart_console_init+0x20>)
    1ec6:	6018      	str	r0, [r3, #0]
    1ec8:	f004 ff1c 	bl	6d04 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1ecc:	b118      	cbz	r0, 1ed6 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    1ece:	f7ff ffeb 	bl	1ea8 <uart_console_hook_install>

	return 0;
    1ed2:	2000      	movs	r0, #0
}
    1ed4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1ed6:	f06f 0012 	mvn.w	r0, #18
    1eda:	e7fb      	b.n	1ed4 <uart_console_init+0x14>
    1edc:	00007370 	.word	0x00007370
    1ee0:	200006e0 	.word	0x200006e0

00001ee4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ee4:	b908      	cbnz	r0, 1eea <get_dev+0x6>
    1ee6:	4802      	ldr	r0, [pc, #8]	; (1ef0 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1ee8:	4770      	bx	lr
	const struct device *dev = NULL;
    1eea:	2000      	movs	r0, #0
    1eec:	4770      	bx	lr
    1eee:	bf00      	nop
    1ef0:	00007358 	.word	0x00007358

00001ef4 <gpio_nrfx_pin_interrupt_configure>:
{
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	b085      	sub	sp, #20
    1ef8:	460e      	mov	r6, r1
    1efa:	4619      	mov	r1, r3
	return port->config;
    1efc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1efe:	7b1b      	ldrb	r3, [r3, #12]
    1f00:	f006 051f 	and.w	r5, r6, #31
    1f04:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f08:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1f0c:	d022      	beq.n	1f54 <gpio_nrfx_pin_interrupt_configure+0x60>
    1f0e:	4607      	mov	r7, r0
    1f10:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f12:	2300      	movs	r3, #0
    1f14:	9302      	str	r3, [sp, #8]
    1f16:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    1f18:	4610      	mov	r0, r2
    1f1a:	f004 faf3 	bl	6504 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f1e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    1f22:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1f24:	6899      	ldr	r1, [r3, #8]
    1f26:	40f1      	lsrs	r1, r6
    1f28:	f011 0f01 	tst.w	r1, #1
    1f2c:	d102      	bne.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
    1f2e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1f32:	d014      	beq.n	1f5e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1f34:	2300      	movs	r3, #0
    1f36:	aa02      	add	r2, sp, #8
    1f38:	4619      	mov	r1, r3
    1f3a:	4628      	mov	r0, r5
    1f3c:	f001 fc3e 	bl	37bc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1f40:	4b19      	ldr	r3, [pc, #100]	; (1fa8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    1f42:	4298      	cmp	r0, r3
    1f44:	d12c      	bne.n	1fa0 <gpio_nrfx_pin_interrupt_configure+0xac>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1f46:	2101      	movs	r1, #1
    1f48:	4628      	mov	r0, r5
    1f4a:	f001 fe01 	bl	3b50 <nrfx_gpiote_trigger_enable>
	return 0;
    1f4e:	2000      	movs	r0, #0
}
    1f50:	b005      	add	sp, #20
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1f54:	4628      	mov	r0, r5
    1f56:	f001 fe53 	bl	3c00 <nrfx_gpiote_trigger_disable>
		return 0;
    1f5a:	2000      	movs	r0, #0
    1f5c:	e7f8      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1f5e:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f6e:	f013 0f01 	tst.w	r3, #1
    1f72:	d1df      	bne.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1f74:	f10d 0107 	add.w	r1, sp, #7
    1f78:	4628      	mov	r0, r5
    1f7a:	f001 fd8d 	bl	3a98 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1f7e:	4b0b      	ldr	r3, [pc, #44]	; (1fac <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1f80:	4298      	cmp	r0, r3
    1f82:	d003      	beq.n	1f8c <gpio_nrfx_pin_interrupt_configure+0x98>
		trigger_config.p_in_channel = &ch;
    1f84:	f10d 0307 	add.w	r3, sp, #7
    1f88:	9303      	str	r3, [sp, #12]
    1f8a:	e7d3      	b.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    1f8c:	f10d 0007 	add.w	r0, sp, #7
    1f90:	f001 fdd6 	bl	3b40 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    1f96:	4298      	cmp	r0, r3
    1f98:	d0f4      	beq.n	1f84 <gpio_nrfx_pin_interrupt_configure+0x90>
				return -ENOMEM;
    1f9a:	f06f 000b 	mvn.w	r0, #11
    1f9e:	e7d7      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    1fa0:	f06f 0004 	mvn.w	r0, #4
    1fa4:	e7d4      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
    1fa6:	bf00      	nop
    1fa8:	0bad0000 	.word	0x0bad0000
    1fac:	0bad0004 	.word	0x0bad0004

00001fb0 <pin_uninit>:
{
    1fb0:	b530      	push	{r4, r5, lr}
    1fb2:	b083      	sub	sp, #12
    1fb4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    1fb6:	f10d 0107 	add.w	r1, sp, #7
    1fba:	f001 fd6d 	bl	3a98 <nrfx_gpiote_channel_get>
    1fbe:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    1fc0:	4620      	mov	r0, r4
    1fc2:	f001 fe47 	bl	3c54 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    1fc6:	4b0b      	ldr	r3, [pc, #44]	; (1ff4 <pin_uninit+0x44>)
    1fc8:	4298      	cmp	r0, r3
    1fca:	d10f      	bne.n	1fec <pin_uninit+0x3c>
	if (free_ch) {
    1fcc:	429d      	cmp	r5, r3
    1fce:	d005      	beq.n	1fdc <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1fd0:	4b08      	ldr	r3, [pc, #32]	; (1ff4 <pin_uninit+0x44>)
    1fd2:	4298      	cmp	r0, r3
    1fd4:	d107      	bne.n	1fe6 <pin_uninit+0x36>
    1fd6:	2000      	movs	r0, #0
}
    1fd8:	b003      	add	sp, #12
    1fda:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    1fdc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1fe0:	f001 fda6 	bl	3b30 <nrfx_gpiote_channel_free>
    1fe4:	e7f4      	b.n	1fd0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1fe6:	f06f 0004 	mvn.w	r0, #4
    1fea:	e7f5      	b.n	1fd8 <pin_uninit+0x28>
		return -EIO;
    1fec:	f06f 0004 	mvn.w	r0, #4
    1ff0:	e7f2      	b.n	1fd8 <pin_uninit+0x28>
    1ff2:	bf00      	nop
    1ff4:	0bad0000 	.word	0x0bad0000

00001ff8 <gpio_nrfx_pin_configure>:
{
    1ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ffc:	b087      	sub	sp, #28
	return port->config;
    1ffe:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2002:	f898 300c 	ldrb.w	r3, [r8, #12]
    2006:	f001 051f 	and.w	r5, r1, #31
    200a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    200e:	2a00      	cmp	r2, #0
    2010:	d044      	beq.n	209c <gpio_nrfx_pin_configure+0xa4>
    2012:	460c      	mov	r4, r1
    2014:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2016:	2600      	movs	r6, #0
    2018:	9603      	str	r6, [sp, #12]
    201a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    201c:	f10d 0117 	add.w	r1, sp, #23
    2020:	4620      	mov	r0, r4
    2022:	f001 fd39 	bl	3a98 <nrfx_gpiote_channel_get>
    2026:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2028:	4633      	mov	r3, r6
    202a:	aa03      	add	r2, sp, #12
    202c:	4631      	mov	r1, r6
    202e:	4628      	mov	r0, r5
    2030:	f001 fbc4 	bl	37bc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2034:	4b30      	ldr	r3, [pc, #192]	; (20f8 <gpio_nrfx_pin_configure+0x100>)
    2036:	4298      	cmp	r0, r3
    2038:	d15b      	bne.n	20f2 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    203a:	4599      	cmp	r9, r3
    203c:	d036      	beq.n	20ac <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    203e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    2042:	d043      	beq.n	20cc <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    2044:	f10d 0103 	add.w	r1, sp, #3
    2048:	4638      	mov	r0, r7
    204a:	f004 f9e2 	bl	6412 <get_drive>
		if (rv != 0) {
    204e:	4606      	mov	r6, r0
    2050:	bb40      	cbnz	r0, 20a4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    2052:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2056:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    205a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    205e:	bf0c      	ite	eq
    2060:	2301      	moveq	r3, #1
    2062:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2064:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2068:	4638      	mov	r0, r7
    206a:	f004 fa18 	bl	649e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    206e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2072:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    2076:	d01e      	beq.n	20b6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2078:	f8d8 3004 	ldr.w	r3, [r8, #4]
    207c:	2101      	movs	r1, #1
    207e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    2082:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2086:	2200      	movs	r2, #0
    2088:	a901      	add	r1, sp, #4
    208a:	4628      	mov	r0, r5
    208c:	f001 fc48 	bl	3920 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2090:	4b19      	ldr	r3, [pc, #100]	; (20f8 <gpio_nrfx_pin_configure+0x100>)
    2092:	4298      	cmp	r0, r3
    2094:	d006      	beq.n	20a4 <gpio_nrfx_pin_configure+0xac>
    2096:	f06f 0615 	mvn.w	r6, #21
    209a:	e003      	b.n	20a4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    209c:	4628      	mov	r0, r5
    209e:	f7ff ff87 	bl	1fb0 <pin_uninit>
    20a2:	4606      	mov	r6, r0
}
    20a4:	4630      	mov	r0, r6
    20a6:	b007      	add	sp, #28
    20a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    20ac:	f89d 0017 	ldrb.w	r0, [sp, #23]
    20b0:	f001 fd3e 	bl	3b30 <nrfx_gpiote_channel_free>
    20b4:	e7c3      	b.n	203e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    20b6:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    20ba:	d0e4      	beq.n	2086 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    20bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    20c0:	2301      	movs	r3, #1
    20c2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    20c6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    20ca:	e7dc      	b.n	2086 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    20cc:	4638      	mov	r0, r7
    20ce:	f004 f9e6 	bl	649e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    20d2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    20d6:	2300      	movs	r3, #0
    20d8:	461a      	mov	r2, r3
    20da:	a902      	add	r1, sp, #8
    20dc:	4628      	mov	r0, r5
    20de:	f001 fb6d 	bl	37bc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    20e2:	4b05      	ldr	r3, [pc, #20]	; (20f8 <gpio_nrfx_pin_configure+0x100>)
    20e4:	4298      	cmp	r0, r3
    20e6:	d101      	bne.n	20ec <gpio_nrfx_pin_configure+0xf4>
    20e8:	2600      	movs	r6, #0
    20ea:	e7db      	b.n	20a4 <gpio_nrfx_pin_configure+0xac>
    20ec:	f06f 0615 	mvn.w	r6, #21
    20f0:	e7d8      	b.n	20a4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    20f2:	f06f 0615 	mvn.w	r6, #21
    20f6:	e7d5      	b.n	20a4 <gpio_nrfx_pin_configure+0xac>
    20f8:	0bad0000 	.word	0x0bad0000

000020fc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    20fc:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    20fe:	f001 fd0d 	bl	3b1c <nrfx_gpiote_is_init>
    2102:	b108      	cbz	r0, 2108 <gpio_nrfx_init+0xc>
		return 0;
    2104:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2106:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2108:	f001 fcde 	bl	3ac8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <gpio_nrfx_init+0x34>)
    210e:	4298      	cmp	r0, r3
    2110:	d10a      	bne.n	2128 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2112:	2100      	movs	r1, #0
    2114:	4807      	ldr	r0, [pc, #28]	; (2134 <gpio_nrfx_init+0x38>)
    2116:	f001 fcb9 	bl	3a8c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    211a:	2200      	movs	r2, #0
    211c:	2105      	movs	r1, #5
    211e:	2006      	movs	r0, #6
    2120:	f7ff f888 	bl	1234 <z_arm_irq_priority_set>
	return 0;
    2124:	2000      	movs	r0, #0
    2126:	e7ee      	b.n	2106 <gpio_nrfx_init+0xa>
		return -EIO;
    2128:	f06f 0004 	mvn.w	r0, #4
    212c:	e7eb      	b.n	2106 <gpio_nrfx_init+0xa>
    212e:	bf00      	nop
    2130:	0bad0000 	.word	0x0bad0000
    2134:	000065a3 	.word	0x000065a3

00002138 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    2138:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    213a:	6843      	ldr	r3, [r0, #4]

	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    213c:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    213e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    2142:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2146:	f002 f901 	bl	434c <nrfx_twi_twim_bus_recover>
	scl_pin = dev_data->twim_config.scl;
	sda_pin = dev_data->twim_config.sda;
#endif

	err = nrfx_twim_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    214a:	4b04      	ldr	r3, [pc, #16]	; (215c <i2c_nrfx_twim_recover_bus+0x24>)
    214c:	4298      	cmp	r0, r3
    214e:	d101      	bne.n	2154 <i2c_nrfx_twim_recover_bus+0x1c>
    2150:	2000      	movs	r0, #0
}
    2152:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2154:	f06f 000f 	mvn.w	r0, #15
    2158:	e7fb      	b.n	2152 <i2c_nrfx_twim_recover_bus+0x1a>
    215a:	bf00      	nop
    215c:	0bad0000 	.word	0x0bad0000

00002160 <init_twim>:
{
    2160:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    2162:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    2164:	4623      	mov	r3, r4
    2166:	4a08      	ldr	r2, [pc, #32]	; (2188 <init_twim+0x28>)
    2168:	f104 0120 	add.w	r1, r4, #32
    216c:	6840      	ldr	r0, [r0, #4]
    216e:	f002 f81d 	bl	41ac <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    2172:	4b06      	ldr	r3, [pc, #24]	; (218c <init_twim+0x2c>)
    2174:	4298      	cmp	r0, r3
    2176:	d104      	bne.n	2182 <init_twim+0x22>
	dev_data->twim_initialized = true;
    2178:	2301      	movs	r3, #1
    217a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return 0;
    217e:	2000      	movs	r0, #0
}
    2180:	bd10      	pop	{r4, pc}
		return -EIO;
    2182:	f06f 0004 	mvn.w	r0, #4
    2186:	e7fb      	b.n	2180 <init_twim+0x20>
    2188:	0000239d 	.word	0x0000239d
    218c:	0bad0000 	.word	0x0bad0000

00002190 <i2c_nrfx_twim_transfer>:
{
    2190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2194:	b08f      	sub	sp, #60	; 0x3c
    2196:	9007      	str	r0, [sp, #28]
    2198:	4688      	mov	r8, r1
    219a:	4691      	mov	r9, r2
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    219c:	6901      	ldr	r1, [r0, #16]
    219e:	9103      	str	r1, [sp, #12]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    21a0:	6842      	ldr	r2, [r0, #4]
    21a2:	9202      	str	r2, [sp, #8]
	uint8_t *msg_buf = dev_data->msg_buf;
    21a4:	f8d1 a038 	ldr.w	sl, [r1, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    21a8:	8912      	ldrh	r2, [r2, #8]
    21aa:	9205      	str	r2, [sp, #20]
	nrfx_twim_xfer_desc_t cur_xfer = {
    21ac:	2200      	movs	r2, #0
    21ae:	9209      	str	r2, [sp, #36]	; 0x24
    21b0:	920a      	str	r2, [sp, #40]	; 0x28
    21b2:	920b      	str	r2, [sp, #44]	; 0x2c
    21b4:	920c      	str	r2, [sp, #48]	; 0x30
    21b6:	920d      	str	r2, [sp, #52]	; 0x34
    21b8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    21bc:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    21c0:	b923      	cbnz	r3, 21cc <i2c_nrfx_twim_transfer+0x3c>
    21c2:	f7ff ffcd 	bl	2160 <init_twim>
    21c6:	2800      	cmp	r0, #0
    21c8:	f2c0 80e1 	blt.w	238e <i2c_nrfx_twim_transfer+0x1fe>
	return z_impl_k_sem_take(sem, timeout);
    21cc:	f04f 32ff 	mov.w	r2, #4294967295
    21d0:	f04f 33ff 	mov.w	r3, #4294967295
    21d4:	9c03      	ldr	r4, [sp, #12]
    21d6:	4620      	mov	r0, r4
    21d8:	f002 fc6c 	bl	4ab4 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    21dc:	4623      	mov	r3, r4
    21de:	3310      	adds	r3, #16
    21e0:	4618      	mov	r0, r3
    21e2:	9306      	str	r3, [sp, #24]
    21e4:	2200      	movs	r2, #0
    21e6:	2300      	movs	r3, #0
    21e8:	f002 fc64 	bl	4ab4 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    21ec:	9802      	ldr	r0, [sp, #8]
    21ee:	f002 f827 	bl	4240 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    21f2:	2600      	movs	r6, #0
	uint16_t msg_buf_used = 0;
    21f4:	4634      	mov	r4, r6
	int ret = 0;
    21f6:	9604      	str	r6, [sp, #16]
	for (size_t i = 0; i < num_msgs; i++) {
    21f8:	e043      	b.n	2282 <i2c_nrfx_twim_transfer+0xf2>
				&& ((msgs[i].flags & I2C_MSG_READ)
    21fa:	2200      	movs	r2, #0
		if (concat_next || (msg_buf_used != 0)) {
    21fc:	9201      	str	r2, [sp, #4]
    21fe:	b90a      	cbnz	r2, 2204 <i2c_nrfx_twim_transfer+0x74>
    2200:	2c00      	cmp	r4, #0
    2202:	d06a      	beq.n	22da <i2c_nrfx_twim_transfer+0x14a>
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2204:	4620      	mov	r0, r4
    2206:	686a      	ldr	r2, [r5, #4]
    2208:	18a1      	adds	r1, r4, r2
    220a:	f8dd c014 	ldr.w	ip, [sp, #20]
    220e:	4561      	cmp	r1, ip
    2210:	f200 80b1 	bhi.w	2376 <i2c_nrfx_twim_transfer+0x1e6>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    2214:	f013 0f01 	tst.w	r3, #1
    2218:	d059      	beq.n	22ce <i2c_nrfx_twim_transfer+0x13e>
			msg_buf_used += msgs[i].len;
    221a:	686b      	ldr	r3, [r5, #4]
    221c:	441c      	add	r4, r3
    221e:	b2a4      	uxth	r4, r4
		if (concat_next) {
    2220:	9b01      	ldr	r3, [sp, #4]
    2222:	bb6b      	cbnz	r3, 2280 <i2c_nrfx_twim_transfer+0xf0>
		if (msg_buf_used == 0) {
    2224:	2c00      	cmp	r4, #0
    2226:	d16c      	bne.n	2302 <i2c_nrfx_twim_transfer+0x172>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2228:	f858 300b 	ldr.w	r3, [r8, fp]
    222c:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
    222e:	686b      	ldr	r3, [r5, #4]
    2230:	930a      	str	r3, [sp, #40]	; 0x28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2232:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2234:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2238:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    223c:	f013 0f02 	tst.w	r3, #2
    2240:	d063      	beq.n	230a <i2c_nrfx_twim_transfer+0x17a>
    2242:	2200      	movs	r2, #0
    2244:	a909      	add	r1, sp, #36	; 0x24
    2246:	9802      	ldr	r0, [sp, #8]
    2248:	f002 f866 	bl	4318 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    224c:	4b52      	ldr	r3, [pc, #328]	; (2398 <i2c_nrfx_twim_transfer+0x208>)
    224e:	4298      	cmp	r0, r3
    2250:	d15d      	bne.n	230e <i2c_nrfx_twim_transfer+0x17e>
    2252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2256:	2300      	movs	r3, #0
    2258:	9806      	ldr	r0, [sp, #24]
    225a:	f002 fc2b 	bl	4ab4 <z_impl_k_sem_take>
		if (ret != 0) {
    225e:	9004      	str	r0, [sp, #16]
    2260:	2800      	cmp	r0, #0
    2262:	d15f      	bne.n	2324 <i2c_nrfx_twim_transfer+0x194>
		res = dev_data->res;
    2264:	9b03      	ldr	r3, [sp, #12]
    2266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    2268:	4b4b      	ldr	r3, [pc, #300]	; (2398 <i2c_nrfx_twim_transfer+0x208>)
    226a:	429a      	cmp	r2, r3
    226c:	f040 808b 	bne.w	2386 <i2c_nrfx_twim_transfer+0x1f6>
		if ((msgs[i].flags & I2C_MSG_READ)
    2270:	7a2b      	ldrb	r3, [r5, #8]
    2272:	f013 0f01 	tst.w	r3, #1
    2276:	d002      	beq.n	227e <i2c_nrfx_twim_transfer+0xee>
		    && cur_xfer.p_primary_buf == msg_buf) {
    2278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    227a:	459a      	cmp	sl, r3
    227c:	d065      	beq.n	234a <i2c_nrfx_twim_transfer+0x1ba>
		msg_buf_used = 0;
    227e:	2400      	movs	r4, #0
    2280:	463e      	mov	r6, r7
	for (size_t i = 0; i < num_msgs; i++) {
    2282:	454e      	cmp	r6, r9
    2284:	d26d      	bcs.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2286:	eb06 0546 	add.w	r5, r6, r6, lsl #1
    228a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    228e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    2292:	7a2b      	ldrb	r3, [r5, #8]
    2294:	f013 0f08 	tst.w	r3, #8
    2298:	d160      	bne.n	235c <i2c_nrfx_twim_transfer+0x1cc>
		bool concat_next = ((i + 1) < num_msgs)
    229a:	1c77      	adds	r7, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    229c:	454f      	cmp	r7, r9
    229e:	d2ac      	bcs.n	21fa <i2c_nrfx_twim_transfer+0x6a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    22a0:	f013 0f02 	tst.w	r3, #2
    22a4:	d10d      	bne.n	22c2 <i2c_nrfx_twim_transfer+0x132>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    22a6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    22aa:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    22ae:	7a12      	ldrb	r2, [r2, #8]
    22b0:	f012 0f04 	tst.w	r2, #4
    22b4:	d107      	bne.n	22c6 <i2c_nrfx_twim_transfer+0x136>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    22b6:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    22b8:	f012 0f01 	tst.w	r2, #1
    22bc:	d005      	beq.n	22ca <i2c_nrfx_twim_transfer+0x13a>
    22be:	2200      	movs	r2, #0
    22c0:	e79c      	b.n	21fc <i2c_nrfx_twim_transfer+0x6c>
    22c2:	2200      	movs	r2, #0
    22c4:	e79a      	b.n	21fc <i2c_nrfx_twim_transfer+0x6c>
    22c6:	2200      	movs	r2, #0
    22c8:	e798      	b.n	21fc <i2c_nrfx_twim_transfer+0x6c>
    22ca:	2201      	movs	r2, #1
    22cc:	e796      	b.n	21fc <i2c_nrfx_twim_transfer+0x6c>
				memcpy(msg_buf + msg_buf_used,
    22ce:	f858 100b 	ldr.w	r1, [r8, fp]
    22d2:	4450      	add	r0, sl
    22d4:	f003 ff53 	bl	617e <memcpy>
    22d8:	e79f      	b.n	221a <i2c_nrfx_twim_transfer+0x8a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    22da:	f013 0f01 	tst.w	r3, #1
    22de:	d19f      	bne.n	2220 <i2c_nrfx_twim_transfer+0x90>
			   !nrfx_is_in_ram(msgs[i].buf)) {
    22e0:	f858 100b 	ldr.w	r1, [r8, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    22e4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    22e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    22ec:	d098      	beq.n	2220 <i2c_nrfx_twim_transfer+0x90>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    22ee:	686a      	ldr	r2, [r5, #4]
    22f0:	9b02      	ldr	r3, [sp, #8]
    22f2:	895b      	ldrh	r3, [r3, #10]
    22f4:	429a      	cmp	r2, r3
    22f6:	d842      	bhi.n	237e <i2c_nrfx_twim_transfer+0x1ee>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    22f8:	4650      	mov	r0, sl
    22fa:	f003 ff40 	bl	617e <memcpy>
			msg_buf_used = msgs[i].len;
    22fe:	88ac      	ldrh	r4, [r5, #4]
    2300:	e78e      	b.n	2220 <i2c_nrfx_twim_transfer+0x90>
			cur_xfer.p_primary_buf = msg_buf;
    2302:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
    2306:	940a      	str	r4, [sp, #40]	; 0x28
    2308:	e793      	b.n	2232 <i2c_nrfx_twim_transfer+0xa2>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    230a:	2220      	movs	r2, #32
    230c:	e79a      	b.n	2244 <i2c_nrfx_twim_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
    230e:	330b      	adds	r3, #11
    2310:	4298      	cmp	r0, r3
    2312:	d003      	beq.n	231c <i2c_nrfx_twim_transfer+0x18c>
				ret = -EIO;
    2314:	f06f 0304 	mvn.w	r3, #4
    2318:	9304      	str	r3, [sp, #16]
    231a:	e022      	b.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
    231c:	f06f 030f 	mvn.w	r3, #15
    2320:	9304      	str	r3, [sp, #16]
    2322:	e01e      	b.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
			nrfx_twim_disable(&dev_config->twim);
    2324:	9802      	ldr	r0, [sp, #8]
    2326:	f001 ff9b 	bl	4260 <nrfx_twim_disable>
			(void)i2c_nrfx_twim_recover_bus(dev);
    232a:	9807      	ldr	r0, [sp, #28]
    232c:	f7ff ff04 	bl	2138 <i2c_nrfx_twim_recover_bus>
			ret = -EIO;
    2330:	f06f 0304 	mvn.w	r3, #4
    2334:	9304      	str	r3, [sp, #16]
			break;
    2336:	e014      	b.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
				msg_buf_used -= msgs[j].len;
    2338:	1aa4      	subs	r4, r4, r2
    233a:	b2a4      	uxth	r4, r4
				memcpy(msgs[j].buf,
    233c:	eb0a 0104 	add.w	r1, sl, r4
    2340:	f858 0000 	ldr.w	r0, [r8, r0]
    2344:	f003 ff1b 	bl	617e <memcpy>
				j--;
    2348:	3e01      	subs	r6, #1
			while (msg_buf_used >= msgs[j].len) {
    234a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    234e:	0098      	lsls	r0, r3, #2
    2350:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    2354:	685a      	ldr	r2, [r3, #4]
    2356:	4294      	cmp	r4, r2
    2358:	d2ee      	bcs.n	2338 <i2c_nrfx_twim_transfer+0x1a8>
    235a:	e790      	b.n	227e <i2c_nrfx_twim_transfer+0xee>
			ret = -ENOTSUP;
    235c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    2360:	9304      	str	r3, [sp, #16]
	nrfx_twim_disable(&dev_config->twim);
    2362:	9802      	ldr	r0, [sp, #8]
    2364:	f001 ff7c 	bl	4260 <nrfx_twim_disable>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2368:	9803      	ldr	r0, [sp, #12]
    236a:	f002 fb7f 	bl	4a6c <z_impl_k_sem_give>
}
    236e:	9804      	ldr	r0, [sp, #16]
    2370:	b00f      	add	sp, #60	; 0x3c
    2372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOSPC;
    2376:	f06f 031b 	mvn.w	r3, #27
    237a:	9304      	str	r3, [sp, #16]
    237c:	e7f1      	b.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EINVAL;
    237e:	f06f 0315 	mvn.w	r3, #21
    2382:	9304      	str	r3, [sp, #16]
    2384:	e7ed      	b.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
			ret = -EIO;
    2386:	f06f 0304 	mvn.w	r3, #4
    238a:	9304      	str	r3, [sp, #16]
    238c:	e7e9      	b.n	2362 <i2c_nrfx_twim_transfer+0x1d2>
		return -EIO;
    238e:	f06f 0304 	mvn.w	r3, #4
    2392:	9304      	str	r3, [sp, #16]
    2394:	e7eb      	b.n	236e <i2c_nrfx_twim_transfer+0x1de>
    2396:	bf00      	nop
    2398:	0bad0000 	.word	0x0bad0000

0000239c <event_handler>:
{
    239c:	b508      	push	{r3, lr}
	switch (p_event->type) {
    239e:	7803      	ldrb	r3, [r0, #0]
    23a0:	2b01      	cmp	r3, #1
    23a2:	d00c      	beq.n	23be <event_handler+0x22>
    23a4:	2b02      	cmp	r3, #2
    23a6:	d00d      	beq.n	23c4 <event_handler+0x28>
    23a8:	b113      	cbz	r3, 23b0 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
    23aa:	4b08      	ldr	r3, [pc, #32]	; (23cc <event_handler+0x30>)
    23ac:	634b      	str	r3, [r1, #52]	; 0x34
		break;
    23ae:	e001      	b.n	23b4 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    23b0:	4b07      	ldr	r3, [pc, #28]	; (23d0 <event_handler+0x34>)
    23b2:	634b      	str	r3, [r1, #52]	; 0x34
	k_sem_give(&dev_data->completion_sync);
    23b4:	f101 0010 	add.w	r0, r1, #16
    23b8:	f002 fb58 	bl	4a6c <z_impl_k_sem_give>
}
    23bc:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    23be:	4b05      	ldr	r3, [pc, #20]	; (23d4 <event_handler+0x38>)
    23c0:	634b      	str	r3, [r1, #52]	; 0x34
		break;
    23c2:	e7f7      	b.n	23b4 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    23c4:	4b04      	ldr	r3, [pc, #16]	; (23d8 <event_handler+0x3c>)
    23c6:	634b      	str	r3, [r1, #52]	; 0x34
		break;
    23c8:	e7f4      	b.n	23b4 <event_handler+0x18>
    23ca:	bf00      	nop
    23cc:	0bad0001 	.word	0x0bad0001
    23d0:	0bad0000 	.word	0x0bad0000
    23d4:	0bae0001 	.word	0x0bae0001
    23d8:	0bae0002 	.word	0x0bae0002

000023dc <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    23dc:	4b01      	ldr	r3, [pc, #4]	; (23e4 <hfclk_on_callback+0x8>)
    23de:	2201      	movs	r2, #1
    23e0:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    23e2:	4770      	bx	lr
    23e4:	4000c000 	.word	0x4000c000

000023e8 <temp_nrf5_channel_get>:

static int temp_nrf5_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	struct temp_nrf5_data *data = dev->data;
    23e8:	6903      	ldr	r3, [r0, #16]
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    23ea:	290c      	cmp	r1, #12
    23ec:	d110      	bne.n	2410 <temp_nrf5_channel_get+0x28>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    23ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23f0:	4909      	ldr	r1, [pc, #36]	; (2418 <temp_nrf5_channel_get+0x30>)
    23f2:	fb01 f303 	mul.w	r3, r1, r3
	val->val1 = uval / 1000000;
    23f6:	4809      	ldr	r0, [pc, #36]	; (241c <temp_nrf5_channel_get+0x34>)
    23f8:	fb80 1003 	smull	r1, r0, r0, r3
    23fc:	17d9      	asrs	r1, r3, #31
    23fe:	ebc1 41a0 	rsb	r1, r1, r0, asr #18
    2402:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    2404:	4806      	ldr	r0, [pc, #24]	; (2420 <temp_nrf5_channel_get+0x38>)
    2406:	fb00 3311 	mls	r3, r0, r1, r3
    240a:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    240c:	2000      	movs	r0, #0
    240e:	4770      	bx	lr
		return -ENOTSUP;
    2410:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2414:	4770      	bx	lr
    2416:	bf00      	nop
    2418:	0003d090 	.word	0x0003d090
    241c:	431bde83 	.word	0x431bde83
    2420:	000f4240 	.word	0x000f4240

00002424 <temp_nrf5_sample_fetch>:
{
    2424:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    2428:	b084      	sub	sp, #16
	struct temp_nrf5_data *data = dev->data;
    242a:	6904      	ldr	r4, [r0, #16]
	if (data->clk_mgr == NULL) {
    242c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    242e:	b37b      	cbz	r3, 2490 <temp_nrf5_sample_fetch+0x6c>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    2430:	2939      	cmp	r1, #57	; 0x39
    2432:	d001      	beq.n	2438 <temp_nrf5_sample_fetch+0x14>
    2434:	290c      	cmp	r1, #12
    2436:	d12e      	bne.n	2496 <temp_nrf5_sample_fetch+0x72>
	k_mutex_lock(&data->mutex, K_FOREVER);
    2438:	f104 0610 	add.w	r6, r4, #16
    243c:	f04f 38ff 	mov.w	r8, #4294967295
    2440:	f04f 39ff 	mov.w	r9, #4294967295
	return z_impl_k_mutex_lock(mutex, timeout);
    2444:	4642      	mov	r2, r8
    2446:	464b      	mov	r3, r9
    2448:	4630      	mov	r0, r6
    244a:	f002 fa41 	bl	48d0 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    244e:	2500      	movs	r5, #0
    2450:	9501      	str	r5, [sp, #4]
    2452:	9502      	str	r5, [sp, #8]
    2454:	9503      	str	r5, [sp, #12]
    2456:	4b11      	ldr	r3, [pc, #68]	; (249c <temp_nrf5_sample_fetch+0x78>)
    2458:	9301      	str	r3, [sp, #4]
    245a:	2303      	movs	r3, #3
    245c:	9302      	str	r3, [sp, #8]
	r = onoff_request(data->clk_mgr, &cli);
    245e:	4669      	mov	r1, sp
    2460:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2462:	f003 fc89 	bl	5d78 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    2466:	4642      	mov	r2, r8
    2468:	464b      	mov	r3, r9
    246a:	4620      	mov	r0, r4
    246c:	f002 fb22 	bl	4ab4 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    2470:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2472:	f003 fcdd 	bl	5e30 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    2476:	4b0a      	ldr	r3, [pc, #40]	; (24a0 <temp_nrf5_sample_fetch+0x7c>)
    2478:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    247c:	6262      	str	r2, [r4, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    247e:	2201      	movs	r2, #1
    2480:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    2482:	4630      	mov	r0, r6
    2484:	f002 faae 	bl	49e4 <z_impl_k_mutex_unlock>
	return 0;
    2488:	4628      	mov	r0, r5
}
    248a:	b004      	add	sp, #16
    248c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return -EAGAIN;
    2490:	f06f 000a 	mvn.w	r0, #10
    2494:	e7f9      	b.n	248a <temp_nrf5_sample_fetch+0x66>
		return -ENOTSUP;
    2496:	f06f 0085 	mvn.w	r0, #133	; 0x85
    249a:	e7f6      	b.n	248a <temp_nrf5_sample_fetch+0x66>
    249c:	000023dd 	.word	0x000023dd
    24a0:	4000c000 	.word	0x4000c000

000024a4 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    24a4:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    24a6:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    24a8:	2000      	movs	r0, #0
    24aa:	f7ff fbc3 	bl	1c34 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    24ae:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    24b0:	f04f 32ff 	mov.w	r2, #4294967295
    24b4:	2100      	movs	r1, #0
    24b6:	4620      	mov	r0, r4
    24b8:	f004 fcbf 	bl	6e3a <z_impl_k_sem_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);
    24bc:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_mutex_init(mutex);
    24c0:	f004 fcb4 	bl	6e2c <z_impl_k_mutex_init>

	IRQ_CONNECT(
    24c4:	2200      	movs	r2, #0
    24c6:	2101      	movs	r1, #1
    24c8:	200c      	movs	r0, #12
    24ca:	f7fe feb3 	bl	1234 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    24ce:	200c      	movs	r0, #12
    24d0:	f7fe fe80 	bl	11d4 <arch_irq_enable>
    p_reg->INTENSET = mask;
    24d4:	4b02      	ldr	r3, [pc, #8]	; (24e0 <temp_nrf5_init+0x3c>)
    24d6:	2201      	movs	r2, #1
    24d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    24dc:	2000      	movs	r0, #0
    24de:	bd10      	pop	{r4, pc}
    24e0:	4000c000 	.word	0x4000c000

000024e4 <temp_nrf5_isr>:
{
    24e4:	b508      	push	{r3, lr}
	struct temp_nrf5_data *data = dev->data;
    24e6:	6900      	ldr	r0, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    24e8:	4b04      	ldr	r3, [pc, #16]	; (24fc <temp_nrf5_isr+0x18>)
    24ea:	2200      	movs	r2, #0
    24ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    24f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    24f4:	f002 faba 	bl	4a6c <z_impl_k_sem_give>
}
    24f8:	bd08      	pop	{r3, pc}
    24fa:	bf00      	nop
    24fc:	4000c000 	.word	0x4000c000

00002500 <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2500:	4b03      	ldr	r3, [pc, #12]	; (2510 <event_txdrdy_check+0x10>)
    2502:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
#endif
	       );
}
    2506:	3800      	subs	r0, #0
    2508:	bf18      	it	ne
    250a:	2001      	movne	r0, #1
    250c:	4770      	bx	lr
    250e:	bf00      	nop
    2510:	40002000 	.word	0x40002000

00002514 <event_txdrdy_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2514:	4b03      	ldr	r3, [pc, #12]	; (2524 <event_txdrdy_clear+0x10>)
    2516:	2200      	movs	r2, #0
    2518:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    251c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
{
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_TXDRDY);
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	uart_sw_event_txdrdy = 0U;
#endif
}
    2520:	4770      	bx	lr
    2522:	bf00      	nop
    2524:	40002000 	.word	0x40002000

00002528 <baudrate_set>:

static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uart_baudrate_t nrf_baudrate; /* calculated baudrate divisor */

	switch (baudrate) {
    2528:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    252c:	d06d      	beq.n	260a <baudrate_set+0xe2>
    252e:	d83b      	bhi.n	25a8 <baudrate_set+0x80>
    2530:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2534:	d06b      	beq.n	260e <baudrate_set+0xe6>
    2536:	d90a      	bls.n	254e <baudrate_set+0x26>
    2538:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    253c:	d072      	beq.n	2624 <baudrate_set+0xfc>
    253e:	d925      	bls.n	258c <baudrate_set+0x64>
    2540:	f647 2312 	movw	r3, #31250	; 0x7a12
    2544:	4299      	cmp	r1, r3
    2546:	d12c      	bne.n	25a2 <baudrate_set+0x7a>
		break;
	case 28800:
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2548:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    254c:	e013      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    254e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2552:	d05e      	beq.n	2612 <baudrate_set+0xea>
    2554:	d907      	bls.n	2566 <baudrate_set+0x3e>
    2556:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    255a:	d060      	beq.n	261e <baudrate_set+0xf6>
    255c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2560:	d111      	bne.n	2586 <baudrate_set+0x5e>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2562:	4b3a      	ldr	r3, [pc, #232]	; (264c <baudrate_set+0x124>)
    2564:	e007      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    2566:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    256a:	d055      	beq.n	2618 <baudrate_set+0xf0>
    256c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2570:	d106      	bne.n	2580 <baudrate_set+0x58>
		nrf_baudrate = 0x00027000;
    2572:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2576:	4a36      	ldr	r2, [pc, #216]	; (2650 <baudrate_set+0x128>)
    2578:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uart_baudrate_set(uart0_addr, nrf_baudrate);

	return 0;
    257c:	2000      	movs	r0, #0
    257e:	4770      	bx	lr
	switch (baudrate) {
    2580:	f06f 0015 	mvn.w	r0, #21
    2584:	4770      	bx	lr
    2586:	f06f 0015 	mvn.w	r0, #21
    258a:	4770      	bx	lr
    258c:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2590:	d04a      	beq.n	2628 <baudrate_set+0x100>
    2592:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2596:	d101      	bne.n	259c <baudrate_set+0x74>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2598:	4b2e      	ldr	r3, [pc, #184]	; (2654 <baudrate_set+0x12c>)
    259a:	e7ec      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    259c:	f06f 0015 	mvn.w	r0, #21
    25a0:	4770      	bx	lr
    25a2:	f06f 0015 	mvn.w	r0, #21
    25a6:	4770      	bx	lr
    25a8:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    25ac:	d03f      	beq.n	262e <baudrate_set+0x106>
    25ae:	d909      	bls.n	25c4 <baudrate_set+0x9c>
    25b0:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    25b4:	d042      	beq.n	263c <baudrate_set+0x114>
    25b6:	d91d      	bls.n	25f4 <baudrate_set+0xcc>
    25b8:	4b27      	ldr	r3, [pc, #156]	; (2658 <baudrate_set+0x130>)
    25ba:	4299      	cmp	r1, r3
    25bc:	d143      	bne.n	2646 <baudrate_set+0x11e>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    25be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    25c2:	e7d8      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    25c4:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    25c8:	d033      	beq.n	2632 <baudrate_set+0x10a>
    25ca:	d904      	bls.n	25d6 <baudrate_set+0xae>
    25cc:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    25d0:	d10d      	bne.n	25ee <baudrate_set+0xc6>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    25d2:	4b22      	ldr	r3, [pc, #136]	; (265c <baudrate_set+0x134>)
    25d4:	e7cf      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    25d6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    25da:	4299      	cmp	r1, r3
    25dc:	d02b      	beq.n	2636 <baudrate_set+0x10e>
    25de:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    25e2:	d101      	bne.n	25e8 <baudrate_set+0xc0>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    25e4:	4b1e      	ldr	r3, [pc, #120]	; (2660 <baudrate_set+0x138>)
    25e6:	e7c6      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    25e8:	f06f 0015 	mvn.w	r0, #21
    25ec:	4770      	bx	lr
    25ee:	f06f 0015 	mvn.w	r0, #21
    25f2:	4770      	bx	lr
    25f4:	4b1b      	ldr	r3, [pc, #108]	; (2664 <baudrate_set+0x13c>)
    25f6:	4299      	cmp	r1, r3
    25f8:	d022      	beq.n	2640 <baudrate_set+0x118>
    25fa:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    25fe:	d101      	bne.n	2604 <baudrate_set+0xdc>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2600:	4b19      	ldr	r3, [pc, #100]	; (2668 <baudrate_set+0x140>)
    2602:	e7b8      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    2604:	f06f 0015 	mvn.w	r0, #21
    2608:	4770      	bx	lr
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    260a:	4b18      	ldr	r3, [pc, #96]	; (266c <baudrate_set+0x144>)
    260c:	e7b3      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    260e:	4b18      	ldr	r3, [pc, #96]	; (2670 <baudrate_set+0x148>)
    2610:	e7b1      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2612:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2616:	e7ae      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    2618:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    261c:	e7ab      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    261e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2622:	e7a8      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2624:	4b13      	ldr	r3, [pc, #76]	; (2674 <baudrate_set+0x14c>)
    2626:	e7a6      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    2628:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    262c:	e7a3      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    262e:	4b12      	ldr	r3, [pc, #72]	; (2678 <baudrate_set+0x150>)
    2630:	e7a1      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2632:	4b12      	ldr	r3, [pc, #72]	; (267c <baudrate_set+0x154>)
    2634:	e79f      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2636:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    263a:	e79c      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    263c:	4b10      	ldr	r3, [pc, #64]	; (2680 <baudrate_set+0x158>)
    263e:	e79a      	b.n	2576 <baudrate_set+0x4e>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2640:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2644:	e797      	b.n	2576 <baudrate_set+0x4e>
	switch (baudrate) {
    2646:	f06f 0015 	mvn.w	r0, #21
}
    264a:	4770      	bx	lr
    264c:	0013b000 	.word	0x0013b000
    2650:	40002000 	.word	0x40002000
    2654:	004ea000 	.word	0x004ea000
    2658:	000f4240 	.word	0x000f4240
    265c:	01d7e000 	.word	0x01d7e000
    2660:	00ebf000 	.word	0x00ebf000
    2664:	0003d090 	.word	0x0003d090
    2668:	075f7000 	.word	0x075f7000
    266c:	009d5000 	.word	0x009d5000
    2670:	00275000 	.word	0x00275000
    2674:	0075f000 	.word	0x0075f000
    2678:	03afb000 	.word	0x03afb000
    267c:	013a9000 	.word	0x013a9000
    2680:	0ebed000 	.word	0x0ebed000

00002684 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2684:	4b08      	ldr	r3, [pc, #32]	; (26a8 <uart_nrfx_poll_in+0x24>)
    2686:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    268a:	b14b      	cbz	r3, 26a0 <uart_nrfx_poll_in+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    268c:	4b06      	ldr	r3, [pc, #24]	; (26a8 <uart_nrfx_poll_in+0x24>)
    268e:	2000      	movs	r0, #0
    2690:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    2694:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    return p_reg->RXD;
    2698:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518

	/* Clear the interrupt */
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);
    269c:	700b      	strb	r3, [r1, #0]

	return 0;
    269e:	4770      	bx	lr
		return -1;
    26a0:	f04f 30ff 	mov.w	r0, #4294967295
}
    26a4:	4770      	bx	lr
    26a6:	bf00      	nop
    26a8:	40002000 	.word	0x40002000

000026ac <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    26ac:	4b02      	ldr	r3, [pc, #8]	; (26b8 <uart_nrfx_err_check+0xc>)
    26ae:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    26b2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    26b6:	4770      	bx	lr
    26b8:	40002000 	.word	0x40002000

000026bc <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    26bc:	b530      	push	{r4, r5, lr}
    26be:	b083      	sub	sp, #12
	struct uart_nrfx_data *data = dev->data;
    26c0:	6905      	ldr	r5, [r0, #16]
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    26c2:	794b      	ldrb	r3, [r1, #5]
    26c4:	2b01      	cmp	r3, #1
    26c6:	d129      	bne.n	271c <uart_nrfx_configure+0x60>
    26c8:	460c      	mov	r4, r1
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    26ca:	798b      	ldrb	r3, [r1, #6]
    26cc:	2b03      	cmp	r3, #3
    26ce:	d128      	bne.n	2722 <uart_nrfx_configure+0x66>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    26d0:	79cb      	ldrb	r3, [r1, #7]
    26d2:	b123      	cbz	r3, 26de <uart_nrfx_configure+0x22>
		} else {
			return -ENOTSUP;
		}
		break;
	default:
		return -ENOTSUP;
    26d4:	f06f 0385 	mvn.w	r3, #133	; 0x85
	nrf_uart_configure(uart0_addr, &uart_cfg);

	data->uart_config = *cfg;

	return 0;
}
    26d8:	4618      	mov	r0, r3
    26da:	b003      	add	sp, #12
    26dc:	bd30      	pop	{r4, r5, pc}
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
    26de:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    26e2:	790b      	ldrb	r3, [r1, #4]
    26e4:	b123      	cbz	r3, 26f0 <uart_nrfx_configure+0x34>
    26e6:	2b02      	cmp	r3, #2
    26e8:	d014      	beq.n	2714 <uart_nrfx_configure+0x58>
    26ea:	f06f 0385 	mvn.w	r3, #133	; 0x85
    26ee:	e7f3      	b.n	26d8 <uart_nrfx_configure+0x1c>
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
    26f0:	2300      	movs	r3, #0
    26f2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    26f6:	6821      	ldr	r1, [r4, #0]
    26f8:	f7ff ff16 	bl	2528 <baudrate_set>
    26fc:	4603      	mov	r3, r0
    26fe:	b998      	cbnz	r0, 2728 <uart_nrfx_configure+0x6c>
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2700:	f89d 1005 	ldrb.w	r1, [sp, #5]
    2704:	4a0a      	ldr	r2, [pc, #40]	; (2730 <uart_nrfx_configure+0x74>)
    2706:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
	data->uart_config = *cfg;
    270a:	e894 0003 	ldmia.w	r4, {r0, r1}
    270e:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    2712:	e7e1      	b.n	26d8 <uart_nrfx_configure+0x1c>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    2714:	230e      	movs	r3, #14
    2716:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    271a:	e7ec      	b.n	26f6 <uart_nrfx_configure+0x3a>
		return -ENOTSUP;
    271c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    2720:	e7da      	b.n	26d8 <uart_nrfx_configure+0x1c>
		return -ENOTSUP;
    2722:	f06f 0385 	mvn.w	r3, #133	; 0x85
    2726:	e7d7      	b.n	26d8 <uart_nrfx_configure+0x1c>
		return -ENOTSUP;
    2728:	f06f 0385 	mvn.w	r3, #133	; 0x85
    272c:	e7d4      	b.n	26d8 <uart_nrfx_configure+0x1c>
    272e:	bf00      	nop
    2730:	40002000 	.word	0x40002000

00002734 <uart_nrfx_poll_out>:
{
    2734:	b538      	push	{r3, r4, r5, lr}
    2736:	460c      	mov	r4, r1
	if (!k_is_in_isr()) {
    2738:	f004 fb25 	bl	6d86 <k_is_in_isr>
    273c:	b9c0      	cbnz	r0, 2770 <uart_nrfx_poll_out+0x3c>
		uint8_t safety_cnt = 100;
    273e:	2564      	movs	r5, #100	; 0x64
    2740:	4b19      	ldr	r3, [pc, #100]	; (27a8 <uart_nrfx_poll_out+0x74>)
    2742:	2201      	movs	r2, #1
    2744:	f3bf 8f5b 	dmb	ish
    2748:	e853 1f00 	ldrex	r1, [r3]
    274c:	2900      	cmp	r1, #0
    274e:	d103      	bne.n	2758 <uart_nrfx_poll_out+0x24>
    2750:	e843 2000 	strex	r0, r2, [r3]
    2754:	2800      	cmp	r0, #0
    2756:	d1f7      	bne.n	2748 <uart_nrfx_poll_out+0x14>
    2758:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    275c:	d00b      	beq.n	2776 <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
    275e:	2021      	movs	r0, #33	; 0x21
    2760:	2100      	movs	r1, #0
    2762:	f002 fee5 	bl	5530 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    2766:	3d01      	subs	r5, #1
    2768:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    276c:	d1e8      	bne.n	2740 <uart_nrfx_poll_out+0xc>
    276e:	e002      	b.n	2776 <uart_nrfx_poll_out+0x42>
		*lock = 1;
    2770:	4b0d      	ldr	r3, [pc, #52]	; (27a8 <uart_nrfx_poll_out+0x74>)
    2772:	2201      	movs	r2, #1
    2774:	601a      	str	r2, [r3, #0]
	event_txdrdy_clear();
    2776:	f7ff fecd 	bl	2514 <event_txdrdy_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    277a:	4b0c      	ldr	r3, [pc, #48]	; (27ac <uart_nrfx_poll_out+0x78>)
    277c:	2201      	movs	r2, #1
    277e:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
    2780:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    2784:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2788:	f7ff feba 	bl	2500 <event_txdrdy_check>
    278c:	b920      	cbnz	r0, 2798 <uart_nrfx_poll_out+0x64>
    278e:	2001      	movs	r0, #1
    2790:	f004 f92d 	bl	69ee <nrfx_busy_wait>
    2794:	3c01      	subs	r4, #1
    2796:	d1f7      	bne.n	2788 <uart_nrfx_poll_out+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2798:	4b04      	ldr	r3, [pc, #16]	; (27ac <uart_nrfx_poll_out+0x78>)
    279a:	2201      	movs	r2, #1
    279c:	60da      	str	r2, [r3, #12]
	*lock = 0;
    279e:	4b02      	ldr	r3, [pc, #8]	; (27a8 <uart_nrfx_poll_out+0x74>)
    27a0:	2200      	movs	r2, #0
    27a2:	601a      	str	r2, [r3, #0]
}
    27a4:	bd38      	pop	{r3, r4, r5, pc}
    27a6:	bf00      	nop
    27a8:	2000072c 	.word	0x2000072c
    27ac:	40002000 	.word	0x40002000

000027b0 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	b082      	sub	sp, #8
    27b4:	4604      	mov	r4, r0
	struct uart_nrfx_data *data = dev->data;
    27b6:	6906      	ldr	r6, [r0, #16]
	int err;
#ifdef CONFIG_PINCTRL
	const struct uart_nrfx_config *config = dev->config;
    27b8:	6843      	ldr	r3, [r0, #4]
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    27ba:	2100      	movs	r1, #0
    27bc:	4a11      	ldr	r2, [pc, #68]	; (2804 <uart_nrfx_init+0x54>)
    27be:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
#endif /* CONFIG_PINCTRL */

	nrf_uart_disable(uart0_addr);

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
    27c2:	681d      	ldr	r5, [r3, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    27c4:	aa01      	add	r2, sp, #4
    27c6:	4628      	mov	r0, r5
    27c8:	f003 ffdd 	bl	6786 <pinctrl_lookup_state>
	if (ret < 0) {
    27cc:	2800      	cmp	r0, #0
    27ce:	db05      	blt.n	27dc <uart_nrfx_init+0x2c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    27d0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    27d2:	682a      	ldr	r2, [r5, #0]
    27d4:	7919      	ldrb	r1, [r3, #4]
    27d6:	6818      	ldr	r0, [r3, #0]
    27d8:	f000 fa64 	bl	2ca4 <pinctrl_configure_pins>
	if (err < 0) {
    27dc:	2800      	cmp	r0, #0
    27de:	db0f      	blt.n	2800 <uart_nrfx_init+0x50>
#else
	uart_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &data->uart_config);
    27e0:	4631      	mov	r1, r6
    27e2:	4620      	mov	r0, r4
    27e4:	f7ff ff6a 	bl	26bc <uart_nrfx_configure>
	if (err) {
    27e8:	b950      	cbnz	r0, 2800 <uart_nrfx_init+0x50>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    27ea:	4b06      	ldr	r3, [pc, #24]	; (2804 <uart_nrfx_init+0x54>)
    27ec:	2204      	movs	r2, #4
    27ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27f2:	2200      	movs	r2, #0
    27f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    27f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27fc:	2201      	movs	r2, #1
    27fe:	601a      	str	r2, [r3, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    2800:	b002      	add	sp, #8
    2802:	bd70      	pop	{r4, r5, r6, pc}
    2804:	40002000 	.word	0x40002000

00002808 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2808:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    280c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2810:	4b01      	ldr	r3, [pc, #4]	; (2818 <set_comparator+0x10>)
    2812:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2816:	4770      	bx	lr
    2818:	40011000 	.word	0x40011000

0000281c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    281c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2820:	4b01      	ldr	r3, [pc, #4]	; (2828 <get_comparator+0xc>)
    2822:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2826:	4770      	bx	lr
    2828:	40011000 	.word	0x40011000

0000282c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    282c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2830:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2832:	4a02      	ldr	r2, [pc, #8]	; (283c <event_enable+0x10>)
    2834:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2838:	4770      	bx	lr
    283a:	bf00      	nop
    283c:	40011000 	.word	0x40011000

00002840 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2844:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2846:	4a02      	ldr	r2, [pc, #8]	; (2850 <event_disable+0x10>)
    2848:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    284c:	4770      	bx	lr
    284e:	bf00      	nop
    2850:	40011000 	.word	0x40011000

00002854 <counter>:
     return p_reg->COUNTER;
    2854:	4b01      	ldr	r3, [pc, #4]	; (285c <counter+0x8>)
    2856:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    285a:	4770      	bx	lr
    285c:	40011000 	.word	0x40011000

00002860 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2860:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2862:	2301      	movs	r3, #1
    2864:	4083      	lsls	r3, r0
    2866:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    286a:	4a10      	ldr	r2, [pc, #64]	; (28ac <compare_int_lock+0x4c>)
    286c:	f3bf 8f5b 	dmb	ish
    2870:	e852 1f00 	ldrex	r1, [r2]
    2874:	ea01 0e0c 	and.w	lr, r1, ip
    2878:	e842 e400 	strex	r4, lr, [r2]
    287c:	2c00      	cmp	r4, #0
    287e:	d1f7      	bne.n	2870 <compare_int_lock+0x10>
    2880:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2884:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2888:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    288c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2894:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2898:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    289c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    28a0:	420b      	tst	r3, r1
}
    28a2:	bf14      	ite	ne
    28a4:	2001      	movne	r0, #1
    28a6:	2000      	moveq	r0, #0
    28a8:	bd10      	pop	{r4, pc}
    28aa:	bf00      	nop
    28ac:	20000734 	.word	0x20000734

000028b0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    28b0:	b570      	push	{r4, r5, r6, lr}
    28b2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    28b4:	f003 ff05 	bl	66c2 <full_int_lock>
    28b8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    28ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28be:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    28c0:	4a17      	ldr	r2, [pc, #92]	; (2920 <channel_processing_check_and_clear+0x70>)
    28c2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    28c6:	4213      	tst	r3, r2
    28c8:	d105      	bne.n	28d6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    28ca:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    28cc:	4628      	mov	r0, r5
    28ce:	f003 ff01 	bl	66d4 <full_int_unlock>

	return result;
}
    28d2:	4630      	mov	r0, r6
    28d4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    28d6:	2301      	movs	r3, #1
    28d8:	40a3      	lsls	r3, r4
    28da:	43db      	mvns	r3, r3
    28dc:	4a11      	ldr	r2, [pc, #68]	; (2924 <channel_processing_check_and_clear+0x74>)
    28de:	f3bf 8f5b 	dmb	ish
    28e2:	e852 1f00 	ldrex	r1, [r2]
    28e6:	ea01 0003 	and.w	r0, r1, r3
    28ea:	e842 0600 	strex	r6, r0, [r2]
    28ee:	2e00      	cmp	r6, #0
    28f0:	d1f7      	bne.n	28e2 <channel_processing_check_and_clear+0x32>
    28f2:	f3bf 8f5b 	dmb	ish
    28f6:	b959      	cbnz	r1, 2910 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    28f8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    28fc:	009b      	lsls	r3, r3, #2
    28fe:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2904:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2908:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    290a:	b113      	cbz	r3, 2912 <channel_processing_check_and_clear+0x62>
    290c:	2301      	movs	r3, #1
    290e:	e000      	b.n	2912 <channel_processing_check_and_clear+0x62>
    2910:	2301      	movs	r3, #1
		if (result) {
    2912:	461e      	mov	r6, r3
    2914:	2b00      	cmp	r3, #0
    2916:	d0d9      	beq.n	28cc <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    2918:	4620      	mov	r0, r4
    291a:	f003 fec3 	bl	66a4 <event_clear>
    291e:	e7d5      	b.n	28cc <channel_processing_check_and_clear+0x1c>
    2920:	40011000 	.word	0x40011000
    2924:	20000730 	.word	0x20000730

00002928 <compare_int_unlock>:
	if (key) {
    2928:	b901      	cbnz	r1, 292c <compare_int_unlock+0x4>
}
    292a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    292c:	2301      	movs	r3, #1
    292e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2930:	4a11      	ldr	r2, [pc, #68]	; (2978 <compare_int_unlock+0x50>)
    2932:	f3bf 8f5b 	dmb	ish
    2936:	e852 1f00 	ldrex	r1, [r2]
    293a:	4319      	orrs	r1, r3
    293c:	e842 1c00 	strex	ip, r1, [r2]
    2940:	f1bc 0f00 	cmp.w	ip, #0
    2944:	d1f7      	bne.n	2936 <compare_int_unlock+0xe>
    2946:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    294a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    294e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2950:	4a0a      	ldr	r2, [pc, #40]	; (297c <compare_int_unlock+0x54>)
    2952:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2956:	f3bf 8f5b 	dmb	ish
    295a:	4b09      	ldr	r3, [pc, #36]	; (2980 <compare_int_unlock+0x58>)
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2962:	fa23 f000 	lsr.w	r0, r3, r0
    2966:	f010 0f01 	tst.w	r0, #1
    296a:	d0de      	beq.n	292a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    296c:	4b05      	ldr	r3, [pc, #20]	; (2984 <compare_int_unlock+0x5c>)
    296e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2972:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2976:	e7d8      	b.n	292a <compare_int_unlock+0x2>
    2978:	20000734 	.word	0x20000734
    297c:	40011000 	.word	0x40011000
    2980:	20000730 	.word	0x20000730
    2984:	e000e100 	.word	0xe000e100

00002988 <sys_clock_timeout_handler>:
{
    2988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    298c:	4607      	mov	r7, r0
    298e:	4614      	mov	r4, r2
    2990:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2992:	4610      	mov	r0, r2
    2994:	4619      	mov	r1, r3
    2996:	f003 fe91 	bl	66bc <absolute_time_to_cc>
    299a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    299c:	4b15      	ldr	r3, [pc, #84]	; (29f4 <sys_clock_timeout_handler+0x6c>)
    299e:	681a      	ldr	r2, [r3, #0]
    29a0:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    29a2:	601c      	str	r4, [r3, #0]
    29a4:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    29a6:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    29aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    29ae:	d309      	bcc.n	29c4 <sys_clock_timeout_handler+0x3c>
	return false;
    29b0:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    29b2:	f002 ff19 	bl	57e8 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    29b6:	4638      	mov	r0, r7
    29b8:	f7ff ff30 	bl	281c <get_comparator>
    29bc:	42a8      	cmp	r0, r5
    29be:	d00e      	beq.n	29de <sys_clock_timeout_handler+0x56>
}
    29c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    29c4:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <sys_clock_timeout_handler+0x70>)
    29c6:	681b      	ldr	r3, [r3, #0]
    29c8:	0a1a      	lsrs	r2, r3, #8
    29ca:	061b      	lsls	r3, r3, #24
    29cc:	eb15 0803 	adds.w	r8, r5, r3
    29d0:	f142 0900 	adc.w	r9, r2, #0
    29d4:	4b09      	ldr	r3, [pc, #36]	; (29fc <sys_clock_timeout_handler+0x74>)
    29d6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    29da:	2401      	movs	r4, #1
    29dc:	e7e9      	b.n	29b2 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    29de:	b11c      	cbz	r4, 29e8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    29e0:	4638      	mov	r0, r7
    29e2:	f7ff ff23 	bl	282c <event_enable>
}
    29e6:	e7eb      	b.n	29c0 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    29e8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    29ec:	4638      	mov	r0, r7
    29ee:	f7ff ff0b 	bl	2808 <set_comparator>
    29f2:	e7f5      	b.n	29e0 <sys_clock_timeout_handler+0x58>
    29f4:	200003d0 	.word	0x200003d0
    29f8:	20000738 	.word	0x20000738
    29fc:	200003b8 	.word	0x200003b8

00002a00 <z_nrf_rtc_timer_read>:
{
    2a00:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2a02:	4b0d      	ldr	r3, [pc, #52]	; (2a38 <z_nrf_rtc_timer_read+0x38>)
    2a04:	681c      	ldr	r4, [r3, #0]
    2a06:	0a25      	lsrs	r5, r4, #8
    2a08:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2a0a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2a0e:	f7ff ff21 	bl	2854 <counter>
    2a12:	4603      	mov	r3, r0
	val += cntr;
    2a14:	1900      	adds	r0, r0, r4
    2a16:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a1e:	d20a      	bcs.n	2a36 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2a20:	4b06      	ldr	r3, [pc, #24]	; (2a3c <z_nrf_rtc_timer_read+0x3c>)
    2a22:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a26:	4290      	cmp	r0, r2
    2a28:	eb71 0303 	sbcs.w	r3, r1, r3
    2a2c:	d203      	bcs.n	2a36 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2a2e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2a32:	f141 0100 	adc.w	r1, r1, #0
}
    2a36:	bd38      	pop	{r3, r4, r5, pc}
    2a38:	20000738 	.word	0x20000738
    2a3c:	200003b8 	.word	0x200003b8

00002a40 <compare_set_nolocks>:
{
    2a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a42:	4606      	mov	r6, r0
    2a44:	4614      	mov	r4, r2
    2a46:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2a48:	4610      	mov	r0, r2
    2a4a:	4619      	mov	r1, r3
    2a4c:	f003 fe36 	bl	66bc <absolute_time_to_cc>
    2a50:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2a52:	f7ff ffd5 	bl	2a00 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2a56:	42a0      	cmp	r0, r4
    2a58:	eb71 0305 	sbcs.w	r3, r1, r5
    2a5c:	d21d      	bcs.n	2a9a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    2a5e:	1a23      	subs	r3, r4, r0
    2a60:	eb65 0101 	sbc.w	r1, r5, r1
    2a64:	4a1b      	ldr	r2, [pc, #108]	; (2ad4 <compare_set_nolocks+0x94>)
    2a66:	4293      	cmp	r3, r2
    2a68:	f171 0300 	sbcs.w	r3, r1, #0
    2a6c:	d22f      	bcs.n	2ace <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    2a6e:	4b1a      	ldr	r3, [pc, #104]	; (2ad8 <compare_set_nolocks+0x98>)
    2a70:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2a74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2a78:	42ab      	cmp	r3, r5
    2a7a:	bf08      	it	eq
    2a7c:	42a2      	cmpeq	r2, r4
    2a7e:	d01a      	beq.n	2ab6 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2a80:	4639      	mov	r1, r7
    2a82:	4630      	mov	r0, r6
    2a84:	f003 fe2b 	bl	66de <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2a88:	4639      	mov	r1, r7
    2a8a:	f003 fe07 	bl	669c <counter_sub>
    2a8e:	1900      	adds	r0, r0, r4
    2a90:	f145 0300 	adc.w	r3, r5, #0
    2a94:	4604      	mov	r4, r0
    2a96:	461d      	mov	r5, r3
    2a98:	e00d      	b.n	2ab6 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    2a9a:	2301      	movs	r3, #1
    2a9c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a9e:	4a0f      	ldr	r2, [pc, #60]	; (2adc <compare_set_nolocks+0x9c>)
    2aa0:	f3bf 8f5b 	dmb	ish
    2aa4:	e852 1f00 	ldrex	r1, [r2]
    2aa8:	4319      	orrs	r1, r3
    2aaa:	e842 1000 	strex	r0, r1, [r2]
    2aae:	2800      	cmp	r0, #0
    2ab0:	d1f8      	bne.n	2aa4 <compare_set_nolocks+0x64>
    2ab2:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2ab6:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <compare_set_nolocks+0x98>)
    2ab8:	0132      	lsls	r2, r6, #4
    2aba:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2abe:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2ac2:	9906      	ldr	r1, [sp, #24]
    2ac4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2ac6:	9b07      	ldr	r3, [sp, #28]
    2ac8:	6073      	str	r3, [r6, #4]
	return ret;
    2aca:	2000      	movs	r0, #0
}
    2acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    2ace:	f06f 0015 	mvn.w	r0, #21
    2ad2:	e7fb      	b.n	2acc <compare_set_nolocks+0x8c>
    2ad4:	01000001 	.word	0x01000001
    2ad8:	200003c0 	.word	0x200003c0
    2adc:	20000730 	.word	0x20000730

00002ae0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2ae0:	b530      	push	{r4, r5, lr}
    2ae2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2ae4:	2300      	movs	r3, #0
    2ae6:	4a1d      	ldr	r2, [pc, #116]	; (2b5c <sys_clock_driver_init+0x7c>)
    2ae8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2aec:	2b00      	cmp	r3, #0
    2aee:	dd24      	ble.n	2b3a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    2af0:	4c1a      	ldr	r4, [pc, #104]	; (2b5c <sys_clock_driver_init+0x7c>)
    2af2:	2502      	movs	r5, #2
    2af4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2af8:	4b19      	ldr	r3, [pc, #100]	; (2b60 <sys_clock_driver_init+0x80>)
    2afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2afe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2b02:	2200      	movs	r2, #0
    2b04:	2101      	movs	r1, #1
    2b06:	2011      	movs	r0, #17
    2b08:	f7fe fb94 	bl	1234 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2b0c:	2011      	movs	r0, #17
    2b0e:	f7fe fb61 	bl	11d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2b12:	2301      	movs	r3, #1
    2b14:	60a3      	str	r3, [r4, #8]
    2b16:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2b18:	4a12      	ldr	r2, [pc, #72]	; (2b64 <sys_clock_driver_init+0x84>)
    2b1a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2b1c:	2400      	movs	r4, #0
    2b1e:	9401      	str	r4, [sp, #4]
    2b20:	4b11      	ldr	r3, [pc, #68]	; (2b68 <sys_clock_driver_init+0x88>)
    2b22:	9300      	str	r3, [sp, #0]
    2b24:	4a11      	ldr	r2, [pc, #68]	; (2b6c <sys_clock_driver_init+0x8c>)
    2b26:	2300      	movs	r3, #0
    2b28:	4620      	mov	r0, r4
    2b2a:	f003 fe13 	bl	6754 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2b2e:	4628      	mov	r0, r5
    2b30:	f7ff f888 	bl	1c44 <z_nrf_clock_control_lf_on>

	return 0;
}
    2b34:	4620      	mov	r0, r4
    2b36:	b003      	add	sp, #12
    2b38:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b3a:	4a0d      	ldr	r2, [pc, #52]	; (2b70 <sys_clock_driver_init+0x90>)
    2b3c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2b40:	f04f 30ff 	mov.w	r0, #4294967295
    2b44:	f04f 31ff 	mov.w	r1, #4294967295
    2b48:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2b4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2b50:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2b52:	4902      	ldr	r1, [pc, #8]	; (2b5c <sys_clock_driver_init+0x7c>)
    2b54:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2b58:	3301      	adds	r3, #1
    2b5a:	e7c7      	b.n	2aec <sys_clock_driver_init+0xc>
    2b5c:	40011000 	.word	0x40011000
    2b60:	e000e100 	.word	0xe000e100
    2b64:	20000734 	.word	0x20000734
    2b68:	00002989 	.word	0x00002989
    2b6c:	007fffff 	.word	0x007fffff
    2b70:	200003c0 	.word	0x200003c0

00002b74 <process_channel>:
{
    2b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b78:	b082      	sub	sp, #8
    2b7a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2b7c:	f7ff fe98 	bl	28b0 <channel_processing_check_and_clear>
    2b80:	b910      	cbnz	r0, 2b88 <process_channel+0x14>
}
    2b82:	b002      	add	sp, #8
    2b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2b88:	f7ff ff3a 	bl	2a00 <z_nrf_rtc_timer_read>
    2b8c:	4682      	mov	sl, r0
    2b8e:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    2b90:	f003 fd97 	bl	66c2 <full_int_lock>
    2b94:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    2b96:	4b13      	ldr	r3, [pc, #76]	; (2be4 <process_channel+0x70>)
    2b98:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2b9c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2ba0:	45c2      	cmp	sl, r8
    2ba2:	eb76 0309 	sbcs.w	r3, r6, r9
    2ba6:	d20b      	bcs.n	2bc0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2ba8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    2baa:	4628      	mov	r0, r5
    2bac:	f003 fd92 	bl	66d4 <full_int_unlock>
		if (handler) {
    2bb0:	2e00      	cmp	r6, #0
    2bb2:	d0e6      	beq.n	2b82 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2bb4:	9700      	str	r7, [sp, #0]
    2bb6:	4642      	mov	r2, r8
    2bb8:	464b      	mov	r3, r9
    2bba:	4620      	mov	r0, r4
    2bbc:	47b0      	blx	r6
}
    2bbe:	e7e0      	b.n	2b82 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2bc0:	4a08      	ldr	r2, [pc, #32]	; (2be4 <process_channel+0x70>)
    2bc2:	0123      	lsls	r3, r4, #4
    2bc4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2bc8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    2bca:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2bcc:	2000      	movs	r0, #0
    2bce:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bd0:	f04f 32ff 	mov.w	r2, #4294967295
    2bd4:	f04f 33ff 	mov.w	r3, #4294967295
    2bd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2bdc:	4620      	mov	r0, r4
    2bde:	f7ff fe2f 	bl	2840 <event_disable>
    2be2:	e7e2      	b.n	2baa <process_channel+0x36>
    2be4:	200003c0 	.word	0x200003c0

00002be8 <rtc_nrf_isr>:
{
    2be8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2bea:	4b0e      	ldr	r3, [pc, #56]	; (2c24 <rtc_nrf_isr+0x3c>)
    2bec:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2bf0:	f013 0f02 	tst.w	r3, #2
    2bf4:	d00d      	beq.n	2c12 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2bf6:	4b0b      	ldr	r3, [pc, #44]	; (2c24 <rtc_nrf_isr+0x3c>)
    2bf8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2bfc:	b14b      	cbz	r3, 2c12 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bfe:	4b09      	ldr	r3, [pc, #36]	; (2c24 <rtc_nrf_isr+0x3c>)
    2c00:	2200      	movs	r2, #0
    2c02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2c06:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    2c0a:	4a07      	ldr	r2, [pc, #28]	; (2c28 <rtc_nrf_isr+0x40>)
    2c0c:	6813      	ldr	r3, [r2, #0]
    2c0e:	3301      	adds	r3, #1
    2c10:	6013      	str	r3, [r2, #0]
{
    2c12:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c14:	2c00      	cmp	r4, #0
    2c16:	dd00      	ble.n	2c1a <rtc_nrf_isr+0x32>
}
    2c18:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2c1a:	4620      	mov	r0, r4
    2c1c:	f7ff ffaa 	bl	2b74 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2c20:	3401      	adds	r4, #1
    2c22:	e7f7      	b.n	2c14 <rtc_nrf_isr+0x2c>
    2c24:	40011000 	.word	0x40011000
    2c28:	20000738 	.word	0x20000738

00002c2c <sys_clock_set_timeout>:
{
    2c2c:	b510      	push	{r4, lr}
    2c2e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2c30:	f1b0 3fff 	cmp.w	r0, #4294967295
    2c34:	d006      	beq.n	2c44 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c36:	2801      	cmp	r0, #1
    2c38:	dd06      	ble.n	2c48 <sys_clock_set_timeout+0x1c>
    2c3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c3e:	da05      	bge.n	2c4c <sys_clock_set_timeout+0x20>
    2c40:	1e44      	subs	r4, r0, #1
    2c42:	e004      	b.n	2c4e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2c44:	480f      	ldr	r0, [pc, #60]	; (2c84 <sys_clock_set_timeout+0x58>)
    2c46:	e7f8      	b.n	2c3a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c48:	2400      	movs	r4, #0
    2c4a:	e000      	b.n	2c4e <sys_clock_set_timeout+0x22>
    2c4c:	4c0d      	ldr	r4, [pc, #52]	; (2c84 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2c4e:	f7ff fed7 	bl	2a00 <z_nrf_rtc_timer_read>
    2c52:	4b0d      	ldr	r3, [pc, #52]	; (2c88 <sys_clock_set_timeout+0x5c>)
    2c54:	6819      	ldr	r1, [r3, #0]
    2c56:	685b      	ldr	r3, [r3, #4]
    2c58:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    2c5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c5e:	d300      	bcc.n	2c62 <sys_clock_set_timeout+0x36>
		ticks = 0;
    2c60:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2c62:	4420      	add	r0, r4
    2c64:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    2c66:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    2c6a:	d300      	bcc.n	2c6e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2c6c:	4a05      	ldr	r2, [pc, #20]	; (2c84 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2c6e:	2000      	movs	r0, #0
    2c70:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2c72:	9001      	str	r0, [sp, #4]
    2c74:	4905      	ldr	r1, [pc, #20]	; (2c8c <sys_clock_set_timeout+0x60>)
    2c76:	9100      	str	r1, [sp, #0]
    2c78:	f143 0300 	adc.w	r3, r3, #0
    2c7c:	f003 fd6a 	bl	6754 <compare_set>
}
    2c80:	b002      	add	sp, #8
    2c82:	bd10      	pop	{r4, pc}
    2c84:	007fffff 	.word	0x007fffff
    2c88:	200003d0 	.word	0x200003d0
    2c8c:	00002989 	.word	0x00002989

00002c90 <sys_clock_elapsed>:
{
    2c90:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2c92:	f7ff feb5 	bl	2a00 <z_nrf_rtc_timer_read>
    2c96:	4b02      	ldr	r3, [pc, #8]	; (2ca0 <sys_clock_elapsed+0x10>)
    2c98:	681b      	ldr	r3, [r3, #0]
}
    2c9a:	1ac0      	subs	r0, r0, r3
    2c9c:	bd08      	pop	{r3, pc}
    2c9e:	bf00      	nop
    2ca0:	200003d0 	.word	0x200003d0

00002ca4 <pinctrl_configure_pins>:
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ca8:	4606      	mov	r6, r0
    2caa:	460f      	mov	r7, r1
    2cac:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2cae:	2400      	movs	r4, #0
    2cb0:	e015      	b.n	2cde <pinctrl_configure_pins+0x3a>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    2cb2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2cb6:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2cba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2cbe:	f002 001f 	and.w	r0, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2cc2:	2101      	movs	r1, #1
    2cc4:	fa01 f000 	lsl.w	r0, r1, r0
    p_reg->OUTSET = set_mask;
    2cc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2ccc:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2cd0:	460a      	mov	r2, r1
    2cd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2cd6:	f003 fd70 	bl	67ba <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2cda:	3401      	adds	r4, #1
    2cdc:	b2e4      	uxtb	r4, r4
    2cde:	42bc      	cmp	r4, r7
    2ce0:	f080 8140 	bcs.w	2f64 <pinctrl_configure_pins+0x2c0>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2ce4:	00a0      	lsls	r0, r4, #2
    2ce6:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
    2cea:	f3c5 2303 	ubfx	r3, r5, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    2cee:	0c2a      	lsrs	r2, r5, #16
    2cf0:	2a19      	cmp	r2, #25
    2cf2:	f200 8139 	bhi.w	2f68 <pinctrl_configure_pins+0x2c4>
    2cf6:	a101      	add	r1, pc, #4	; (adr r1, 2cfc <pinctrl_configure_pins+0x58>)
    2cf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    2cfc:	00002cb3 	.word	0x00002cb3
    2d00:	00002d65 	.word	0x00002d65
    2d04:	00002d7b 	.word	0x00002d7b
    2d08:	00002da5 	.word	0x00002da5
    2d0c:	00002dbb 	.word	0x00002dbb
    2d10:	00002de5 	.word	0x00002de5
    2d14:	00002e0f 	.word	0x00002e0f
    2d18:	00002f69 	.word	0x00002f69
    2d1c:	00002f69 	.word	0x00002f69
    2d20:	00002f69 	.word	0x00002f69
    2d24:	00002f69 	.word	0x00002f69
    2d28:	00002e25 	.word	0x00002e25
    2d2c:	00002e3d 	.word	0x00002e3d
    2d30:	00002f69 	.word	0x00002f69
    2d34:	00002f69 	.word	0x00002f69
    2d38:	00002f69 	.word	0x00002f69
    2d3c:	00002f69 	.word	0x00002f69
    2d40:	00002f69 	.word	0x00002f69
    2d44:	00002f69 	.word	0x00002f69
    2d48:	00002f69 	.word	0x00002f69
    2d4c:	00002f69 	.word	0x00002f69
    2d50:	00002f69 	.word	0x00002f69
    2d54:	00002e55 	.word	0x00002e55
    2d58:	00002e99 	.word	0x00002e99
    2d5c:	00002edd 	.word	0x00002edd
    2d60:	00002f21 	.word	0x00002f21
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    2d64:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2d68:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2d6c:	2200      	movs	r2, #0
    2d6e:	4611      	mov	r1, r2
    2d70:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2d74:	f003 fd21 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2d78:	e7af      	b.n	2cda <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    2d7a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2d7e:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    2d82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2d86:	f002 001f 	and.w	r0, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d8a:	2101      	movs	r1, #1
    2d8c:	fa01 f000 	lsl.w	r0, r1, r0
    p_reg->OUTSET = set_mask;
    2d90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2d94:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2d98:	460a      	mov	r2, r1
    2d9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2d9e:	f003 fd0c 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2da2:	e79a      	b.n	2cda <pinctrl_configure_pins+0x36>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    2da4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2da8:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2dac:	2200      	movs	r2, #0
    2dae:	4611      	mov	r1, r2
    2db0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2db4:	f003 fd01 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2db8:	e78f      	b.n	2cda <pinctrl_configure_pins+0x36>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    2dba:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2dbe:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    2dc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2dc6:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2dca:	2101      	movs	r1, #1
    2dcc:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2dd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    2dd4:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2dd8:	2200      	movs	r2, #0
    2dda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2dde:	f003 fcec 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2de2:	e77a      	b.n	2cda <pinctrl_configure_pins+0x36>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    2de4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2de8:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    2dec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
    2df0:	f002 001f 	and.w	r0, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2df4:	2101      	movs	r1, #1
    2df6:	fa01 f000 	lsl.w	r0, r1, r0
    p_reg->OUTCLR = clr_mask;
    2dfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2dfe:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2e02:	460a      	mov	r2, r1
    2e04:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2e08:	f003 fcd7 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2e0c:	e765      	b.n	2cda <pinctrl_configure_pins+0x36>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    2e0e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e12:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2e16:	2200      	movs	r2, #0
    2e18:	4611      	mov	r1, r2
    2e1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    2e1e:	f003 fccc 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2e22:	e75a      	b.n	2cda <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    2e24:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e28:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2e2c:	b903      	cbnz	r3, 2e30 <pinctrl_configure_pins+0x18c>
				 * suitable for TWI/TWIM peripherals (S0D1).
				 * This drive cannot be used always so that
				 * users are able to select e.g. H0D1 or E0E1
				 * in devicetree.
				 */
				drive = NRF_DRIVE_S0D1;
    2e2e:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2e30:	2200      	movs	r2, #0
    2e32:	4611      	mov	r1, r2
    2e34:	5830      	ldr	r0, [r6, r0]
    2e36:	f003 fcc0 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2e3a:	e74e      	b.n	2cda <pinctrl_configure_pins+0x36>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    2e3c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e40:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2e44:	b903      	cbnz	r3, 2e48 <pinctrl_configure_pins+0x1a4>
				drive = NRF_DRIVE_S0D1;
    2e46:	2306      	movs	r3, #6
			}
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    2e48:	2200      	movs	r2, #0
    2e4a:	4611      	mov	r1, r2
    2e4c:	5830      	ldr	r0, [r6, r0]
    2e4e:	f003 fcb4 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
    2e52:	e742      	b.n	2cda <pinctrl_configure_pins+0x36>
					  NRF_GPIO_PIN_INPUT_CONNECT, drive);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    2e54:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e58:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2e5c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    2e60:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2e64:	d10e      	bne.n	2e84 <pinctrl_configure_pins+0x1e0>
    *p_pin = pin_number & 0x1F;
    2e66:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2e6a:	2101      	movs	r1, #1
    2e6c:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2e70:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2e74:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2e78:	2201      	movs	r2, #1
    2e7a:	4611      	mov	r1, r2
    2e7c:	5830      	ldr	r0, [r6, r0]
    2e7e:	f003 fc9c 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2e82:	e72a      	b.n	2cda <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    2e84:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e88:	2101      	movs	r1, #1
    2e8a:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2e8e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2e92:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    2e96:	e7ef      	b.n	2e78 <pinctrl_configure_pins+0x1d4>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    2e98:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2e9c:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2ea0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    2ea4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2ea8:	d10e      	bne.n	2ec8 <pinctrl_configure_pins+0x224>
    *p_pin = pin_number & 0x1F;
    2eaa:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2eae:	2101      	movs	r1, #1
    2eb0:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2eb4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2eb8:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2ebc:	2201      	movs	r2, #1
    2ebe:	4611      	mov	r1, r2
    2ec0:	5830      	ldr	r0, [r6, r0]
    2ec2:	f003 fc7a 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2ec6:	e708      	b.n	2cda <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    2ec8:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2ecc:	2101      	movs	r1, #1
    2ece:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2ed2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2ed6:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    2eda:	e7ef      	b.n	2ebc <pinctrl_configure_pins+0x218>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    2edc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2ee0:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2ee4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    2ee8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2eec:	d10e      	bne.n	2f0c <pinctrl_configure_pins+0x268>
    *p_pin = pin_number & 0x1F;
    2eee:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2ef2:	2101      	movs	r1, #1
    2ef4:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2ef8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2efc:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2f00:	2201      	movs	r2, #1
    2f02:	4611      	mov	r1, r2
    2f04:	5830      	ldr	r0, [r6, r0]
    2f06:	f003 fc58 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2f0a:	e6e6      	b.n	2cda <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    2f0c:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2f10:	2101      	movs	r1, #1
    2f12:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2f16:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2f1a:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    2f1e:	e7ef      	b.n	2f00 <pinctrl_configure_pins+0x25c>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    2f20:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    2f24:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    2f28:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (value == 0)
    2f2c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2f30:	d10e      	bne.n	2f50 <pinctrl_configure_pins+0x2ac>
    *p_pin = pin_number & 0x1F;
    2f32:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2f36:	2101      	movs	r1, #1
    2f38:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTCLR = clr_mask;
    2f3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2f40:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    2f44:	2201      	movs	r2, #1
    2f46:	4611      	mov	r1, r2
    2f48:	5830      	ldr	r0, [r6, r0]
    2f4a:	f003 fc36 	bl	67ba <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT, drive);
			break;
    2f4e:	e6c4      	b.n	2cda <pinctrl_configure_pins+0x36>
    *p_pin = pin_number & 0x1F;
    2f50:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2f54:	2101      	movs	r1, #1
    2f56:	fa01 f202 	lsl.w	r2, r1, r2
    p_reg->OUTSET = set_mask;
    2f5a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    2f5e:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
}
    2f62:	e7ef      	b.n	2f44 <pinctrl_configure_pins+0x2a0>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    2f64:	2000      	movs	r0, #0
    2f66:	e001      	b.n	2f6c <pinctrl_configure_pins+0x2c8>
		switch (NRF_GET_FUN(pins[i])) {
    2f68:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002f70 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    2f70:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f74:	4905      	ldr	r1, [pc, #20]	; (2f8c <__NVIC_SystemReset+0x1c>)
    2f76:	68ca      	ldr	r2, [r1, #12]
    2f78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f7c:	4b04      	ldr	r3, [pc, #16]	; (2f90 <__NVIC_SystemReset+0x20>)
    2f7e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f80:	60cb      	str	r3, [r1, #12]
    2f82:	f3bf 8f4f 	dsb	sy
    __NOP();
    2f86:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f88:	e7fd      	b.n	2f86 <__NVIC_SystemReset+0x16>
    2f8a:	bf00      	nop
    2f8c:	e000ed00 	.word	0xe000ed00
    2f90:	05fa0004 	.word	0x05fa0004

00002f94 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2f94:	4b02      	ldr	r3, [pc, #8]	; (2fa0 <nvmc_wait+0xc>)
    2f96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d0fa      	beq.n	2f94 <nvmc_wait>
}
    2f9e:	4770      	bx	lr
    2fa0:	4001e000 	.word	0x4001e000

00002fa4 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2fa4:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2fa6:	4b03      	ldr	r3, [pc, #12]	; (2fb4 <nvmc_config+0x10>)
    2fa8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    2fac:	f7ff fff2 	bl	2f94 <nvmc_wait>
}
    2fb0:	bd08      	pop	{r3, pc}
    2fb2:	bf00      	nop
    2fb4:	4001e000 	.word	0x4001e000

00002fb8 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2fb8:	4b01      	ldr	r3, [pc, #4]	; (2fc0 <SystemCoreClockUpdate+0x8>)
    2fba:	4a02      	ldr	r2, [pc, #8]	; (2fc4 <SystemCoreClockUpdate+0xc>)
    2fbc:	601a      	str	r2, [r3, #0]
}
    2fbe:	4770      	bx	lr
    2fc0:	20000060 	.word	0x20000060
    2fc4:	03d09000 	.word	0x03d09000

00002fc8 <SystemInit>:

void SystemInit(void)
{
    2fc8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2fca:	f003 fc11 	bl	67f0 <nrf52_errata_12>
    2fce:	b140      	cbz	r0, 2fe2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2fd4:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    2fd8:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2fdc:	4a7d      	ldr	r2, [pc, #500]	; (31d4 <SystemInit+0x20c>)
    2fde:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2fe2:	f003 fc17 	bl	6814 <nrf52_errata_16>
    2fe6:	b110      	cbz	r0, 2fee <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2fe8:	4b7b      	ldr	r3, [pc, #492]	; (31d8 <SystemInit+0x210>)
    2fea:	4a7c      	ldr	r2, [pc, #496]	; (31dc <SystemInit+0x214>)
    2fec:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2fee:	f003 fc27 	bl	6840 <nrf52_errata_31>
    2ff2:	b148      	cbz	r0, 3008 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2ff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2ff8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2ffc:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3004:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3008:	f003 fc2c 	bl	6864 <nrf52_errata_32>
    300c:	b130      	cbz	r0, 301c <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    300e:	4a74      	ldr	r2, [pc, #464]	; (31e0 <SystemInit+0x218>)
    3010:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    3014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3018:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    301c:	f003 fc38 	bl	6890 <nrf52_errata_36>
    3020:	b140      	cbz	r0, 3034 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    3022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3026:	2200      	movs	r2, #0
    3028:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    302c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3030:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3034:	f003 fc3e 	bl	68b4 <nrf52_errata_37>
    3038:	b120      	cbz	r0, 3044 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    303a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    303e:	2203      	movs	r2, #3
    3040:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3044:	f003 fc4c 	bl	68e0 <nrf52_errata_57>
    3048:	b160      	cbz	r0, 3064 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    304a:	4b66      	ldr	r3, [pc, #408]	; (31e4 <SystemInit+0x21c>)
    304c:	2205      	movs	r2, #5
    304e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    3052:	2201      	movs	r2, #1
    3054:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3058:	2200      	movs	r2, #0
    305a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    305e:	223f      	movs	r2, #63	; 0x3f
    3060:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3064:	f003 fc52 	bl	690c <nrf52_errata_66>
    3068:	2800      	cmp	r0, #0
    306a:	d046      	beq.n	30fa <SystemInit+0x132>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3070:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3074:	4b5c      	ldr	r3, [pc, #368]	; (31e8 <SystemInit+0x220>)
    3076:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    307a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    307e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3082:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3086:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    308a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    308e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3092:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3096:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    309a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    309e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    30a2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    30a6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    30aa:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    30ae:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    30b2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    30b6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    30ba:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    30be:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    30c2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    30c6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    30ca:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    30ce:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    30d2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    30d6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    30da:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    30de:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    30e2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    30e6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    30ea:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    30ee:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    30f2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    30f6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    30fa:	f003 fc29 	bl	6950 <nrf52_errata_108>
    30fe:	b148      	cbz	r0, 3114 <SystemInit+0x14c>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    3100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3104:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3108:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    310c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3110:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3114:	f003 fc2e 	bl	6974 <nrf52_errata_136>
    3118:	b160      	cbz	r0, 3134 <SystemInit+0x16c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    311a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    311e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3122:	f013 0f01 	tst.w	r3, #1
    3126:	d005      	beq.n	3134 <SystemInit+0x16c>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3128:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    312c:	f06f 0201 	mvn.w	r2, #1
    3130:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    3134:	f003 fc30 	bl	6998 <nrf52_errata_182>
    3138:	b130      	cbz	r0, 3148 <SystemInit+0x180>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    313a:	4a2c      	ldr	r2, [pc, #176]	; (31ec <SystemInit+0x224>)
    313c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    3140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3144:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3148:	f003 fc3a 	bl	69c0 <nrf52_configuration_249>
    314c:	b138      	cbz	r0, 315e <SystemInit+0x196>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    314e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3152:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    315a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    315e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3162:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    3166:	f013 0f01 	tst.w	r3, #1
    316a:	d10e      	bne.n	318a <SystemInit+0x1c2>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    316c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3170:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3174:	2b00      	cmp	r3, #0
    3176:	db1a      	blt.n	31ae <SystemInit+0x1e6>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3178:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    317c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3180:	2b00      	cmp	r3, #0
    3182:	db14      	blt.n	31ae <SystemInit+0x1e6>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    3184:	f7ff ff18 	bl	2fb8 <SystemCoreClockUpdate>
}
    3188:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    318a:	2001      	movs	r0, #1
    318c:	f7ff ff0a 	bl	2fa4 <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    3190:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    3194:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    3198:	f023 0301 	bic.w	r3, r3, #1
    319c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
    31a0:	f7ff fef8 	bl	2f94 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    31a4:	2000      	movs	r0, #0
    31a6:	f7ff fefd 	bl	2fa4 <nvmc_config>
            NVIC_SystemReset();
    31aa:	f7ff fee1 	bl	2f70 <__NVIC_SystemReset>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    31ae:	2001      	movs	r0, #1
    31b0:	f7ff fef8 	bl	2fa4 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    31b4:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    31b8:	2515      	movs	r5, #21
    31ba:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    31be:	f7ff fee9 	bl	2f94 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    31c2:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    31c6:	f7ff fee5 	bl	2f94 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    31ca:	2000      	movs	r0, #0
    31cc:	f7ff feea 	bl	2fa4 <nvmc_config>
            NVIC_SystemReset();
    31d0:	f7ff fece 	bl	2f70 <__NVIC_SystemReset>
    31d4:	40013000 	.word	0x40013000
    31d8:	4007c000 	.word	0x4007c000
    31dc:	baadf00d 	.word	0xbaadf00d
    31e0:	e000ed00 	.word	0xe000ed00
    31e4:	40005000 	.word	0x40005000
    31e8:	4000c000 	.word	0x4000c000
    31ec:	40001000 	.word	0x40001000

000031f0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    31f0:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    31f2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    31f4:	fab4 f384 	clz	r3, r4
    31f8:	f1c3 031f 	rsb	r3, r3, #31
    31fc:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    3200:	2b00      	cmp	r3, #0
    3202:	db16      	blt.n	3232 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3204:	2201      	movs	r2, #1
    3206:	fa02 f303 	lsl.w	r3, r2, r3
    320a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    320e:	f3bf 8f5b 	dmb	ish
    3212:	e850 2f00 	ldrex	r2, [r0]
    3216:	42a2      	cmp	r2, r4
    3218:	d104      	bne.n	3224 <nrfx_flag32_alloc+0x34>
    321a:	e840 3e00 	strex	lr, r3, [r0]
    321e:	f1be 0f00 	cmp.w	lr, #0
    3222:	d1f6      	bne.n	3212 <nrfx_flag32_alloc+0x22>
    3224:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3228:	d1e3      	bne.n	31f2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    322a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    322e:	4802      	ldr	r0, [pc, #8]	; (3238 <nrfx_flag32_alloc+0x48>)
}
    3230:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    3232:	4802      	ldr	r0, [pc, #8]	; (323c <nrfx_flag32_alloc+0x4c>)
    3234:	e7fc      	b.n	3230 <nrfx_flag32_alloc+0x40>
    3236:	bf00      	nop
    3238:	0bad0000 	.word	0x0bad0000
    323c:	0bad0002 	.word	0x0bad0002

00003240 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3240:	6803      	ldr	r3, [r0, #0]
    3242:	40cb      	lsrs	r3, r1
    3244:	f013 0f01 	tst.w	r3, #1
    3248:	d115      	bne.n	3276 <nrfx_flag32_free+0x36>
{
    324a:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    324c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    324e:	2301      	movs	r3, #1
    3250:	408b      	lsls	r3, r1
    3252:	4313      	orrs	r3, r2
    3254:	f3bf 8f5b 	dmb	ish
    3258:	e850 cf00 	ldrex	ip, [r0]
    325c:	4594      	cmp	ip, r2
    325e:	d104      	bne.n	326a <nrfx_flag32_free+0x2a>
    3260:	e840 3e00 	strex	lr, r3, [r0]
    3264:	f1be 0f00 	cmp.w	lr, #0
    3268:	d1f6      	bne.n	3258 <nrfx_flag32_free+0x18>
    326a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    326e:	d1ed      	bne.n	324c <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    3270:	4802      	ldr	r0, [pc, #8]	; (327c <nrfx_flag32_free+0x3c>)
}
    3272:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    3276:	4802      	ldr	r0, [pc, #8]	; (3280 <nrfx_flag32_free+0x40>)
}
    3278:	4770      	bx	lr
    327a:	bf00      	nop
    327c:	0bad0000 	.word	0x0bad0000
    3280:	0bad0004 	.word	0x0bad0004

00003284 <nrfx_clock_anomaly_132>:
    uint32_t core_debug;
    uint32_t dwt_ctrl;

    // Preserve DEMCR register to do not influence into its configuration. Enable the trace and
    // debug blocks. It is required to read and write data to DWT block.
    core_debug = CoreDebug->DEMCR;
    3284:	4b0d      	ldr	r3, [pc, #52]	; (32bc <nrfx_clock_anomaly_132+0x38>)
    3286:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    328a:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
    328e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    // Preserve CTRL register in DWT block to do not influence into its configuration. Make sure
    // that cycle counter is enabled.
    dwt_ctrl = DWT->CTRL;
    3292:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
    3296:	6818      	ldr	r0, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    3298:	f040 0201 	orr.w	r2, r0, #1
    329c:	601a      	str	r2, [r3, #0]

    // Store start value of cycle counter.
    cyccnt_inital = DWT->CYCCNT;
    329e:	685a      	ldr	r2, [r3, #4]

    // Delay required time.
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    32a0:	4b07      	ldr	r3, [pc, #28]	; (32c0 <nrfx_clock_anomaly_132+0x3c>)
    32a2:	685b      	ldr	r3, [r3, #4]
    32a4:	1a9b      	subs	r3, r3, r2
    32a6:	f5b3 5f0a 	cmp.w	r3, #8832	; 0x2280
    32aa:	d3f9      	bcc.n	32a0 <nrfx_clock_anomaly_132+0x1c>
    {}

    // Restore preserved registers.
    DWT->CTRL = dwt_ctrl;
    32ac:	4b04      	ldr	r3, [pc, #16]	; (32c0 <nrfx_clock_anomaly_132+0x3c>)
    32ae:	6018      	str	r0, [r3, #0]
    CoreDebug->DEMCR = core_debug;
    32b0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
    32b4:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
}
    32b8:	4770      	bx	lr
    32ba:	bf00      	nop
    32bc:	e000ed00 	.word	0xe000ed00
    32c0:	e0001000 	.word	0xe0001000

000032c4 <clock_stop>:
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    32c4:	b570      	push	{r4, r5, r6, lr}
    32c6:	b082      	sub	sp, #8
    switch (domain)
    32c8:	4605      	mov	r5, r0
    32ca:	b118      	cbz	r0, 32d4 <clock_stop+0x10>
    32cc:	2801      	cmp	r0, #1
    32ce:	d016      	beq.n	32fe <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    32d0:	b002      	add	sp, #8
    32d2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    32d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32d8:	2202      	movs	r2, #2
    32da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32de:	2200      	movs	r2, #0
    32e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    32e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32e8:	2201      	movs	r2, #1
    32ea:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    32ec:	2301      	movs	r3, #1
    32ee:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    32f2:	429d      	cmp	r5, r3
    32f4:	d00f      	beq.n	3316 <clock_stop+0x52>
    32f6:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    32f8:	f242 7410 	movw	r4, #10000	; 0x2710
    32fc:	e029      	b.n	3352 <clock_stop+0x8e>
    p_reg->INTENCLR = mask;
    32fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3302:	2201      	movs	r2, #1
    3304:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3308:	2100      	movs	r1, #0
    330a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    330e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3312:	605a      	str	r2, [r3, #4]
}
    3314:	e7ea      	b.n	32ec <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3316:	f10d 0607 	add.w	r6, sp, #7
    331a:	e7ed      	b.n	32f8 <clock_stop+0x34>
            if (p_clk_src != NULL)
    331c:	b136      	cbz	r6, 332c <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    331e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3322:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3326:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    332a:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    332c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3330:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3334:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3338:	d122      	bne.n	3380 <clock_stop+0xbc>
    return false;
    333a:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    333c:	b323      	cbz	r3, 3388 <clock_stop+0xc4>
    333e:	b11e      	cbz	r6, 3348 <clock_stop+0x84>
    3340:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3344:	2b01      	cmp	r3, #1
    3346:	d11f      	bne.n	3388 <clock_stop+0xc4>
    3348:	2001      	movs	r0, #1
    334a:	f003 fb50 	bl	69ee <nrfx_busy_wait>
    334e:	3c01      	subs	r4, #1
    3350:	d01a      	beq.n	3388 <clock_stop+0xc4>
    switch (domain)
    3352:	2d00      	cmp	r5, #0
    3354:	d0e2      	beq.n	331c <clock_stop+0x58>
    3356:	2d01      	cmp	r5, #1
    3358:	d001      	beq.n	335e <clock_stop+0x9a>
    335a:	2300      	movs	r3, #0
    335c:	e7ee      	b.n	333c <clock_stop+0x78>
            if (p_clk_src != NULL)
    335e:	b136      	cbz	r6, 336e <clock_stop+0xaa>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3364:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3368:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    336c:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    336e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3372:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3376:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    337a:	d103      	bne.n	3384 <clock_stop+0xc0>
    return false;
    337c:	2300      	movs	r3, #0
    337e:	e7dd      	b.n	333c <clock_stop+0x78>
                return true;
    3380:	2301      	movs	r3, #1
    3382:	e7db      	b.n	333c <clock_stop+0x78>
                return true;
    3384:	2301      	movs	r3, #1
    3386:	e7d9      	b.n	333c <clock_stop+0x78>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3388:	2d01      	cmp	r5, #1
    338a:	d1a1      	bne.n	32d0 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    338c:	4b01      	ldr	r3, [pc, #4]	; (3394 <clock_stop+0xd0>)
    338e:	2200      	movs	r2, #0
    3390:	715a      	strb	r2, [r3, #5]
    3392:	e79d      	b.n	32d0 <clock_stop+0xc>
    3394:	2000073c 	.word	0x2000073c

00003398 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3398:	4b06      	ldr	r3, [pc, #24]	; (33b4 <nrfx_clock_init+0x1c>)
    339a:	791b      	ldrb	r3, [r3, #4]
    339c:	b943      	cbnz	r3, 33b0 <nrfx_clock_init+0x18>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    339e:	4b05      	ldr	r3, [pc, #20]	; (33b4 <nrfx_clock_init+0x1c>)
    33a0:	2200      	movs	r2, #0
    33a2:	719a      	strb	r2, [r3, #6]
#endif
        m_clock_cb.event_handler = event_handler;
    33a4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    33a6:	2101      	movs	r1, #1
    33a8:	7119      	strb	r1, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    33aa:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    33ac:	4802      	ldr	r0, [pc, #8]	; (33b8 <nrfx_clock_init+0x20>)
    33ae:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    33b0:	4802      	ldr	r0, [pc, #8]	; (33bc <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    33b2:	4770      	bx	lr
    33b4:	2000073c 	.word	0x2000073c
    33b8:	0bad0000 	.word	0x0bad0000
    33bc:	0bad000c 	.word	0x0bad000c

000033c0 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    33c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    33c4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    33c8:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    33cc:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    33d0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    33d4:	d104      	bne.n	33e0 <nrfx_clock_calibration_start+0x20>
    return false;
    33d6:	2200      	movs	r2, #0
{
    nrfx_err_t err_code = NRFX_SUCCESS;

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
    nrf_clock_hfclk_t clk_src;
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    33d8:	b31a      	cbz	r2, 3422 <nrfx_clock_calibration_start+0x62>
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    33da:	b91b      	cbnz	r3, 33e4 <nrfx_clock_calibration_start+0x24>
    {
        return NRFX_ERROR_INVALID_STATE;
    33dc:	4814      	ldr	r0, [pc, #80]	; (3430 <nrfx_clock_calibration_start+0x70>)
    33de:	4770      	bx	lr
                return true;
    33e0:	2201      	movs	r2, #1
    33e2:	e7f9      	b.n	33d8 <nrfx_clock_calibration_start+0x18>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    33e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33e8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    33ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    33f0:	d100      	bne.n	33f4 <nrfx_clock_calibration_start+0x34>
    return false;
    33f2:	2200      	movs	r2, #0
    }

    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    33f4:	b1ba      	cbz	r2, 3426 <nrfx_clock_calibration_start+0x66>
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    33f6:	4b0f      	ldr	r3, [pc, #60]	; (3434 <nrfx_clock_calibration_start+0x74>)
    33f8:	799b      	ldrb	r3, [r3, #6]
    33fa:	b9b3      	cbnz	r3, 342a <nrfx_clock_calibration_start+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3400:	2200      	movs	r2, #0
    3402:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    3406:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    p_reg->INTENSET = mask;
    340a:	2208      	movs	r2, #8
    340c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    3410:	2201      	movs	r2, #1
    3412:	4908      	ldr	r1, [pc, #32]	; (3434 <nrfx_clock_calibration_start+0x74>)
    3414:	718a      	strb	r2, [r1, #6]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000002;
    3416:	2102      	movs	r1, #2
    3418:	f8c3 1c34 	str.w	r1, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    341c:	611a      	str	r2, [r3, #16]
    nrfx_err_t err_code = NRFX_SUCCESS;
    341e:	4806      	ldr	r0, [pc, #24]	; (3438 <nrfx_clock_calibration_start+0x78>)
}
    3420:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    3422:	4803      	ldr	r0, [pc, #12]	; (3430 <nrfx_clock_calibration_start+0x70>)
    3424:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    3426:	4802      	ldr	r0, [pc, #8]	; (3430 <nrfx_clock_calibration_start+0x70>)
    3428:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    342a:	4804      	ldr	r0, [pc, #16]	; (343c <nrfx_clock_calibration_start+0x7c>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    342c:	4770      	bx	lr
    342e:	bf00      	nop
    3430:	0bad0005 	.word	0x0bad0005
    3434:	2000073c 	.word	0x2000073c
    3438:	0bad0000 	.word	0x0bad0000
    343c:	0bad000b 	.word	0x0bad000b

00003440 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3440:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3446:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    344a:	b18b      	cbz	r3, 3470 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    344c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3450:	2200      	movs	r2, #0
    3452:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3456:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    345a:	2201      	movs	r2, #1
    345c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3460:	4b1c      	ldr	r3, [pc, #112]	; (34d4 <nrfx_power_clock_irq_handler+0x94>)
    3462:	795b      	ldrb	r3, [r3, #5]
    3464:	b923      	cbnz	r3, 3470 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    3466:	4b1b      	ldr	r3, [pc, #108]	; (34d4 <nrfx_power_clock_irq_handler+0x94>)
    3468:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    346a:	681b      	ldr	r3, [r3, #0]
    346c:	2000      	movs	r0, #0
    346e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3474:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3478:	b16b      	cbz	r3, 3496 <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    347a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    347e:	2200      	movs	r2, #0
    3480:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3484:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    3488:	2202      	movs	r2, #2
    348a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    348e:	4b11      	ldr	r3, [pc, #68]	; (34d4 <nrfx_power_clock_irq_handler+0x94>)
    3490:	681b      	ldr	r3, [r3, #0]
    3492:	2001      	movs	r0, #1
    3494:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    349a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    349e:	b1bb      	cbz	r3, 34d0 <nrfx_power_clock_irq_handler+0x90>
    return p_reg->INTENSET & mask;
    34a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34a4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    34a8:	f013 0f08 	tst.w	r3, #8
    34ac:	d010      	beq.n	34d0 <nrfx_power_clock_irq_handler+0x90>
        nrf_clock_int_enable_check(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK))
    {
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
    34ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34b2:	2200      	movs	r2, #0
    34b4:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    34bc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    34c0:	2108      	movs	r1, #8
    34c2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    34c6:	4b03      	ldr	r3, [pc, #12]	; (34d4 <nrfx_power_clock_irq_handler+0x94>)
    34c8:	719a      	strb	r2, [r3, #6]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	2003      	movs	r0, #3
    34ce:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    34d0:	bd08      	pop	{r3, pc}
    34d2:	bf00      	nop
    34d4:	2000073c 	.word	0x2000073c

000034d8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    34d8:	3008      	adds	r0, #8
    34da:	4b03      	ldr	r3, [pc, #12]	; (34e8 <pin_in_use+0x10>)
    34dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    34e0:	f000 0001 	and.w	r0, r0, #1
    34e4:	4770      	bx	lr
    34e6:	bf00      	nop
    34e8:	20000064 	.word	0x20000064

000034ec <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    34ec:	3008      	adds	r0, #8
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <pin_in_use_by_te+0x10>)
    34f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    34f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    34f8:	4770      	bx	lr
    34fa:	bf00      	nop
    34fc:	20000064 	.word	0x20000064

00003500 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3500:	3008      	adds	r0, #8
    3502:	4b04      	ldr	r3, [pc, #16]	; (3514 <pin_has_trigger+0x14>)
    3504:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3508:	f010 001c 	ands.w	r0, r0, #28
    350c:	bf18      	it	ne
    350e:	2001      	movne	r0, #1
    3510:	4770      	bx	lr
    3512:	bf00      	nop
    3514:	20000064 	.word	0x20000064

00003518 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3518:	3008      	adds	r0, #8
    351a:	4b03      	ldr	r3, [pc, #12]	; (3528 <pin_is_output+0x10>)
    351c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3520:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3524:	4770      	bx	lr
    3526:	bf00      	nop
    3528:	20000064 	.word	0x20000064

0000352c <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    352c:	3008      	adds	r0, #8
    352e:	4b02      	ldr	r3, [pc, #8]	; (3538 <pin_te_get+0xc>)
    3530:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3534:	0b40      	lsrs	r0, r0, #13
    3536:	4770      	bx	lr
    3538:	20000064 	.word	0x20000064

0000353c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    353c:	2200      	movs	r2, #0
    353e:	e004      	b.n	354a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3540:	f04f 33ff 	mov.w	r3, #4294967295
    3544:	4283      	cmp	r3, r0
    3546:	d00f      	beq.n	3568 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3548:	3201      	adds	r2, #1
    354a:	2a1f      	cmp	r2, #31
    354c:	d80a      	bhi.n	3564 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    354e:	f102 0308 	add.w	r3, r2, #8
    3552:	4906      	ldr	r1, [pc, #24]	; (356c <handler_in_use+0x30>)
    3554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3558:	f413 7f80 	tst.w	r3, #256	; 0x100
    355c:	d0f0      	beq.n	3540 <handler_in_use+0x4>
    355e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3562:	e7ef      	b.n	3544 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3564:	2000      	movs	r0, #0
    3566:	4770      	bx	lr
            return true;
    3568:	2001      	movs	r0, #1
}
    356a:	4770      	bx	lr
    356c:	20000064 	.word	0x20000064

00003570 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3570:	2300      	movs	r3, #0
    3572:	b113      	cbz	r3, 357a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    3574:	f04f 30ff 	mov.w	r0, #4294967295
}
    3578:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    357a:	4a07      	ldr	r2, [pc, #28]	; (3598 <find_handler+0x28>)
    357c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3580:	4282      	cmp	r2, r0
    3582:	d001      	beq.n	3588 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3584:	3301      	adds	r3, #1
    3586:	e7f4      	b.n	3572 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3588:	4a03      	ldr	r2, [pc, #12]	; (3598 <find_handler+0x28>)
    358a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    358e:	6852      	ldr	r2, [r2, #4]
    3590:	428a      	cmp	r2, r1
    3592:	d1f7      	bne.n	3584 <find_handler+0x14>
            return i;
    3594:	4618      	mov	r0, r3
    3596:	4770      	bx	lr
    3598:	20000064 	.word	0x20000064

0000359c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    359c:	3008      	adds	r0, #8
    359e:	4b06      	ldr	r3, [pc, #24]	; (35b8 <channel_handler_get+0x1c>)
    35a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    35a4:	f410 7f80 	tst.w	r0, #256	; 0x100
    35a8:	d004      	beq.n	35b4 <channel_handler_get+0x18>
    35aa:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    35ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    35b2:	4770      	bx	lr
        return NULL;
    35b4:	2000      	movs	r0, #0
}
    35b6:	4770      	bx	lr
    35b8:	20000064 	.word	0x20000064

000035bc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    35bc:	b570      	push	{r4, r5, r6, lr}
    35be:	4604      	mov	r4, r0
    35c0:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    35c2:	f7ff ffeb 	bl	359c <channel_handler_get>

    if (handler)
    35c6:	b120      	cbz	r0, 35d2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    35c8:	6806      	ldr	r6, [r0, #0]
    35ca:	6842      	ldr	r2, [r0, #4]
    35cc:	4629      	mov	r1, r5
    35ce:	4620      	mov	r0, r4
    35d0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    35d2:	4b04      	ldr	r3, [pc, #16]	; (35e4 <call_handler+0x28>)
    35d4:	689b      	ldr	r3, [r3, #8]
    35d6:	b123      	cbz	r3, 35e2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    35d8:	4a02      	ldr	r2, [pc, #8]	; (35e4 <call_handler+0x28>)
    35da:	68d2      	ldr	r2, [r2, #12]
    35dc:	4629      	mov	r1, r5
    35de:	4620      	mov	r0, r4
    35e0:	4798      	blx	r3
    }
}
    35e2:	bd70      	pop	{r4, r5, r6, pc}
    35e4:	20000064 	.word	0x20000064

000035e8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35e8:	f100 0208 	add.w	r2, r0, #8
    35ec:	4b0e      	ldr	r3, [pc, #56]	; (3628 <release_handler+0x40>)
    35ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    35f2:	f413 7f80 	tst.w	r3, #256	; 0x100
    35f6:	d016      	beq.n	3626 <release_handler+0x3e>
{
    35f8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    35fa:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    35fe:	4610      	mov	r0, r2
    3600:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3604:	4a08      	ldr	r2, [pc, #32]	; (3628 <release_handler+0x40>)
    3606:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    360a:	4620      	mov	r0, r4
    360c:	f7ff ff96 	bl	353c <handler_in_use>
    3610:	b100      	cbz	r0, 3614 <release_handler+0x2c>
}
    3612:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3614:	4804      	ldr	r0, [pc, #16]	; (3628 <release_handler+0x40>)
    3616:	2300      	movs	r3, #0
    3618:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    361c:	4621      	mov	r1, r4
    361e:	3054      	adds	r0, #84	; 0x54
    3620:	f7ff fe0e 	bl	3240 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3624:	e7f5      	b.n	3612 <release_handler+0x2a>
    3626:	4770      	bx	lr
    3628:	20000064 	.word	0x20000064

0000362c <pin_handler_trigger_uninit>:
{
    362c:	b510      	push	{r4, lr}
    362e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3630:	f7ff ff5c 	bl	34ec <pin_in_use_by_te>
    3634:	b140      	cbz	r0, 3648 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3636:	4620      	mov	r0, r4
    3638:	f7ff ff78 	bl	352c <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    363c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3640:	4b06      	ldr	r3, [pc, #24]	; (365c <pin_handler_trigger_uninit+0x30>)
    3642:	2200      	movs	r2, #0
    3644:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3648:	4620      	mov	r0, r4
    364a:	f7ff ffcd 	bl	35e8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    364e:	3408      	adds	r4, #8
    3650:	4b03      	ldr	r3, [pc, #12]	; (3660 <pin_handler_trigger_uninit+0x34>)
    3652:	2200      	movs	r2, #0
    3654:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3658:	bd10      	pop	{r4, pc}
    365a:	bf00      	nop
    365c:	40006000 	.word	0x40006000
    3660:	20000064 	.word	0x20000064

00003664 <pin_handler_set>:
{
    3664:	b570      	push	{r4, r5, r6, lr}
    3666:	b082      	sub	sp, #8
    3668:	4606      	mov	r6, r0
    366a:	460c      	mov	r4, r1
    366c:	4615      	mov	r5, r2
    release_handler(pin);
    366e:	f7ff ffbb 	bl	35e8 <release_handler>
    if (!handler)
    3672:	b324      	cbz	r4, 36be <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3674:	4629      	mov	r1, r5
    3676:	4620      	mov	r0, r4
    3678:	f7ff ff7a 	bl	3570 <find_handler>
    if (handler_id < 0)
    367c:	1e03      	subs	r3, r0, #0
    367e:	db13      	blt.n	36a8 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3680:	4a10      	ldr	r2, [pc, #64]	; (36c4 <pin_handler_set+0x60>)
    3682:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3686:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    368a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    368c:	025b      	lsls	r3, r3, #9
    368e:	b29b      	uxth	r3, r3
    3690:	f106 0008 	add.w	r0, r6, #8
    3694:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    3698:	430b      	orrs	r3, r1
    369a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    369e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    36a2:	4809      	ldr	r0, [pc, #36]	; (36c8 <pin_handler_set+0x64>)
}
    36a4:	b002      	add	sp, #8
    36a6:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    36a8:	f10d 0107 	add.w	r1, sp, #7
    36ac:	4807      	ldr	r0, [pc, #28]	; (36cc <pin_handler_set+0x68>)
    36ae:	f7ff fd9f 	bl	31f0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    36b2:	4b05      	ldr	r3, [pc, #20]	; (36c8 <pin_handler_set+0x64>)
    36b4:	4298      	cmp	r0, r3
    36b6:	d1f5      	bne.n	36a4 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    36b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    36bc:	e7e0      	b.n	3680 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    36be:	4802      	ldr	r0, [pc, #8]	; (36c8 <pin_handler_set+0x64>)
    36c0:	e7f0      	b.n	36a4 <pin_handler_set+0x40>
    36c2:	bf00      	nop
    36c4:	20000064 	.word	0x20000064
    36c8:	0bad0000 	.word	0x0bad0000
    36cc:	200000b8 	.word	0x200000b8

000036d0 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	b083      	sub	sp, #12
    for (i = start_port; i < (start_port + length); i++)
    36d4:	2300      	movs	r3, #0
    36d6:	a801      	add	r0, sp, #4
    36d8:	e008      	b.n	36ec <port_event_handle+0x1c>
        *p_masks = gpio_regs[i]->LATCH;
    36da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    36de:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    36e2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    36e6:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    36ea:	3301      	adds	r3, #1
    36ec:	2b00      	cmp	r3, #0
    36ee:	d0f4      	beq.n	36da <port_event_handle+0xa>
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    36f0:	2500      	movs	r5, #0
    36f2:	b39d      	cbz	r5, 375c <port_event_handle+0x8c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36f4:	4b1e      	ldr	r3, [pc, #120]	; (3770 <port_event_handle+0xa0>)
    36f6:	2200      	movs	r2, #0
    36f8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    36fc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    3700:	a801      	add	r0, sp, #4
    3702:	f003 fa5a 	bl	6bba <latch_pending_read_and_check>
    3706:	2800      	cmp	r0, #0
    3708:	d1f2      	bne.n	36f0 <port_event_handle+0x20>
}
    370a:	b003      	add	sp, #12
    370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    370e:	fa90 f0a0 	rbit	r0, r0
    3712:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3716:	eb00 1045 	add.w	r0, r0, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    371a:	f100 0208 	add.w	r2, r0, #8
    371e:	4b15      	ldr	r3, [pc, #84]	; (3774 <port_event_handle+0xa4>)
    3720:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3724:	08c6      	lsrs	r6, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3726:	f000 0307 	and.w	r3, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    372a:	af01      	add	r7, sp, #4
    372c:	2401      	movs	r4, #1
    372e:	fa04 f203 	lsl.w	r2, r4, r3
    3732:	5dbb      	ldrb	r3, [r7, r6]
    3734:	ea23 0302 	bic.w	r3, r3, r2
    3738:	55bb      	strb	r3, [r7, r6]
    *p_pin = pin_number & 0x1F;
    373a:	f000 071f 	and.w	r7, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    373e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3742:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    3746:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    374a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    374e:	f3c1 0182 	ubfx	r1, r1, #2, #3
    3752:	f003 f9e4 	bl	6b1e <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3756:	40bc      	lsls	r4, r7
    3758:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
            while (latch[i])
    375c:	ab02      	add	r3, sp, #8
    375e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3762:	f853 0c04 	ldr.w	r0, [r3, #-4]
    3766:	2800      	cmp	r0, #0
    3768:	d1d1      	bne.n	370e <port_event_handle+0x3e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    376a:	3501      	adds	r5, #1
    376c:	e7c1      	b.n	36f2 <port_event_handle+0x22>
    376e:	bf00      	nop
    3770:	40006000 	.word	0x40006000
    3774:	20000064 	.word	0x20000064

00003778 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3778:	b538      	push	{r3, r4, r5, lr}
    377a:	4604      	mov	r4, r0
    while (mask)
    377c:	e018      	b.n	37b0 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    377e:	fa94 f3a4 	rbit	r3, r4
    3782:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3786:	2201      	movs	r2, #1
    3788:	409a      	lsls	r2, r3
    378a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    378e:	4a0a      	ldr	r2, [pc, #40]	; (37b8 <gpiote_evt_handle+0x40>)
    3790:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3794:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3798:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    379c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    37a0:	f3c0 4001 	ubfx	r0, r0, #16, #2
    37a4:	f003 f9b4 	bl	6b10 <gpiote_polarity_to_trigger>
    37a8:	4601      	mov	r1, r0
    37aa:	4628      	mov	r0, r5
    37ac:	f7ff ff06 	bl	35bc <call_handler>
    while (mask)
    37b0:	2c00      	cmp	r4, #0
    37b2:	d1e4      	bne.n	377e <gpiote_evt_handle+0x6>
    }
}
    37b4:	bd38      	pop	{r3, r4, r5, pc}
    37b6:	bf00      	nop
    37b8:	40006000 	.word	0x40006000

000037bc <nrfx_gpiote_input_configure>:
{
    37bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37c0:	4604      	mov	r4, r0
    37c2:	4615      	mov	r5, r2
    37c4:	461e      	mov	r6, r3
    if (p_input_config)
    37c6:	b369      	cbz	r1, 3824 <nrfx_gpiote_input_configure+0x68>
    37c8:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    37ca:	f003 f98b 	bl	6ae4 <pin_is_task_output>
    37ce:	2800      	cmp	r0, #0
    37d0:	f040 8096 	bne.w	3900 <nrfx_gpiote_input_configure+0x144>
    *p_pin = pin_number & 0x1F;
    37d4:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    37d8:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
    37dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    37e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    37e4:	2f00      	cmp	r7, #0
    37e6:	d03f      	beq.n	3868 <nrfx_gpiote_input_configure+0xac>
    37e8:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    37ea:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    37ee:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    37f2:	2f00      	cmp	r7, #0
    37f4:	d03a      	beq.n	386c <nrfx_gpiote_input_configure+0xb0>
    37f6:	7839      	ldrb	r1, [r7, #0]
    37f8:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    37fa:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    37fc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3800:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    3804:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3808:	4a41      	ldr	r2, [pc, #260]	; (3910 <nrfx_gpiote_input_configure+0x154>)
    380a:	f104 0108 	add.w	r1, r4, #8
    380e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3812:	f023 0302 	bic.w	r3, r3, #2
    3816:	b29b      	uxth	r3, r3
    3818:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    381c:	f043 0301 	orr.w	r3, r3, #1
    3820:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3824:	b1bd      	cbz	r5, 3856 <nrfx_gpiote_input_configure+0x9a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3826:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3828:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    382c:	4620      	mov	r0, r4
    382e:	f7ff fe73 	bl	3518 <pin_is_output>
    3832:	b1e8      	cbz	r0, 3870 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    3834:	f1b8 0f00 	cmp.w	r8, #0
    3838:	d164      	bne.n	3904 <nrfx_gpiote_input_configure+0x148>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    383a:	4a35      	ldr	r2, [pc, #212]	; (3910 <nrfx_gpiote_input_configure+0x154>)
    383c:	f104 0108 	add.w	r1, r4, #8
    3840:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3844:	f023 031c 	bic.w	r3, r3, #28
    3848:	b29b      	uxth	r3, r3
    384a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    384e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3852:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3856:	2e00      	cmp	r6, #0
    3858:	d058      	beq.n	390c <nrfx_gpiote_input_configure+0x150>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    385a:	6872      	ldr	r2, [r6, #4]
    385c:	6831      	ldr	r1, [r6, #0]
    385e:	4620      	mov	r0, r4
    3860:	f7ff ff00 	bl	3664 <pin_handler_set>
}
    3864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3868:	2100      	movs	r1, #0
    386a:	e7be      	b.n	37ea <nrfx_gpiote_input_configure+0x2e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    386c:	2100      	movs	r1, #0
    386e:	e7c4      	b.n	37fa <nrfx_gpiote_input_configure+0x3e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3870:	4a27      	ldr	r2, [pc, #156]	; (3910 <nrfx_gpiote_input_configure+0x154>)
    3872:	f104 0108 	add.w	r1, r4, #8
    3876:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    387a:	f023 0320 	bic.w	r3, r3, #32
    387e:	04db      	lsls	r3, r3, #19
    3880:	0cdb      	lsrs	r3, r3, #19
    3882:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    3886:	f1b8 0f00 	cmp.w	r8, #0
    388a:	d0d6      	beq.n	383a <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    388c:	2f03      	cmp	r7, #3
    388e:	d83b      	bhi.n	3908 <nrfx_gpiote_input_configure+0x14c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3890:	686b      	ldr	r3, [r5, #4]
    3892:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3894:	b937      	cbnz	r7, 38a4 <nrfx_gpiote_input_configure+0xe8>
    p_reg->CONFIG[idx] = 0;
    3896:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    389a:	4b1e      	ldr	r3, [pc, #120]	; (3914 <nrfx_gpiote_input_configure+0x158>)
    389c:	2200      	movs	r2, #0
    389e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    38a2:	e7ca      	b.n	383a <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    38a4:	4638      	mov	r0, r7
    38a6:	f003 f934 	bl	6b12 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    38aa:	4b1a      	ldr	r3, [pc, #104]	; (3914 <nrfx_gpiote_input_configure+0x158>)
    38ac:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    38b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    38b4:	f021 0103 	bic.w	r1, r1, #3
    38b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    38bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    38c0:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    38c4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    38c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    38cc:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    38d0:	0221      	lsls	r1, r4, #8
    38d2:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    38d6:	0400      	lsls	r0, r0, #16
    38d8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    38dc:	4301      	orrs	r1, r0
    38de:	ea4c 0101 	orr.w	r1, ip, r1
    38e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    38e6:	036b      	lsls	r3, r5, #13
    38e8:	b29b      	uxth	r3, r3
    38ea:	4a09      	ldr	r2, [pc, #36]	; (3910 <nrfx_gpiote_input_configure+0x154>)
    38ec:	f104 0108 	add.w	r1, r4, #8
    38f0:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    38f4:	4303      	orrs	r3, r0
    38f6:	f043 0320 	orr.w	r3, r3, #32
    38fa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    38fe:	e79c      	b.n	383a <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    3900:	4805      	ldr	r0, [pc, #20]	; (3918 <nrfx_gpiote_input_configure+0x15c>)
    3902:	e7af      	b.n	3864 <nrfx_gpiote_input_configure+0xa8>
                return NRFX_ERROR_INVALID_PARAM;
    3904:	4804      	ldr	r0, [pc, #16]	; (3918 <nrfx_gpiote_input_configure+0x15c>)
    3906:	e7ad      	b.n	3864 <nrfx_gpiote_input_configure+0xa8>
                    return NRFX_ERROR_INVALID_PARAM;
    3908:	4803      	ldr	r0, [pc, #12]	; (3918 <nrfx_gpiote_input_configure+0x15c>)
    390a:	e7ab      	b.n	3864 <nrfx_gpiote_input_configure+0xa8>
        err = NRFX_SUCCESS;
    390c:	4803      	ldr	r0, [pc, #12]	; (391c <nrfx_gpiote_input_configure+0x160>)
    390e:	e7a9      	b.n	3864 <nrfx_gpiote_input_configure+0xa8>
    3910:	20000064 	.word	0x20000064
    3914:	40006000 	.word	0x40006000
    3918:	0bad0004 	.word	0x0bad0004
    391c:	0bad0000 	.word	0x0bad0000

00003920 <nrfx_gpiote_output_configure>:
{
    3920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3922:	4604      	mov	r4, r0
    3924:	4616      	mov	r6, r2
    if (p_config)
    3926:	2900      	cmp	r1, #0
    3928:	d04d      	beq.n	39c6 <nrfx_gpiote_output_configure+0xa6>
    392a:	460d      	mov	r5, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    392c:	f003 f8e9 	bl	6b02 <pin_is_input>
    3930:	b128      	cbz	r0, 393e <nrfx_gpiote_output_configure+0x1e>
    3932:	4620      	mov	r0, r4
    3934:	f7ff fdda 	bl	34ec <pin_in_use_by_te>
    3938:	2800      	cmp	r0, #0
    393a:	f040 8097 	bne.w	3a6c <nrfx_gpiote_output_configure+0x14c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    393e:	4620      	mov	r0, r4
    3940:	f7ff fdde 	bl	3500 <pin_has_trigger>
    3944:	b118      	cbz	r0, 394e <nrfx_gpiote_output_configure+0x2e>
    3946:	786b      	ldrb	r3, [r5, #1]
    3948:	2b01      	cmp	r3, #1
    394a:	f000 8091 	beq.w	3a70 <nrfx_gpiote_output_configure+0x150>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    394e:	1ca8      	adds	r0, r5, #2
    *p_pin = pin_number & 0x1F;
    3950:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3954:	f502 71e0 	add.w	r1, r2, #448	; 0x1c0
    3958:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    395c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3960:	1c6f      	adds	r7, r5, #1
    3962:	d04c      	beq.n	39fe <nrfx_gpiote_output_configure+0xde>
    3964:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3966:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    396a:	2800      	cmp	r0, #0
    396c:	d049      	beq.n	3a02 <nrfx_gpiote_output_configure+0xe2>
    396e:	f04f 0c0c 	mov.w	ip, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3972:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3976:	2d00      	cmp	r5, #0
    3978:	d046      	beq.n	3a08 <nrfx_gpiote_output_configure+0xe8>
    397a:	f44f 6ce0 	mov.w	ip, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    397e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    3982:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3986:	2f00      	cmp	r7, #0
    3988:	d041      	beq.n	3a0e <nrfx_gpiote_output_configure+0xee>
    398a:	786b      	ldrb	r3, [r5, #1]
    398c:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    398e:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3992:	2800      	cmp	r0, #0
    3994:	d03d      	beq.n	3a12 <nrfx_gpiote_output_configure+0xf2>
    3996:	78a8      	ldrb	r0, [r5, #2]
    3998:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    399a:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    399c:	2d00      	cmp	r5, #0
    399e:	d03a      	beq.n	3a16 <nrfx_gpiote_output_configure+0xf6>
    39a0:	7828      	ldrb	r0, [r5, #0]
    39a2:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    39a4:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    39a6:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    39a8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    39ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    39b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    39b4:	4a31      	ldr	r2, [pc, #196]	; (3a7c <nrfx_gpiote_output_configure+0x15c>)
    39b6:	f104 0108 	add.w	r1, r4, #8
    39ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    39be:	f043 0303 	orr.w	r3, r3, #3
    39c2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    39c6:	2e00      	cmp	r6, #0
    39c8:	d054      	beq.n	3a74 <nrfx_gpiote_output_configure+0x154>
        if (pin_is_input(pin))
    39ca:	4620      	mov	r0, r4
    39cc:	f003 f899 	bl	6b02 <pin_is_input>
    39d0:	2800      	cmp	r0, #0
    39d2:	d151      	bne.n	3a78 <nrfx_gpiote_output_configure+0x158>
        uint32_t ch = p_task_config->task_ch;
    39d4:	7833      	ldrb	r3, [r6, #0]
    p_reg->CONFIG[idx] = 0;
    39d6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    39da:	4a29      	ldr	r2, [pc, #164]	; (3a80 <nrfx_gpiote_output_configure+0x160>)
    39dc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    39e0:	4926      	ldr	r1, [pc, #152]	; (3a7c <nrfx_gpiote_output_configure+0x15c>)
    39e2:	f104 0008 	add.w	r0, r4, #8
    39e6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    39ea:	f022 0220 	bic.w	r2, r2, #32
    39ee:	04d2      	lsls	r2, r2, #19
    39f0:	0cd2      	lsrs	r2, r2, #19
    39f2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    39f6:	7872      	ldrb	r2, [r6, #1]
    39f8:	b97a      	cbnz	r2, 3a1a <nrfx_gpiote_output_configure+0xfa>
    return NRFX_SUCCESS;
    39fa:	4822      	ldr	r0, [pc, #136]	; (3a84 <nrfx_gpiote_output_configure+0x164>)
}
    39fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    39fe:	2300      	movs	r3, #0
    3a00:	e7b1      	b.n	3966 <nrfx_gpiote_output_configure+0x46>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3a02:	f04f 0c00 	mov.w	ip, #0
    3a06:	e7b4      	b.n	3972 <nrfx_gpiote_output_configure+0x52>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3a08:	f04f 0c00 	mov.w	ip, #0
    3a0c:	e7b7      	b.n	397e <nrfx_gpiote_output_configure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3a0e:	2300      	movs	r3, #0
    3a10:	e7bd      	b.n	398e <nrfx_gpiote_output_configure+0x6e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3a12:	2000      	movs	r0, #0
    3a14:	e7c1      	b.n	399a <nrfx_gpiote_output_configure+0x7a>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3a16:	2000      	movs	r0, #0
    3a18:	e7c4      	b.n	39a4 <nrfx_gpiote_output_configure+0x84>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3a1a:	78b7      	ldrb	r7, [r6, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3a1c:	4818      	ldr	r0, [pc, #96]	; (3a80 <nrfx_gpiote_output_configure+0x160>)
    3a1e:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    3a22:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    3a26:	f421 1198 	bic.w	r1, r1, #1245184	; 0x130000
    3a2a:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    3a2e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a32:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    3a36:	0221      	lsls	r1, r4, #8
    3a38:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3a3c:	0412      	lsls	r2, r2, #16
    3a3e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a42:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3a44:	0539      	lsls	r1, r7, #20
    3a46:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3a4a:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a4c:	4332      	orrs	r2, r6
    3a4e:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3a52:	035b      	lsls	r3, r3, #13
    3a54:	b29b      	uxth	r3, r3
    3a56:	4a09      	ldr	r2, [pc, #36]	; (3a7c <nrfx_gpiote_output_configure+0x15c>)
    3a58:	3408      	adds	r4, #8
    3a5a:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    3a5e:	430b      	orrs	r3, r1
    3a60:	f043 0320 	orr.w	r3, r3, #32
    3a64:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3a68:	4806      	ldr	r0, [pc, #24]	; (3a84 <nrfx_gpiote_output_configure+0x164>)
    3a6a:	e7c7      	b.n	39fc <nrfx_gpiote_output_configure+0xdc>
    3a6c:	4806      	ldr	r0, [pc, #24]	; (3a88 <nrfx_gpiote_output_configure+0x168>)
    3a6e:	e7c5      	b.n	39fc <nrfx_gpiote_output_configure+0xdc>
    3a70:	4805      	ldr	r0, [pc, #20]	; (3a88 <nrfx_gpiote_output_configure+0x168>)
    3a72:	e7c3      	b.n	39fc <nrfx_gpiote_output_configure+0xdc>
    3a74:	4803      	ldr	r0, [pc, #12]	; (3a84 <nrfx_gpiote_output_configure+0x164>)
    3a76:	e7c1      	b.n	39fc <nrfx_gpiote_output_configure+0xdc>
            return NRFX_ERROR_INVALID_PARAM;
    3a78:	4803      	ldr	r0, [pc, #12]	; (3a88 <nrfx_gpiote_output_configure+0x168>)
    3a7a:	e7bf      	b.n	39fc <nrfx_gpiote_output_configure+0xdc>
    3a7c:	20000064 	.word	0x20000064
    3a80:	40006000 	.word	0x40006000
    3a84:	0bad0000 	.word	0x0bad0000
    3a88:	0bad0004 	.word	0x0bad0004

00003a8c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3a8c:	4b01      	ldr	r3, [pc, #4]	; (3a94 <nrfx_gpiote_global_callback_set+0x8>)
    3a8e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3a90:	60d9      	str	r1, [r3, #12]
}
    3a92:	4770      	bx	lr
    3a94:	20000064 	.word	0x20000064

00003a98 <nrfx_gpiote_channel_get>:
{
    3a98:	b538      	push	{r3, r4, r5, lr}
    3a9a:	4604      	mov	r4, r0
    3a9c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3a9e:	f7ff fd25 	bl	34ec <pin_in_use_by_te>
    3aa2:	b140      	cbz	r0, 3ab6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3aa4:	f104 0008 	add.w	r0, r4, #8
    3aa8:	4b04      	ldr	r3, [pc, #16]	; (3abc <nrfx_gpiote_channel_get+0x24>)
    3aaa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3aae:	0b5b      	lsrs	r3, r3, #13
    3ab0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3ab2:	4803      	ldr	r0, [pc, #12]	; (3ac0 <nrfx_gpiote_channel_get+0x28>)
}
    3ab4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3ab6:	4803      	ldr	r0, [pc, #12]	; (3ac4 <nrfx_gpiote_channel_get+0x2c>)
    3ab8:	e7fc      	b.n	3ab4 <nrfx_gpiote_channel_get+0x1c>
    3aba:	bf00      	nop
    3abc:	20000064 	.word	0x20000064
    3ac0:	0bad0000 	.word	0x0bad0000
    3ac4:	0bad0004 	.word	0x0bad0004

00003ac8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3ac8:	4b10      	ldr	r3, [pc, #64]	; (3b0c <nrfx_gpiote_init+0x44>)
    3aca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    3ace:	b10b      	cbz	r3, 3ad4 <nrfx_gpiote_init+0xc>
        return err_code;
    3ad0:	480f      	ldr	r0, [pc, #60]	; (3b10 <nrfx_gpiote_init+0x48>)
}
    3ad2:	4770      	bx	lr
{
    3ad4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3ad6:	4c0d      	ldr	r4, [pc, #52]	; (3b0c <nrfx_gpiote_init+0x44>)
    3ad8:	2240      	movs	r2, #64	; 0x40
    3ada:	2100      	movs	r1, #0
    3adc:	f104 0010 	add.w	r0, r4, #16
    3ae0:	f002 fb7c 	bl	61dc <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3ae4:	2006      	movs	r0, #6
    3ae6:	f7fd fb75 	bl	11d4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3aea:	4b0a      	ldr	r3, [pc, #40]	; (3b14 <nrfx_gpiote_init+0x4c>)
    3aec:	2200      	movs	r2, #0
    3aee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3af2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3afa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3afe:	2301      	movs	r3, #1
    3b00:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3b04:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
    3b06:	4804      	ldr	r0, [pc, #16]	; (3b18 <nrfx_gpiote_init+0x50>)
}
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	bf00      	nop
    3b0c:	20000064 	.word	0x20000064
    3b10:	0bad0005 	.word	0x0bad0005
    3b14:	40006000 	.word	0x40006000
    3b18:	0bad0000 	.word	0x0bad0000

00003b1c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3b1c:	4b03      	ldr	r3, [pc, #12]	; (3b2c <nrfx_gpiote_is_init+0x10>)
    3b1e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3b22:	3800      	subs	r0, #0
    3b24:	bf18      	it	ne
    3b26:	2001      	movne	r0, #1
    3b28:	4770      	bx	lr
    3b2a:	bf00      	nop
    3b2c:	20000064 	.word	0x20000064

00003b30 <nrfx_gpiote_channel_free>:
{
    3b30:	b508      	push	{r3, lr}
    3b32:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3b34:	4801      	ldr	r0, [pc, #4]	; (3b3c <nrfx_gpiote_channel_free+0xc>)
    3b36:	f7ff fb83 	bl	3240 <nrfx_flag32_free>
}
    3b3a:	bd08      	pop	{r3, pc}
    3b3c:	200000b4 	.word	0x200000b4

00003b40 <nrfx_gpiote_channel_alloc>:
{
    3b40:	b508      	push	{r3, lr}
    3b42:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3b44:	4801      	ldr	r0, [pc, #4]	; (3b4c <nrfx_gpiote_channel_alloc+0xc>)
    3b46:	f7ff fb53 	bl	31f0 <nrfx_flag32_alloc>
}
    3b4a:	bd08      	pop	{r3, pc}
    3b4c:	200000b4 	.word	0x200000b4

00003b50 <nrfx_gpiote_trigger_enable>:
{
    3b50:	b538      	push	{r3, r4, r5, lr}
    3b52:	4604      	mov	r4, r0
    3b54:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b56:	f7ff fcc9 	bl	34ec <pin_in_use_by_te>
    3b5a:	b308      	cbz	r0, 3ba0 <nrfx_gpiote_trigger_enable+0x50>
    3b5c:	4620      	mov	r0, r4
    3b5e:	f002 ffd0 	bl	6b02 <pin_is_input>
    3b62:	b1e8      	cbz	r0, 3ba0 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    3b64:	4620      	mov	r0, r4
    3b66:	f7ff fce1 	bl	352c <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3b6a:	0083      	lsls	r3, r0, #2
    3b6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3b70:	b29b      	uxth	r3, r3
    3b72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3b76:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b7a:	2200      	movs	r2, #0
    3b7c:	601a      	str	r2, [r3, #0]
    3b7e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3b80:	4a1d      	ldr	r2, [pc, #116]	; (3bf8 <nrfx_gpiote_trigger_enable+0xa8>)
    3b82:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3b86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3b8a:	f043 0301 	orr.w	r3, r3, #1
    3b8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3b92:	b365      	cbz	r5, 3bee <nrfx_gpiote_trigger_enable+0x9e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3b94:	2301      	movs	r3, #1
    3b96:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    3b9a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    3b9e:	e026      	b.n	3bee <nrfx_gpiote_trigger_enable+0x9e>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ba0:	f104 0308 	add.w	r3, r4, #8
    3ba4:	4a15      	ldr	r2, [pc, #84]	; (3bfc <nrfx_gpiote_trigger_enable+0xac>)
    3ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3baa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3bae:	2b04      	cmp	r3, #4
    3bb0:	d00e      	beq.n	3bd0 <nrfx_gpiote_trigger_enable+0x80>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3bb2:	2b05      	cmp	r3, #5
    3bb4:	d01c      	beq.n	3bf0 <nrfx_gpiote_trigger_enable+0xa0>
    *p_pin = pin_number & 0x1F;
    3bb6:	f004 031f 	and.w	r3, r4, #31
    return p_reg->IN;
    3bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3bbe:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3bc2:	fa22 f303 	lsr.w	r3, r2, r3
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3bc6:	f013 0f01 	tst.w	r3, #1
    3bca:	d013      	beq.n	3bf4 <nrfx_gpiote_trigger_enable+0xa4>
    3bcc:	2103      	movs	r1, #3
    3bce:	e000      	b.n	3bd2 <nrfx_gpiote_trigger_enable+0x82>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3bd0:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
    3bd2:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3bda:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3bde:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    3be2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3bea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    3bee:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3bf0:	2102      	movs	r1, #2
    3bf2:	e7ee      	b.n	3bd2 <nrfx_gpiote_trigger_enable+0x82>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3bf4:	2102      	movs	r1, #2
    3bf6:	e7ec      	b.n	3bd2 <nrfx_gpiote_trigger_enable+0x82>
    3bf8:	40006000 	.word	0x40006000
    3bfc:	20000064 	.word	0x20000064

00003c00 <nrfx_gpiote_trigger_disable>:
{
    3c00:	b510      	push	{r4, lr}
    3c02:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3c04:	f7ff fc72 	bl	34ec <pin_in_use_by_te>
    3c08:	b1a0      	cbz	r0, 3c34 <nrfx_gpiote_trigger_disable+0x34>
    3c0a:	4620      	mov	r0, r4
    3c0c:	f002 ff79 	bl	6b02 <pin_is_input>
    3c10:	b180      	cbz	r0, 3c34 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3c12:	4620      	mov	r0, r4
    3c14:	f7ff fc8a 	bl	352c <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3c18:	2201      	movs	r2, #1
    3c1a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3c1c:	4b0c      	ldr	r3, [pc, #48]	; (3c50 <nrfx_gpiote_trigger_disable+0x50>)
    3c1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3c22:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3c26:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3c2a:	f022 0203 	bic.w	r2, r2, #3
    3c2e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3c32:	e00b      	b.n	3c4c <nrfx_gpiote_trigger_disable+0x4c>
    *p_pin = pin_number & 0x1F;
    3c34:	f004 041f 	and.w	r4, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3c3c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3c40:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    cnf &= ~to_update;
    3c44:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    3c48:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
    3c4c:	bd10      	pop	{r4, pc}
    3c4e:	bf00      	nop
    3c50:	40006000 	.word	0x40006000

00003c54 <nrfx_gpiote_pin_uninit>:
{
    3c54:	b510      	push	{r4, lr}
    3c56:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3c58:	f7ff fc3e 	bl	34d8 <pin_in_use>
    3c5c:	b908      	cbnz	r0, 3c62 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3c5e:	4809      	ldr	r0, [pc, #36]	; (3c84 <nrfx_gpiote_pin_uninit+0x30>)
}
    3c60:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3c62:	4620      	mov	r0, r4
    3c64:	f7ff ffcc 	bl	3c00 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3c68:	4620      	mov	r0, r4
    3c6a:	f7ff fcdf 	bl	362c <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    3c6e:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    3c72:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3c7a:	2202      	movs	r2, #2
    3c7c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    return NRFX_SUCCESS;
    3c80:	4801      	ldr	r0, [pc, #4]	; (3c88 <nrfx_gpiote_pin_uninit+0x34>)
    3c82:	e7ed      	b.n	3c60 <nrfx_gpiote_pin_uninit+0xc>
    3c84:	0bad0004 	.word	0x0bad0004
    3c88:	0bad0000 	.word	0x0bad0000

00003c8c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3c8c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3c8e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3c90:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3c94:	2100      	movs	r1, #0
    uint32_t status = 0;
    3c96:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3c98:	e003      	b.n	3ca2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3c9a:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3c9c:	3304      	adds	r3, #4
    3c9e:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ca0:	3101      	adds	r1, #1
    3ca2:	2907      	cmp	r1, #7
    3ca4:	d814      	bhi.n	3cd0 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ca6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3caa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3cae:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3cb0:	2a00      	cmp	r2, #0
    3cb2:	d0f2      	beq.n	3c9a <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3cb4:	4a0c      	ldr	r2, [pc, #48]	; (3ce8 <nrfx_gpiote_irq_handler+0x5c>)
    3cb6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3cba:	4210      	tst	r0, r2
    3cbc:	d0ed      	beq.n	3c9a <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3cbe:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3cc2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3cc6:	2500      	movs	r5, #0
    3cc8:	6015      	str	r5, [r2, #0]
    3cca:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3ccc:	4304      	orrs	r4, r0
    3cce:	e7e4      	b.n	3c9a <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cd0:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <nrfx_gpiote_irq_handler+0x5c>)
    3cd2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3cd6:	b91b      	cbnz	r3, 3ce0 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3cd8:	4620      	mov	r0, r4
    3cda:	f7ff fd4d 	bl	3778 <gpiote_evt_handle>
}
    3cde:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3ce0:	f7ff fcf6 	bl	36d0 <port_event_handle>
    3ce4:	e7f8      	b.n	3cd8 <nrfx_gpiote_irq_handler+0x4c>
    3ce6:	bf00      	nop
    3ce8:	40006000 	.word	0x40006000

00003cec <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    3cec:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    3cee:	f010 0f01 	tst.w	r0, #1
    3cf2:	d108      	bne.n	3d06 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    3cf4:	4806      	ldr	r0, [pc, #24]	; (3d10 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    3cf6:	f013 0f02 	tst.w	r3, #2
    3cfa:	d000      	beq.n	3cfe <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3cfc:	4805      	ldr	r0, [pc, #20]	; (3d14 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    3cfe:	f013 0f04 	tst.w	r3, #4
    3d02:	d102      	bne.n	3d0a <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    3d04:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3d06:	4804      	ldr	r0, [pc, #16]	; (3d18 <twi_process_error+0x2c>)
    3d08:	e7f5      	b.n	3cf6 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3d0a:	4804      	ldr	r0, [pc, #16]	; (3d1c <twi_process_error+0x30>)
    return ret;
    3d0c:	e7fa      	b.n	3d04 <twi_process_error+0x18>
    3d0e:	bf00      	nop
    3d10:	0bad0001 	.word	0x0bad0001
    3d14:	0bae0001 	.word	0x0bae0001
    3d18:	0bae0000 	.word	0x0bae0000
    3d1c:	0bae0002 	.word	0x0bae0002

00003d20 <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
    3d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d24:	4605      	mov	r5, r0
    3d26:	460c      	mov	r4, r1
    3d28:	4616      	mov	r6, r2
    3d2a:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
    3d2c:	2300      	movs	r3, #0
    3d2e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3d32:	6853      	ldr	r3, [r2, #4]
    3d34:	b133      	cbz	r3, 3d44 <twim_xfer+0x24>
    3d36:	68d3      	ldr	r3, [r2, #12]
    3d38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3d40:	f040 8131 	bne.w	3fa6 <twim_xfer+0x286>
    p_reg->INTENCLR = mask;
    3d44:	4b9c      	ldr	r3, [pc, #624]	; (3fb8 <twim_xfer+0x298>)
    3d46:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
    3d4a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3d4e:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    3d52:	2b00      	cmp	r3, #0
    3d54:	d136      	bne.n	3dc4 <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    3d56:	f017 0f14 	tst.w	r7, #20
    3d5a:	bf0c      	ite	eq
    3d5c:	2301      	moveq	r3, #1
    3d5e:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    3d60:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
    3d64:	f105 0c0c 	add.w	ip, r5, #12
    3d68:	46b6      	mov	lr, r6
    3d6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3d6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3d72:	f8de 3000 	ldr.w	r3, [lr]
    3d76:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    3d7a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    3d7e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
    3d82:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
    3d84:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    3d86:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d8a:	2300      	movs	r3, #0
    3d8c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3d90:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    3d94:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    3d98:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    3d9c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    3da0:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    3da4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3da8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
    3dac:	4639      	mov	r1, r7
    3dae:	4620      	mov	r0, r4
    3db0:	f002 ff8a 	bl	6cc8 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
    3db4:	7833      	ldrb	r3, [r6, #0]
    3db6:	2b03      	cmp	r3, #3
    3db8:	f200 80a8 	bhi.w	3f0c <twim_xfer+0x1ec>
    3dbc:	e8df f003 	tbb	[pc, r3]
    3dc0:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3dc4:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    3dc6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    3dca:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 3fbc <twim_xfer+0x29c>
    3dce:	e081      	b.n	3ed4 <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3dd0:	6933      	ldr	r3, [r6, #16]
    3dd2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3dda:	f040 80e7 	bne.w	3fac <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
    3dde:	f44f 7380 	mov.w	r3, #256	; 0x100
    3de2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3de6:	68f2      	ldr	r2, [r6, #12]
    3de8:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3dea:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3dee:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3df2:	2300      	movs	r3, #0
    3df4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    3df8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dfc:	2301      	movs	r3, #1
    3dfe:	6223      	str	r3, [r4, #32]
    3e00:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e02:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    3e06:	2b00      	cmp	r3, #0
    3e08:	d0fb      	beq.n	3e02 <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e0a:	2300      	movs	r3, #0
    3e0c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    3e10:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3e14:	6932      	ldr	r2, [r6, #16]
    3e16:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e18:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e1c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3e20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3e24:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3e26:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3e28:	f8df 9194 	ldr.w	r9, [pc, #404]	; 3fc0 <twim_xfer+0x2a0>
        break;
    3e2c:	e032      	b.n	3e94 <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3e2e:	68f2      	ldr	r2, [r6, #12]
    3e30:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e32:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e36:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3e3a:	6933      	ldr	r3, [r6, #16]
    3e3c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    3e40:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    3e44:	f040 80b5 	bne.w	3fb2 <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3e48:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3e4a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3e4e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3e52:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    3e56:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3e5a:	2302      	movs	r3, #2
    3e5c:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e5e:	2301      	movs	r3, #1
    3e60:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3e62:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3e64:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3fc0 <twim_xfer+0x2a0>
}
    3e68:	e014      	b.n	3e94 <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3e6a:	68f2      	ldr	r2, [r6, #12]
    3e6c:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e6e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e72:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    3e76:	f017 0f20 	tst.w	r7, #32
    3e7a:	d02e      	beq.n	3eda <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
    3e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
    3e80:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3e88:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e8a:	2301      	movs	r3, #1
    3e8c:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3e8e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3e90:	f8df 912c 	ldr.w	r9, [pc, #300]	; 3fc0 <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    3e94:	f017 0f08 	tst.w	r7, #8
    3e98:	d107      	bne.n	3eaa <twim_xfer+0x18a>
    3e9a:	7832      	ldrb	r2, [r6, #0]
    3e9c:	2a03      	cmp	r2, #3
    3e9e:	d004      	beq.n	3eaa <twim_xfer+0x18a>
    3ea0:	2201      	movs	r2, #1
    3ea2:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
    3ea4:	6873      	ldr	r3, [r6, #4]
    3ea6:	b903      	cbnz	r3, 3eaa <twim_xfer+0x18a>
    3ea8:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
    3eaa:	682b      	ldr	r3, [r5, #0]
    3eac:	b393      	cbz	r3, 3f14 <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    3eae:	f017 0f04 	tst.w	r7, #4
    3eb2:	d001      	beq.n	3eb8 <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
    3eb4:	2300      	movs	r3, #0
    3eb6:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    3eb8:	f017 0f40 	tst.w	r7, #64	; 0x40
    3ebc:	d103      	bne.n	3ec6 <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    3ebe:	68ab      	ldr	r3, [r5, #8]
    3ec0:	f043 0302 	orr.w	r3, r3, #2
    3ec4:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    3ec6:	68ab      	ldr	r3, [r5, #8]
    3ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3ecc:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3ece:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    3ed0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
    3ed4:	4648      	mov	r0, r9
    3ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
    3eda:	f44f 7300 	mov.w	r3, #512	; 0x200
    3ede:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3ee2:	2302      	movs	r3, #2
    3ee4:	60ab      	str	r3, [r5, #8]
    3ee6:	e7d0      	b.n	3e8a <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3ee8:	68f2      	ldr	r2, [r6, #12]
    3eea:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3eec:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3ef0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3ef8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3efc:	2302      	movs	r3, #2
    3efe:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f00:	2301      	movs	r3, #1
    3f02:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    3f04:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
    3f06:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3fc0 <twim_xfer+0x2a0>
}
    3f0a:	e7c3      	b.n	3e94 <twim_xfer+0x174>
    switch (p_xfer_desc->type)
    3f0c:	2308      	movs	r3, #8
    3f0e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3fc4 <twim_xfer+0x2a4>
    3f12:	e7bf      	b.n	3e94 <twim_xfer+0x174>
        bool transmission_finished = false;
    3f14:	4643      	mov	r3, r8
    3f16:	e000      	b.n	3f1a <twim_xfer+0x1fa>
        } while (!transmission_finished);
    3f18:	bb6b      	cbnz	r3, 3f76 <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f1a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    3f1e:	b102      	cbz	r2, 3f22 <twim_xfer+0x202>
                transmission_finished = true;
    3f20:	2301      	movs	r3, #1
    3f22:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3f26:	b12a      	cbz	r2, 3f34 <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f28:	2300      	movs	r3, #0
    3f2a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3f2e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    3f32:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f34:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3f38:	2a00      	cmp	r2, #0
    3f3a:	d0ed      	beq.n	3f18 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f3c:	2200      	movs	r2, #0
    3f3e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    3f42:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f46:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    3f4a:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    3f4e:	b112      	cbz	r2, 3f56 <twim_xfer+0x236>
    3f50:	f411 7f00 	tst.w	r1, #512	; 0x200
    3f54:	d103      	bne.n	3f5e <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f56:	2301      	movs	r3, #1
    3f58:	6223      	str	r3, [r4, #32]
    3f5a:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
    3f5c:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3f5e:	2a00      	cmp	r2, #0
    3f60:	d0da      	beq.n	3f18 <twim_xfer+0x1f8>
    3f62:	f411 7f80 	tst.w	r1, #256	; 0x100
    3f66:	d0d7      	beq.n	3f18 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f68:	2300      	movs	r3, #0
    3f6a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3f6e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    3f72:	4643      	mov	r3, r8
    3f74:	e7d1      	b.n	3f1a <twim_xfer+0x1fa>
    uint32_t error_source = p_reg->ERRORSRC;
    3f76:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3f7a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
    3f7e:	2300      	movs	r3, #0
    3f80:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
    3f84:	b118      	cbz	r0, 3f8e <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
    3f86:	f7ff feb1 	bl	3cec <twi_process_error>
    3f8a:	4681      	mov	r9, r0
    3f8c:	e7a2      	b.n	3ed4 <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    3f8e:	f017 0f40 	tst.w	r7, #64	; 0x40
    3f92:	d19f      	bne.n	3ed4 <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
    3f94:	4629      	mov	r1, r5
    3f96:	4620      	mov	r0, r4
    3f98:	f002 fe28 	bl	6bec <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    3f9c:	2800      	cmp	r0, #0
    3f9e:	d199      	bne.n	3ed4 <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
    3fa0:	f8df 9024 	ldr.w	r9, [pc, #36]	; 3fc8 <twim_xfer+0x2a8>
    3fa4:	e796      	b.n	3ed4 <twim_xfer+0x1b4>
        return err_code;
    3fa6:	f8df 9024 	ldr.w	r9, [pc, #36]	; 3fcc <twim_xfer+0x2ac>
    3faa:	e793      	b.n	3ed4 <twim_xfer+0x1b4>
            return err_code;
    3fac:	f8df 901c 	ldr.w	r9, [pc, #28]	; 3fcc <twim_xfer+0x2ac>
    3fb0:	e790      	b.n	3ed4 <twim_xfer+0x1b4>
            return err_code;
    3fb2:	f8df 9018 	ldr.w	r9, [pc, #24]	; 3fcc <twim_xfer+0x2ac>
    3fb6:	e78d      	b.n	3ed4 <twim_xfer+0x1b4>
    3fb8:	019c0202 	.word	0x019c0202
    3fbc:	0bad000b 	.word	0x0bad000b
    3fc0:	0bad0000 	.word	0x0bad0000
    3fc4:	0bad0004 	.word	0x0bad0004
    3fc8:	0bad0001 	.word	0x0bad0001
    3fcc:	0bad000a 	.word	0x0bad000a

00003fd0 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    3fd0:	b530      	push	{r4, r5, lr}
    3fd2:	b087      	sub	sp, #28
    3fd4:	4604      	mov	r4, r0
    3fd6:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fd8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3fdc:	b143      	cbz	r3, 3ff0 <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fde:	2300      	movs	r3, #0
    3fe0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    3fe4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fe8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3fec:	2b00      	cmp	r3, #0
    3fee:	d061      	beq.n	40b4 <twim_irq_handler+0xe4>
    3ff0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d07d      	beq.n	40f4 <twim_irq_handler+0x124>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ff8:	2300      	movs	r3, #0
    3ffa:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3ffe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    4002:	6a2b      	ldr	r3, [r5, #32]
    4004:	f013 0f40 	tst.w	r3, #64	; 0x40
    4008:	d103      	bne.n	4012 <twim_irq_handler+0x42>
    400a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    400e:	2b00      	cmp	r3, #0
    4010:	d067      	beq.n	40e2 <twim_irq_handler+0x112>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    4012:	6a2b      	ldr	r3, [r5, #32]
    4014:	f013 0f04 	tst.w	r3, #4
    4018:	d130      	bne.n	407c <twim_irq_handler+0xac>
        {
            event.xfer_desc = p_cb->xfer_desc;
    401a:	f10d 0c04 	add.w	ip, sp, #4
    401e:	f105 0e0c 	add.w	lr, r5, #12
    4022:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4026:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    402a:	f8de 3000 	ldr.w	r3, [lr]
    402e:	f8cc 3000 	str.w	r3, [ip]
    4032:	2300      	movs	r3, #0
    4034:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    4038:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
    403c:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    4040:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
    4044:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4048:	b113      	cbz	r3, 4050 <twim_irq_handler+0x80>
    404a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    404e:	b1ab      	cbz	r3, 407c <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
    4050:	2300      	movs	r3, #0
    4052:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
    4056:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4058:	4b52      	ldr	r3, [pc, #328]	; (41a4 <twim_irq_handler+0x1d4>)
    405a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    405e:	0b22      	lsrs	r2, r4, #12
    4060:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    4064:	2b00      	cmp	r3, #0
    4066:	db09      	blt.n	407c <twim_irq_handler+0xac>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4068:	f002 021f 	and.w	r2, r2, #31
    406c:	095b      	lsrs	r3, r3, #5
    406e:	2101      	movs	r1, #1
    4070:	fa01 f202 	lsl.w	r2, r1, r2
    4074:	3360      	adds	r3, #96	; 0x60
    4076:	494c      	ldr	r1, [pc, #304]	; (41a8 <twim_irq_handler+0x1d8>)
    4078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
    407c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4080:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    4084:	f013 0f02 	tst.w	r3, #2
    4088:	d073      	beq.n	4172 <twim_irq_handler+0x1a2>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    408a:	2301      	movs	r3, #1
    408c:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
    4090:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4094:	b90b      	cbnz	r3, 409a <twim_irq_handler+0xca>
    {
        p_cb->busy = false;
    4096:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    409a:	6a2b      	ldr	r3, [r5, #32]
    409c:	f013 0f04 	tst.w	r3, #4
    40a0:	d002      	beq.n	40a8 <twim_irq_handler+0xd8>
    40a2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    40a6:	b11b      	cbz	r3, 40b0 <twim_irq_handler+0xe0>
    {
        p_cb->handler(&event, p_cb->p_context);
    40a8:	682b      	ldr	r3, [r5, #0]
    40aa:	6869      	ldr	r1, [r5, #4]
    40ac:	4668      	mov	r0, sp
    40ae:	4798      	blx	r3
    }
}
    40b0:	b007      	add	sp, #28
    40b2:	bd30      	pop	{r4, r5, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    40b4:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
    40b6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    40ba:	2302      	movs	r3, #2
    40bc:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    40be:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    40c0:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40c4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    40c8:	b123      	cbz	r3, 40d4 <twim_irq_handler+0x104>
    return p_reg->SHORTS;
    40ca:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    40ce:	f413 7f00 	tst.w	r3, #512	; 0x200
    40d2:	d102      	bne.n	40da <twim_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40d4:	2301      	movs	r3, #1
    40d6:	6223      	str	r3, [r4, #32]
    40d8:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
    40da:	2301      	movs	r3, #1
    40dc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
    40e0:	e7e6      	b.n	40b0 <twim_irq_handler+0xe0>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    40e2:	4629      	mov	r1, r5
    40e4:	4620      	mov	r0, r4
    40e6:	f002 fd81 	bl	6bec <xfer_completeness_check>
    40ea:	f080 0001 	eor.w	r0, r0, #1
    40ee:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    40f2:	e78e      	b.n	4012 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40f4:	2300      	movs	r3, #0
    40f6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    40fa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    40fe:	7b2b      	ldrb	r3, [r5, #12]
    4100:	bb2b      	cbnz	r3, 414e <twim_irq_handler+0x17e>
            event.xfer_desc = p_cb->xfer_desc;
    4102:	f10d 0c04 	add.w	ip, sp, #4
    4106:	f105 0e0c 	add.w	lr, r5, #12
    410a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    410e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4112:	f8de 3000 	ldr.w	r3, [lr]
    4116:	f8cc 3000 	str.w	r3, [ip]
            if (!p_cb->repeated)
    411a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    411e:	2b00      	cmp	r3, #0
    4120:	d1ac      	bne.n	407c <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
    4122:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    4126:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    4128:	4b1e      	ldr	r3, [pc, #120]	; (41a4 <twim_irq_handler+0x1d4>)
    412a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    412e:	0b22      	lsrs	r2, r4, #12
    4130:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    4134:	2b00      	cmp	r3, #0
    4136:	dba1      	blt.n	407c <twim_irq_handler+0xac>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4138:	f002 021f 	and.w	r2, r2, #31
    413c:	095b      	lsrs	r3, r3, #5
    413e:	2101      	movs	r1, #1
    4140:	fa01 f202 	lsl.w	r2, r1, r2
    4144:	3360      	adds	r3, #96	; 0x60
    4146:	4918      	ldr	r1, [pc, #96]	; (41a8 <twim_irq_handler+0x1d8>)
    4148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    414c:	e796      	b.n	407c <twim_irq_handler+0xac>
    p_reg->SHORTS = mask;
    414e:	f44f 7300 	mov.w	r3, #512	; 0x200
    4152:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    4156:	f240 2302 	movw	r3, #514	; 0x202
    415a:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    415c:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    4160:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4164:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    4166:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    416a:	2301      	movs	r3, #1
    416c:	60a3      	str	r3, [r4, #8]
    416e:	6223      	str	r3, [r4, #32]
            return;
    4170:	e79e      	b.n	40b0 <twim_irq_handler+0xe0>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4172:	f013 0f04 	tst.w	r3, #4
    4176:	d003      	beq.n	4180 <twim_irq_handler+0x1b0>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    4178:	2302      	movs	r3, #2
    417a:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
    417e:	e787      	b.n	4090 <twim_irq_handler+0xc0>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4180:	f013 0f01 	tst.w	r3, #1
    4184:	d003      	beq.n	418e <twim_irq_handler+0x1be>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    4186:	2303      	movs	r3, #3
    4188:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
    418c:	e780      	b.n	4090 <twim_irq_handler+0xc0>
    else if (p_cb->error)
    418e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4192:	b11b      	cbz	r3, 419c <twim_irq_handler+0x1cc>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    4194:	2304      	movs	r3, #4
    4196:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
    419a:	e779      	b.n	4090 <twim_irq_handler+0xc0>
        event.type = NRFX_TWIM_EVT_DONE;
    419c:	2300      	movs	r3, #0
    419e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    41a2:	e775      	b.n	4090 <twim_irq_handler+0xc0>
    41a4:	019c0202 	.word	0x019c0202
    41a8:	e000e100 	.word	0xe000e100

000041ac <nrfx_twim_init>:
{
    41ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ae:	4604      	mov	r4, r0
    41b0:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    41b2:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    41b4:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    41b6:	491e      	ldr	r1, [pc, #120]	; (4230 <nrfx_twim_init+0x84>)
    41b8:	2034      	movs	r0, #52	; 0x34
    41ba:	fb00 1106 	mla	r1, r0, r6, r1
    41be:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    41c2:	b109      	cbz	r1, 41c8 <nrfx_twim_init+0x1c>
        return err_code;
    41c4:	481b      	ldr	r0, [pc, #108]	; (4234 <nrfx_twim_init+0x88>)
}
    41c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
    41c8:	f8df c064 	ldr.w	ip, [pc, #100]	; 4230 <nrfx_twim_init+0x84>
    41cc:	fb06 f000 	mul.w	r0, r6, r0
    41d0:	eb0c 0100 	add.w	r1, ip, r0
    41d4:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context       = p_context;
    41d8:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
    41da:	2300      	movs	r3, #0
    41dc:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
    41de:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
    41e2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    41e6:	7b6b      	ldrb	r3, [r5, #13]
    41e8:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    41ec:	7bab      	ldrb	r3, [r5, #14]
    41ee:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
    41f2:	4629      	mov	r1, r5
    41f4:	4638      	mov	r0, r7
    41f6:	f002 fd3a 	bl	6c6e <twim_pins_configure>
    41fa:	b1b0      	cbz	r0, 422a <nrfx_twim_init+0x7e>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    41fc:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
    41fe:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
    4202:	2334      	movs	r3, #52	; 0x34
    4204:	fb06 f303 	mul.w	r3, r6, r3
    4208:	4a09      	ldr	r2, [pc, #36]	; (4230 <nrfx_twim_init+0x84>)
    420a:	58d3      	ldr	r3, [r2, r3]
    420c:	b123      	cbz	r3, 4218 <nrfx_twim_init+0x6c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    420e:	6820      	ldr	r0, [r4, #0]
    4210:	f340 3007 	sbfx	r0, r0, #12, #8
    4214:	f7fc ffde 	bl	11d4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4218:	4b05      	ldr	r3, [pc, #20]	; (4230 <nrfx_twim_init+0x84>)
    421a:	2234      	movs	r2, #52	; 0x34
    421c:	fb02 3606 	mla	r6, r2, r6, r3
    4220:	2301      	movs	r3, #1
    4222:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    return err_code;
    4226:	4804      	ldr	r0, [pc, #16]	; (4238 <nrfx_twim_init+0x8c>)
    4228:	e7cd      	b.n	41c6 <nrfx_twim_init+0x1a>
        return NRFX_ERROR_INVALID_PARAM;
    422a:	4804      	ldr	r0, [pc, #16]	; (423c <nrfx_twim_init+0x90>)
    422c:	e7cb      	b.n	41c6 <nrfx_twim_init+0x1a>
    422e:	bf00      	nop
    4230:	20000744 	.word	0x20000744
    4234:	0bad0005 	.word	0x0bad0005
    4238:	0bad0000 	.word	0x0bad0000
    423c:	0bad0004 	.word	0x0bad0004

00004240 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4240:	7902      	ldrb	r2, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
    4242:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4244:	2106      	movs	r1, #6
    4246:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    424a:	4b04      	ldr	r3, [pc, #16]	; (425c <nrfx_twim_enable+0x1c>)
    424c:	2134      	movs	r1, #52	; 0x34
    424e:	fb01 3302 	mla	r3, r1, r2, r3
    4252:	2202      	movs	r2, #2
    4254:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    4258:	4770      	bx	lr
    425a:	bf00      	nop
    425c:	20000744 	.word	0x20000744

00004260 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4260:	7901      	ldrb	r1, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4262:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    4264:	4b0b      	ldr	r3, [pc, #44]	; (4294 <nrfx_twim_disable+0x34>)
    4266:	2034      	movs	r0, #52	; 0x34
    4268:	fb00 3301 	mla	r3, r0, r1, r3
    426c:	2100      	movs	r1, #0
    426e:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
    4270:	4809      	ldr	r0, [pc, #36]	; (4298 <nrfx_twim_disable+0x38>)
    4272:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4276:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    427a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    427e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    4282:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4286:	2201      	movs	r2, #1
    4288:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    428c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    4290:	4770      	bx	lr
    4292:	bf00      	nop
    4294:	20000744 	.word	0x20000744
    4298:	019c0202 	.word	0x019c0202

0000429c <nrfx_twim_uninit>:
{
    429c:	b538      	push	{r3, r4, r5, lr}
    429e:	4604      	mov	r4, r0
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    42a0:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->handler)
    42a2:	2334      	movs	r3, #52	; 0x34
    42a4:	fb05 f303 	mul.w	r3, r5, r3
    42a8:	4a1a      	ldr	r2, [pc, #104]	; (4314 <nrfx_twim_uninit+0x78>)
    42aa:	58d3      	ldr	r3, [r2, r3]
    42ac:	b123      	cbz	r3, 42b8 <nrfx_twim_uninit+0x1c>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    42ae:	6800      	ldr	r0, [r0, #0]
    42b0:	f340 3007 	sbfx	r0, r0, #12, #8
    42b4:	f7fc ff9c 	bl	11f0 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    42b8:	4620      	mov	r0, r4
    42ba:	f7ff ffd1 	bl	4260 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    42be:	4b15      	ldr	r3, [pc, #84]	; (4314 <nrfx_twim_uninit+0x78>)
    42c0:	2234      	movs	r2, #52	; 0x34
    42c2:	fb02 3305 	mla	r3, r2, r5, r3
    42c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    42ca:	b9d3      	cbnz	r3, 4302 <nrfx_twim_uninit+0x66>
    42cc:	4b11      	ldr	r3, [pc, #68]	; (4314 <nrfx_twim_uninit+0x78>)
    42ce:	fb02 3305 	mla	r3, r2, r5, r3
    42d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    42d6:	b9a3      	cbnz	r3, 4302 <nrfx_twim_uninit+0x66>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    42d8:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SCL;
    42da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    42de:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    42e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    42e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    42ea:	2102      	movs	r1, #2
    42ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
    42f0:	6823      	ldr	r3, [r4, #0]
    return p_reg->PSEL.SDA;
    42f2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    42f6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    42fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    42fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    4302:	4b04      	ldr	r3, [pc, #16]	; (4314 <nrfx_twim_uninit+0x78>)
    4304:	2234      	movs	r2, #52	; 0x34
    4306:	fb02 3505 	mla	r5, r2, r5, r3
    430a:	2300      	movs	r3, #0
    430c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    4310:	bd38      	pop	{r3, r4, r5, pc}
    4312:	bf00      	nop
    4314:	20000744 	.word	0x20000744

00004318 <nrfx_twim_xfer>:
{
    4318:	b510      	push	{r4, lr}
    431a:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    431c:	f890 c004 	ldrb.w	ip, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    4320:	460a      	mov	r2, r1
    4322:	6801      	ldr	r1, [r0, #0]
    4324:	4c03      	ldr	r4, [pc, #12]	; (4334 <nrfx_twim_xfer+0x1c>)
    4326:	2034      	movs	r0, #52	; 0x34
    4328:	fb00 400c 	mla	r0, r0, ip, r4
    432c:	f7ff fcf8 	bl	3d20 <twim_xfer>
}
    4330:	bd10      	pop	{r4, pc}
    4332:	bf00      	nop
    4334:	20000744 	.word	0x20000744

00004338 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    4338:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    433a:	4902      	ldr	r1, [pc, #8]	; (4344 <nrfx_twim_0_irq_handler+0xc>)
    433c:	4802      	ldr	r0, [pc, #8]	; (4348 <nrfx_twim_0_irq_handler+0x10>)
    433e:	f7ff fe47 	bl	3fd0 <twim_irq_handler>
}
    4342:	bd08      	pop	{r3, pc}
    4344:	20000744 	.word	0x20000744
    4348:	40003000 	.word	0x40003000

0000434c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    4350:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4354:	f04f 0801 	mov.w	r8, #1
    4358:	fa08 f600 	lsl.w	r6, r8, r0
    p_reg->OUTSET = set_mask;
    435c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4360:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    4364:	f001 071f 	and.w	r7, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4368:	fa08 f807 	lsl.w	r8, r8, r7
    p_reg->OUTSET = set_mask;
    436c:	f8c3 8508 	str.w	r8, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    4370:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    4374:	f240 620d 	movw	r2, #1549	; 0x60d
    4378:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    437c:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
    4380:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4384:	2004      	movs	r0, #4
    4386:	f002 fb32 	bl	69ee <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    438a:	2400      	movs	r4, #0
    438c:	2c08      	cmp	r4, #8
    438e:	d816      	bhi.n	43be <nrfx_twi_twim_bus_recover+0x72>
    return p_reg->IN;
    4390:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4394:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4398:	40fb      	lsrs	r3, r7
    {
        if (nrf_gpio_pin_read(sda_pin))
    439a:	f013 0f01 	tst.w	r3, #1
    439e:	d10e      	bne.n	43be <nrfx_twi_twim_bus_recover+0x72>
    p_reg->OUTCLR = clr_mask;
    43a0:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    43a4:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    43a8:	2004      	movs	r0, #4
    43aa:	f002 fb20 	bl	69ee <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    43ae:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    43b2:	2004      	movs	r0, #4
    43b4:	f002 fb1b 	bl	69ee <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    43b8:	3401      	adds	r4, #1
    43ba:	b2e4      	uxtb	r4, r4
    43bc:	e7e6      	b.n	438c <nrfx_twi_twim_bus_recover+0x40>
    p_reg->OUTCLR = clr_mask;
    43be:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    43c2:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    43c6:	2004      	movs	r0, #4
    43c8:	f002 fb11 	bl	69ee <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    43cc:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    43d0:	2004      	movs	r0, #4
    43d2:	f002 fb0c 	bl	69ee <nrfx_busy_wait>
    return p_reg->IN;
    43d6:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    43da:	fa21 f707 	lsr.w	r7, r1, r7

    if (nrf_gpio_pin_read(sda_pin))
    43de:	f017 0f01 	tst.w	r7, #1
    43e2:	d002      	beq.n	43ea <nrfx_twi_twim_bus_recover+0x9e>
    {
        return NRFX_SUCCESS;
    43e4:	4802      	ldr	r0, [pc, #8]	; (43f0 <nrfx_twi_twim_bus_recover+0xa4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    43e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INTERNAL;
    43ea:	4802      	ldr	r0, [pc, #8]	; (43f4 <nrfx_twi_twim_bus_recover+0xa8>)
    43ec:	e7fb      	b.n	43e6 <nrfx_twi_twim_bus_recover+0x9a>
    43ee:	bf00      	nop
    43f0:	0bad0000 	.word	0x0bad0000
    43f4:	0bad0001 	.word	0x0bad0001

000043f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    43f8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    43fa:	4c14      	ldr	r4, [pc, #80]	; (444c <_DoInit+0x54>)
    43fc:	2303      	movs	r3, #3
    43fe:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4400:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4402:	4a13      	ldr	r2, [pc, #76]	; (4450 <_DoInit+0x58>)
    4404:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4406:	4b13      	ldr	r3, [pc, #76]	; (4454 <_DoInit+0x5c>)
    4408:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    440a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    440e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4410:	2300      	movs	r3, #0
    4412:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4414:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4416:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4418:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    441a:	4a0f      	ldr	r2, [pc, #60]	; (4458 <_DoInit+0x60>)
    441c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    441e:	2210      	movs	r2, #16
    4420:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4422:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4424:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4426:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4428:	490c      	ldr	r1, [pc, #48]	; (445c <_DoInit+0x64>)
    442a:	1de0      	adds	r0, r4, #7
    442c:	f001 fe70 	bl	6110 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4430:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4434:	490a      	ldr	r1, [pc, #40]	; (4460 <_DoInit+0x68>)
    4436:	4620      	mov	r0, r4
    4438:	f001 fe6a 	bl	6110 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    443c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4440:	2320      	movs	r3, #32
    4442:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4444:	f3bf 8f5f 	dmb	sy
}
    4448:	bd10      	pop	{r4, pc}
    444a:	bf00      	nop
    444c:	20000778 	.word	0x20000778
    4450:	00007728 	.word	0x00007728
    4454:	20000830 	.word	0x20000830
    4458:	20000820 	.word	0x20000820
    445c:	00007734 	.word	0x00007734
    4460:	00007738 	.word	0x00007738

00004464 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    4464:	4b03      	ldr	r3, [pc, #12]	; (4474 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    4466:	e000      	b.n	446a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    4468:	3318      	adds	r3, #24
	while (dev < __device_end) {
    446a:	4a03      	ldr	r2, [pc, #12]	; (4478 <z_device_state_init+0x14>)
    446c:	4293      	cmp	r3, r2
    446e:	d3fb      	bcc.n	4468 <z_device_state_init+0x4>
	}
}
    4470:	4770      	bx	lr
    4472:	bf00      	nop
    4474:	00007340 	.word	0x00007340
    4478:	000073b8 	.word	0x000073b8

0000447c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    447c:	b570      	push	{r4, r5, r6, lr}
    447e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4480:	4b11      	ldr	r3, [pc, #68]	; (44c8 <z_sys_init_run_level+0x4c>)
    4482:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4486:	e009      	b.n	449c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    4488:	4240      	negs	r0, r0
    448a:	e017      	b.n	44bc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    448c:	68eb      	ldr	r3, [r5, #12]
    448e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    4490:	68ea      	ldr	r2, [r5, #12]
    4492:	7853      	ldrb	r3, [r2, #1]
    4494:	f043 0301 	orr.w	r3, r3, #1
    4498:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    449a:	3408      	adds	r4, #8
    449c:	1c73      	adds	r3, r6, #1
    449e:	4a0a      	ldr	r2, [pc, #40]	; (44c8 <z_sys_init_run_level+0x4c>)
    44a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    44a4:	42a3      	cmp	r3, r4
    44a6:	d90d      	bls.n	44c4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    44a8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    44aa:	6823      	ldr	r3, [r4, #0]
    44ac:	4628      	mov	r0, r5
    44ae:	4798      	blx	r3
		if (dev != NULL) {
    44b0:	2d00      	cmp	r5, #0
    44b2:	d0f2      	beq.n	449a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    44b4:	2800      	cmp	r0, #0
    44b6:	d0eb      	beq.n	4490 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    44b8:	2800      	cmp	r0, #0
    44ba:	dbe5      	blt.n	4488 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    44bc:	28ff      	cmp	r0, #255	; 0xff
    44be:	dde5      	ble.n	448c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    44c0:	20ff      	movs	r0, #255	; 0xff
    44c2:	e7e3      	b.n	448c <z_sys_init_run_level+0x10>
		}
	}
}
    44c4:	bd70      	pop	{r4, r5, r6, pc}
    44c6:	bf00      	nop
    44c8:	00007740 	.word	0x00007740

000044cc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    44cc:	b510      	push	{r4, lr}
    44ce:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    44d0:	4c11      	ldr	r4, [pc, #68]	; (4518 <init_idle_thread+0x4c>)
    44d2:	23b0      	movs	r3, #176	; 0xb0
    44d4:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    44d8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    44dc:	4b0f      	ldr	r3, [pc, #60]	; (451c <init_idle_thread+0x50>)
    44de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    44e2:	4a0f      	ldr	r2, [pc, #60]	; (4520 <init_idle_thread+0x54>)
    44e4:	9205      	str	r2, [sp, #20]
    44e6:	2201      	movs	r2, #1
    44e8:	9204      	str	r2, [sp, #16]
    44ea:	220f      	movs	r2, #15
    44ec:	9203      	str	r2, [sp, #12]
    44ee:	2200      	movs	r2, #0
    44f0:	9202      	str	r2, [sp, #8]
    44f2:	9201      	str	r2, [sp, #4]
    44f4:	9300      	str	r3, [sp, #0]
    44f6:	4b0b      	ldr	r3, [pc, #44]	; (4524 <init_idle_thread+0x58>)
    44f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    44fc:	490a      	ldr	r1, [pc, #40]	; (4528 <init_idle_thread+0x5c>)
    44fe:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    4502:	fb0c 1100 	mla	r1, ip, r0, r1
    4506:	4620      	mov	r0, r4
    4508:	f000 f916 	bl	4738 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    450c:	7b63      	ldrb	r3, [r4, #13]
    450e:	f023 0304 	bic.w	r3, r3, #4
    4512:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4514:	b006      	add	sp, #24
    4516:	bd10      	pop	{r4, pc}
    4518:	200003d8 	.word	0x200003d8
    451c:	20000c30 	.word	0x20000c30
    4520:	00007758 	.word	0x00007758
    4524:	00004895 	.word	0x00004895
    4528:	20001700 	.word	0x20001700

0000452c <bg_thread_main>:
{
    452c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    452e:	4b0a      	ldr	r3, [pc, #40]	; (4558 <bg_thread_main+0x2c>)
    4530:	2201      	movs	r2, #1
    4532:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4534:	2002      	movs	r0, #2
    4536:	f7ff ffa1 	bl	447c <z_sys_init_run_level>
		boot_banner();
    453a:	f001 fa79 	bl	5a30 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    453e:	2003      	movs	r0, #3
    4540:	f7ff ff9c 	bl	447c <z_sys_init_run_level>
	z_init_static_threads();
    4544:	f000 f95c 	bl	4800 <z_init_static_threads>
	main();
    4548:	f002 fec5 	bl	72d6 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    454c:	4a03      	ldr	r2, [pc, #12]	; (455c <bg_thread_main+0x30>)
    454e:	7b13      	ldrb	r3, [r2, #12]
    4550:	f023 0301 	bic.w	r3, r3, #1
    4554:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4556:	bd08      	pop	{r3, pc}
    4558:	20000c79 	.word	0x20000c79
    455c:	20000488 	.word	0x20000488

00004560 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    4560:	b508      	push	{r3, lr}
    4562:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4564:	4a01      	ldr	r2, [pc, #4]	; (456c <switch_to_main_thread+0xc>)
    4566:	4802      	ldr	r0, [pc, #8]	; (4570 <switch_to_main_thread+0x10>)
    4568:	f7fc ff3c 	bl	13e4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    456c:	0000452d 	.word	0x0000452d
    4570:	20000488 	.word	0x20000488

00004574 <z_bss_zero>:
{
    4574:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4576:	4803      	ldr	r0, [pc, #12]	; (4584 <z_bss_zero+0x10>)
    4578:	4a03      	ldr	r2, [pc, #12]	; (4588 <z_bss_zero+0x14>)
    457a:	1a12      	subs	r2, r2, r0
    457c:	2100      	movs	r1, #0
    457e:	f002 fbe8 	bl	6d52 <z_early_memset>
}
    4582:	bd08      	pop	{r3, pc}
    4584:	200001a8 	.word	0x200001a8
    4588:	20000c7c 	.word	0x20000c7c

0000458c <z_init_cpu>:
{
    458c:	b510      	push	{r4, lr}
    458e:	4604      	mov	r4, r0
	init_idle_thread(id);
    4590:	f7ff ff9c 	bl	44cc <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4594:	490b      	ldr	r1, [pc, #44]	; (45c4 <z_init_cpu+0x38>)
    4596:	23b0      	movs	r3, #176	; 0xb0
    4598:	fb03 1104 	mla	r1, r3, r4, r1
    459c:	4a0a      	ldr	r2, [pc, #40]	; (45c8 <z_init_cpu+0x3c>)
    459e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    45a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    45a6:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    45a8:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    45aa:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    45ae:	4b07      	ldr	r3, [pc, #28]	; (45cc <z_init_cpu+0x40>)
    45b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    45b4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    45b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    45bc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    45c0:	6063      	str	r3, [r4, #4]
}
    45c2:	bd10      	pop	{r4, pc}
    45c4:	200003d8 	.word	0x200003d8
    45c8:	20000c30 	.word	0x20000c30
    45cc:	20001860 	.word	0x20001860

000045d0 <prepare_multithreading>:
{
    45d0:	b570      	push	{r4, r5, r6, lr}
    45d2:	b086      	sub	sp, #24
	z_sched_init();
    45d4:	f000 ff10 	bl	53f8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    45d8:	4d10      	ldr	r5, [pc, #64]	; (461c <prepare_multithreading+0x4c>)
    45da:	4b11      	ldr	r3, [pc, #68]	; (4620 <prepare_multithreading+0x50>)
    45dc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    45de:	4b11      	ldr	r3, [pc, #68]	; (4624 <prepare_multithreading+0x54>)
    45e0:	9305      	str	r3, [sp, #20]
    45e2:	2301      	movs	r3, #1
    45e4:	9304      	str	r3, [sp, #16]
    45e6:	2400      	movs	r4, #0
    45e8:	9403      	str	r4, [sp, #12]
    45ea:	9402      	str	r4, [sp, #8]
    45ec:	9401      	str	r4, [sp, #4]
    45ee:	9400      	str	r4, [sp, #0]
    45f0:	4b0d      	ldr	r3, [pc, #52]	; (4628 <prepare_multithreading+0x58>)
    45f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    45f6:	490d      	ldr	r1, [pc, #52]	; (462c <prepare_multithreading+0x5c>)
    45f8:	4628      	mov	r0, r5
    45fa:	f000 f89d 	bl	4738 <z_setup_new_thread>
    45fe:	4606      	mov	r6, r0
    4600:	7b6b      	ldrb	r3, [r5, #13]
    4602:	f023 0304 	bic.w	r3, r3, #4
    4606:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    4608:	4628      	mov	r0, r5
    460a:	f002 fc9b 	bl	6f44 <z_ready_thread>
	z_init_cpu(0);
    460e:	4620      	mov	r0, r4
    4610:	f7ff ffbc 	bl	458c <z_init_cpu>
}
    4614:	4630      	mov	r0, r6
    4616:	b006      	add	sp, #24
    4618:	bd70      	pop	{r4, r5, r6, pc}
    461a:	bf00      	nop
    461c:	20000488 	.word	0x20000488
    4620:	20000c30 	.word	0x20000c30
    4624:	00007760 	.word	0x00007760
    4628:	0000452d 	.word	0x0000452d
    462c:	200012e0 	.word	0x200012e0

00004630 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4630:	b500      	push	{lr}
    4632:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4634:	4b1d      	ldr	r3, [pc, #116]	; (46ac <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4636:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    463a:	4c1d      	ldr	r4, [pc, #116]	; (46b0 <z_cstart+0x80>)
    463c:	6963      	ldr	r3, [r4, #20]
    463e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4642:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4644:	23e0      	movs	r3, #224	; 0xe0
    4646:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    464a:	2500      	movs	r5, #0
    464c:	77e5      	strb	r5, [r4, #31]
    464e:	7625      	strb	r5, [r4, #24]
    4650:	7665      	strb	r5, [r4, #25]
    4652:	76a5      	strb	r5, [r4, #26]
    4654:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4658:	6a63      	ldr	r3, [r4, #36]	; 0x24
    465a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    465e:	6263      	str	r3, [r4, #36]	; 0x24
    4660:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4664:	f7fd f816 	bl	1694 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4668:	f7fc fd96 	bl	1198 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    466c:	f04f 33ff 	mov.w	r3, #4294967295
    4670:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4672:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4674:	f7fd f92a 	bl	18cc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4678:	f7fd f8ba 	bl	17f0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    467c:	2401      	movs	r4, #1
    467e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4682:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    4686:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    4688:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    468a:	9529      	str	r5, [sp, #164]	; 0xa4
#endif

	_current_cpu->current = dummy_thread;
    468c:	4b09      	ldr	r3, [pc, #36]	; (46b4 <z_cstart+0x84>)
    468e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4692:	f7ff fee7 	bl	4464 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4696:	4628      	mov	r0, r5
    4698:	f7ff fef0 	bl	447c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    469c:	4620      	mov	r0, r4
    469e:	f7ff feed 	bl	447c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    46a2:	f7ff ff95 	bl	45d0 <prepare_multithreading>
    46a6:	f7ff ff5b 	bl	4560 <switch_to_main_thread>
    46aa:	bf00      	nop
    46ac:	20002080 	.word	0x20002080
    46b0:	e000ed00 	.word	0xe000ed00
    46b4:	20000c30 	.word	0x20000c30

000046b8 <z_thread_monitor_exit>:
	__asm__ volatile(
    46b8:	f04f 0320 	mov.w	r3, #32
    46bc:	f3ef 8111 	mrs	r1, BASEPRI
    46c0:	f383 8812 	msr	BASEPRI_MAX, r3
    46c4:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    46c8:	4b0a      	ldr	r3, [pc, #40]	; (46f4 <z_thread_monitor_exit+0x3c>)
    46ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46cc:	4283      	cmp	r3, r0
    46ce:	d104      	bne.n	46da <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    46d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    46d2:	4b08      	ldr	r3, [pc, #32]	; (46f4 <z_thread_monitor_exit+0x3c>)
    46d4:	629a      	str	r2, [r3, #40]	; 0x28
    46d6:	e007      	b.n	46e8 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    46d8:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    46da:	b113      	cbz	r3, 46e2 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    46dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    46de:	4282      	cmp	r2, r0
    46e0:	d1fa      	bne.n	46d8 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    46e2:	b10b      	cbz	r3, 46e8 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    46e4:	6f02      	ldr	r2, [r0, #112]	; 0x70
    46e6:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    46e8:	f381 8811 	msr	BASEPRI, r1
    46ec:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    46f0:	4770      	bx	lr
    46f2:	bf00      	nop
    46f4:	20000c30 	.word	0x20000c30

000046f8 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    46f8:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    46fa:	4604      	mov	r4, r0
    46fc:	b140      	cbz	r0, 4710 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    46fe:	221f      	movs	r2, #31
    4700:	f104 0074 	add.w	r0, r4, #116	; 0x74
    4704:	f001 fd0e 	bl	6124 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    4708:	2000      	movs	r0, #0
    470a:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    470e:	bd10      	pop	{r4, pc}
		thread = _current;
    4710:	4b01      	ldr	r3, [pc, #4]	; (4718 <z_impl_k_thread_name_set+0x20>)
    4712:	689c      	ldr	r4, [r3, #8]
    4714:	e7f3      	b.n	46fe <z_impl_k_thread_name_set+0x6>
    4716:	bf00      	nop
    4718:	20000c30 	.word	0x20000c30

0000471c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    471c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    471e:	ea53 0102 	orrs.w	r1, r3, r2
    4722:	d102      	bne.n	472a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    4724:	f002 fb35 	bl	6d92 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    4728:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    472a:	4902      	ldr	r1, [pc, #8]	; (4734 <schedule_new_thread+0x18>)
    472c:	3018      	adds	r0, #24
    472e:	f000 ffcf 	bl	56d0 <z_add_timeout>
    4732:	e7f9      	b.n	4728 <schedule_new_thread+0xc>
    4734:	00006f7d 	.word	0x00006f7d

00004738 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    473c:	b085      	sub	sp, #20
    473e:	4604      	mov	r4, r0
    4740:	460f      	mov	r7, r1
    4742:	4615      	mov	r5, r2
    4744:	461e      	mov	r6, r3
    4746:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    474a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    474e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    4752:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4756:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    475a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    475c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    475e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4760:	2204      	movs	r2, #4
    4762:	9911      	ldr	r1, [sp, #68]	; 0x44
    4764:	f002 fb19 	bl	6d9a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    4768:	462a      	mov	r2, r5
    476a:	4639      	mov	r1, r7
    476c:	4620      	mov	r0, r4
    476e:	f002 faf8 	bl	6d62 <setup_thread_stack>
    4772:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4774:	f8cd 8008 	str.w	r8, [sp, #8]
    4778:	f8cd 9004 	str.w	r9, [sp, #4]
    477c:	f8cd a000 	str.w	sl, [sp]
    4780:	4633      	mov	r3, r6
    4782:	4602      	mov	r2, r0
    4784:	4639      	mov	r1, r7
    4786:	4620      	mov	r0, r4
    4788:	f7fc fde2 	bl	1350 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    478c:	2300      	movs	r3, #0
    478e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    4790:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    4792:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    4796:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    479a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    479e:	f04f 0320 	mov.w	r3, #32
    47a2:	f3ef 8211 	mrs	r2, BASEPRI
    47a6:	f383 8812 	msr	BASEPRI_MAX, r3
    47aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    47ae:	4b13      	ldr	r3, [pc, #76]	; (47fc <z_setup_new_thread+0xc4>)
    47b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    47b2:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    47b4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    47b6:	f382 8811 	msr	BASEPRI, r2
    47ba:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    47be:	f1bb 0f00 	cmp.w	fp, #0
    47c2:	d013      	beq.n	47ec <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    47c4:	221f      	movs	r2, #31
    47c6:	4659      	mov	r1, fp
    47c8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    47cc:	f001 fcaa 	bl	6124 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    47d0:	2300      	movs	r3, #0
    47d2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    47d6:	4b09      	ldr	r3, [pc, #36]	; (47fc <z_setup_new_thread+0xc4>)
    47d8:	689b      	ldr	r3, [r3, #8]
    47da:	b15b      	cbz	r3, 47f4 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    47dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    47e0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    47e4:	4628      	mov	r0, r5
    47e6:	b005      	add	sp, #20
    47e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    47ec:	2300      	movs	r3, #0
    47ee:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    47f2:	e7f0      	b.n	47d6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    47f4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    47f8:	e7f4      	b.n	47e4 <z_setup_new_thread+0xac>
    47fa:	bf00      	nop
    47fc:	20000c30 	.word	0x20000c30

00004800 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    4800:	b530      	push	{r4, r5, lr}
    4802:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    4804:	4c21      	ldr	r4, [pc, #132]	; (488c <z_init_static_threads+0x8c>)
    4806:	e014      	b.n	4832 <z_init_static_threads+0x32>
		z_setup_new_thread(
    4808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    480a:	9305      	str	r3, [sp, #20]
    480c:	6a23      	ldr	r3, [r4, #32]
    480e:	9304      	str	r3, [sp, #16]
    4810:	69e3      	ldr	r3, [r4, #28]
    4812:	9303      	str	r3, [sp, #12]
    4814:	69a3      	ldr	r3, [r4, #24]
    4816:	9302      	str	r3, [sp, #8]
    4818:	6963      	ldr	r3, [r4, #20]
    481a:	9301      	str	r3, [sp, #4]
    481c:	6923      	ldr	r3, [r4, #16]
    481e:	9300      	str	r3, [sp, #0]
    4820:	68e3      	ldr	r3, [r4, #12]
    4822:	68a2      	ldr	r2, [r4, #8]
    4824:	6861      	ldr	r1, [r4, #4]
    4826:	6820      	ldr	r0, [r4, #0]
    4828:	f7ff ff86 	bl	4738 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    482c:	6823      	ldr	r3, [r4, #0]
    482e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4830:	3430      	adds	r4, #48	; 0x30
    4832:	4b17      	ldr	r3, [pc, #92]	; (4890 <z_init_static_threads+0x90>)
    4834:	429c      	cmp	r4, r3
    4836:	d3e7      	bcc.n	4808 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    4838:	f000 fb46 	bl	4ec8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    483c:	4c13      	ldr	r4, [pc, #76]	; (488c <z_init_static_threads+0x8c>)
    483e:	e000      	b.n	4842 <z_init_static_threads+0x42>
    4840:	3430      	adds	r4, #48	; 0x30
    4842:	4b13      	ldr	r3, [pc, #76]	; (4890 <z_init_static_threads+0x90>)
    4844:	429c      	cmp	r4, r3
    4846:	d21c      	bcs.n	4882 <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4848:	6a60      	ldr	r0, [r4, #36]	; 0x24
    484a:	f1b0 3fff 	cmp.w	r0, #4294967295
    484e:	d0f7      	beq.n	4840 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    4850:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    4852:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4856:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4858:	03c9      	lsls	r1, r1, #15
    485a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    485e:	03c0      	lsls	r0, r0, #15
    4860:	f240 33e7 	movw	r3, #999	; 0x3e7
    4864:	18c0      	adds	r0, r0, r3
    4866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    486a:	f04f 0300 	mov.w	r3, #0
    486e:	f141 0100 	adc.w	r1, r1, #0
    4872:	f7fb fc33 	bl	dc <__aeabi_uldivmod>
    4876:	4602      	mov	r2, r0
    4878:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    487a:	4628      	mov	r0, r5
    487c:	f7ff ff4e 	bl	471c <schedule_new_thread>
    4880:	e7de      	b.n	4840 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    4882:	f000 fd43 	bl	530c <k_sched_unlock>
}
    4886:	b007      	add	sp, #28
    4888:	bd30      	pop	{r4, r5, pc}
    488a:	bf00      	nop
    488c:	200000dc 	.word	0x200000dc
    4890:	2000016c 	.word	0x2000016c

00004894 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4894:	b508      	push	{r3, lr}
    4896:	e001      	b.n	489c <idle+0x8>
	arch_cpu_idle();
    4898:	f7fc fc84 	bl	11a4 <arch_cpu_idle>
	__asm__ volatile(
    489c:	f04f 0220 	mov.w	r2, #32
    48a0:	f3ef 8311 	mrs	r3, BASEPRI
    48a4:	f382 8812 	msr	BASEPRI_MAX, r2
    48a8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    48ac:	f002 fcac 	bl	7208 <z_get_next_timeout_expiry>
    48b0:	4b05      	ldr	r3, [pc, #20]	; (48c8 <idle+0x34>)
    48b2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    48b4:	4b05      	ldr	r3, [pc, #20]	; (48cc <idle+0x38>)
    48b6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    48b8:	2b00      	cmp	r3, #0
    48ba:	d0ed      	beq.n	4898 <idle+0x4>
    48bc:	f7fc fb4a 	bl	f54 <pm_system_suspend>
    48c0:	2800      	cmp	r0, #0
    48c2:	d1eb      	bne.n	489c <idle+0x8>
    48c4:	e7e8      	b.n	4898 <idle+0x4>
    48c6:	bf00      	nop
    48c8:	20000c30 	.word	0x20000c30
    48cc:	20000c79 	.word	0x20000c79

000048d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    48d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48d4:	b083      	sub	sp, #12
    48d6:	4604      	mov	r4, r0
    48d8:	461d      	mov	r5, r3
    48da:	f04f 0320 	mov.w	r3, #32
    48de:	f3ef 8711 	mrs	r7, BASEPRI
    48e2:	f383 8812 	msr	BASEPRI_MAX, r3
    48e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    48ea:	68c1      	ldr	r1, [r0, #12]
    48ec:	b999      	cbnz	r1, 4916 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    48ee:	2900      	cmp	r1, #0
    48f0:	d14f      	bne.n	4992 <z_impl_k_mutex_lock+0xc2>
    48f2:	4b3a      	ldr	r3, [pc, #232]	; (49dc <z_impl_k_mutex_lock+0x10c>)
    48f4:	689b      	ldr	r3, [r3, #8]
    48f6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    48fa:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    48fc:	3101      	adds	r1, #1
    48fe:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    4900:	4b36      	ldr	r3, [pc, #216]	; (49dc <z_impl_k_mutex_lock+0x10c>)
    4902:	689b      	ldr	r3, [r3, #8]
    4904:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    4906:	f387 8811 	msr	BASEPRI, r7
    490a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    490e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4910:	b003      	add	sp, #12
    4912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4916:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4918:	6882      	ldr	r2, [r0, #8]
    491a:	4b30      	ldr	r3, [pc, #192]	; (49dc <z_impl_k_mutex_lock+0x10c>)
    491c:	689b      	ldr	r3, [r3, #8]
    491e:	429a      	cmp	r2, r3
    4920:	d0e5      	beq.n	48ee <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4922:	ea55 0106 	orrs.w	r1, r5, r6
    4926:	bf0c      	ite	eq
    4928:	f04f 0801 	moveq.w	r8, #1
    492c:	f04f 0800 	movne.w	r8, #0
    4930:	d031      	beq.n	4996 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    4932:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4936:	4649      	mov	r1, r9
    4938:	f993 000e 	ldrsb.w	r0, [r3, #14]
    493c:	f002 fa60 	bl	6e00 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4940:	4581      	cmp	r9, r0
    4942:	dc2f      	bgt.n	49a4 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    4944:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4948:	9600      	str	r6, [sp, #0]
    494a:	9501      	str	r5, [sp, #4]
    494c:	4622      	mov	r2, r4
    494e:	4639      	mov	r1, r7
    4950:	4823      	ldr	r0, [pc, #140]	; (49e0 <z_impl_k_mutex_lock+0x110>)
    4952:	f000 fc25 	bl	51a0 <z_pend_curr>
	if (got_mutex == 0) {
    4956:	2800      	cmp	r0, #0
    4958:	d0da      	beq.n	4910 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    495a:	f04f 0320 	mov.w	r3, #32
    495e:	f3ef 8511 	mrs	r5, BASEPRI
    4962:	f383 8812 	msr	BASEPRI_MAX, r3
    4966:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    496a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    496c:	429c      	cmp	r4, r3
    496e:	d01f      	beq.n	49b0 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4970:	b1f3      	cbz	r3, 49b0 <z_impl_k_mutex_lock+0xe0>
    4972:	6921      	ldr	r1, [r4, #16]
    4974:	f993 000e 	ldrsb.w	r0, [r3, #14]
    4978:	f002 fa42 	bl	6e00 <new_prio_for_inheritance>
    497c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    497e:	4620      	mov	r0, r4
    4980:	f002 fa49 	bl	6e16 <adjust_owner_prio>
    4984:	b9b0      	cbnz	r0, 49b4 <z_impl_k_mutex_lock+0xe4>
    4986:	f1b9 0f00 	cmp.w	r9, #0
    498a:	d015      	beq.n	49b8 <z_impl_k_mutex_lock+0xe8>
    498c:	f04f 0801 	mov.w	r8, #1
    4990:	e012      	b.n	49b8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4992:	6923      	ldr	r3, [r4, #16]
    4994:	e7b1      	b.n	48fa <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    4996:	f387 8811 	msr	BASEPRI, r7
    499a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    499e:	f06f 000f 	mvn.w	r0, #15
    49a2:	e7b5      	b.n	4910 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    49a4:	4601      	mov	r1, r0
    49a6:	4620      	mov	r0, r4
    49a8:	f002 fa35 	bl	6e16 <adjust_owner_prio>
    49ac:	4681      	mov	r9, r0
    49ae:	e7cb      	b.n	4948 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    49b0:	6921      	ldr	r1, [r4, #16]
    49b2:	e7e4      	b.n	497e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    49b4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    49b8:	f1b8 0f00 	cmp.w	r8, #0
    49bc:	d106      	bne.n	49cc <z_impl_k_mutex_lock+0xfc>
    49be:	f385 8811 	msr	BASEPRI, r5
    49c2:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    49c6:	f06f 000a 	mvn.w	r0, #10
    49ca:	e7a1      	b.n	4910 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    49cc:	4629      	mov	r1, r5
    49ce:	4804      	ldr	r0, [pc, #16]	; (49e0 <z_impl_k_mutex_lock+0x110>)
    49d0:	f000 fa5e 	bl	4e90 <z_reschedule>
	return -EAGAIN;
    49d4:	f06f 000a 	mvn.w	r0, #10
    49d8:	e79a      	b.n	4910 <z_impl_k_mutex_lock+0x40>
    49da:	bf00      	nop
    49dc:	20000c30 	.word	0x20000c30
    49e0:	20000c5c 	.word	0x20000c5c

000049e4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    49e4:	6882      	ldr	r2, [r0, #8]
    49e6:	2a00      	cmp	r2, #0
    49e8:	d035      	beq.n	4a56 <z_impl_k_mutex_unlock+0x72>
{
    49ea:	b538      	push	{r3, r4, r5, lr}
    49ec:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    49ee:	4b1d      	ldr	r3, [pc, #116]	; (4a64 <z_impl_k_mutex_unlock+0x80>)
    49f0:	689b      	ldr	r3, [r3, #8]
    49f2:	429a      	cmp	r2, r3
    49f4:	d132      	bne.n	4a5c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    49f6:	7bda      	ldrb	r2, [r3, #15]
    49f8:	3a01      	subs	r2, #1
    49fa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    49fc:	68c3      	ldr	r3, [r0, #12]
    49fe:	2b01      	cmp	r3, #1
    4a00:	d905      	bls.n	4a0e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4a02:	3b01      	subs	r3, #1
    4a04:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4a06:	f000 fc81 	bl	530c <k_sched_unlock>

	return 0;
    4a0a:	2000      	movs	r0, #0
}
    4a0c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4a0e:	f04f 0320 	mov.w	r3, #32
    4a12:	f3ef 8511 	mrs	r5, BASEPRI
    4a16:	f383 8812 	msr	BASEPRI_MAX, r3
    4a1a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4a1e:	6901      	ldr	r1, [r0, #16]
    4a20:	f002 f9f9 	bl	6e16 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4a24:	4620      	mov	r0, r4
    4a26:	f002 fb54 	bl	70d2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4a2a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4a2c:	b160      	cbz	r0, 4a48 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4a2e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4a32:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4a34:	2300      	movs	r3, #0
    4a36:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    4a3a:	f002 fa83 	bl	6f44 <z_ready_thread>
		z_reschedule(&lock, key);
    4a3e:	4629      	mov	r1, r5
    4a40:	4809      	ldr	r0, [pc, #36]	; (4a68 <z_impl_k_mutex_unlock+0x84>)
    4a42:	f000 fa25 	bl	4e90 <z_reschedule>
    4a46:	e7de      	b.n	4a06 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4a48:	2300      	movs	r3, #0
    4a4a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    4a4c:	f385 8811 	msr	BASEPRI, r5
    4a50:	f3bf 8f6f 	isb	sy
    4a54:	e7d7      	b.n	4a06 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4a56:	f06f 0015 	mvn.w	r0, #21
}
    4a5a:	4770      	bx	lr
		return -EPERM;
    4a5c:	f04f 30ff 	mov.w	r0, #4294967295
    4a60:	e7d4      	b.n	4a0c <z_impl_k_mutex_unlock+0x28>
    4a62:	bf00      	nop
    4a64:	20000c30 	.word	0x20000c30
    4a68:	20000c5c 	.word	0x20000c5c

00004a6c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4a6c:	b538      	push	{r3, r4, r5, lr}
    4a6e:	4604      	mov	r4, r0
	__asm__ volatile(
    4a70:	f04f 0320 	mov.w	r3, #32
    4a74:	f3ef 8511 	mrs	r5, BASEPRI
    4a78:	f383 8812 	msr	BASEPRI_MAX, r3
    4a7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4a80:	f002 fb27 	bl	70d2 <z_unpend_first_thread>

	if (thread != NULL) {
    4a84:	b148      	cbz	r0, 4a9a <z_impl_k_sem_give+0x2e>
    4a86:	2200      	movs	r2, #0
    4a88:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4a8c:	f002 fa5a 	bl	6f44 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4a90:	4629      	mov	r1, r5
    4a92:	4807      	ldr	r0, [pc, #28]	; (4ab0 <z_impl_k_sem_give+0x44>)
    4a94:	f000 f9fc 	bl	4e90 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4a98:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4a9a:	68a3      	ldr	r3, [r4, #8]
    4a9c:	68e2      	ldr	r2, [r4, #12]
    4a9e:	4293      	cmp	r3, r2
    4aa0:	d003      	beq.n	4aaa <z_impl_k_sem_give+0x3e>
    4aa2:	2201      	movs	r2, #1
    4aa4:	4413      	add	r3, r2
    4aa6:	60a3      	str	r3, [r4, #8]
}
    4aa8:	e7f2      	b.n	4a90 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4aaa:	2200      	movs	r2, #0
    4aac:	e7fa      	b.n	4aa4 <z_impl_k_sem_give+0x38>
    4aae:	bf00      	nop
    4ab0:	20000c5c 	.word	0x20000c5c

00004ab4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4ab4:	b510      	push	{r4, lr}
    4ab6:	b082      	sub	sp, #8
    4ab8:	f04f 0420 	mov.w	r4, #32
    4abc:	f3ef 8111 	mrs	r1, BASEPRI
    4ac0:	f384 8812 	msr	BASEPRI_MAX, r4
    4ac4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4ac8:	6884      	ldr	r4, [r0, #8]
    4aca:	b144      	cbz	r4, 4ade <z_impl_k_sem_take+0x2a>
		sem->count--;
    4acc:	3c01      	subs	r4, #1
    4ace:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4ad0:	f381 8811 	msr	BASEPRI, r1
    4ad4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4ad8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4ada:	b002      	add	sp, #8
    4adc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4ade:	ea53 0402 	orrs.w	r4, r3, r2
    4ae2:	d006      	beq.n	4af2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4ae4:	9200      	str	r2, [sp, #0]
    4ae6:	9301      	str	r3, [sp, #4]
    4ae8:	4602      	mov	r2, r0
    4aea:	4805      	ldr	r0, [pc, #20]	; (4b00 <z_impl_k_sem_take+0x4c>)
    4aec:	f000 fb58 	bl	51a0 <z_pend_curr>
	return ret;
    4af0:	e7f3      	b.n	4ada <z_impl_k_sem_take+0x26>
    4af2:	f381 8811 	msr	BASEPRI, r1
    4af6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4afa:	f06f 000f 	mvn.w	r0, #15
    4afe:	e7ec      	b.n	4ada <z_impl_k_sem_take+0x26>
    4b00:	20000c5c 	.word	0x20000c5c

00004b04 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    4b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b06:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    4b08:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    4b0a:	f013 0f02 	tst.w	r3, #2
    4b0e:	d15c      	bne.n	4bca <submit_to_queue_locked+0xc6>
    4b10:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    4b12:	f013 0f04 	tst.w	r3, #4
    4b16:	d15d      	bne.n	4bd4 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    4b18:	680b      	ldr	r3, [r1, #0]
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d038      	beq.n	4b90 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
    4b1e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    4b20:	f013 0f01 	tst.w	r3, #1
    4b24:	d037      	beq.n	4b96 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    4b26:	68a3      	ldr	r3, [r4, #8]
    4b28:	602b      	str	r3, [r5, #0]
			ret = 2;
    4b2a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    4b2c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    4b2e:	2e00      	cmp	r6, #0
    4b30:	d03f      	beq.n	4bb2 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4b32:	4b29      	ldr	r3, [pc, #164]	; (4bd8 <submit_to_queue_locked+0xd4>)
    4b34:	689b      	ldr	r3, [r3, #8]
    4b36:	42b3      	cmp	r3, r6
    4b38:	d02f      	beq.n	4b9a <submit_to_queue_locked+0x96>
    4b3a:	2300      	movs	r3, #0
    4b3c:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    4b3e:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    4b42:	f3c3 0180 	ubfx	r1, r3, #2, #1
    4b46:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    4b4a:	f013 0f01 	tst.w	r3, #1
    4b4e:	d033      	beq.n	4bb8 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
    4b50:	b101      	cbz	r1, 4b54 <submit_to_queue_locked+0x50>
    4b52:	b3a2      	cbz	r2, 4bbe <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
    4b54:	b100      	cbz	r0, 4b58 <submit_to_queue_locked+0x54>
    4b56:	b3a9      	cbz	r1, 4bc4 <submit_to_queue_locked+0xc0>
	parent->next = child;
    4b58:	2300      	movs	r3, #0
    4b5a:	6023      	str	r3, [r4, #0]
	return list->tail;
    4b5c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4b60:	b313      	cbz	r3, 4ba8 <submit_to_queue_locked+0xa4>
	parent->next = child;
    4b62:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4b64:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	if (queue != NULL) {
    4b68:	b12e      	cbz	r6, 4b76 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    4b6a:	2200      	movs	r2, #0
    4b6c:	4611      	mov	r1, r2
    4b6e:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    4b72:	f002 fadd 	bl	7130 <z_sched_wake>
		ret = 1;
    4b76:	2001      	movs	r0, #1

		if (rc < 0) {
    4b78:	2800      	cmp	r0, #0
    4b7a:	db06      	blt.n	4b8a <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
    4b7c:	68e3      	ldr	r3, [r4, #12]
    4b7e:	f043 0304 	orr.w	r3, r3, #4
    4b82:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    4b84:	682b      	ldr	r3, [r5, #0]
    4b86:	60a3      	str	r3, [r4, #8]
    4b88:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    4b8a:	2800      	cmp	r0, #0
    4b8c:	dc21      	bgt.n	4bd2 <submit_to_queue_locked+0xce>
    4b8e:	e01e      	b.n	4bce <submit_to_queue_locked+0xca>
			*queuep = work->queue;
    4b90:	6883      	ldr	r3, [r0, #8]
    4b92:	600b      	str	r3, [r1, #0]
    4b94:	e7c3      	b.n	4b1e <submit_to_queue_locked+0x1a>
		ret = 1;
    4b96:	2701      	movs	r7, #1
    4b98:	e7c8      	b.n	4b2c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4b9a:	f002 f8f4 	bl	6d86 <k_is_in_isr>
    4b9e:	b908      	cbnz	r0, 4ba4 <submit_to_queue_locked+0xa0>
    4ba0:	2301      	movs	r3, #1
    4ba2:	e7cb      	b.n	4b3c <submit_to_queue_locked+0x38>
    4ba4:	2300      	movs	r3, #0
    4ba6:	e7c9      	b.n	4b3c <submit_to_queue_locked+0x38>
    4ba8:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    4bac:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    4bb0:	e7da      	b.n	4b68 <submit_to_queue_locked+0x64>
		return -EINVAL;
    4bb2:	f06f 0015 	mvn.w	r0, #21
    4bb6:	e7df      	b.n	4b78 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
    4bb8:	f06f 0012 	mvn.w	r0, #18
    4bbc:	e7dc      	b.n	4b78 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
    4bbe:	f06f 000f 	mvn.w	r0, #15
    4bc2:	e7d9      	b.n	4b78 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
    4bc4:	f06f 000f 	mvn.w	r0, #15
    4bc8:	e7d6      	b.n	4b78 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
    4bca:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    4bce:	2300      	movs	r3, #0
    4bd0:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    4bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    4bd4:	2000      	movs	r0, #0
    4bd6:	e7fa      	b.n	4bce <submit_to_queue_locked+0xca>
    4bd8:	20000c30 	.word	0x20000c30

00004bdc <finalize_cancel_locked>:
{
    4bdc:	b570      	push	{r4, r5, r6, lr}
    4bde:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    4be0:	68c3      	ldr	r3, [r0, #12]
    4be2:	f023 0302 	bic.w	r3, r3, #2
    4be6:	60c3      	str	r3, [r0, #12]
	return list->head;
    4be8:	4b1a      	ldr	r3, [pc, #104]	; (4c54 <finalize_cancel_locked+0x78>)
    4bea:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    4bec:	b1fb      	cbz	r3, 4c2e <finalize_cancel_locked+0x52>
    4bee:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    4bf0:	b103      	cbz	r3, 4bf4 <finalize_cancel_locked+0x18>
	return node->next;
    4bf2:	681c      	ldr	r4, [r3, #0]
    4bf4:	2600      	movs	r6, #0
    4bf6:	e01f      	b.n	4c38 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    4bf8:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    4bfa:	b166      	cbz	r6, 4c16 <finalize_cancel_locked+0x3a>
	return node->next;
    4bfc:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
    4bfe:	6031      	str	r1, [r6, #0]
	return list->tail;
    4c00:	4914      	ldr	r1, [pc, #80]	; (4c54 <finalize_cancel_locked+0x78>)
    4c02:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
    4c04:	428b      	cmp	r3, r1
    4c06:	d00f      	beq.n	4c28 <finalize_cancel_locked+0x4c>
	parent->next = child;
    4c08:	2100      	movs	r1, #0
    4c0a:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
    4c0c:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
    4c10:	f7ff ff2c 	bl	4a6c <z_impl_k_sem_give>
}
    4c14:	e015      	b.n	4c42 <finalize_cancel_locked+0x66>
	return node->next;
    4c16:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    4c18:	490e      	ldr	r1, [pc, #56]	; (4c54 <finalize_cancel_locked+0x78>)
    4c1a:	6008      	str	r0, [r1, #0]
	return list->tail;
    4c1c:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
    4c1e:	428b      	cmp	r3, r1
    4c20:	d1f2      	bne.n	4c08 <finalize_cancel_locked+0x2c>
	list->tail = node;
    4c22:	490c      	ldr	r1, [pc, #48]	; (4c54 <finalize_cancel_locked+0x78>)
    4c24:	6048      	str	r0, [r1, #4]
}
    4c26:	e7ef      	b.n	4c08 <finalize_cancel_locked+0x2c>
	list->tail = node;
    4c28:	490a      	ldr	r1, [pc, #40]	; (4c54 <finalize_cancel_locked+0x78>)
    4c2a:	604e      	str	r6, [r1, #4]
}
    4c2c:	e7ec      	b.n	4c08 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    4c2e:	461c      	mov	r4, r3
    4c30:	e7e0      	b.n	4bf4 <finalize_cancel_locked+0x18>
    4c32:	4622      	mov	r2, r4
    4c34:	4623      	mov	r3, r4
    4c36:	4614      	mov	r4, r2
    4c38:	b153      	cbz	r3, 4c50 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
    4c3a:	685a      	ldr	r2, [r3, #4]
    4c3c:	42aa      	cmp	r2, r5
    4c3e:	d0db      	beq.n	4bf8 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    4c40:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    4c42:	2c00      	cmp	r4, #0
    4c44:	d0f5      	beq.n	4c32 <finalize_cancel_locked+0x56>
    4c46:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c48:	2c00      	cmp	r4, #0
    4c4a:	d0f3      	beq.n	4c34 <finalize_cancel_locked+0x58>
	return node->next;
    4c4c:	6822      	ldr	r2, [r4, #0]
    4c4e:	e7f1      	b.n	4c34 <finalize_cancel_locked+0x58>
}
    4c50:	bd70      	pop	{r4, r5, r6, pc}
    4c52:	bf00      	nop
    4c54:	20000c5c 	.word	0x20000c5c

00004c58 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    4c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c5a:	b085      	sub	sp, #20
    4c5c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    4c5e:	e016      	b.n	4c8e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    4c60:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    4c64:	f023 0204 	bic.w	r2, r3, #4
    4c68:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    4c6c:	f013 0f04 	tst.w	r3, #4
    4c70:	d159      	bne.n	4d26 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    4c72:	2300      	movs	r3, #0
    4c74:	9302      	str	r3, [sp, #8]
    4c76:	f04f 32ff 	mov.w	r2, #4294967295
    4c7a:	f04f 33ff 	mov.w	r3, #4294967295
    4c7e:	e9cd 2300 	strd	r2, r3, [sp]
    4c82:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    4c86:	4631      	mov	r1, r6
    4c88:	482e      	ldr	r0, [pc, #184]	; (4d44 <work_queue_main+0xec>)
    4c8a:	f000 fcab 	bl	55e4 <z_sched_wait>
	__asm__ volatile(
    4c8e:	f04f 0320 	mov.w	r3, #32
    4c92:	f3ef 8611 	mrs	r6, BASEPRI
    4c96:	f383 8812 	msr	BASEPRI_MAX, r3
    4c9a:	f3bf 8f6f 	isb	sy
	return list->head;
    4c9e:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    4ca2:	2c00      	cmp	r4, #0
    4ca4:	d0dc      	beq.n	4c60 <work_queue_main+0x8>
	return node->next;
    4ca6:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4ca8:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    4cac:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4cb0:	4294      	cmp	r4, r2
    4cb2:	d035      	beq.n	4d20 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
    4cb4:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    4cb8:	f043 0302 	orr.w	r3, r3, #2
    4cbc:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    4cc0:	68e3      	ldr	r3, [r4, #12]
    4cc2:	f043 0301 	orr.w	r3, r3, #1
    4cc6:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
    4cc8:	f023 0304 	bic.w	r3, r3, #4
    4ccc:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    4cce:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    4cd0:	2c00      	cmp	r4, #0
    4cd2:	d0ce      	beq.n	4c72 <work_queue_main+0x1a>
	__asm__ volatile(
    4cd4:	f386 8811 	msr	BASEPRI, r6
    4cd8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    4cdc:	4620      	mov	r0, r4
    4cde:	4798      	blx	r3
	__asm__ volatile(
    4ce0:	f04f 0320 	mov.w	r3, #32
    4ce4:	f3ef 8611 	mrs	r6, BASEPRI
    4ce8:	f383 8812 	msr	BASEPRI_MAX, r3
    4cec:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    4cf0:	68e3      	ldr	r3, [r4, #12]
    4cf2:	f023 0301 	bic.w	r3, r3, #1
    4cf6:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    4cf8:	f013 0f02 	tst.w	r3, #2
    4cfc:	d11e      	bne.n	4d3c <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    4cfe:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    4d02:	f023 0302 	bic.w	r3, r3, #2
    4d06:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    4d0a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    4d0e:	f386 8811 	msr	BASEPRI, r6
    4d12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    4d16:	2b00      	cmp	r3, #0
    4d18:	d1b9      	bne.n	4c8e <work_queue_main+0x36>
	z_impl_k_yield();
    4d1a:	f000 fb79 	bl	5410 <z_impl_k_yield>
}
    4d1e:	e7b6      	b.n	4c8e <work_queue_main+0x36>
	list->tail = node;
    4d20:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    4d24:	e7c6      	b.n	4cb4 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    4d26:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    4d2a:	2200      	movs	r2, #0
    4d2c:	2101      	movs	r1, #1
    4d2e:	4638      	mov	r0, r7
    4d30:	f002 f9fe 	bl	7130 <z_sched_wake>
    4d34:	2800      	cmp	r0, #0
    4d36:	d1f8      	bne.n	4d2a <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
    4d38:	2300      	movs	r3, #0
    4d3a:	e7c9      	b.n	4cd0 <work_queue_main+0x78>
			finalize_cancel_locked(work);
    4d3c:	4620      	mov	r0, r4
    4d3e:	f7ff ff4d 	bl	4bdc <finalize_cancel_locked>
    4d42:	e7dc      	b.n	4cfe <work_queue_main+0xa6>
    4d44:	20000c5c 	.word	0x20000c5c

00004d48 <k_work_submit>:
{
    4d48:	b508      	push	{r3, lr}
    4d4a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    4d4c:	4801      	ldr	r0, [pc, #4]	; (4d54 <k_work_submit+0xc>)
    4d4e:	f002 f883 	bl	6e58 <k_work_submit_to_queue>
}
    4d52:	bd08      	pop	{r3, pc}
    4d54:	20000540 	.word	0x20000540

00004d58 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d5a:	b089      	sub	sp, #36	; 0x24
    4d5c:	4604      	mov	r4, r0
    4d5e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    4d60:	2000      	movs	r0, #0
    4d62:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    4d66:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    4d6a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    4d6e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    4d72:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    4d76:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    4d7a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    4d7e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    4d82:	b1fd      	cbz	r5, 4dc4 <k_work_queue_start+0x6c>
    4d84:	7928      	ldrb	r0, [r5, #4]
    4d86:	b9f8      	cbnz	r0, 4dc8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    4d88:	2001      	movs	r0, #1
	*flagp = flags;
    4d8a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4d8e:	f04f 36ff 	mov.w	r6, #4294967295
    4d92:	f04f 37ff 	mov.w	r7, #4294967295
    4d96:	e9cd 6706 	strd	r6, r7, [sp, #24]
    4d9a:	2000      	movs	r0, #0
    4d9c:	9004      	str	r0, [sp, #16]
    4d9e:	9303      	str	r3, [sp, #12]
    4da0:	9002      	str	r0, [sp, #8]
    4da2:	9001      	str	r0, [sp, #4]
    4da4:	9400      	str	r4, [sp, #0]
    4da6:	4b0a      	ldr	r3, [pc, #40]	; (4dd0 <k_work_queue_start+0x78>)
    4da8:	4620      	mov	r0, r4
    4daa:	f002 f801 	bl	6db0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    4dae:	b125      	cbz	r5, 4dba <k_work_queue_start+0x62>
    4db0:	6829      	ldr	r1, [r5, #0]
    4db2:	b111      	cbz	r1, 4dba <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    4db4:	4620      	mov	r0, r4
    4db6:	f7ff fc9f 	bl	46f8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    4dba:	4620      	mov	r0, r4
    4dbc:	f001 ffe9 	bl	6d92 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    4dc0:	b009      	add	sp, #36	; 0x24
    4dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    4dc4:	2001      	movs	r0, #1
    4dc6:	e7e0      	b.n	4d8a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    4dc8:	f240 1001 	movw	r0, #257	; 0x101
    4dcc:	e7dd      	b.n	4d8a <k_work_queue_start+0x32>
    4dce:	bf00      	nop
    4dd0:	00004c59 	.word	0x00004c59

00004dd4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
    4dd8:	bf08      	it	eq
    4dda:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    4dde:	d100      	bne.n	4de2 <add_thread_timeout+0xe>
    4de0:	4770      	bx	lr
{
    4de2:	b508      	push	{r3, lr}
    4de4:	4902      	ldr	r1, [pc, #8]	; (4df0 <add_thread_timeout+0x1c>)
    4de6:	3018      	adds	r0, #24
    4de8:	f000 fc72 	bl	56d0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4dec:	bd08      	pop	{r3, pc}
    4dee:	bf00      	nop
    4df0:	00006f7d 	.word	0x00006f7d

00004df4 <z_reset_time_slice>:
{
    4df4:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    4df6:	4b07      	ldr	r3, [pc, #28]	; (4e14 <z_reset_time_slice+0x20>)
    4df8:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    4dfa:	b904      	cbnz	r4, 4dfe <z_reset_time_slice+0xa>
}
    4dfc:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4dfe:	f7fd ff47 	bl	2c90 <sys_clock_elapsed>
    4e02:	4404      	add	r4, r0
    4e04:	4b04      	ldr	r3, [pc, #16]	; (4e18 <z_reset_time_slice+0x24>)
    4e06:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4e08:	2100      	movs	r1, #0
    4e0a:	4b02      	ldr	r3, [pc, #8]	; (4e14 <z_reset_time_slice+0x20>)
    4e0c:	6818      	ldr	r0, [r3, #0]
    4e0e:	f002 fa12 	bl	7236 <z_set_timeout_expiry>
}
    4e12:	e7f3      	b.n	4dfc <z_reset_time_slice+0x8>
    4e14:	20000c6c 	.word	0x20000c6c
    4e18:	20000c30 	.word	0x20000c30

00004e1c <k_sched_time_slice_set>:
{
    4e1c:	b570      	push	{r4, r5, r6, lr}
    4e1e:	4604      	mov	r4, r0
    4e20:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    4e22:	2300      	movs	r3, #0
	__asm__ volatile(
    4e24:	f04f 0220 	mov.w	r2, #32
    4e28:	f3ef 8611 	mrs	r6, BASEPRI
    4e2c:	f382 8812 	msr	BASEPRI_MAX, r2
    4e30:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4e34:	e00e      	b.n	4e54 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    4e36:	2802      	cmp	r0, #2
    4e38:	bfb8      	it	lt
    4e3a:	2002      	movlt	r0, #2
    4e3c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    4e3e:	4b11      	ldr	r3, [pc, #68]	; (4e84 <k_sched_time_slice_set+0x68>)
    4e40:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    4e42:	4b11      	ldr	r3, [pc, #68]	; (4e88 <k_sched_time_slice_set+0x6c>)
    4e44:	6898      	ldr	r0, [r3, #8]
    4e46:	f7ff ffd5 	bl	4df4 <z_reset_time_slice>
	__asm__ volatile(
    4e4a:	f386 8811 	msr	BASEPRI, r6
    4e4e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4e52:	2301      	movs	r3, #1
    4e54:	b9a3      	cbnz	r3, 4e80 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    4e56:	4b0c      	ldr	r3, [pc, #48]	; (4e88 <k_sched_time_slice_set+0x6c>)
    4e58:	2200      	movs	r2, #0
    4e5a:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4e5c:	0c61      	lsrs	r1, r4, #17
    4e5e:	03e3      	lsls	r3, r4, #15
    4e60:	f240 30e7 	movw	r0, #999	; 0x3e7
    4e64:	1818      	adds	r0, r3, r0
    4e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e6a:	f04f 0300 	mov.w	r3, #0
    4e6e:	f141 0100 	adc.w	r1, r1, #0
    4e72:	f7fb f933 	bl	dc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    4e76:	4b05      	ldr	r3, [pc, #20]	; (4e8c <k_sched_time_slice_set+0x70>)
    4e78:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4e7a:	2c00      	cmp	r4, #0
    4e7c:	dcdb      	bgt.n	4e36 <k_sched_time_slice_set+0x1a>
    4e7e:	e7de      	b.n	4e3e <k_sched_time_slice_set+0x22>
}
    4e80:	bd70      	pop	{r4, r5, r6, pc}
    4e82:	bf00      	nop
    4e84:	20000c68 	.word	0x20000c68
    4e88:	20000c30 	.word	0x20000c30
    4e8c:	20000c6c 	.word	0x20000c6c

00004e90 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4e90:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    4e92:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4e94:	b921      	cbnz	r1, 4ea0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4e96:	f3ef 8305 	mrs	r3, IPSR
    4e9a:	b913      	cbnz	r3, 4ea2 <z_reschedule+0x12>
    4e9c:	2101      	movs	r1, #1
    4e9e:	e000      	b.n	4ea2 <z_reschedule+0x12>
    4ea0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    4ea2:	f011 0f01 	tst.w	r1, #1
    4ea6:	d007      	beq.n	4eb8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    4ea8:	4b06      	ldr	r3, [pc, #24]	; (4ec4 <z_reschedule+0x34>)
    4eaa:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    4eac:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    4eae:	429a      	cmp	r2, r3
    4eb0:	d002      	beq.n	4eb8 <z_reschedule+0x28>
	ret = arch_swap(key);
    4eb2:	f7fc f9f5 	bl	12a0 <arch_swap>
		z_swap(lock, key);
    4eb6:	e003      	b.n	4ec0 <z_reschedule+0x30>
    4eb8:	f380 8811 	msr	BASEPRI, r0
    4ebc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    4ec0:	bd08      	pop	{r3, pc}
    4ec2:	bf00      	nop
    4ec4:	20000c30 	.word	0x20000c30

00004ec8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4ec8:	2300      	movs	r3, #0
	__asm__ volatile(
    4eca:	f04f 0220 	mov.w	r2, #32
    4ece:	f3ef 8111 	mrs	r1, BASEPRI
    4ed2:	f382 8812 	msr	BASEPRI_MAX, r2
    4ed6:	f3bf 8f6f 	isb	sy
    4eda:	e009      	b.n	4ef0 <k_sched_lock+0x28>
	--_current->base.sched_locked;
    4edc:	4b06      	ldr	r3, [pc, #24]	; (4ef8 <k_sched_lock+0x30>)
    4ede:	689a      	ldr	r2, [r3, #8]
    4ee0:	7bd3      	ldrb	r3, [r2, #15]
    4ee2:	3b01      	subs	r3, #1
    4ee4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4ee6:	f381 8811 	msr	BASEPRI, r1
    4eea:	f3bf 8f6f 	isb	sy
    4eee:	2301      	movs	r3, #1
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d0f3      	beq.n	4edc <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4ef4:	4770      	bx	lr
    4ef6:	bf00      	nop
    4ef8:	20000c30 	.word	0x20000c30

00004efc <update_cache>:
{
    4efc:	b538      	push	{r3, r4, r5, lr}
    4efe:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4f00:	4810      	ldr	r0, [pc, #64]	; (4f44 <update_cache+0x48>)
    4f02:	f002 f818 	bl	6f36 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4f06:	4605      	mov	r5, r0
    4f08:	b170      	cbz	r0, 4f28 <update_cache+0x2c>
	if (preempt_ok != 0) {
    4f0a:	b984      	cbnz	r4, 4f2e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    4f0c:	4b0e      	ldr	r3, [pc, #56]	; (4f48 <update_cache+0x4c>)
    4f0e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4f10:	7b5a      	ldrb	r2, [r3, #13]
    4f12:	f012 0f1f 	tst.w	r2, #31
    4f16:	d10a      	bne.n	4f2e <update_cache+0x32>
	return node->next != NULL;
    4f18:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4f1a:	b942      	cbnz	r2, 4f2e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4f1c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    4f1e:	2a7f      	cmp	r2, #127	; 0x7f
    4f20:	d905      	bls.n	4f2e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4f22:	4a09      	ldr	r2, [pc, #36]	; (4f48 <update_cache+0x4c>)
    4f24:	61d3      	str	r3, [r2, #28]
    4f26:	e00b      	b.n	4f40 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4f28:	4b07      	ldr	r3, [pc, #28]	; (4f48 <update_cache+0x4c>)
    4f2a:	68dd      	ldr	r5, [r3, #12]
    4f2c:	e7ed      	b.n	4f0a <update_cache+0xe>
		if (thread != _current) {
    4f2e:	4b06      	ldr	r3, [pc, #24]	; (4f48 <update_cache+0x4c>)
    4f30:	689b      	ldr	r3, [r3, #8]
    4f32:	42ab      	cmp	r3, r5
    4f34:	d002      	beq.n	4f3c <update_cache+0x40>
			z_reset_time_slice(thread);
    4f36:	4628      	mov	r0, r5
    4f38:	f7ff ff5c 	bl	4df4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4f3c:	4b02      	ldr	r3, [pc, #8]	; (4f48 <update_cache+0x4c>)
    4f3e:	61dd      	str	r5, [r3, #28]
}
    4f40:	bd38      	pop	{r3, r4, r5, pc}
    4f42:	bf00      	nop
    4f44:	20000c50 	.word	0x20000c50
    4f48:	20000c30 	.word	0x20000c30

00004f4c <move_thread_to_end_of_prio_q>:
{
    4f4c:	b538      	push	{r3, r4, r5, lr}
    4f4e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4f50:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4f52:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4f56:	2b00      	cmp	r3, #0
    4f58:	db28      	blt.n	4fac <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    4f5a:	7b6b      	ldrb	r3, [r5, #13]
    4f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f60:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4f62:	4b1a      	ldr	r3, [pc, #104]	; (4fcc <move_thread_to_end_of_prio_q+0x80>)
    4f64:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f68:	429c      	cmp	r4, r3
    4f6a:	d02d      	beq.n	4fc8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f6c:	b16c      	cbz	r4, 4f8a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4f6e:	4621      	mov	r1, r4
    4f70:	4628      	mov	r0, r5
    4f72:	f001 ff99 	bl	6ea8 <z_sched_prio_cmp>
    4f76:	2800      	cmp	r0, #0
    4f78:	dc20      	bgt.n	4fbc <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4f7a:	b134      	cbz	r4, 4f8a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4f7c:	4b13      	ldr	r3, [pc, #76]	; (4fcc <move_thread_to_end_of_prio_q+0x80>)
    4f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f80:	429c      	cmp	r4, r3
    4f82:	d002      	beq.n	4f8a <move_thread_to_end_of_prio_q+0x3e>
    4f84:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f86:	2c00      	cmp	r4, #0
    4f88:	d1f0      	bne.n	4f6c <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    4f8a:	4b10      	ldr	r3, [pc, #64]	; (4fcc <move_thread_to_end_of_prio_q+0x80>)
    4f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    4f8e:	f103 0120 	add.w	r1, r3, #32
    4f92:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4f94:	606a      	str	r2, [r5, #4]

	tail->next = node;
    4f96:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4f98:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    4f9a:	4b0c      	ldr	r3, [pc, #48]	; (4fcc <move_thread_to_end_of_prio_q+0x80>)
    4f9c:	6898      	ldr	r0, [r3, #8]
    4f9e:	42a8      	cmp	r0, r5
    4fa0:	bf14      	ite	ne
    4fa2:	2000      	movne	r0, #0
    4fa4:	2001      	moveq	r0, #1
    4fa6:	f7ff ffa9 	bl	4efc <update_cache>
}
    4faa:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4fac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4fb0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4fb2:	4601      	mov	r1, r0
    4fb4:	4806      	ldr	r0, [pc, #24]	; (4fd0 <move_thread_to_end_of_prio_q+0x84>)
    4fb6:	f001 ffb6 	bl	6f26 <z_priq_dumb_remove>
}
    4fba:	e7ce      	b.n	4f5a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4fbc:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4fbe:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4fc0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4fc2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4fc4:	6065      	str	r5, [r4, #4]
}
    4fc6:	e7e8      	b.n	4f9a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4fc8:	2400      	movs	r4, #0
    4fca:	e7cf      	b.n	4f6c <move_thread_to_end_of_prio_q+0x20>
    4fcc:	20000c30 	.word	0x20000c30
    4fd0:	20000c50 	.word	0x20000c50

00004fd4 <slice_expired_locked>:
{
    4fd4:	b538      	push	{r3, r4, r5, lr}
    4fd6:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4fd8:	4b07      	ldr	r3, [pc, #28]	; (4ff8 <slice_expired_locked+0x24>)
    4fda:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4fdc:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    4fde:	f013 0f1f 	tst.w	r3, #31
    4fe2:	d004      	beq.n	4fee <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4fe4:	4628      	mov	r0, r5
    4fe6:	f7ff ff05 	bl	4df4 <z_reset_time_slice>
}
    4fea:	4620      	mov	r0, r4
    4fec:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    4fee:	4628      	mov	r0, r5
    4ff0:	f7ff ffac 	bl	4f4c <move_thread_to_end_of_prio_q>
    4ff4:	e7f6      	b.n	4fe4 <slice_expired_locked+0x10>
    4ff6:	bf00      	nop
    4ff8:	20000c30 	.word	0x20000c30

00004ffc <z_time_slice>:
{
    4ffc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4ffe:	f04f 0320 	mov.w	r3, #32
    5002:	f3ef 8411 	mrs	r4, BASEPRI
    5006:	f383 8812 	msr	BASEPRI_MAX, r3
    500a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    500e:	4b22      	ldr	r3, [pc, #136]	; (5098 <z_time_slice+0x9c>)
    5010:	689b      	ldr	r3, [r3, #8]
    5012:	4a22      	ldr	r2, [pc, #136]	; (509c <z_time_slice+0xa0>)
    5014:	6812      	ldr	r2, [r2, #0]
    5016:	4293      	cmp	r3, r2
    5018:	d018      	beq.n	504c <z_time_slice+0x50>
    501a:	4621      	mov	r1, r4
	pending_current = NULL;
    501c:	4a1f      	ldr	r2, [pc, #124]	; (509c <z_time_slice+0xa0>)
    501e:	2500      	movs	r5, #0
    5020:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
    5022:	4a1f      	ldr	r2, [pc, #124]	; (50a0 <z_time_slice+0xa4>)
    5024:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
    5026:	b372      	cbz	r2, 5086 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    5028:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    502a:	2a7f      	cmp	r2, #127	; 0x7f
    502c:	d816      	bhi.n	505c <z_time_slice+0x60>
    502e:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    5030:	f012 0f1f 	tst.w	r2, #31
    5034:	d11c      	bne.n	5070 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5036:	f993 500e 	ldrsb.w	r5, [r3, #14]
    503a:	4a1a      	ldr	r2, [pc, #104]	; (50a4 <z_time_slice+0xa8>)
    503c:	6812      	ldr	r2, [r2, #0]
    503e:	4295      	cmp	r5, r2
    5040:	db18      	blt.n	5074 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
    5042:	4a19      	ldr	r2, [pc, #100]	; (50a8 <z_time_slice+0xac>)
    5044:	4293      	cmp	r3, r2
    5046:	d017      	beq.n	5078 <z_time_slice+0x7c>
    5048:	2301      	movs	r3, #1
    504a:	e008      	b.n	505e <z_time_slice+0x62>
		z_reset_time_slice(_current);
    504c:	4618      	mov	r0, r3
    504e:	f7ff fed1 	bl	4df4 <z_reset_time_slice>
	__asm__ volatile(
    5052:	f384 8811 	msr	BASEPRI, r4
    5056:	f3bf 8f6f 	isb	sy
		return;
    505a:	e01b      	b.n	5094 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
    505c:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
    505e:	b193      	cbz	r3, 5086 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
    5060:	4b0d      	ldr	r3, [pc, #52]	; (5098 <z_time_slice+0x9c>)
    5062:	691b      	ldr	r3, [r3, #16]
    5064:	4283      	cmp	r3, r0
    5066:	dd09      	ble.n	507c <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
    5068:	1a18      	subs	r0, r3, r0
    506a:	4b0b      	ldr	r3, [pc, #44]	; (5098 <z_time_slice+0x9c>)
    506c:	6118      	str	r0, [r3, #16]
    506e:	e00d      	b.n	508c <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    5070:	2300      	movs	r3, #0
    5072:	e7f4      	b.n	505e <z_time_slice+0x62>
    5074:	2300      	movs	r3, #0
    5076:	e7f2      	b.n	505e <z_time_slice+0x62>
    5078:	2300      	movs	r3, #0
    507a:	e7f0      	b.n	505e <z_time_slice+0x62>
			key = slice_expired_locked(key);
    507c:	4620      	mov	r0, r4
    507e:	f7ff ffa9 	bl	4fd4 <slice_expired_locked>
    5082:	4601      	mov	r1, r0
    5084:	e002      	b.n	508c <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
    5086:	4b04      	ldr	r3, [pc, #16]	; (5098 <z_time_slice+0x9c>)
    5088:	2200      	movs	r2, #0
    508a:	611a      	str	r2, [r3, #16]
    508c:	f381 8811 	msr	BASEPRI, r1
    5090:	f3bf 8f6f 	isb	sy
}
    5094:	bd38      	pop	{r3, r4, r5, pc}
    5096:	bf00      	nop
    5098:	20000c30 	.word	0x20000c30
    509c:	20000c64 	.word	0x20000c64
    50a0:	20000c6c 	.word	0x20000c6c
    50a4:	20000c68 	.word	0x20000c68
    50a8:	200003d8 	.word	0x200003d8

000050ac <ready_thread>:
{
    50ac:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    50ae:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    50b0:	f990 200d 	ldrsb.w	r2, [r0, #13]
    50b4:	2a00      	cmp	r2, #0
    50b6:	db2d      	blt.n	5114 <ready_thread+0x68>
    50b8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    50ba:	f013 0f1f 	tst.w	r3, #31
    50be:	d105      	bne.n	50cc <ready_thread+0x20>
	return node->next != NULL;
    50c0:	6982      	ldr	r2, [r0, #24]
    50c2:	b10a      	cbz	r2, 50c8 <ready_thread+0x1c>
    50c4:	2200      	movs	r2, #0
    50c6:	e002      	b.n	50ce <ready_thread+0x22>
    50c8:	2201      	movs	r2, #1
    50ca:	e000      	b.n	50ce <ready_thread+0x22>
    50cc:	2200      	movs	r2, #0
    50ce:	b30a      	cbz	r2, 5114 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    50d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    50d4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    50d6:	4b14      	ldr	r3, [pc, #80]	; (5128 <ready_thread+0x7c>)
    50d8:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50dc:	429d      	cmp	r5, r3
    50de:	d020      	beq.n	5122 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    50e0:	b16d      	cbz	r5, 50fe <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    50e2:	4629      	mov	r1, r5
    50e4:	4620      	mov	r0, r4
    50e6:	f001 fedf 	bl	6ea8 <z_sched_prio_cmp>
    50ea:	2800      	cmp	r0, #0
    50ec:	dc13      	bgt.n	5116 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    50ee:	b135      	cbz	r5, 50fe <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    50f0:	4b0d      	ldr	r3, [pc, #52]	; (5128 <ready_thread+0x7c>)
    50f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    50f4:	429d      	cmp	r5, r3
    50f6:	d002      	beq.n	50fe <ready_thread+0x52>
    50f8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    50fa:	2d00      	cmp	r5, #0
    50fc:	d1f0      	bne.n	50e0 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    50fe:	4b0a      	ldr	r3, [pc, #40]	; (5128 <ready_thread+0x7c>)
    5100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5102:	f103 0120 	add.w	r1, r3, #32
    5106:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    5108:	6062      	str	r2, [r4, #4]
	tail->next = node;
    510a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    510c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    510e:	2000      	movs	r0, #0
    5110:	f7ff fef4 	bl	4efc <update_cache>
}
    5114:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    5116:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    5118:	6063      	str	r3, [r4, #4]
	node->next = successor;
    511a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    511c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    511e:	606c      	str	r4, [r5, #4]
}
    5120:	e7f5      	b.n	510e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5122:	2500      	movs	r5, #0
    5124:	e7dc      	b.n	50e0 <ready_thread+0x34>
    5126:	bf00      	nop
    5128:	20000c30 	.word	0x20000c30

0000512c <z_sched_start>:
{
    512c:	b510      	push	{r4, lr}
	__asm__ volatile(
    512e:	f04f 0320 	mov.w	r3, #32
    5132:	f3ef 8411 	mrs	r4, BASEPRI
    5136:	f383 8812 	msr	BASEPRI_MAX, r3
    513a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    513e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    5140:	f013 0f04 	tst.w	r3, #4
    5144:	d104      	bne.n	5150 <z_sched_start+0x24>
	__asm__ volatile(
    5146:	f384 8811 	msr	BASEPRI, r4
    514a:	f3bf 8f6f 	isb	sy
}
    514e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5150:	f023 0304 	bic.w	r3, r3, #4
    5154:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    5156:	f7ff ffa9 	bl	50ac <ready_thread>
	z_reschedule(&sched_spinlock, key);
    515a:	4621      	mov	r1, r4
    515c:	4801      	ldr	r0, [pc, #4]	; (5164 <z_sched_start+0x38>)
    515e:	f7ff fe97 	bl	4e90 <z_reschedule>
    5162:	e7f4      	b.n	514e <z_sched_start+0x22>
    5164:	20000c68 	.word	0x20000c68

00005168 <unready_thread>:
{
    5168:	b510      	push	{r4, lr}
    516a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    516c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    516e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5172:	2b00      	cmp	r3, #0
    5174:	db08      	blt.n	5188 <unready_thread+0x20>
	update_cache(thread == _current);
    5176:	4b08      	ldr	r3, [pc, #32]	; (5198 <unready_thread+0x30>)
    5178:	6898      	ldr	r0, [r3, #8]
    517a:	42a0      	cmp	r0, r4
    517c:	bf14      	ite	ne
    517e:	2000      	movne	r0, #0
    5180:	2001      	moveq	r0, #1
    5182:	f7ff febb 	bl	4efc <update_cache>
}
    5186:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    518c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    518e:	4601      	mov	r1, r0
    5190:	4802      	ldr	r0, [pc, #8]	; (519c <unready_thread+0x34>)
    5192:	f001 fec8 	bl	6f26 <z_priq_dumb_remove>
}
    5196:	e7ee      	b.n	5176 <unready_thread+0xe>
    5198:	20000c30 	.word	0x20000c30
    519c:	20000c50 	.word	0x20000c50

000051a0 <z_pend_curr>:
{
    51a0:	b510      	push	{r4, lr}
    51a2:	460c      	mov	r4, r1
    51a4:	4611      	mov	r1, r2
	pending_current = _current;
    51a6:	4b06      	ldr	r3, [pc, #24]	; (51c0 <z_pend_curr+0x20>)
    51a8:	6898      	ldr	r0, [r3, #8]
    51aa:	4b06      	ldr	r3, [pc, #24]	; (51c4 <z_pend_curr+0x24>)
    51ac:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    51ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    51b2:	f001 ff45 	bl	7040 <pend>
    51b6:	4620      	mov	r0, r4
    51b8:	f7fc f872 	bl	12a0 <arch_swap>
}
    51bc:	bd10      	pop	{r4, pc}
    51be:	bf00      	nop
    51c0:	20000c30 	.word	0x20000c30
    51c4:	20000c64 	.word	0x20000c64

000051c8 <z_set_prio>:
{
    51c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51cc:	4604      	mov	r4, r0
    51ce:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    51d0:	2300      	movs	r3, #0
	__asm__ volatile(
    51d2:	f04f 0220 	mov.w	r2, #32
    51d6:	f3ef 8811 	mrs	r8, BASEPRI
    51da:	f382 8812 	msr	BASEPRI_MAX, r2
    51de:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    51e2:	461f      	mov	r7, r3
    51e4:	e008      	b.n	51f8 <z_set_prio+0x30>
		if (need_sched) {
    51e6:	f012 0701 	ands.w	r7, r2, #1
    51ea:	d111      	bne.n	5210 <z_set_prio+0x48>
			thread->base.prio = prio;
    51ec:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
    51ee:	f388 8811 	msr	BASEPRI, r8
    51f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    51f6:	2301      	movs	r3, #1
    51f8:	461a      	mov	r2, r3
    51fa:	2b00      	cmp	r3, #0
    51fc:	d13d      	bne.n	527a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    51fe:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5200:	f013 0f1f 	tst.w	r3, #31
    5204:	d1ef      	bne.n	51e6 <z_set_prio+0x1e>
	return node->next != NULL;
    5206:	69a1      	ldr	r1, [r4, #24]
    5208:	2900      	cmp	r1, #0
    520a:	d1ec      	bne.n	51e6 <z_set_prio+0x1e>
    520c:	2201      	movs	r2, #1
    520e:	e7ea      	b.n	51e6 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5214:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5216:	f8df 9068 	ldr.w	r9, [pc, #104]	; 5280 <z_set_prio+0xb8>
    521a:	4621      	mov	r1, r4
    521c:	4648      	mov	r0, r9
    521e:	f001 fe82 	bl	6f26 <z_priq_dumb_remove>
				thread->base.prio = prio;
    5222:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5224:	7b63      	ldrb	r3, [r4, #13]
    5226:	f063 037f 	orn	r3, r3, #127	; 0x7f
    522a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    522c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5230:	454d      	cmp	r5, r9
    5232:	d020      	beq.n	5276 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5234:	b16d      	cbz	r5, 5252 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5236:	4629      	mov	r1, r5
    5238:	4620      	mov	r0, r4
    523a:	f001 fe35 	bl	6ea8 <z_sched_prio_cmp>
    523e:	2800      	cmp	r0, #0
    5240:	dc13      	bgt.n	526a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5242:	b135      	cbz	r5, 5252 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    5244:	4b0f      	ldr	r3, [pc, #60]	; (5284 <z_set_prio+0xbc>)
    5246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5248:	429d      	cmp	r5, r3
    524a:	d002      	beq.n	5252 <z_set_prio+0x8a>
    524c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    524e:	2d00      	cmp	r5, #0
    5250:	d1f0      	bne.n	5234 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    5252:	4b0c      	ldr	r3, [pc, #48]	; (5284 <z_set_prio+0xbc>)
    5254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    5256:	f103 0120 	add.w	r1, r3, #32
    525a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    525c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    525e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5260:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    5262:	2001      	movs	r0, #1
    5264:	f7ff fe4a 	bl	4efc <update_cache>
    5268:	e7c1      	b.n	51ee <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    526a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    526c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    526e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    5270:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5272:	606c      	str	r4, [r5, #4]
}
    5274:	e7f5      	b.n	5262 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5276:	2500      	movs	r5, #0
    5278:	e7dc      	b.n	5234 <z_set_prio+0x6c>
}
    527a:	4638      	mov	r0, r7
    527c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5280:	20000c50 	.word	0x20000c50
    5284:	20000c30 	.word	0x20000c30

00005288 <z_impl_k_thread_suspend>:
{
    5288:	b538      	push	{r3, r4, r5, lr}
    528a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    528c:	3018      	adds	r0, #24
    528e:	f001 ff9d 	bl	71cc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    5292:	2300      	movs	r3, #0
	__asm__ volatile(
    5294:	f04f 0220 	mov.w	r2, #32
    5298:	f3ef 8511 	mrs	r5, BASEPRI
    529c:	f382 8812 	msr	BASEPRI_MAX, r2
    52a0:	f3bf 8f6f 	isb	sy
    52a4:	e010      	b.n	52c8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    52a6:	7b63      	ldrb	r3, [r4, #13]
    52a8:	f043 0310 	orr.w	r3, r3, #16
    52ac:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    52ae:	4b15      	ldr	r3, [pc, #84]	; (5304 <z_impl_k_thread_suspend+0x7c>)
    52b0:	6898      	ldr	r0, [r3, #8]
    52b2:	42a0      	cmp	r0, r4
    52b4:	bf14      	ite	ne
    52b6:	2000      	movne	r0, #0
    52b8:	2001      	moveq	r0, #1
    52ba:	f7ff fe1f 	bl	4efc <update_cache>
	__asm__ volatile(
    52be:	f385 8811 	msr	BASEPRI, r5
    52c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    52c6:	2301      	movs	r3, #1
    52c8:	b963      	cbnz	r3, 52e4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    52ca:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    52cc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    52d0:	2b00      	cmp	r3, #0
    52d2:	dae8      	bge.n	52a6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    52d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    52d8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    52da:	4621      	mov	r1, r4
    52dc:	480a      	ldr	r0, [pc, #40]	; (5308 <z_impl_k_thread_suspend+0x80>)
    52de:	f001 fe22 	bl	6f26 <z_priq_dumb_remove>
}
    52e2:	e7e0      	b.n	52a6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    52e4:	4b07      	ldr	r3, [pc, #28]	; (5304 <z_impl_k_thread_suspend+0x7c>)
    52e6:	689b      	ldr	r3, [r3, #8]
    52e8:	42a3      	cmp	r3, r4
    52ea:	d000      	beq.n	52ee <z_impl_k_thread_suspend+0x66>
}
    52ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    52ee:	f04f 0320 	mov.w	r3, #32
    52f2:	f3ef 8011 	mrs	r0, BASEPRI
    52f6:	f383 8812 	msr	BASEPRI_MAX, r3
    52fa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    52fe:	f001 fdfd 	bl	6efc <z_reschedule_irqlock>
    5302:	e7f3      	b.n	52ec <z_impl_k_thread_suspend+0x64>
    5304:	20000c30 	.word	0x20000c30
    5308:	20000c50 	.word	0x20000c50

0000530c <k_sched_unlock>:

void k_sched_unlock(void)
{
    530c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    530e:	2300      	movs	r3, #0
    5310:	f04f 0220 	mov.w	r2, #32
    5314:	f3ef 8411 	mrs	r4, BASEPRI
    5318:	f382 8812 	msr	BASEPRI_MAX, r2
    531c:	f3bf 8f6f 	isb	sy
    5320:	e00c      	b.n	533c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    5322:	4b0d      	ldr	r3, [pc, #52]	; (5358 <k_sched_unlock+0x4c>)
    5324:	689a      	ldr	r2, [r3, #8]
    5326:	7bd3      	ldrb	r3, [r2, #15]
    5328:	3301      	adds	r3, #1
    532a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    532c:	2000      	movs	r0, #0
    532e:	f7ff fde5 	bl	4efc <update_cache>
	__asm__ volatile(
    5332:	f384 8811 	msr	BASEPRI, r4
    5336:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    533a:	2301      	movs	r3, #1
    533c:	2b00      	cmp	r3, #0
    533e:	d0f0      	beq.n	5322 <k_sched_unlock+0x16>
	__asm__ volatile(
    5340:	f04f 0320 	mov.w	r3, #32
    5344:	f3ef 8011 	mrs	r0, BASEPRI
    5348:	f383 8812 	msr	BASEPRI_MAX, r3
    534c:	f3bf 8f6f 	isb	sy
    5350:	f001 fdd4 	bl	6efc <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    5354:	bd10      	pop	{r4, pc}
    5356:	bf00      	nop
    5358:	20000c30 	.word	0x20000c30

0000535c <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    535e:	7b43      	ldrb	r3, [r0, #13]
    5360:	f013 0f08 	tst.w	r3, #8
    5364:	d145      	bne.n	53f2 <end_thread+0x96>
    5366:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    5368:	f043 0308 	orr.w	r3, r3, #8
    536c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    536e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5372:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    5374:	f013 0f80 	tst.w	r3, #128	; 0x80
    5378:	d12d      	bne.n	53d6 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    537a:	68ab      	ldr	r3, [r5, #8]
    537c:	b15b      	cbz	r3, 5396 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    537e:	4628      	mov	r0, r5
    5380:	f001 fd90 	bl	6ea4 <pended_on_thread>
    5384:	4629      	mov	r1, r5
    5386:	f001 fdce 	bl	6f26 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    538a:	7b6b      	ldrb	r3, [r5, #13]
    538c:	f023 0302 	bic.w	r3, r3, #2
    5390:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    5392:	2300      	movs	r3, #0
    5394:	60ab      	str	r3, [r5, #8]
    5396:	f105 0018 	add.w	r0, r5, #24
    539a:	f001 ff17 	bl	71cc <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    539e:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    53a2:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53a4:	42bc      	cmp	r4, r7
    53a6:	d01e      	beq.n	53e6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    53a8:	b1ec      	cbz	r4, 53e6 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    53aa:	4620      	mov	r0, r4
    53ac:	f001 fd7a 	bl	6ea4 <pended_on_thread>
    53b0:	4621      	mov	r1, r4
    53b2:	f001 fdb8 	bl	6f26 <z_priq_dumb_remove>
    53b6:	7b63      	ldrb	r3, [r4, #13]
    53b8:	f023 0302 	bic.w	r3, r3, #2
    53bc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    53be:	2600      	movs	r6, #0
    53c0:	60a6      	str	r6, [r4, #8]
    53c2:	f104 0018 	add.w	r0, r4, #24
    53c6:	f001 ff01 	bl	71cc <z_abort_timeout>
    53ca:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    53ce:	4620      	mov	r0, r4
    53d0:	f7ff fe6c 	bl	50ac <ready_thread>
    53d4:	e7e5      	b.n	53a2 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    53d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53da:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    53dc:	4601      	mov	r1, r0
    53de:	4805      	ldr	r0, [pc, #20]	; (53f4 <end_thread+0x98>)
    53e0:	f001 fda1 	bl	6f26 <z_priq_dumb_remove>
}
    53e4:	e7c9      	b.n	537a <end_thread+0x1e>
		update_cache(1);
    53e6:	2001      	movs	r0, #1
    53e8:	f7ff fd88 	bl	4efc <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    53ec:	4628      	mov	r0, r5
    53ee:	f7ff f963 	bl	46b8 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    53f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53f4:	20000c50 	.word	0x20000c50

000053f8 <z_sched_init>:
{
    53f8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    53fa:	4804      	ldr	r0, [pc, #16]	; (540c <z_sched_init+0x14>)
    53fc:	f001 fe94 	bl	7128 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5400:	2100      	movs	r1, #0
    5402:	4608      	mov	r0, r1
    5404:	f7ff fd0a 	bl	4e1c <k_sched_time_slice_set>
}
    5408:	bd08      	pop	{r3, pc}
    540a:	bf00      	nop
    540c:	20000c4c 	.word	0x20000c4c

00005410 <z_impl_k_yield>:
{
    5410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5412:	f04f 0320 	mov.w	r3, #32
    5416:	f3ef 8611 	mrs	r6, BASEPRI
    541a:	f383 8812 	msr	BASEPRI_MAX, r3
    541e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    5422:	4c1c      	ldr	r4, [pc, #112]	; (5494 <z_impl_k_yield+0x84>)
    5424:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5426:	7b4b      	ldrb	r3, [r1, #13]
    5428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    542c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    542e:	f104 0720 	add.w	r7, r4, #32
    5432:	4638      	mov	r0, r7
    5434:	f001 fd77 	bl	6f26 <z_priq_dumb_remove>
	queue_thread(_current);
    5438:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    543a:	7b6b      	ldrb	r3, [r5, #13]
    543c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5440:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    5442:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5444:	42bc      	cmp	r4, r7
    5446:	d023      	beq.n	5490 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5448:	b16c      	cbz	r4, 5466 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    544a:	4621      	mov	r1, r4
    544c:	4628      	mov	r0, r5
    544e:	f001 fd2b 	bl	6ea8 <z_sched_prio_cmp>
    5452:	2800      	cmp	r0, #0
    5454:	dc16      	bgt.n	5484 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5456:	b134      	cbz	r4, 5466 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    5458:	4b0e      	ldr	r3, [pc, #56]	; (5494 <z_impl_k_yield+0x84>)
    545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    545c:	429c      	cmp	r4, r3
    545e:	d002      	beq.n	5466 <z_impl_k_yield+0x56>
    5460:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5462:	2c00      	cmp	r4, #0
    5464:	d1f0      	bne.n	5448 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    5466:	4b0b      	ldr	r3, [pc, #44]	; (5494 <z_impl_k_yield+0x84>)
    5468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    546a:	f103 0120 	add.w	r1, r3, #32
    546e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    5470:	606a      	str	r2, [r5, #4]
	tail->next = node;
    5472:	6015      	str	r5, [r2, #0]
	list->tail = node;
    5474:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    5476:	2001      	movs	r0, #1
    5478:	f7ff fd40 	bl	4efc <update_cache>
    547c:	4630      	mov	r0, r6
    547e:	f7fb ff0f 	bl	12a0 <arch_swap>
}
    5482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    5484:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    5486:	606b      	str	r3, [r5, #4]
	node->next = successor;
    5488:	602c      	str	r4, [r5, #0]
	prev->next = node;
    548a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    548c:	6065      	str	r5, [r4, #4]
}
    548e:	e7f2      	b.n	5476 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5490:	2400      	movs	r4, #0
    5492:	e7d9      	b.n	5448 <z_impl_k_yield+0x38>
    5494:	20000c30 	.word	0x20000c30

00005498 <z_tick_sleep>:
{
    5498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    549c:	ea50 0301 	orrs.w	r3, r0, r1
    54a0:	d038      	beq.n	5514 <z_tick_sleep+0x7c>
    54a2:	4604      	mov	r4, r0
    54a4:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    54a6:	f06f 0301 	mvn.w	r3, #1
    54aa:	1a1b      	subs	r3, r3, r0
    54ac:	f04f 32ff 	mov.w	r2, #4294967295
    54b0:	eb62 0201 	sbc.w	r2, r2, r1
    54b4:	2b01      	cmp	r3, #1
    54b6:	f172 0300 	sbcs.w	r3, r2, #0
    54ba:	db2f      	blt.n	551c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    54bc:	f06f 0501 	mvn.w	r5, #1
    54c0:	1a2d      	subs	r5, r5, r0
    54c2:	f04f 0320 	mov.w	r3, #32
    54c6:	f3ef 8811 	mrs	r8, BASEPRI
    54ca:	f383 8812 	msr	BASEPRI_MAX, r3
    54ce:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    54d2:	4f14      	ldr	r7, [pc, #80]	; (5524 <z_tick_sleep+0x8c>)
    54d4:	68b8      	ldr	r0, [r7, #8]
    54d6:	4b14      	ldr	r3, [pc, #80]	; (5528 <z_tick_sleep+0x90>)
    54d8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    54da:	f7ff fe45 	bl	5168 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    54de:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    54e0:	4622      	mov	r2, r4
    54e2:	4633      	mov	r3, r6
    54e4:	4911      	ldr	r1, [pc, #68]	; (552c <z_tick_sleep+0x94>)
    54e6:	3018      	adds	r0, #24
    54e8:	f000 f8f2 	bl	56d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    54ec:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    54ee:	7b53      	ldrb	r3, [r2, #13]
    54f0:	f043 0310 	orr.w	r3, r3, #16
    54f4:	7353      	strb	r3, [r2, #13]
    54f6:	4640      	mov	r0, r8
    54f8:	f7fb fed2 	bl	12a0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    54fc:	f001 fec6 	bl	728c <sys_clock_tick_get_32>
    5500:	1a28      	subs	r0, r5, r0
    5502:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5506:	2801      	cmp	r0, #1
    5508:	f173 0300 	sbcs.w	r3, r3, #0
    550c:	da00      	bge.n	5510 <z_tick_sleep+0x78>
	return 0;
    550e:	2000      	movs	r0, #0
}
    5510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    5514:	f7ff ff7c 	bl	5410 <z_impl_k_yield>
		return 0;
    5518:	2000      	movs	r0, #0
    551a:	e7f9      	b.n	5510 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    551c:	f001 feb6 	bl	728c <sys_clock_tick_get_32>
    5520:	1905      	adds	r5, r0, r4
    5522:	e7ce      	b.n	54c2 <z_tick_sleep+0x2a>
    5524:	20000c30 	.word	0x20000c30
    5528:	20000c64 	.word	0x20000c64
    552c:	00006f7d 	.word	0x00006f7d

00005530 <z_impl_k_sleep>:
{
    5530:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5532:	f1b1 3fff 	cmp.w	r1, #4294967295
    5536:	bf08      	it	eq
    5538:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    553c:	d01a      	beq.n	5574 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    553e:	f7ff ffab 	bl	5498 <z_tick_sleep>
    5542:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    5544:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    5546:	0151      	lsls	r1, r2, #5
    5548:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    554c:	0143      	lsls	r3, r0, #5
    554e:	1a1b      	subs	r3, r3, r0
    5550:	eb61 0102 	sbc.w	r1, r1, r2
    5554:	0088      	lsls	r0, r1, #2
    5556:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    555a:	009b      	lsls	r3, r3, #2
    555c:	eb13 030c 	adds.w	r3, r3, ip
    5560:	eb42 0000 	adc.w	r0, r2, r0
    5564:	00c0      	lsls	r0, r0, #3
    5566:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    556a:	f3c3 3310 	ubfx	r3, r3, #12, #17
    556e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    5572:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    5574:	4b03      	ldr	r3, [pc, #12]	; (5584 <z_impl_k_sleep+0x54>)
    5576:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5578:	f7ff fe86 	bl	5288 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    557c:	f04f 30ff 	mov.w	r0, #4294967295
    5580:	e7f7      	b.n	5572 <z_impl_k_sleep+0x42>
    5582:	bf00      	nop
    5584:	20000c30 	.word	0x20000c30

00005588 <z_impl_z_current_get>:
}
    5588:	4b01      	ldr	r3, [pc, #4]	; (5590 <z_impl_z_current_get+0x8>)
    558a:	6898      	ldr	r0, [r3, #8]
    558c:	4770      	bx	lr
    558e:	bf00      	nop
    5590:	20000c30 	.word	0x20000c30

00005594 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    5594:	b538      	push	{r3, r4, r5, lr}
    5596:	f04f 0320 	mov.w	r3, #32
    559a:	f3ef 8511 	mrs	r5, BASEPRI
    559e:	f383 8812 	msr	BASEPRI_MAX, r3
    55a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    55a6:	7b43      	ldrb	r3, [r0, #13]
    55a8:	f013 0f08 	tst.w	r3, #8
    55ac:	d004      	beq.n	55b8 <z_thread_abort+0x24>
	__asm__ volatile(
    55ae:	f385 8811 	msr	BASEPRI, r5
    55b2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    55b6:	bd38      	pop	{r3, r4, r5, pc}
    55b8:	4604      	mov	r4, r0
	end_thread(thread);
    55ba:	f7ff fecf 	bl	535c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    55be:	4b08      	ldr	r3, [pc, #32]	; (55e0 <z_thread_abort+0x4c>)
    55c0:	689b      	ldr	r3, [r3, #8]
    55c2:	42a3      	cmp	r3, r4
    55c4:	d004      	beq.n	55d0 <z_thread_abort+0x3c>
    55c6:	f385 8811 	msr	BASEPRI, r5
    55ca:	f3bf 8f6f 	isb	sy
    55ce:	e7f2      	b.n	55b6 <z_thread_abort+0x22>
    55d0:	f3ef 8305 	mrs	r3, IPSR
    55d4:	2b00      	cmp	r3, #0
    55d6:	d1f6      	bne.n	55c6 <z_thread_abort+0x32>
    55d8:	4628      	mov	r0, r5
    55da:	f7fb fe61 	bl	12a0 <arch_swap>
	return ret;
    55de:	e7f2      	b.n	55c6 <z_thread_abort+0x32>
    55e0:	20000c30 	.word	0x20000c30

000055e4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    55e4:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    55e8:	b083      	sub	sp, #12
    55ea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    55ec:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    55f0:	e9cd bc00 	strd	fp, ip, [sp]
    55f4:	f7ff fdd4 	bl	51a0 <z_pend_curr>

	if (data != NULL) {
    55f8:	b11c      	cbz	r4, 5602 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    55fa:	4b03      	ldr	r3, [pc, #12]	; (5608 <z_sched_wait+0x24>)
    55fc:	689b      	ldr	r3, [r3, #8]
    55fe:	695b      	ldr	r3, [r3, #20]
    5600:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    5602:	b003      	add	sp, #12
    5604:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    5608:	20000c30 	.word	0x20000c30

0000560c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    560c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    560e:	4806      	ldr	r0, [pc, #24]	; (5628 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5610:	4a06      	ldr	r2, [pc, #24]	; (562c <z_data_copy+0x20>)
    5612:	1a12      	subs	r2, r2, r0
    5614:	4906      	ldr	r1, [pc, #24]	; (5630 <z_data_copy+0x24>)
    5616:	f001 fba0 	bl	6d5a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    561a:	4a06      	ldr	r2, [pc, #24]	; (5634 <z_data_copy+0x28>)
    561c:	4906      	ldr	r1, [pc, #24]	; (5638 <z_data_copy+0x2c>)
    561e:	4807      	ldr	r0, [pc, #28]	; (563c <z_data_copy+0x30>)
    5620:	f001 fb9b 	bl	6d5a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5624:	bd08      	pop	{r3, pc}
    5626:	bf00      	nop
    5628:	20000000 	.word	0x20000000
    562c:	200001a8 	.word	0x200001a8
    5630:	000077ac 	.word	0x000077ac
    5634:	00000000 	.word	0x00000000
    5638:	000077ac 	.word	0x000077ac
    563c:	20000000 	.word	0x20000000

00005640 <first>:
	return list->head == list;
    5640:	4b03      	ldr	r3, [pc, #12]	; (5650 <first+0x10>)
    5642:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5644:	4298      	cmp	r0, r3
    5646:	d000      	beq.n	564a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    5648:	4770      	bx	lr
    564a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    564c:	e7fc      	b.n	5648 <first+0x8>
    564e:	bf00      	nop
    5650:	200000c0 	.word	0x200000c0

00005654 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5654:	b130      	cbz	r0, 5664 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    5656:	4a04      	ldr	r2, [pc, #16]	; (5668 <next+0x14>)
    5658:	6852      	ldr	r2, [r2, #4]
    565a:	4290      	cmp	r0, r2
    565c:	d001      	beq.n	5662 <next+0xe>
    565e:	6800      	ldr	r0, [r0, #0]
    5660:	4770      	bx	lr
    5662:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    5664:	4770      	bx	lr
    5666:	bf00      	nop
    5668:	200000c0 	.word	0x200000c0

0000566c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    566c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    566e:	4b04      	ldr	r3, [pc, #16]	; (5680 <elapsed+0x14>)
    5670:	681b      	ldr	r3, [r3, #0]
    5672:	b10b      	cbz	r3, 5678 <elapsed+0xc>
    5674:	2000      	movs	r0, #0
}
    5676:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5678:	f7fd fb0a 	bl	2c90 <sys_clock_elapsed>
    567c:	e7fb      	b.n	5676 <elapsed+0xa>
    567e:	bf00      	nop
    5680:	20000c70 	.word	0x20000c70

00005684 <next_timeout>:

static int32_t next_timeout(void)
{
    5684:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    5686:	f7ff ffdb 	bl	5640 <first>
    568a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    568c:	f7ff ffee 	bl	566c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5690:	b17c      	cbz	r4, 56b2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5692:	6923      	ldr	r3, [r4, #16]
    5694:	6962      	ldr	r2, [r4, #20]
    5696:	1a1b      	subs	r3, r3, r0
    5698:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    569c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    56a0:	f170 0200 	sbcs.w	r2, r0, #0
    56a4:	da08      	bge.n	56b8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    56a6:	2800      	cmp	r0, #0
    56a8:	db01      	blt.n	56ae <next_timeout+0x2a>
    56aa:	4618      	mov	r0, r3
    56ac:	e006      	b.n	56bc <next_timeout+0x38>
    56ae:	2300      	movs	r3, #0
    56b0:	e7fb      	b.n	56aa <next_timeout+0x26>
		ret = MAX_WAIT;
    56b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    56b6:	e001      	b.n	56bc <next_timeout+0x38>
    56b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    56bc:	4b03      	ldr	r3, [pc, #12]	; (56cc <next_timeout+0x48>)
    56be:	691b      	ldr	r3, [r3, #16]
    56c0:	b113      	cbz	r3, 56c8 <next_timeout+0x44>
    56c2:	4283      	cmp	r3, r0
    56c4:	da00      	bge.n	56c8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    56c6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    56c8:	bd10      	pop	{r4, pc}
    56ca:	bf00      	nop
    56cc:	20000c30 	.word	0x20000c30

000056d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    56d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    56d4:	bf08      	it	eq
    56d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    56da:	d07d      	beq.n	57d8 <z_add_timeout+0x108>
{
    56dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56e0:	4604      	mov	r4, r0
    56e2:	4692      	mov	sl, r2
    56e4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    56e6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    56e8:	2300      	movs	r3, #0
	__asm__ volatile(
    56ea:	f04f 0220 	mov.w	r2, #32
    56ee:	f3ef 8711 	mrs	r7, BASEPRI
    56f2:	f382 8812 	msr	BASEPRI_MAX, r2
    56f6:	f3bf 8f6f 	isb	sy
    56fa:	e021      	b.n	5740 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    56fc:	f11a 0801 	adds.w	r8, sl, #1
    5700:	f145 0900 	adc.w	r9, r5, #0
    5704:	f7ff ffb2 	bl	566c <elapsed>
    5708:	eb18 0300 	adds.w	r3, r8, r0
    570c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    5710:	6123      	str	r3, [r4, #16]
    5712:	6160      	str	r0, [r4, #20]
    5714:	e036      	b.n	5784 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    5716:	1a51      	subs	r1, r2, r1
    5718:	eb66 0303 	sbc.w	r3, r6, r3
    571c:	6101      	str	r1, [r0, #16]
    571e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    5720:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    5722:	6063      	str	r3, [r4, #4]
	node->next = successor;
    5724:	6020      	str	r0, [r4, #0]
	prev->next = node;
    5726:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5728:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    572a:	2800      	cmp	r0, #0
    572c:	d03e      	beq.n	57ac <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    572e:	f7ff ff87 	bl	5640 <first>
    5732:	4284      	cmp	r4, r0
    5734:	d041      	beq.n	57ba <z_add_timeout+0xea>
	__asm__ volatile(
    5736:	f387 8811 	msr	BASEPRI, r7
    573a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    573e:	2301      	movs	r3, #1
    5740:	2b00      	cmp	r3, #0
    5742:	d147      	bne.n	57d4 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5744:	4653      	mov	r3, sl
    5746:	f06f 0101 	mvn.w	r1, #1
    574a:	ebb1 010a 	subs.w	r1, r1, sl
    574e:	f04f 30ff 	mov.w	r0, #4294967295
    5752:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5756:	2a00      	cmp	r2, #0
    5758:	dbd0      	blt.n	56fc <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    575a:	4a20      	ldr	r2, [pc, #128]	; (57dc <z_add_timeout+0x10c>)
    575c:	6811      	ldr	r1, [r2, #0]
    575e:	6852      	ldr	r2, [r2, #4]
    5760:	185b      	adds	r3, r3, r1
    5762:	eb42 0205 	adc.w	r2, r2, r5
    5766:	f06f 0101 	mvn.w	r1, #1
    576a:	1acb      	subs	r3, r1, r3
    576c:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    5770:	4618      	mov	r0, r3
    5772:	4611      	mov	r1, r2
    5774:	2b01      	cmp	r3, #1
    5776:	f172 0300 	sbcs.w	r3, r2, #0
    577a:	da01      	bge.n	5780 <z_add_timeout+0xb0>
    577c:	2001      	movs	r0, #1
    577e:	2100      	movs	r1, #0
    5780:	6120      	str	r0, [r4, #16]
    5782:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    5784:	f7ff ff5c 	bl	5640 <first>
    5788:	2800      	cmp	r0, #0
    578a:	d0ce      	beq.n	572a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
    578c:	6902      	ldr	r2, [r0, #16]
    578e:	6946      	ldr	r6, [r0, #20]
    5790:	6921      	ldr	r1, [r4, #16]
    5792:	6963      	ldr	r3, [r4, #20]
    5794:	4291      	cmp	r1, r2
    5796:	eb73 0c06 	sbcs.w	ip, r3, r6
    579a:	dbbc      	blt.n	5716 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    579c:	1a89      	subs	r1, r1, r2
    579e:	eb63 0306 	sbc.w	r3, r3, r6
    57a2:	6121      	str	r1, [r4, #16]
    57a4:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    57a6:	f7ff ff55 	bl	5654 <next>
    57aa:	e7ed      	b.n	5788 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
    57ac:	4b0c      	ldr	r3, [pc, #48]	; (57e0 <z_add_timeout+0x110>)
    57ae:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    57b0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    57b2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    57b4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    57b6:	605c      	str	r4, [r3, #4]
}
    57b8:	e7b9      	b.n	572e <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    57ba:	f7ff ff63 	bl	5684 <next_timeout>

			if (next_time == 0 ||
    57be:	4603      	mov	r3, r0
    57c0:	b118      	cbz	r0, 57ca <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
    57c2:	4a08      	ldr	r2, [pc, #32]	; (57e4 <z_add_timeout+0x114>)
    57c4:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    57c6:	4282      	cmp	r2, r0
    57c8:	d0b5      	beq.n	5736 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
    57ca:	2100      	movs	r1, #0
    57cc:	4618      	mov	r0, r3
    57ce:	f7fd fa2d 	bl	2c2c <sys_clock_set_timeout>
    57d2:	e7b0      	b.n	5736 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    57d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57d8:	4770      	bx	lr
    57da:	bf00      	nop
    57dc:	20000538 	.word	0x20000538
    57e0:	200000c0 	.word	0x200000c0
    57e4:	20000c30 	.word	0x20000c30

000057e8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    57e8:	b570      	push	{r4, r5, r6, lr}
    57ea:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    57ec:	f7ff fc06 	bl	4ffc <z_time_slice>
	__asm__ volatile(
    57f0:	f04f 0320 	mov.w	r3, #32
    57f4:	f3ef 8511 	mrs	r5, BASEPRI
    57f8:	f383 8812 	msr	BASEPRI_MAX, r3
    57fc:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5800:	4b28      	ldr	r3, [pc, #160]	; (58a4 <sys_clock_announce+0xbc>)
    5802:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    5804:	e020      	b.n	5848 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5806:	4828      	ldr	r0, [pc, #160]	; (58a8 <sys_clock_announce+0xc0>)
    5808:	6801      	ldr	r1, [r0, #0]
    580a:	6846      	ldr	r6, [r0, #4]
    580c:	1889      	adds	r1, r1, r2
    580e:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    5812:	6001      	str	r1, [r0, #0]
    5814:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    5816:	1a9b      	subs	r3, r3, r2
    5818:	4a22      	ldr	r2, [pc, #136]	; (58a4 <sys_clock_announce+0xbc>)
    581a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    581c:	2200      	movs	r2, #0
    581e:	2300      	movs	r3, #0
    5820:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    5824:	4620      	mov	r0, r4
    5826:	f001 fcba 	bl	719e <remove_timeout>
	__asm__ volatile(
    582a:	f385 8811 	msr	BASEPRI, r5
    582e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    5832:	68a3      	ldr	r3, [r4, #8]
    5834:	4620      	mov	r0, r4
    5836:	4798      	blx	r3
	__asm__ volatile(
    5838:	f04f 0320 	mov.w	r3, #32
    583c:	f3ef 8511 	mrs	r5, BASEPRI
    5840:	f383 8812 	msr	BASEPRI_MAX, r3
    5844:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5848:	f7ff fefa 	bl	5640 <first>
    584c:	4604      	mov	r4, r0
    584e:	b140      	cbz	r0, 5862 <sys_clock_announce+0x7a>
    5850:	6902      	ldr	r2, [r0, #16]
    5852:	6941      	ldr	r1, [r0, #20]
    5854:	4b13      	ldr	r3, [pc, #76]	; (58a4 <sys_clock_announce+0xbc>)
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	17d8      	asrs	r0, r3, #31
    585a:	4293      	cmp	r3, r2
    585c:	eb70 0101 	sbcs.w	r1, r0, r1
    5860:	dad1      	bge.n	5806 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    5862:	b144      	cbz	r4, 5876 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    5864:	4b0f      	ldr	r3, [pc, #60]	; (58a4 <sys_clock_announce+0xbc>)
    5866:	6819      	ldr	r1, [r3, #0]
    5868:	6923      	ldr	r3, [r4, #16]
    586a:	6962      	ldr	r2, [r4, #20]
    586c:	1a5b      	subs	r3, r3, r1
    586e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    5872:	6123      	str	r3, [r4, #16]
    5874:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    5876:	4a0c      	ldr	r2, [pc, #48]	; (58a8 <sys_clock_announce+0xc0>)
    5878:	4e0a      	ldr	r6, [pc, #40]	; (58a4 <sys_clock_announce+0xbc>)
    587a:	6830      	ldr	r0, [r6, #0]
    587c:	6813      	ldr	r3, [r2, #0]
    587e:	6851      	ldr	r1, [r2, #4]
    5880:	181b      	adds	r3, r3, r0
    5882:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    5886:	6013      	str	r3, [r2, #0]
    5888:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    588a:	2400      	movs	r4, #0
    588c:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    588e:	f7ff fef9 	bl	5684 <next_timeout>
    5892:	4621      	mov	r1, r4
    5894:	f7fd f9ca 	bl	2c2c <sys_clock_set_timeout>
	__asm__ volatile(
    5898:	f385 8811 	msr	BASEPRI, r5
    589c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    58a0:	bd70      	pop	{r4, r5, r6, pc}
    58a2:	bf00      	nop
    58a4:	20000c70 	.word	0x20000c70
    58a8:	20000538 	.word	0x20000538

000058ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    58ac:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    58ae:	2300      	movs	r3, #0
	__asm__ volatile(
    58b0:	f04f 0220 	mov.w	r2, #32
    58b4:	f3ef 8411 	mrs	r4, BASEPRI
    58b8:	f382 8812 	msr	BASEPRI_MAX, r2
    58bc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    58c0:	4618      	mov	r0, r3
    58c2:	4619      	mov	r1, r3
    58c4:	e00c      	b.n	58e0 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
    58c6:	f7fd f9e3 	bl	2c90 <sys_clock_elapsed>
    58ca:	4a07      	ldr	r2, [pc, #28]	; (58e8 <sys_clock_tick_get+0x3c>)
    58cc:	6813      	ldr	r3, [r2, #0]
    58ce:	6851      	ldr	r1, [r2, #4]
    58d0:	18c0      	adds	r0, r0, r3
    58d2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    58d6:	f384 8811 	msr	BASEPRI, r4
    58da:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    58de:	2301      	movs	r3, #1
    58e0:	2b00      	cmp	r3, #0
    58e2:	d0f0      	beq.n	58c6 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    58e4:	bd10      	pop	{r4, pc}
    58e6:	bf00      	nop
    58e8:	20000538 	.word	0x20000538

000058ec <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    58ec:	b570      	push	{r4, r5, r6, lr}
    58ee:	4604      	mov	r4, r0
	__asm__ volatile(
    58f0:	f04f 0320 	mov.w	r3, #32
    58f4:	f3ef 8611 	mrs	r6, BASEPRI
    58f8:	f383 8812 	msr	BASEPRI_MAX, r3
    58fc:	f3bf 8f6f 	isb	sy
    5900:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5902:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5904:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5906:	ea52 0103 	orrs.w	r1, r2, r3
    590a:	d005      	beq.n	5918 <z_timer_expiration_handler+0x2c>
    590c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5910:	bf08      	it	eq
    5912:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    5916:	d127      	bne.n	5968 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5918:	6b23      	ldr	r3, [r4, #48]	; 0x30
    591a:	3301      	adds	r3, #1
    591c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    591e:	6a23      	ldr	r3, [r4, #32]
    5920:	b173      	cbz	r3, 5940 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    5922:	f386 8811 	msr	BASEPRI, r6
    5926:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    592a:	6a23      	ldr	r3, [r4, #32]
    592c:	4620      	mov	r0, r4
    592e:	4798      	blx	r3
	__asm__ volatile(
    5930:	f04f 0320 	mov.w	r3, #32
    5934:	f3ef 8511 	mrs	r5, BASEPRI
    5938:	f383 8812 	msr	BASEPRI_MAX, r3
    593c:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5940:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    5944:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5946:	42a3      	cmp	r3, r4
    5948:	d014      	beq.n	5974 <z_timer_expiration_handler+0x88>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    594a:	b19c      	cbz	r4, 5974 <z_timer_expiration_handler+0x88>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    594c:	4620      	mov	r0, r4
    594e:	f001 fab5 	bl	6ebc <z_unpend_thread_no_timeout>
    5952:	2300      	movs	r3, #0
    5954:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    5958:	f385 8811 	msr	BASEPRI, r5
    595c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    5960:	4620      	mov	r0, r4
    5962:	f001 faef 	bl	6f44 <z_ready_thread>
}
    5966:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5968:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    596c:	4904      	ldr	r1, [pc, #16]	; (5980 <z_timer_expiration_handler+0x94>)
    596e:	f7ff feaf 	bl	56d0 <z_add_timeout>
    5972:	e7d1      	b.n	5918 <z_timer_expiration_handler+0x2c>
    5974:	f385 8811 	msr	BASEPRI, r5
    5978:	f3bf 8f6f 	isb	sy
		return;
    597c:	e7f3      	b.n	5966 <z_timer_expiration_handler+0x7a>
    597e:	bf00      	nop
    5980:	000058ed 	.word	0x000058ed

00005984 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5988:	9f06      	ldr	r7, [sp, #24]
    598a:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    598e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5992:	bf08      	it	eq
    5994:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    5998:	d02f      	beq.n	59fa <z_impl_k_timer_start+0x76>
    599a:	4605      	mov	r5, r0
    599c:	4614      	mov	r4, r2
    599e:	461e      	mov	r6, r3
    59a0:	4611      	mov	r1, r2
    59a2:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    59a4:	f1b8 3fff 	cmp.w	r8, #4294967295
    59a8:	bf08      	it	eq
    59aa:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    59ae:	d00d      	beq.n	59cc <z_impl_k_timer_start+0x48>
    59b0:	ea57 0c08 	orrs.w	ip, r7, r8
    59b4:	d00a      	beq.n	59cc <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    59b6:	f06f 0c01 	mvn.w	ip, #1
    59ba:	ebbc 0c07 	subs.w	ip, ip, r7
    59be:	f04f 3cff 	mov.w	ip, #4294967295
    59c2:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    59c6:	f1bc 0f00 	cmp.w	ip, #0
    59ca:	db18      	blt.n	59fe <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    59cc:	f06f 0301 	mvn.w	r3, #1
    59d0:	1a5b      	subs	r3, r3, r1
    59d2:	f04f 33ff 	mov.w	r3, #4294967295
    59d6:	eb63 0300 	sbc.w	r3, r3, r0
    59da:	2b00      	cmp	r3, #0
    59dc:	db1a      	blt.n	5a14 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    59de:	4628      	mov	r0, r5
    59e0:	f001 fbf4 	bl	71cc <z_abort_timeout>
	timer->period = period;
    59e4:	62af      	str	r7, [r5, #40]	; 0x28
    59e6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    59ea:	2300      	movs	r3, #0
    59ec:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    59ee:	4622      	mov	r2, r4
    59f0:	4633      	mov	r3, r6
    59f2:	490e      	ldr	r1, [pc, #56]	; (5a2c <z_impl_k_timer_start+0xa8>)
    59f4:	4628      	mov	r0, r5
    59f6:	f7ff fe6b 	bl	56d0 <z_add_timeout>
		     duration);
}
    59fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    59fe:	2f02      	cmp	r7, #2
    5a00:	f178 0300 	sbcs.w	r3, r8, #0
    5a04:	da02      	bge.n	5a0c <z_impl_k_timer_start+0x88>
    5a06:	2702      	movs	r7, #2
    5a08:	f04f 0800 	mov.w	r8, #0
    5a0c:	3f01      	subs	r7, #1
    5a0e:	f148 38ff 	adc.w	r8, r8, #4294967295
    5a12:	e7db      	b.n	59cc <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5a14:	460c      	mov	r4, r1
    5a16:	4606      	mov	r6, r0
    5a18:	2901      	cmp	r1, #1
    5a1a:	f170 0300 	sbcs.w	r3, r0, #0
    5a1e:	da01      	bge.n	5a24 <z_impl_k_timer_start+0xa0>
    5a20:	2401      	movs	r4, #1
    5a22:	2600      	movs	r6, #0
    5a24:	3c01      	subs	r4, #1
    5a26:	f146 36ff 	adc.w	r6, r6, #4294967295
    5a2a:	e7d8      	b.n	59de <z_impl_k_timer_start+0x5a>
    5a2c:	000058ed 	.word	0x000058ed

00005a30 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    5a30:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5a32:	4a03      	ldr	r2, [pc, #12]	; (5a40 <boot_banner+0x10>)
    5a34:	4903      	ldr	r1, [pc, #12]	; (5a44 <boot_banner+0x14>)
    5a36:	4804      	ldr	r0, [pc, #16]	; (5a48 <boot_banner+0x18>)
    5a38:	f000 f897 	bl	5b6a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    5a3c:	bd08      	pop	{r3, pc}
    5a3e:	bf00      	nop
    5a40:	00007598 	.word	0x00007598
    5a44:	00007768 	.word	0x00007768
    5a48:	00007778 	.word	0x00007778

00005a4c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    5a4c:	b510      	push	{r4, lr}
    5a4e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    5a50:	4b08      	ldr	r3, [pc, #32]	; (5a74 <k_sys_work_q_init+0x28>)
    5a52:	9302      	str	r3, [sp, #8]
    5a54:	2400      	movs	r4, #0
    5a56:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    5a5a:	ab02      	add	r3, sp, #8
    5a5c:	9300      	str	r3, [sp, #0]
    5a5e:	f04f 33ff 	mov.w	r3, #4294967295
    5a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5a66:	4904      	ldr	r1, [pc, #16]	; (5a78 <k_sys_work_q_init+0x2c>)
    5a68:	4804      	ldr	r0, [pc, #16]	; (5a7c <k_sys_work_q_init+0x30>)
    5a6a:	f7ff f975 	bl	4d58 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    5a6e:	4620      	mov	r0, r4
    5a70:	b004      	add	sp, #16
    5a72:	bd10      	pop	{r4, pc}
    5a74:	000077a0 	.word	0x000077a0
    5a78:	20002080 	.word	0x20002080
    5a7c:	20000540 	.word	0x20000540

00005a80 <blink>:

void blink(struct led led_config){
    5a80:	b530      	push	{r4, r5, lr}
    5a82:	b085      	sub	sp, #20
    5a84:	ac04      	add	r4, sp, #16
    5a86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    5a8a:	f89d 1004 	ldrb.w	r1, [sp, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    5a8e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return gpio_pin_configure(spec->port,
    5a92:	f443 13d0 	orr.w	r3, r3, #1703936	; 0x1a0000
	const struct gpio_driver_api *api =
    5a96:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    5a98:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5a9a:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    5a9e:	d004      	beq.n	5aaa <blink+0x2a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5aa0:	f013 0f01 	tst.w	r3, #1
    5aa4:	d001      	beq.n	5aaa <blink+0x2a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5aa6:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5aaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5aae:	f013 0f01 	tst.w	r3, #1
    5ab2:	d00b      	beq.n	5acc <blink+0x4c>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5ab4:	2301      	movs	r3, #1
    5ab6:	fa03 fc01 	lsl.w	ip, r3, r1
    5aba:	6823      	ldr	r3, [r4, #0]
    5abc:	ea43 030c 	orr.w	r3, r3, ip
    5ac0:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    5ac2:	682b      	ldr	r3, [r5, #0]
    5ac4:	4798      	blx	r3
	int ret;

	ret = gpio_pin_configure_dt(&led_config.spec, GPIO_OUTPUT_ACTIVE);

	if (ret < 0) return;
    5ac6:	2800      	cmp	r0, #0
    5ac8:	da1d      	bge.n	5b06 <blink+0x86>
    5aca:	e026      	b.n	5b1a <blink+0x9a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5acc:	2301      	movs	r3, #1
    5ace:	fa03 fc01 	lsl.w	ip, r3, r1
    5ad2:	6823      	ldr	r3, [r4, #0]
    5ad4:	ea23 030c 	bic.w	r3, r3, ip
    5ad8:	6023      	str	r3, [r4, #0]
    5ada:	e7f2      	b.n	5ac2 <blink+0x42>

	while(1) {
		ret = gpio_pin_toggle_dt(&led_config.spec);
		if (ret < 0) return;

		k_msleep(led_config.sleep_time);
    5adc:	9802      	ldr	r0, [sp, #8]
	return k_sleep(Z_TIMEOUT_MS(ms));
    5ade:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5ae2:	17c1      	asrs	r1, r0, #31
    5ae4:	03c9      	lsls	r1, r1, #15
    5ae6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5aea:	03c0      	lsls	r0, r0, #15
    5aec:	f240 33e7 	movw	r3, #999	; 0x3e7
    5af0:	18c0      	adds	r0, r0, r3
    5af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5af6:	f04f 0300 	mov.w	r3, #0
    5afa:	f141 0100 	adc.w	r1, r1, #0
    5afe:	f7fa faed 	bl	dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5b02:	f7ff fd15 	bl	5530 <z_impl_k_sleep>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_toggle(spec->port, spec->pin);
    5b06:	9800      	ldr	r0, [sp, #0]
    5b08:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    5b0c:	2101      	movs	r1, #1
    5b0e:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    5b10:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    5b12:	695b      	ldr	r3, [r3, #20]
    5b14:	4798      	blx	r3
		if (ret < 0) return;
    5b16:	2800      	cmp	r0, #0
    5b18:	dae0      	bge.n	5adc <blink+0x5c>
	}
    5b1a:	b005      	add	sp, #20
    5b1c:	bd30      	pop	{r4, r5, pc}

00005b1e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5b1e:	4602      	mov	r2, r0
    5b20:	b158      	cbz	r0, 5b3a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5b22:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5b24:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5b28:	2b01      	cmp	r3, #1
    5b2a:	d003      	beq.n	5b34 <sys_notify_validate+0x16>
    5b2c:	2b03      	cmp	r3, #3
    5b2e:	d107      	bne.n	5b40 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5b30:	6803      	ldr	r3, [r0, #0]
    5b32:	b143      	cbz	r3, 5b46 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5b34:	2000      	movs	r0, #0
    5b36:	6090      	str	r0, [r2, #8]
    5b38:	4770      	bx	lr
		return -EINVAL;
    5b3a:	f06f 0015 	mvn.w	r0, #21
    5b3e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    5b40:	f06f 0015 	mvn.w	r0, #21
    5b44:	4770      	bx	lr
			rv = -EINVAL;
    5b46:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5b4a:	4770      	bx	lr

00005b4c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5b4c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5b4e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5b50:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5b54:	6081      	str	r1, [r0, #8]
	switch (method) {
    5b56:	2a03      	cmp	r2, #3
    5b58:	d103      	bne.n	5b62 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5b5a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5b5c:	2200      	movs	r2, #0
    5b5e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5b60:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    5b62:	2000      	movs	r0, #0
    5b64:	e7fa      	b.n	5b5c <sys_notify_finalize+0x10>

00005b66 <arch_printk_char_out>:
}
    5b66:	2000      	movs	r0, #0
    5b68:	4770      	bx	lr

00005b6a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5b6a:	b40f      	push	{r0, r1, r2, r3}
    5b6c:	b500      	push	{lr}
    5b6e:	b083      	sub	sp, #12
    5b70:	a904      	add	r1, sp, #16
    5b72:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5b76:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5b78:	f7fa fc5e 	bl	438 <vprintk>

	va_end(ap);
}
    5b7c:	b003      	add	sp, #12
    5b7e:	f85d eb04 	ldr.w	lr, [sp], #4
    5b82:	b004      	add	sp, #16
    5b84:	4770      	bx	lr

00005b86 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    5b86:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5b8a:	8b01      	ldrh	r1, [r0, #24]
    5b8c:	f021 0107 	bic.w	r1, r1, #7
    5b90:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    5b92:	8301      	strh	r1, [r0, #24]
}
    5b94:	4770      	bx	lr

00005b96 <notify_monitors>:
{
    5b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b9a:	4606      	mov	r6, r0
    5b9c:	460f      	mov	r7, r1
    5b9e:	4690      	mov	r8, r2
	return list->head;
    5ba0:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5ba2:	b119      	cbz	r1, 5bac <notify_monitors+0x16>
    5ba4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5ba6:	b131      	cbz	r1, 5bb6 <notify_monitors+0x20>
	return node->next;
    5ba8:	680c      	ldr	r4, [r1, #0]
    5baa:	e004      	b.n	5bb6 <notify_monitors+0x20>
    5bac:	460c      	mov	r4, r1
    5bae:	e002      	b.n	5bb6 <notify_monitors+0x20>
    5bb0:	4623      	mov	r3, r4
    5bb2:	4621      	mov	r1, r4
    5bb4:	461c      	mov	r4, r3
    5bb6:	b159      	cbz	r1, 5bd0 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    5bb8:	684d      	ldr	r5, [r1, #4]
    5bba:	4643      	mov	r3, r8
    5bbc:	463a      	mov	r2, r7
    5bbe:	4630      	mov	r0, r6
    5bc0:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5bc2:	2c00      	cmp	r4, #0
    5bc4:	d0f4      	beq.n	5bb0 <notify_monitors+0x1a>
    5bc6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5bc8:	2c00      	cmp	r4, #0
    5bca:	d0f2      	beq.n	5bb2 <notify_monitors+0x1c>
	return node->next;
    5bcc:	6823      	ldr	r3, [r4, #0]
    5bce:	e7f0      	b.n	5bb2 <notify_monitors+0x1c>
}
    5bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005bd4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5bd4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5bd6:	f013 0307 	ands.w	r3, r3, #7
    5bda:	d103      	bne.n	5be4 <process_recheck+0x10>
	return list->head;
    5bdc:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    5bde:	b10a      	cbz	r2, 5be4 <process_recheck+0x10>
		evt = EVT_START;
    5be0:	2003      	movs	r0, #3
    5be2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5be4:	2b02      	cmp	r3, #2
    5be6:	d003      	beq.n	5bf0 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    5be8:	2b01      	cmp	r3, #1
    5bea:	d006      	beq.n	5bfa <process_recheck+0x26>
	int evt = EVT_NOP;
    5bec:	2000      	movs	r0, #0
    5bee:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    5bf0:	8b42      	ldrh	r2, [r0, #26]
    5bf2:	2a00      	cmp	r2, #0
    5bf4:	d1f8      	bne.n	5be8 <process_recheck+0x14>
		evt = EVT_STOP;
    5bf6:	2004      	movs	r0, #4
    5bf8:	4770      	bx	lr
    5bfa:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    5bfc:	b10b      	cbz	r3, 5c02 <process_recheck+0x2e>
		evt = EVT_RESET;
    5bfe:	2005      	movs	r0, #5
}
    5c00:	4770      	bx	lr
	int evt = EVT_NOP;
    5c02:	2000      	movs	r0, #0
    5c04:	4770      	bx	lr

00005c06 <process_complete>:
{
    5c06:	b510      	push	{r4, lr}
    5c08:	4604      	mov	r4, r0
    5c0a:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c0c:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    5c0e:	2a00      	cmp	r2, #0
    5c10:	db07      	blt.n	5c22 <process_complete+0x1c>
    5c12:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    5c16:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5c18:	2a01      	cmp	r2, #1
    5c1a:	d90e      	bls.n	5c3a <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5c1c:	2b04      	cmp	r3, #4
    5c1e:	d033      	beq.n	5c88 <process_complete+0x82>
}
    5c20:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    5c22:	e9d0 0100 	ldrd	r0, r1, [r0]
    5c26:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5c2a:	2300      	movs	r3, #0
    5c2c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    5c2e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    5c30:	2101      	movs	r1, #1
    5c32:	4620      	mov	r0, r4
    5c34:	f7ff ffa7 	bl	5b86 <set_state>
    5c38:	e7f2      	b.n	5c20 <process_complete+0x1a>
		*clients = mgr->clients;
    5c3a:	e9d0 0100 	ldrd	r0, r1, [r0]
    5c3e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5c42:	2200      	movs	r2, #0
    5c44:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    5c46:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5c48:	2b06      	cmp	r3, #6
    5c4a:	d118      	bne.n	5c7e <process_complete+0x78>
	return list->head;
    5c4c:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5c50:	b13b      	cbz	r3, 5c62 <process_complete+0x5c>
				mgr->refs += 1U;
    5c52:	8b62      	ldrh	r2, [r4, #26]
    5c54:	3201      	adds	r2, #1
    5c56:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d0f9      	beq.n	5c50 <process_complete+0x4a>
	return node->next;
    5c5c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d1f6      	bne.n	5c50 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    5c62:	2102      	movs	r1, #2
    5c64:	4620      	mov	r0, r4
    5c66:	f7ff ff8e 	bl	5b86 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5c6a:	4620      	mov	r0, r4
    5c6c:	f7ff ffb2 	bl	5bd4 <process_recheck>
    5c70:	2800      	cmp	r0, #0
    5c72:	d0d5      	beq.n	5c20 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5c74:	8b23      	ldrh	r3, [r4, #24]
    5c76:	f043 0320 	orr.w	r3, r3, #32
    5c7a:	8323      	strh	r3, [r4, #24]
    5c7c:	e7d0      	b.n	5c20 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5c7e:	2100      	movs	r1, #0
    5c80:	4620      	mov	r0, r4
    5c82:	f7ff ff80 	bl	5b86 <set_state>
    5c86:	e7f0      	b.n	5c6a <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    5c88:	2100      	movs	r1, #0
    5c8a:	f7ff ff7c 	bl	5b86 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5c8e:	4620      	mov	r0, r4
    5c90:	f7ff ffa0 	bl	5bd4 <process_recheck>
    5c94:	2800      	cmp	r0, #0
    5c96:	d0c3      	beq.n	5c20 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5c98:	8b23      	ldrh	r3, [r4, #24]
    5c9a:	f043 0320 	orr.w	r3, r3, #32
    5c9e:	8323      	strh	r3, [r4, #24]
}
    5ca0:	e7be      	b.n	5c20 <process_complete+0x1a>

00005ca2 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5ca2:	b158      	cbz	r0, 5cbc <validate_args+0x1a>
{
    5ca4:	b510      	push	{r4, lr}
    5ca6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5ca8:	b159      	cbz	r1, 5cc2 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    5caa:	1d08      	adds	r0, r1, #4
    5cac:	f7ff ff37 	bl	5b1e <sys_notify_validate>
	if ((rv == 0)
    5cb0:	b918      	cbnz	r0, 5cba <validate_args+0x18>
	    && ((cli->notify.flags
    5cb2:	68a3      	ldr	r3, [r4, #8]
    5cb4:	f033 0303 	bics.w	r3, r3, #3
    5cb8:	d106      	bne.n	5cc8 <validate_args+0x26>
}
    5cba:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5cbc:	f06f 0015 	mvn.w	r0, #21
}
    5cc0:	4770      	bx	lr
		return -EINVAL;
    5cc2:	f06f 0015 	mvn.w	r0, #21
    5cc6:	e7f8      	b.n	5cba <validate_args+0x18>
		rv = -EINVAL;
    5cc8:	f06f 0015 	mvn.w	r0, #21
    5ccc:	e7f5      	b.n	5cba <validate_args+0x18>

00005cce <notify_one>:
{
    5cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cd2:	4607      	mov	r7, r0
    5cd4:	460c      	mov	r4, r1
    5cd6:	4616      	mov	r6, r2
    5cd8:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5cda:	4619      	mov	r1, r3
    5cdc:	1d20      	adds	r0, r4, #4
    5cde:	f7ff ff35 	bl	5b4c <sys_notify_finalize>
	if (cb) {
    5ce2:	b128      	cbz	r0, 5cf0 <notify_one+0x22>
    5ce4:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    5ce6:	462b      	mov	r3, r5
    5ce8:	4632      	mov	r2, r6
    5cea:	4621      	mov	r1, r4
    5cec:	4638      	mov	r0, r7
    5cee:	47c0      	blx	r8
}
    5cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005cf4 <notify_all>:
{
    5cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf8:	4680      	mov	r8, r0
    5cfa:	460c      	mov	r4, r1
    5cfc:	4617      	mov	r7, r2
    5cfe:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    5d00:	e004      	b.n	5d0c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    5d02:	4633      	mov	r3, r6
    5d04:	463a      	mov	r2, r7
    5d06:	4640      	mov	r0, r8
    5d08:	f7ff ffe1 	bl	5cce <notify_one>
	return list->head;
    5d0c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    5d0e:	b131      	cbz	r1, 5d1e <notify_all+0x2a>
	return node->next;
    5d10:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    5d12:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5d14:	6863      	ldr	r3, [r4, #4]
    5d16:	428b      	cmp	r3, r1
    5d18:	d1f3      	bne.n	5d02 <notify_all+0xe>
	list->tail = node;
    5d1a:	6065      	str	r5, [r4, #4]
}
    5d1c:	e7f1      	b.n	5d02 <notify_all+0xe>
}
    5d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d22 <transition_complete>:
{
    5d22:	b508      	push	{r3, lr}
	__asm__ volatile(
    5d24:	f04f 0c20 	mov.w	ip, #32
    5d28:	f3ef 8211 	mrs	r2, BASEPRI
    5d2c:	f38c 8812 	msr	BASEPRI_MAX, ip
    5d30:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5d34:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5d36:	2101      	movs	r1, #1
    5d38:	f7fa fb8e 	bl	458 <process_event>
}
    5d3c:	bd08      	pop	{r3, pc}

00005d3e <onoff_manager_init>:
	if ((mgr == NULL)
    5d3e:	4603      	mov	r3, r0
    5d40:	b170      	cbz	r0, 5d60 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    5d42:	b181      	cbz	r1, 5d66 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    5d44:	680a      	ldr	r2, [r1, #0]
    5d46:	b18a      	cbz	r2, 5d6c <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    5d48:	684a      	ldr	r2, [r1, #4]
    5d4a:	b192      	cbz	r2, 5d72 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5d4c:	2000      	movs	r0, #0
    5d4e:	6018      	str	r0, [r3, #0]
    5d50:	6058      	str	r0, [r3, #4]
    5d52:	6098      	str	r0, [r3, #8]
    5d54:	60d8      	str	r0, [r3, #12]
    5d56:	6118      	str	r0, [r3, #16]
    5d58:	6158      	str	r0, [r3, #20]
    5d5a:	6198      	str	r0, [r3, #24]
    5d5c:	6119      	str	r1, [r3, #16]
	return 0;
    5d5e:	4770      	bx	lr
		return -EINVAL;
    5d60:	f06f 0015 	mvn.w	r0, #21
    5d64:	4770      	bx	lr
    5d66:	f06f 0015 	mvn.w	r0, #21
    5d6a:	4770      	bx	lr
    5d6c:	f06f 0015 	mvn.w	r0, #21
    5d70:	4770      	bx	lr
    5d72:	f06f 0015 	mvn.w	r0, #21
}
    5d76:	4770      	bx	lr

00005d78 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d7a:	4604      	mov	r4, r0
    5d7c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5d7e:	f7ff ff90 	bl	5ca2 <validate_args>

	if (rv < 0) {
    5d82:	1e06      	subs	r6, r0, #0
    5d84:	db37      	blt.n	5df6 <onoff_request+0x7e>
    5d86:	f04f 0320 	mov.w	r3, #32
    5d8a:	f3ef 8211 	mrs	r2, BASEPRI
    5d8e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d92:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5d96:	8b25      	ldrh	r5, [r4, #24]
    5d98:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5d9c:	8b63      	ldrh	r3, [r4, #26]
    5d9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5da2:	428b      	cmp	r3, r1
    5da4:	d02f      	beq.n	5e06 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5da6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    5da8:	2d02      	cmp	r5, #2
    5daa:	d00c      	beq.n	5dc6 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    5dac:	b18d      	cbz	r5, 5dd2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    5dae:	2d04      	cmp	r5, #4
    5db0:	d00f      	beq.n	5dd2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    5db2:	2d06      	cmp	r5, #6
    5db4:	d00d      	beq.n	5dd2 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    5db6:	2d05      	cmp	r5, #5
    5db8:	d01f      	beq.n	5dfa <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    5dba:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    5dbe:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5dc0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5dc2:	4608      	mov	r0, r1
    5dc4:	e00a      	b.n	5ddc <onoff_request+0x64>
		mgr->refs += 1U;
    5dc6:	3301      	adds	r3, #1
    5dc8:	8363      	strh	r3, [r4, #26]
		notify = true;
    5dca:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    5dcc:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    5dce:	4618      	mov	r0, r3
    5dd0:	e004      	b.n	5ddc <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    5dd2:	fab5 f385 	clz	r3, r5
    5dd6:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    5dd8:	2100      	movs	r1, #0
		add_client = true;
    5dda:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    5ddc:	b128      	cbz	r0, 5dea <onoff_request+0x72>
	parent->next = child;
    5dde:	2000      	movs	r0, #0
    5de0:	6038      	str	r0, [r7, #0]
	return list->tail;
    5de2:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    5de4:	b1a8      	cbz	r0, 5e12 <onoff_request+0x9a>
	parent->next = child;
    5de6:	6007      	str	r7, [r0, #0]
	list->tail = node;
    5de8:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    5dea:	b9ab      	cbnz	r3, 5e18 <onoff_request+0xa0>
	__asm__ volatile(
    5dec:	f382 8811 	msr	BASEPRI, r2
    5df0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5df4:	b9a9      	cbnz	r1, 5e22 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5df6:	4630      	mov	r0, r6
    5df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    5dfa:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    5dfe:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5e00:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5e02:	4608      	mov	r0, r1
    5e04:	e7ea      	b.n	5ddc <onoff_request+0x64>
		rv = -EAGAIN;
    5e06:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    5e0a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    5e0c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    5e0e:	4608      	mov	r0, r1
    5e10:	e7e4      	b.n	5ddc <onoff_request+0x64>
    5e12:	6067      	str	r7, [r4, #4]
	list->head = node;
    5e14:	6027      	str	r7, [r4, #0]
}
    5e16:	e7e8      	b.n	5dea <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    5e18:	2102      	movs	r1, #2
    5e1a:	4620      	mov	r0, r4
    5e1c:	f7fa fb1c 	bl	458 <process_event>
    5e20:	e7e9      	b.n	5df6 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    5e22:	2300      	movs	r3, #0
    5e24:	462a      	mov	r2, r5
    5e26:	4639      	mov	r1, r7
    5e28:	4620      	mov	r0, r4
    5e2a:	f7ff ff50 	bl	5cce <notify_one>
    5e2e:	e7e2      	b.n	5df6 <onoff_request+0x7e>

00005e30 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    5e30:	b510      	push	{r4, lr}
	__asm__ volatile(
    5e32:	f04f 0320 	mov.w	r3, #32
    5e36:	f3ef 8211 	mrs	r2, BASEPRI
    5e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    5e3e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5e42:	8b03      	ldrh	r3, [r0, #24]
    5e44:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    5e48:	2b02      	cmp	r3, #2
    5e4a:	d007      	beq.n	5e5c <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    5e4c:	2b01      	cmp	r3, #1
    5e4e:	d002      	beq.n	5e56 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    5e50:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    5e54:	e008      	b.n	5e68 <onoff_release+0x38>
			rv = -EIO;
    5e56:	f06f 0404 	mvn.w	r4, #4
    5e5a:	e005      	b.n	5e68 <onoff_release+0x38>
    5e5c:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    5e5e:	8b43      	ldrh	r3, [r0, #26]
    5e60:	3b01      	subs	r3, #1
    5e62:	b29b      	uxth	r3, r3
    5e64:	8343      	strh	r3, [r0, #26]
	if (stop) {
    5e66:	b12b      	cbz	r3, 5e74 <onoff_release+0x44>
	__asm__ volatile(
    5e68:	f382 8811 	msr	BASEPRI, r2
    5e6c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    5e70:	4620      	mov	r0, r4
    5e72:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    5e74:	2102      	movs	r1, #2
    5e76:	f7fa faef 	bl	458 <process_event>
    5e7a:	e7f9      	b.n	5e70 <onoff_release+0x40>

00005e7c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5e7c:	b508      	push	{r3, lr}
    5e7e:	4604      	mov	r4, r0
    5e80:	4608      	mov	r0, r1
    5e82:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5e84:	461a      	mov	r2, r3
    5e86:	47a0      	blx	r4
	return z_impl_z_current_get();
    5e88:	f7ff fb7e 	bl	5588 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5e8c:	f7fb fc96 	bl	17bc <z_impl_k_thread_abort>

00005e90 <extract_decimal>:
{
    5e90:	4684      	mov	ip, r0
	const char *sp = *str;
    5e92:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    5e94:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    5e96:	e005      	b.n	5ea4 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    5e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e9c:	3201      	adds	r2, #1
    5e9e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5ea2:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5ea4:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5ea6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5eaa:	2909      	cmp	r1, #9
    5eac:	d9f4      	bls.n	5e98 <extract_decimal+0x8>
	*str = sp;
    5eae:	f8cc 2000 	str.w	r2, [ip]
}
    5eb2:	4770      	bx	lr

00005eb4 <encode_uint>:
{
    5eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5eb8:	b083      	sub	sp, #12
    5eba:	4604      	mov	r4, r0
    5ebc:	460d      	mov	r5, r1
    5ebe:	9201      	str	r2, [sp, #4]
    5ec0:	469a      	mov	sl, r3
    5ec2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    5ec4:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5ec6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5eca:	2b6f      	cmp	r3, #111	; 0x6f
    5ecc:	d00f      	beq.n	5eee <encode_uint+0x3a>
    5ece:	d906      	bls.n	5ede <encode_uint+0x2a>
    5ed0:	2b70      	cmp	r3, #112	; 0x70
    5ed2:	d00f      	beq.n	5ef4 <encode_uint+0x40>
    5ed4:	2b78      	cmp	r3, #120	; 0x78
    5ed6:	d110      	bne.n	5efa <encode_uint+0x46>
		return 16;
    5ed8:	f04f 0910 	mov.w	r9, #16
    5edc:	e026      	b.n	5f2c <encode_uint+0x78>
	switch (specifier) {
    5ede:	2b58      	cmp	r3, #88	; 0x58
    5ee0:	d002      	beq.n	5ee8 <encode_uint+0x34>
    5ee2:	f04f 090a 	mov.w	r9, #10
    5ee6:	e021      	b.n	5f2c <encode_uint+0x78>
		return 16;
    5ee8:	f04f 0910 	mov.w	r9, #16
    5eec:	e01e      	b.n	5f2c <encode_uint+0x78>
		return 8;
    5eee:	f04f 0908 	mov.w	r9, #8
    5ef2:	e01b      	b.n	5f2c <encode_uint+0x78>
		return 16;
    5ef4:	f04f 0910 	mov.w	r9, #16
    5ef8:	e018      	b.n	5f2c <encode_uint+0x78>
	switch (specifier) {
    5efa:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    5efe:	e015      	b.n	5f2c <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f00:	f1bb 0f19 	cmp.w	fp, #25
    5f04:	d821      	bhi.n	5f4a <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5f06:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f08:	3237      	adds	r2, #55	; 0x37
    5f0a:	b2d2      	uxtb	r2, r2
    5f0c:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    5f10:	463a      	mov	r2, r7
    5f12:	4643      	mov	r3, r8
    5f14:	4620      	mov	r0, r4
    5f16:	4629      	mov	r1, r5
    5f18:	f7fa f8e0 	bl	dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5f1c:	42bc      	cmp	r4, r7
    5f1e:	f175 0300 	sbcs.w	r3, r5, #0
    5f22:	d316      	bcc.n	5f52 <encode_uint+0x9e>
    5f24:	4556      	cmp	r6, sl
    5f26:	d914      	bls.n	5f52 <encode_uint+0x9e>
		value /= radix;
    5f28:	4604      	mov	r4, r0
    5f2a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5f2c:	f04f 0800 	mov.w	r8, #0
    5f30:	464f      	mov	r7, r9
    5f32:	464a      	mov	r2, r9
    5f34:	4643      	mov	r3, r8
    5f36:	4620      	mov	r0, r4
    5f38:	4629      	mov	r1, r5
    5f3a:	f7fa f8cf 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f3e:	2a09      	cmp	r2, #9
    5f40:	d8de      	bhi.n	5f00 <encode_uint+0x4c>
    5f42:	b2d2      	uxtb	r2, r2
    5f44:	3230      	adds	r2, #48	; 0x30
    5f46:	b2d2      	uxtb	r2, r2
    5f48:	e7e0      	b.n	5f0c <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5f4a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f4c:	3257      	adds	r2, #87	; 0x57
    5f4e:	b2d2      	uxtb	r2, r2
    5f50:	e7dc      	b.n	5f0c <encode_uint+0x58>
	if (conv->flag_hash) {
    5f52:	9b01      	ldr	r3, [sp, #4]
    5f54:	781b      	ldrb	r3, [r3, #0]
    5f56:	f013 0f20 	tst.w	r3, #32
    5f5a:	d005      	beq.n	5f68 <encode_uint+0xb4>
		if (radix == 8) {
    5f5c:	f1b9 0f08 	cmp.w	r9, #8
    5f60:	d006      	beq.n	5f70 <encode_uint+0xbc>
		} else if (radix == 16) {
    5f62:	f1b9 0f10 	cmp.w	r9, #16
    5f66:	d009      	beq.n	5f7c <encode_uint+0xc8>
}
    5f68:	4630      	mov	r0, r6
    5f6a:	b003      	add	sp, #12
    5f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5f70:	9a01      	ldr	r2, [sp, #4]
    5f72:	7893      	ldrb	r3, [r2, #2]
    5f74:	f043 0308 	orr.w	r3, r3, #8
    5f78:	7093      	strb	r3, [r2, #2]
    5f7a:	e7f5      	b.n	5f68 <encode_uint+0xb4>
			conv->altform_0c = true;
    5f7c:	9a01      	ldr	r2, [sp, #4]
    5f7e:	7893      	ldrb	r3, [r2, #2]
    5f80:	f043 0310 	orr.w	r3, r3, #16
    5f84:	7093      	strb	r3, [r2, #2]
    5f86:	e7ef      	b.n	5f68 <encode_uint+0xb4>

00005f88 <outs>:
{
    5f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f8c:	4607      	mov	r7, r0
    5f8e:	460e      	mov	r6, r1
    5f90:	4614      	mov	r4, r2
    5f92:	4698      	mov	r8, r3
	size_t count = 0;
    5f94:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5f96:	e006      	b.n	5fa6 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5f98:	4631      	mov	r1, r6
    5f9a:	f814 0b01 	ldrb.w	r0, [r4], #1
    5f9e:	47b8      	blx	r7
		if (rc < 0) {
    5fa0:	2800      	cmp	r0, #0
    5fa2:	db09      	blt.n	5fb8 <outs+0x30>
		++count;
    5fa4:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5fa6:	4544      	cmp	r4, r8
    5fa8:	d3f6      	bcc.n	5f98 <outs+0x10>
    5faa:	f1b8 0f00 	cmp.w	r8, #0
    5fae:	d102      	bne.n	5fb6 <outs+0x2e>
    5fb0:	7823      	ldrb	r3, [r4, #0]
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	d1f0      	bne.n	5f98 <outs+0x10>
	return (int)count;
    5fb6:	4628      	mov	r0, r5
}
    5fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005fbc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    5fbc:	4770      	bx	lr

00005fbe <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5fbe:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5fc0:	f000 fead 	bl	6d1e <z_fatal_error>
}
    5fc4:	bd08      	pop	{r3, pc}

00005fc6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5fc6:	b508      	push	{r3, lr}
    5fc8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5fca:	6800      	ldr	r0, [r0, #0]
    5fcc:	f7ff fff7 	bl	5fbe <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5fd0:	bd08      	pop	{r3, pc}

00005fd2 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5fd2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5fd4:	2100      	movs	r1, #0
    5fd6:	2001      	movs	r0, #1
    5fd8:	f7ff fff1 	bl	5fbe <z_arm_fatal_error>
}
    5fdc:	bd08      	pop	{r3, pc}

00005fde <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5fde:	b508      	push	{r3, lr}
	handler();
    5fe0:	f7fb f93e 	bl	1260 <z_SysNmiOnReset>
	z_arm_int_exit();
    5fe4:	f7fb fa34 	bl	1450 <z_arm_exc_exit>
}
    5fe8:	bd08      	pop	{r3, pc}

00005fea <memory_fault_recoverable>:
}
    5fea:	2000      	movs	r0, #0
    5fec:	4770      	bx	lr

00005fee <debug_monitor>:
	*recoverable = false;
    5fee:	2300      	movs	r3, #0
    5ff0:	700b      	strb	r3, [r1, #0]
}
    5ff2:	4770      	bx	lr

00005ff4 <fault_handle>:
{
    5ff4:	b508      	push	{r3, lr}
	*recoverable = false;
    5ff6:	2300      	movs	r3, #0
    5ff8:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5ffa:	1ecb      	subs	r3, r1, #3
    5ffc:	2b09      	cmp	r3, #9
    5ffe:	d81a      	bhi.n	6036 <fault_handle+0x42>
    6000:	e8df f003 	tbb	[pc, r3]
    6004:	110d0905 	.word	0x110d0905
    6008:	19191919 	.word	0x19191919
    600c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    600e:	4611      	mov	r1, r2
    6010:	f7fb fab8 	bl	1584 <hard_fault>
		break;
    6014:	e010      	b.n	6038 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    6016:	2100      	movs	r1, #0
    6018:	f7fb fa64 	bl	14e4 <mem_manage_fault>
		break;
    601c:	e00c      	b.n	6038 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    601e:	2100      	movs	r1, #0
    6020:	f7fb fa24 	bl	146c <bus_fault>
		break;
    6024:	e008      	b.n	6038 <fault_handle+0x44>
		reason = usage_fault(esf);
    6026:	f7fb fa4b 	bl	14c0 <usage_fault>
		break;
    602a:	e005      	b.n	6038 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    602c:	4611      	mov	r1, r2
    602e:	f7ff ffde 	bl	5fee <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6032:	2000      	movs	r0, #0
		break;
    6034:	e000      	b.n	6038 <fault_handle+0x44>
	switch (fault) {
    6036:	2000      	movs	r0, #0
}
    6038:	bd08      	pop	{r3, pc}

0000603a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    603a:	6843      	ldr	r3, [r0, #4]
    603c:	1e5a      	subs	r2, r3, #1
		&&
    603e:	4213      	tst	r3, r2
    6040:	d106      	bne.n	6050 <mpu_partition_is_valid+0x16>
		&&
    6042:	2b1f      	cmp	r3, #31
    6044:	d906      	bls.n	6054 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    6046:	6803      	ldr	r3, [r0, #0]
		&&
    6048:	421a      	tst	r2, r3
    604a:	d005      	beq.n	6058 <mpu_partition_is_valid+0x1e>
    604c:	2000      	movs	r0, #0
    604e:	4770      	bx	lr
    6050:	2000      	movs	r0, #0
    6052:	4770      	bx	lr
    6054:	2000      	movs	r0, #0
    6056:	4770      	bx	lr
    6058:	2001      	movs	r0, #1
}
    605a:	4770      	bx	lr

0000605c <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    605c:	2807      	cmp	r0, #7
    605e:	d805      	bhi.n	606c <region_allocate_and_init+0x10>
{
    6060:	b510      	push	{r4, lr}
    6062:	4604      	mov	r4, r0
	region_init(index, region_conf);
    6064:	f7fb fbe4 	bl	1830 <region_init>
	return index;
    6068:	4620      	mov	r0, r4
}
    606a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    606c:	f06f 0015 	mvn.w	r0, #21
}
    6070:	4770      	bx	lr

00006072 <mpu_configure_region>:
{
    6072:	b500      	push	{lr}
    6074:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    6076:	680b      	ldr	r3, [r1, #0]
    6078:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    607a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    607c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    607e:	2b20      	cmp	r3, #32
    6080:	d912      	bls.n	60a8 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    6082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6086:	d811      	bhi.n	60ac <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6088:	3b01      	subs	r3, #1
    608a:	fab3 f383 	clz	r3, r3
    608e:	f1c3 031f 	rsb	r3, r3, #31
    6092:	005b      	lsls	r3, r3, #1
    6094:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6098:	4313      	orrs	r3, r2
    609a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    609c:	a901      	add	r1, sp, #4
    609e:	f7ff ffdd 	bl	605c <region_allocate_and_init>
}
    60a2:	b005      	add	sp, #20
    60a4:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    60a8:	2308      	movs	r3, #8
    60aa:	e7f5      	b.n	6098 <mpu_configure_region+0x26>
		return REGION_4G;
    60ac:	233e      	movs	r3, #62	; 0x3e
    60ae:	e7f3      	b.n	6098 <mpu_configure_region+0x26>

000060b0 <mpu_configure_regions>:
{
    60b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60b4:	4680      	mov	r8, r0
    60b6:	460f      	mov	r7, r1
    60b8:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    60ba:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    60bc:	2500      	movs	r5, #0
    60be:	e009      	b.n	60d4 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    60c0:	4621      	mov	r1, r4
    60c2:	b2f0      	uxtb	r0, r6
    60c4:	f7ff ffd5 	bl	6072 <mpu_configure_region>
    60c8:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    60ca:	f110 0f16 	cmn.w	r0, #22
    60ce:	d014      	beq.n	60fa <mpu_configure_regions+0x4a>
		reg_index++;
    60d0:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    60d2:	3501      	adds	r5, #1
    60d4:	42bd      	cmp	r5, r7
    60d6:	da10      	bge.n	60fa <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    60d8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    60dc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    60e0:	6862      	ldr	r2, [r4, #4]
    60e2:	2a00      	cmp	r2, #0
    60e4:	d0f5      	beq.n	60d2 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    60e6:	f1b9 0f00 	cmp.w	r9, #0
    60ea:	d0e9      	beq.n	60c0 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    60ec:	4620      	mov	r0, r4
    60ee:	f7ff ffa4 	bl	603a <mpu_partition_is_valid>
		if (do_sanity_check &&
    60f2:	2800      	cmp	r0, #0
    60f4:	d1e4      	bne.n	60c0 <mpu_configure_regions+0x10>
			return -EINVAL;
    60f6:	f06f 0615 	mvn.w	r6, #21
}
    60fa:	4630      	mov	r0, r6
    60fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006100 <arm_core_mpu_configure_static_mpu_regions>:
{
    6100:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6102:	f7fb fba9 	bl	1858 <mpu_configure_static_mpu_regions>
}
    6106:	bd08      	pop	{r3, pc}

00006108 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    6108:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    610a:	f7fb fbaf 	bl	186c <mpu_configure_dynamic_mpu_regions>
}
    610e:	bd08      	pop	{r3, pc}

00006110 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6110:	4602      	mov	r2, r0
    6112:	e002      	b.n	611a <strcpy+0xa>
		*d = *s;
    6114:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    6118:	3101      	adds	r1, #1
	while (*s != '\0') {
    611a:	780b      	ldrb	r3, [r1, #0]
    611c:	2b00      	cmp	r3, #0
    611e:	d1f9      	bne.n	6114 <strcpy+0x4>
	}

	*d = '\0';
    6120:	7013      	strb	r3, [r2, #0]

	return dest;
}
    6122:	4770      	bx	lr

00006124 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    6124:	4603      	mov	r3, r0
    6126:	b1a2      	cbz	r2, 6152 <strncpy+0x2e>
{
    6128:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    612a:	780c      	ldrb	r4, [r1, #0]
    612c:	b12c      	cbz	r4, 613a <strncpy+0x16>
		*d = *s;
    612e:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    6132:	3101      	adds	r1, #1
		d++;
		n--;
    6134:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    6136:	2a00      	cmp	r2, #0
    6138:	d1f7      	bne.n	612a <strncpy+0x6>
	}

	while (n > 0) {
    613a:	b122      	cbz	r2, 6146 <strncpy+0x22>
		*d = '\0';
    613c:	2100      	movs	r1, #0
    613e:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    6142:	3a01      	subs	r2, #1
    6144:	e7f9      	b.n	613a <strncpy+0x16>
	}

	return dest;
}
    6146:	bc10      	pop	{r4}
    6148:	4770      	bx	lr
		*d = '\0';
    614a:	2100      	movs	r1, #0
    614c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6150:	3a01      	subs	r2, #1
	while (n > 0) {
    6152:	2a00      	cmp	r2, #0
    6154:	d1f9      	bne.n	614a <strncpy+0x26>
    6156:	4770      	bx	lr

00006158 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6158:	4603      	mov	r3, r0
	size_t n = 0;
    615a:	2000      	movs	r0, #0

	while (*s != '\0') {
    615c:	e001      	b.n	6162 <strlen+0xa>
		s++;
    615e:	3301      	adds	r3, #1
		n++;
    6160:	3001      	adds	r0, #1
	while (*s != '\0') {
    6162:	781a      	ldrb	r2, [r3, #0]
    6164:	2a00      	cmp	r2, #0
    6166:	d1fa      	bne.n	615e <strlen+0x6>
	}

	return n;
}
    6168:	4770      	bx	lr

0000616a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    616a:	4603      	mov	r3, r0
	size_t n = 0;
    616c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    616e:	e001      	b.n	6174 <strnlen+0xa>
		s++;
    6170:	3301      	adds	r3, #1
		n++;
    6172:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    6174:	781a      	ldrb	r2, [r3, #0]
    6176:	b10a      	cbz	r2, 617c <strnlen+0x12>
    6178:	4288      	cmp	r0, r1
    617a:	d3f9      	bcc.n	6170 <strnlen+0x6>
	}

	return n;
}
    617c:	4770      	bx	lr

0000617e <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    617e:	ea80 0301 	eor.w	r3, r0, r1
    6182:	f013 0f03 	tst.w	r3, #3
    6186:	d001      	beq.n	618c <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    6188:	4603      	mov	r3, r0
    618a:	e023      	b.n	61d4 <memcpy+0x56>
    618c:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    618e:	f013 0f03 	tst.w	r3, #3
    6192:	d00f      	beq.n	61b4 <memcpy+0x36>
			if (n == 0) {
    6194:	b30a      	cbz	r2, 61da <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    6196:	f811 cb01 	ldrb.w	ip, [r1], #1
    619a:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    619e:	3a01      	subs	r2, #1
    61a0:	e7f5      	b.n	618e <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    61a2:	f811 cb01 	ldrb.w	ip, [r1], #1
    61a6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    61aa:	3a01      	subs	r2, #1
	while (n > 0) {
    61ac:	2a00      	cmp	r2, #0
    61ae:	d1f8      	bne.n	61a2 <memcpy+0x24>
	}

	return d;
}
    61b0:	bc10      	pop	{r4}
    61b2:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    61b4:	2a03      	cmp	r2, #3
    61b6:	d90d      	bls.n	61d4 <memcpy+0x56>
{
    61b8:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    61ba:	f851 4b04 	ldr.w	r4, [r1], #4
    61be:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    61c2:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    61c4:	2a03      	cmp	r2, #3
    61c6:	d8f8      	bhi.n	61ba <memcpy+0x3c>
    61c8:	e7f0      	b.n	61ac <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    61ca:	f811 cb01 	ldrb.w	ip, [r1], #1
    61ce:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    61d2:	3a01      	subs	r2, #1
	while (n > 0) {
    61d4:	2a00      	cmp	r2, #0
    61d6:	d1f8      	bne.n	61ca <memcpy+0x4c>
    61d8:	4770      	bx	lr
}
    61da:	4770      	bx	lr

000061dc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    61dc:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    61e0:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    61e2:	e002      	b.n	61ea <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    61e4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    61e8:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    61ea:	f013 0f03 	tst.w	r3, #3
    61ee:	d002      	beq.n	61f6 <memset+0x1a>
		if (n == 0) {
    61f0:	2a00      	cmp	r2, #0
    61f2:	d1f7      	bne.n	61e4 <memset+0x8>
    61f4:	e00f      	b.n	6216 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    61f6:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    61f8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    61fc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6200:	2a03      	cmp	r2, #3
    6202:	d906      	bls.n	6212 <memset+0x36>
		*(d_word++) = c_word;
    6204:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6208:	3a04      	subs	r2, #4
    620a:	e7f9      	b.n	6200 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    620c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6210:	3a01      	subs	r2, #1
	while (n > 0) {
    6212:	2a00      	cmp	r2, #0
    6214:	d1fa      	bne.n	620c <memset+0x30>
	}

	return buf;
}
    6216:	4770      	bx	lr

00006218 <_stdout_hook_default>:
}
    6218:	f04f 30ff 	mov.w	r0, #4294967295
    621c:	4770      	bx	lr

0000621e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    621e:	2806      	cmp	r0, #6
    6220:	d000      	beq.n	6224 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6222:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6228:	2201      	movs	r2, #1
    622a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    622e:	f3bf 8f4f 	dsb	sy
        __WFE();
    6232:	bf20      	wfe
    while (true)
    6234:	e7fd      	b.n	6232 <pm_state_set+0x14>

00006236 <pm_state_exit_post_ops>:
    6236:	2300      	movs	r3, #0
    6238:	f383 8811 	msr	BASEPRI, r3
    623c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6240:	4770      	bx	lr

00006242 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    6242:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6244:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6248:	0089      	lsls	r1, r1, #2
    624a:	3138      	adds	r1, #56	; 0x38
}
    624c:	4408      	add	r0, r1
    624e:	4770      	bx	lr

00006250 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    6250:	6840      	ldr	r0, [r0, #4]
}
    6252:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6256:	4770      	bx	lr

00006258 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    6258:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    625a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    625e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6262:	4770      	bx	lr

00006264 <get_status>:
{
    6264:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6266:	b2c9      	uxtb	r1, r1
    6268:	f7ff ffeb 	bl	6242 <get_sub_data>
    626c:	6880      	ldr	r0, [r0, #8]
}
    626e:	f000 0007 	and.w	r0, r0, #7
    6272:	bd08      	pop	{r3, pc}

00006274 <set_off_state>:
	__asm__ volatile(
    6274:	f04f 0320 	mov.w	r3, #32
    6278:	f3ef 8211 	mrs	r2, BASEPRI
    627c:	f383 8812 	msr	BASEPRI_MAX, r3
    6280:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6284:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6286:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    628a:	d001      	beq.n	6290 <set_off_state+0x1c>
    628c:	428b      	cmp	r3, r1
    628e:	d107      	bne.n	62a0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6290:	2301      	movs	r3, #1
    6292:	6003      	str	r3, [r0, #0]
	int err = 0;
    6294:	2000      	movs	r0, #0
	__asm__ volatile(
    6296:	f382 8811 	msr	BASEPRI, r2
    629a:	f3bf 8f6f 	isb	sy
}
    629e:	4770      	bx	lr
		err = -EPERM;
    62a0:	f04f 30ff 	mov.w	r0, #4294967295
    62a4:	e7f7      	b.n	6296 <set_off_state+0x22>

000062a6 <set_starting_state>:
	__asm__ volatile(
    62a6:	f04f 0320 	mov.w	r3, #32
    62aa:	f3ef 8211 	mrs	r2, BASEPRI
    62ae:	f383 8812 	msr	BASEPRI_MAX, r3
    62b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    62b6:	6803      	ldr	r3, [r0, #0]
    62b8:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    62bc:	f003 0307 	and.w	r3, r3, #7
    62c0:	2b01      	cmp	r3, #1
    62c2:	d008      	beq.n	62d6 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    62c4:	458c      	cmp	ip, r1
    62c6:	d009      	beq.n	62dc <set_starting_state+0x36>
		err = -EPERM;
    62c8:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    62cc:	f382 8811 	msr	BASEPRI, r2
    62d0:	f3bf 8f6f 	isb	sy
}
    62d4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    62d6:	6001      	str	r1, [r0, #0]
	int err = 0;
    62d8:	2000      	movs	r0, #0
    62da:	e7f7      	b.n	62cc <set_starting_state+0x26>
		err = -EALREADY;
    62dc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    62e0:	e7f4      	b.n	62cc <set_starting_state+0x26>

000062e2 <set_on_state>:
	__asm__ volatile(
    62e2:	f04f 0320 	mov.w	r3, #32
    62e6:	f3ef 8211 	mrs	r2, BASEPRI
    62ea:	f383 8812 	msr	BASEPRI_MAX, r3
    62ee:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    62f2:	6803      	ldr	r3, [r0, #0]
    62f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    62f8:	f043 0302 	orr.w	r3, r3, #2
    62fc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    62fe:	f382 8811 	msr	BASEPRI, r2
    6302:	f3bf 8f6f 	isb	sy
}
    6306:	4770      	bx	lr

00006308 <clkstarted_handle>:
{
    6308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    630a:	4606      	mov	r6, r0
    630c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    630e:	f7ff ff98 	bl	6242 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    6312:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    6314:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    6316:	2300      	movs	r3, #0
    6318:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    631c:	f7ff ffe1 	bl	62e2 <set_on_state>
	if (callback) {
    6320:	b11d      	cbz	r5, 632a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6322:	463a      	mov	r2, r7
    6324:	4621      	mov	r1, r4
    6326:	4630      	mov	r0, r6
    6328:	47a8      	blx	r5
}
    632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000632c <stop>:
{
    632c:	b570      	push	{r4, r5, r6, lr}
    632e:	4606      	mov	r6, r0
    6330:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6332:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6334:	4621      	mov	r1, r4
    6336:	f7ff ff84 	bl	6242 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    633a:	4629      	mov	r1, r5
    633c:	3008      	adds	r0, #8
    633e:	f7ff ff99 	bl	6274 <set_off_state>
	if (err < 0) {
    6342:	2800      	cmp	r0, #0
    6344:	db06      	blt.n	6354 <stop+0x28>
	get_sub_config(dev, type)->stop();
    6346:	4621      	mov	r1, r4
    6348:	4630      	mov	r0, r6
    634a:	f7ff ff81 	bl	6250 <get_sub_config>
    634e:	6843      	ldr	r3, [r0, #4]
    6350:	4798      	blx	r3
	return 0;
    6352:	2000      	movs	r0, #0
}
    6354:	bd70      	pop	{r4, r5, r6, pc}

00006356 <api_stop>:
{
    6356:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    6358:	2280      	movs	r2, #128	; 0x80
    635a:	f7ff ffe7 	bl	632c <stop>
}
    635e:	bd08      	pop	{r3, pc}

00006360 <async_start>:
{
    6360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6364:	4606      	mov	r6, r0
    6366:	4690      	mov	r8, r2
    6368:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    636a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    636c:	4629      	mov	r1, r5
    636e:	f7ff ff68 	bl	6242 <get_sub_data>
    6372:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    6374:	9906      	ldr	r1, [sp, #24]
    6376:	3008      	adds	r0, #8
    6378:	f7ff ff95 	bl	62a6 <set_starting_state>
	if (err < 0) {
    637c:	2800      	cmp	r0, #0
    637e:	db09      	blt.n	6394 <async_start+0x34>
	subdata->cb = cb;
    6380:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    6384:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    6386:	4629      	mov	r1, r5
    6388:	4630      	mov	r0, r6
    638a:	f7ff ff61 	bl	6250 <get_sub_config>
    638e:	6803      	ldr	r3, [r0, #0]
    6390:	4798      	blx	r3
	return 0;
    6392:	2000      	movs	r0, #0
}
    6394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006398 <api_start>:
{
    6398:	b510      	push	{r4, lr}
    639a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    639c:	2480      	movs	r4, #128	; 0x80
    639e:	9400      	str	r4, [sp, #0]
    63a0:	f7ff ffde 	bl	6360 <async_start>
}
    63a4:	b002      	add	sp, #8
    63a6:	bd10      	pop	{r4, pc}

000063a8 <onoff_started_callback>:
{
    63a8:	b510      	push	{r4, lr}
    63aa:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    63ac:	b2c9      	uxtb	r1, r1
    63ae:	f7ff ff53 	bl	6258 <get_onoff_manager>
	notify(mgr, 0);
    63b2:	2100      	movs	r1, #0
    63b4:	47a0      	blx	r4
}
    63b6:	bd10      	pop	{r4, pc}

000063b8 <hfclk_start>:
{
    63b8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    63ba:	2001      	movs	r0, #1
    63bc:	f000 fb3d 	bl	6a3a <nrfx_clock_start>
}
    63c0:	bd08      	pop	{r3, pc}

000063c2 <hfclk_stop>:
{
    63c2:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    63c4:	2001      	movs	r0, #1
    63c6:	f000 fb89 	bl	6adc <nrfx_clock_stop>
}
    63ca:	bd08      	pop	{r3, pc}

000063cc <blocking_start_callback>:
{
    63cc:	b508      	push	{r3, lr}
    63ce:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    63d0:	f7fe fb4c 	bl	4a6c <z_impl_k_sem_give>
}
    63d4:	bd08      	pop	{r3, pc}

000063d6 <lfclk_stop>:
{
    63d6:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    63d8:	f7fb fd3e 	bl	1e58 <z_nrf_clock_calibration_lfclk_stopped>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    63dc:	2000      	movs	r0, #0
    63de:	f000 fb7d 	bl	6adc <nrfx_clock_stop>
}
    63e2:	bd08      	pop	{r3, pc}

000063e4 <clk_release>:
{
    63e4:	b508      	push	{r3, lr}
	err = onoff_release(mgr);
    63e6:	f7ff fd23 	bl	5e30 <onoff_release>
}
    63ea:	bd08      	pop	{r3, pc}

000063ec <clk_request>:
{
    63ec:	b510      	push	{r4, lr}
	*notify = (struct sys_notify){
    63ee:	2400      	movs	r4, #0
    63f0:	604c      	str	r4, [r1, #4]
    63f2:	608c      	str	r4, [r1, #8]
    63f4:	60cc      	str	r4, [r1, #12]
    63f6:	604a      	str	r2, [r1, #4]
    63f8:	2203      	movs	r2, #3
    63fa:	608a      	str	r2, [r1, #8]
	err = onoff_request(mgr, cli);
    63fc:	f7ff fcbc 	bl	5d78 <onoff_request>
}
    6400:	bd10      	pop	{r4, pc}

00006402 <timeout_handler>:
{
    6402:	b508      	push	{r3, lr}
	start_cal_process();
    6404:	f7fb fcea 	bl	1ddc <start_cal_process>
}
    6408:	bd08      	pop	{r3, pc}

0000640a <z_nrf_clock_calibration_lfclk_started>:
{
    640a:	b508      	push	{r3, lr}
	start_unconditional_cal_process();
    640c:	f7fb fcfc 	bl	1e08 <start_unconditional_cal_process>
}
    6410:	bd08      	pop	{r3, pc}

00006412 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    6412:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    6416:	f020 0001 	bic.w	r0, r0, #1
    641a:	0540      	lsls	r0, r0, #21
    641c:	0d40      	lsrs	r0, r0, #21
    641e:	f240 2306 	movw	r3, #518	; 0x206
    6422:	4298      	cmp	r0, r3
    6424:	d033      	beq.n	648e <get_drive+0x7c>
    6426:	d816      	bhi.n	6456 <get_drive+0x44>
    6428:	2806      	cmp	r0, #6
    642a:	d02c      	beq.n	6486 <get_drive+0x74>
    642c:	d906      	bls.n	643c <get_drive+0x2a>
    642e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    6432:	d10d      	bne.n	6450 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    6434:	2301      	movs	r3, #1
    6436:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6438:	2000      	movs	r0, #0
		break;
    643a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    643c:	b300      	cbz	r0, 6480 <get_drive+0x6e>
    643e:	2802      	cmp	r0, #2
    6440:	d103      	bne.n	644a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    6442:	2304      	movs	r3, #4
    6444:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6446:	2000      	movs	r0, #0
		break;
    6448:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    644a:	f06f 0015 	mvn.w	r0, #21
    644e:	4770      	bx	lr
    6450:	f06f 0015 	mvn.w	r0, #21
    6454:	4770      	bx	lr
    6456:	f240 4302 	movw	r3, #1026	; 0x402
    645a:	4298      	cmp	r0, r3
    645c:	d01b      	beq.n	6496 <get_drive+0x84>
    645e:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    6462:	d103      	bne.n	646c <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    6464:	2303      	movs	r3, #3
    6466:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6468:	2000      	movs	r0, #0
		break;
    646a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    646c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    6470:	d103      	bne.n	647a <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    6472:	2302      	movs	r3, #2
    6474:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6476:	2000      	movs	r0, #0
		break;
    6478:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    647a:	f06f 0015 	mvn.w	r0, #21
    647e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    6480:	2000      	movs	r0, #0
    6482:	7008      	strb	r0, [r1, #0]
		break;
    6484:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    6486:	2306      	movs	r3, #6
    6488:	700b      	strb	r3, [r1, #0]
	int err = 0;
    648a:	2000      	movs	r0, #0
		break;
    648c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    648e:	2307      	movs	r3, #7
    6490:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6492:	2000      	movs	r0, #0
		break;
    6494:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    6496:	2305      	movs	r3, #5
    6498:	700b      	strb	r3, [r1, #0]
	int err = 0;
    649a:	2000      	movs	r0, #0
}
    649c:	4770      	bx	lr

0000649e <get_pull>:
	if (flags & GPIO_PULL_UP) {
    649e:	f010 0f10 	tst.w	r0, #16
    64a2:	d104      	bne.n	64ae <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    64a4:	f010 0f20 	tst.w	r0, #32
    64a8:	d103      	bne.n	64b2 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    64aa:	2000      	movs	r0, #0
    64ac:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    64ae:	2003      	movs	r0, #3
    64b0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    64b2:	2001      	movs	r0, #1
}
    64b4:	4770      	bx	lr

000064b6 <gpio_nrfx_port_get_raw>:
	return port->config;
    64b6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    64b8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    64ba:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    64be:	600b      	str	r3, [r1, #0]
}
    64c0:	2000      	movs	r0, #0
    64c2:	4770      	bx	lr

000064c4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    64c4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    64c6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    64c8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    64cc:	4042      	eors	r2, r0
    64ce:	400a      	ands	r2, r1
    64d0:	4042      	eors	r2, r0
    p_reg->OUT = value;
    64d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    64d6:	2000      	movs	r0, #0
    64d8:	4770      	bx	lr

000064da <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    64da:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    64dc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    64de:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    64e2:	2000      	movs	r0, #0
    64e4:	4770      	bx	lr

000064e6 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    64e6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    64e8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    64ea:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    64ee:	2000      	movs	r0, #0
    64f0:	4770      	bx	lr

000064f2 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    64f2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    64f4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    64f6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    64fa:	404b      	eors	r3, r1
    p_reg->OUT = value;
    64fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6500:	2000      	movs	r0, #0
    6502:	4770      	bx	lr

00006504 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    6504:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    6508:	d007      	beq.n	651a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    650a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    650e:	d00d      	beq.n	652c <get_trigger+0x28>
    6510:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    6514:	d008      	beq.n	6528 <get_trigger+0x24>
    6516:	2001      	movs	r0, #1
}
    6518:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    651a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    651e:	d001      	beq.n	6524 <get_trigger+0x20>
    6520:	2005      	movs	r0, #5
    6522:	4770      	bx	lr
    6524:	2004      	movs	r0, #4
    6526:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6528:	2002      	movs	r0, #2
    652a:	4770      	bx	lr
    652c:	2003      	movs	r0, #3
    652e:	4770      	bx	lr

00006530 <gpio_nrfx_manage_callback>:
{
    6530:	b410      	push	{r4}
	return port->data;
    6532:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6534:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
    6538:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    653a:	b1fb      	cbz	r3, 657c <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    653c:	2000      	movs	r0, #0
    653e:	e00d      	b.n	655c <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    6540:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6542:	6063      	str	r3, [r4, #4]
	return list->tail;
    6544:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    6548:	4281      	cmp	r1, r0
    654a:	d112      	bne.n	6572 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    654c:	f8cc 3004 	str.w	r3, [ip, #4]
}
    6550:	e00f      	b.n	6572 <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
    6552:	f8cc 0004 	str.w	r0, [ip, #4]
}
    6556:	e00c      	b.n	6572 <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6558:	4618      	mov	r0, r3
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	b163      	cbz	r3, 6578 <gpio_nrfx_manage_callback+0x48>
    655e:	4299      	cmp	r1, r3
    6560:	d1fa      	bne.n	6558 <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
    6562:	2800      	cmp	r0, #0
    6564:	d0ec      	beq.n	6540 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    6566:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    6568:	6003      	str	r3, [r0, #0]
	return list->tail;
    656a:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
    656e:	4299      	cmp	r1, r3
    6570:	d0ef      	beq.n	6552 <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
    6572:	2300      	movs	r3, #0
    6574:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6576:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6578:	b903      	cbnz	r3, 657c <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
    657a:	b162      	cbz	r2, 6596 <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
    657c:	b172      	cbz	r2, 659c <gpio_nrfx_manage_callback+0x6c>
	return list->head;
    657e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
    6580:	600b      	str	r3, [r1, #0]
	list->head = node;
    6582:	6061      	str	r1, [r4, #4]
	return list->tail;
    6584:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
    6588:	b10b      	cbz	r3, 658e <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    658a:	2000      	movs	r0, #0
    658c:	e007      	b.n	659e <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
    658e:	f8cc 1004 	str.w	r1, [ip, #4]
    6592:	2000      	movs	r0, #0
}
    6594:	e003      	b.n	659e <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
    6596:	f06f 0015 	mvn.w	r0, #21
    659a:	e000      	b.n	659e <gpio_nrfx_manage_callback+0x6e>
	return 0;
    659c:	2000      	movs	r0, #0
}
    659e:	bc10      	pop	{r4}
    65a0:	4770      	bx	lr

000065a2 <nrfx_gpio_handler>:
{
    65a2:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    65a4:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    65a8:	0940      	lsrs	r0, r0, #5
    65aa:	f7fb fc9b 	bl	1ee4 <get_dev>
	if (port == NULL) {
    65ae:	b1d8      	cbz	r0, 65e8 <nrfx_gpio_handler+0x46>
    65b0:	4606      	mov	r6, r0
	return port->data;
    65b2:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    65b4:	2501      	movs	r5, #1
    65b6:	40a5      	lsls	r5, r4
	return list->head;
    65b8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    65ba:	b119      	cbz	r1, 65c4 <nrfx_gpio_handler+0x22>
    65bc:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    65be:	b149      	cbz	r1, 65d4 <nrfx_gpio_handler+0x32>
	return node->next;
    65c0:	680c      	ldr	r4, [r1, #0]
    65c2:	e007      	b.n	65d4 <nrfx_gpio_handler+0x32>
    65c4:	460c      	mov	r4, r1
    65c6:	e005      	b.n	65d4 <nrfx_gpio_handler+0x32>
    65c8:	b164      	cbz	r4, 65e4 <nrfx_gpio_handler+0x42>
    65ca:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    65cc:	b104      	cbz	r4, 65d0 <nrfx_gpio_handler+0x2e>
	return node->next;
    65ce:	6823      	ldr	r3, [r4, #0]
    65d0:	4621      	mov	r1, r4
    65d2:	461c      	mov	r4, r3
    65d4:	b141      	cbz	r1, 65e8 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    65d6:	688a      	ldr	r2, [r1, #8]
    65d8:	402a      	ands	r2, r5
    65da:	d0f5      	beq.n	65c8 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    65dc:	684b      	ldr	r3, [r1, #4]
    65de:	4630      	mov	r0, r6
    65e0:	4798      	blx	r3
    65e2:	e7f1      	b.n	65c8 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    65e4:	4623      	mov	r3, r4
    65e6:	e7f3      	b.n	65d0 <nrfx_gpio_handler+0x2e>
}
    65e8:	bd70      	pop	{r4, r5, r6, pc}

000065ea <deinit_twim>:
{
    65ea:	b510      	push	{r4, lr}
    65ec:	4603      	mov	r3, r0
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    65ee:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    65f0:	691c      	ldr	r4, [r3, #16]
	if (dev_data->twim_initialized) {
    65f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    65f6:	b903      	cbnz	r3, 65fa <deinit_twim+0x10>
}
    65f8:	bd10      	pop	{r4, pc}
		nrfx_twim_uninit(&dev_config->twim);
    65fa:	f7fd fe4f 	bl	429c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    65fe:	2300      	movs	r3, #0
    6600:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    6604:	e7f8      	b.n	65f8 <deinit_twim+0xe>

00006606 <i2c_nrfx_twim_configure>:
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    6606:	6903      	ldr	r3, [r0, #16]
	if (I2C_ADDR_10_BITS & i2c_config) {
    6608:	f011 0f01 	tst.w	r1, #1
    660c:	d119      	bne.n	6642 <i2c_nrfx_twim_configure+0x3c>
{
    660e:	b510      	push	{r4, lr}
    6610:	4604      	mov	r4, r0
	switch (I2C_SPEED_GET(i2c_config)) {
    6612:	f3c1 0142 	ubfx	r1, r1, #1, #3
    6616:	2901      	cmp	r1, #1
    6618:	d008      	beq.n	662c <i2c_nrfx_twim_configure+0x26>
    661a:	2902      	cmp	r1, #2
    661c:	d114      	bne.n	6648 <i2c_nrfx_twim_configure+0x42>
		frequency = NRF_TWIM_FREQ_400K;
    661e:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
	if (frequency != dev_data->twim_config.frequency) {
    6622:	6a99      	ldr	r1, [r3, #40]	; 0x28
    6624:	428a      	cmp	r2, r1
    6626:	d104      	bne.n	6632 <i2c_nrfx_twim_configure+0x2c>
	return 0;
    6628:	2000      	movs	r0, #0
    662a:	e00f      	b.n	664c <i2c_nrfx_twim_configure+0x46>
	switch (I2C_SPEED_GET(i2c_config)) {
    662c:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    6630:	e7f7      	b.n	6622 <i2c_nrfx_twim_configure+0x1c>
		dev_data->twim_config.frequency = frequency;
    6632:	629a      	str	r2, [r3, #40]	; 0x28
		deinit_twim(dev);
    6634:	4620      	mov	r0, r4
    6636:	f7ff ffd8 	bl	65ea <deinit_twim>
		return init_twim(dev);
    663a:	4620      	mov	r0, r4
    663c:	f7fb fd90 	bl	2160 <init_twim>
    6640:	e004      	b.n	664c <i2c_nrfx_twim_configure+0x46>
		return -EINVAL;
    6642:	f06f 0015 	mvn.w	r0, #21
}
    6646:	4770      	bx	lr
	switch (I2C_SPEED_GET(i2c_config)) {
    6648:	f06f 0015 	mvn.w	r0, #21
}
    664c:	bd10      	pop	{r4, pc}

0000664e <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    664e:	b530      	push	{r4, r5, lr}
    6650:	b083      	sub	sp, #12
    6652:	4604      	mov	r4, r0
    6654:	2200      	movs	r2, #0
    6656:	2101      	movs	r1, #1
    6658:	2003      	movs	r0, #3
    665a:	f7fa fdeb 	bl	1234 <z_arm_irq_priority_set>
    665e:	6863      	ldr	r3, [r4, #4]
    6660:	68dd      	ldr	r5, [r3, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    6662:	aa01      	add	r2, sp, #4
    6664:	2100      	movs	r1, #0
    6666:	4628      	mov	r0, r5
    6668:	f000 f88d 	bl	6786 <pinctrl_lookup_state>
	if (ret < 0) {
    666c:	2800      	cmp	r0, #0
    666e:	db05      	blt.n	667c <twim_0_init+0x2e>
	return pinctrl_apply_state_direct(config, state);
    6670:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6672:	682a      	ldr	r2, [r5, #0]
    6674:	7919      	ldrb	r1, [r3, #4]
    6676:	6818      	ldr	r0, [r3, #0]
    6678:	f7fc fb14 	bl	2ca4 <pinctrl_configure_pins>
    667c:	2800      	cmp	r0, #0
    667e:	db02      	blt.n	6686 <twim_0_init+0x38>
    6680:	4620      	mov	r0, r4
    6682:	f7fb fd6d 	bl	2160 <init_twim>
    6686:	b003      	add	sp, #12
    6688:	bd30      	pop	{r4, r5, pc}

0000668a <uart_nrfx_config_get>:
{
    668a:	460b      	mov	r3, r1
	struct uart_nrfx_data *data = dev->data;
    668c:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    668e:	e892 0003 	ldmia.w	r2, {r0, r1}
    6692:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6696:	2000      	movs	r0, #0
    6698:	4770      	bx	lr

0000669a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    669a:	4770      	bx	lr

0000669c <counter_sub>:
	return (a - b) & COUNTER_MAX;
    669c:	1a40      	subs	r0, r0, r1
}
    669e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    66a2:	4770      	bx	lr

000066a4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    66a4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	b29b      	uxth	r3, r3
    66ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    66b0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    66b4:	2200      	movs	r2, #0
    66b6:	601a      	str	r2, [r3, #0]
    66b8:	681b      	ldr	r3, [r3, #0]
}
    66ba:	4770      	bx	lr

000066bc <absolute_time_to_cc>:
}
    66bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    66c0:	4770      	bx	lr

000066c2 <full_int_lock>:
	__asm__ volatile(
    66c2:	f04f 0320 	mov.w	r3, #32
    66c6:	f3ef 8011 	mrs	r0, BASEPRI
    66ca:	f383 8812 	msr	BASEPRI_MAX, r3
    66ce:	f3bf 8f6f 	isb	sy
}
    66d2:	4770      	bx	lr

000066d4 <full_int_unlock>:
	__asm__ volatile(
    66d4:	f380 8811 	msr	BASEPRI, r0
    66d8:	f3bf 8f6f 	isb	sy
}
    66dc:	4770      	bx	lr

000066de <set_absolute_alarm>:
{
    66de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66e0:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    66e2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    66e6:	f7fc f899 	bl	281c <get_comparator>
    66ea:	4607      	mov	r7, r0
    66ec:	e019      	b.n	6722 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    66ee:	2013      	movs	r0, #19
    66f0:	f000 fdd0 	bl	7294 <z_impl_k_busy_wait>
}
    66f4:	e022      	b.n	673c <set_absolute_alarm+0x5e>
		event_clear(chan);
    66f6:	4630      	mov	r0, r6
    66f8:	f7ff ffd4 	bl	66a4 <event_clear>
		event_enable(chan);
    66fc:	4630      	mov	r0, r6
    66fe:	f7fc f895 	bl	282c <event_enable>
		set_comparator(chan, cc_val);
    6702:	4629      	mov	r1, r5
    6704:	4630      	mov	r0, r6
    6706:	f7fc f87f 	bl	2808 <set_comparator>
		now2 = counter();
    670a:	f7fc f8a3 	bl	2854 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    670e:	4284      	cmp	r4, r0
    6710:	d01e      	beq.n	6750 <set_absolute_alarm+0x72>
    6712:	1c81      	adds	r1, r0, #2
    6714:	4628      	mov	r0, r5
    6716:	f7ff ffc1 	bl	669c <counter_sub>
	} while ((now2 != now) &&
    671a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    671e:	d917      	bls.n	6750 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    6720:	462f      	mov	r7, r5
		now = counter();
    6722:	f7fc f897 	bl	2854 <counter>
    6726:	4604      	mov	r4, r0
		set_comparator(chan, now);
    6728:	4601      	mov	r1, r0
    672a:	4630      	mov	r0, r6
    672c:	f7fc f86c 	bl	2808 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    6730:	4621      	mov	r1, r4
    6732:	4638      	mov	r0, r7
    6734:	f7ff ffb2 	bl	669c <counter_sub>
    6738:	2801      	cmp	r0, #1
    673a:	d0d8      	beq.n	66ee <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    673c:	1ca7      	adds	r7, r4, #2
    673e:	4639      	mov	r1, r7
    6740:	4628      	mov	r0, r5
    6742:	f7ff ffab 	bl	669c <counter_sub>
    6746:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    674a:	d9d4      	bls.n	66f6 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    674c:	463d      	mov	r5, r7
    674e:	e7d2      	b.n	66f6 <set_absolute_alarm+0x18>
}
    6750:	4628      	mov	r0, r5
    6752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006754 <compare_set>:
{
    6754:	b5f0      	push	{r4, r5, r6, r7, lr}
    6756:	b083      	sub	sp, #12
    6758:	4604      	mov	r4, r0
    675a:	4617      	mov	r7, r2
    675c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    675e:	f7fc f87f 	bl	2860 <compare_int_lock>
    6762:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6764:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6766:	9301      	str	r3, [sp, #4]
    6768:	9b08      	ldr	r3, [sp, #32]
    676a:	9300      	str	r3, [sp, #0]
    676c:	463a      	mov	r2, r7
    676e:	462b      	mov	r3, r5
    6770:	4620      	mov	r0, r4
    6772:	f7fc f965 	bl	2a40 <compare_set_nolocks>
    6776:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6778:	4631      	mov	r1, r6
    677a:	4620      	mov	r0, r4
    677c:	f7fc f8d4 	bl	2928 <compare_int_unlock>
}
    6780:	4628      	mov	r0, r5
    6782:	b003      	add	sp, #12
    6784:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006786 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6786:	b410      	push	{r4}
	*state = &config->states[0];
    6788:	6843      	ldr	r3, [r0, #4]
    678a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    678c:	e001      	b.n	6792 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    678e:	3408      	adds	r4, #8
    6790:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6792:	6814      	ldr	r4, [r2, #0]
    6794:	7a03      	ldrb	r3, [r0, #8]
    6796:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    679a:	3b01      	subs	r3, #1
    679c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    67a0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    67a4:	429c      	cmp	r4, r3
    67a6:	d804      	bhi.n	67b2 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    67a8:	7963      	ldrb	r3, [r4, #5]
    67aa:	428b      	cmp	r3, r1
    67ac:	d1ef      	bne.n	678e <pinctrl_lookup_state+0x8>
			return 0;
    67ae:	2000      	movs	r0, #0
    67b0:	e001      	b.n	67b6 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    67b2:	f06f 0001 	mvn.w	r0, #1
}
    67b6:	bc10      	pop	{r4}
    67b8:	4770      	bx	lr

000067ba <nrf_pin_configure>:
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    67ba:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    67be:	d001      	beq.n	67c4 <nrf_pin_configure+0xa>
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    67c0:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    67c2:	2100      	movs	r1, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    67c4:	f3c0 1c81 	ubfx	ip, r0, #6, #2
    67c8:	f000 031f 	and.w	r3, r0, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    67cc:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    67d0:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    67d4:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    67d8:	4301      	orrs	r1, r0
    reg->PIN_CNF[pin_number] = cnf;
    67da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    67de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    67e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    67e6:	4770      	bx	lr

000067e8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    67e8:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    67ea:	2000      	movs	r0, #0
    67ec:	f7fb f8ae 	bl	194c <sys_arch_reboot>

000067f0 <nrf52_errata_12>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    67f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    67f4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    67f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    67fc:	d003      	beq.n	6806 <nrf52_errata_12+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    67fe:	2b06      	cmp	r3, #6
    6800:	d006      	beq.n	6810 <nrf52_errata_12+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6802:	2000      	movs	r0, #0
    6804:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6806:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    680a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    680e:	e7f6      	b.n	67fe <nrf52_errata_12+0xe>
                        return true;
    6810:	2001      	movs	r0, #1
    #endif
}
    6812:	4770      	bx	lr

00006814 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6814:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    6818:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    681c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    6820:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6824:	2a06      	cmp	r2, #6
    6826:	d001      	beq.n	682c <nrf52_errata_16+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    6828:	2000      	movs	r0, #0
    682a:	4770      	bx	lr
                switch(var2)
    682c:	3b03      	subs	r3, #3
    682e:	2b00      	cmp	r3, #0
    6830:	d804      	bhi.n	683c <nrf52_errata_16+0x28>
    6832:	e8df f003 	tbb	[pc, r3]
    6836:	01          	.byte	0x01
    6837:	00          	.byte	0x00
    6838:	2001      	movs	r0, #1
    683a:	4770      	bx	lr
                        return false;
    683c:	2000      	movs	r0, #0
    #endif
}
    683e:	4770      	bx	lr

00006840 <nrf52_errata_31>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6844:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6848:	f1b3 3fff 	cmp.w	r3, #4294967295
    684c:	d003      	beq.n	6856 <nrf52_errata_31+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    684e:	2b06      	cmp	r3, #6
    6850:	d006      	beq.n	6860 <nrf52_errata_31+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6852:	2000      	movs	r0, #0
    6854:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6856:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    685a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    685e:	e7f6      	b.n	684e <nrf52_errata_31+0xe>
                        return true;
    6860:	2001      	movs	r0, #1
    #endif
}
    6862:	4770      	bx	lr

00006864 <nrf52_errata_32>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6864:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    6868:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    686c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    6870:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6874:	2a06      	cmp	r2, #6
    6876:	d001      	beq.n	687c <nrf52_errata_32+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    6878:	2000      	movs	r0, #0
    687a:	4770      	bx	lr
                switch(var2)
    687c:	3b03      	subs	r3, #3
    687e:	2b00      	cmp	r3, #0
    6880:	d804      	bhi.n	688c <nrf52_errata_32+0x28>
    6882:	e8df f003 	tbb	[pc, r3]
    6886:	01          	.byte	0x01
    6887:	00          	.byte	0x00
    6888:	2001      	movs	r0, #1
    688a:	4770      	bx	lr
                        return false;
    688c:	2000      	movs	r0, #0
    #endif
}
    688e:	4770      	bx	lr

00006890 <nrf52_errata_36>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6894:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6898:	f1b3 3fff 	cmp.w	r3, #4294967295
    689c:	d003      	beq.n	68a6 <nrf52_errata_36+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    689e:	2b06      	cmp	r3, #6
    68a0:	d006      	beq.n	68b0 <nrf52_errata_36+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    68a2:	2000      	movs	r0, #0
    68a4:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    68a6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    68aa:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    68ae:	e7f6      	b.n	689e <nrf52_errata_36+0xe>
                        return true;
    68b0:	2001      	movs	r0, #1
    #endif
}
    68b2:	4770      	bx	lr

000068b4 <nrf52_errata_37>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    68b4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    68b8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    68bc:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    68c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    68c4:	2a06      	cmp	r2, #6
    68c6:	d001      	beq.n	68cc <nrf52_errata_37+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    68c8:	2000      	movs	r0, #0
    68ca:	4770      	bx	lr
                switch(var2)
    68cc:	3b03      	subs	r3, #3
    68ce:	2b00      	cmp	r3, #0
    68d0:	d804      	bhi.n	68dc <nrf52_errata_37+0x28>
    68d2:	e8df f003 	tbb	[pc, r3]
    68d6:	01          	.byte	0x01
    68d7:	00          	.byte	0x00
    68d8:	2001      	movs	r0, #1
    68da:	4770      	bx	lr
                        return false;
    68dc:	2000      	movs	r0, #0
    #endif
}
    68de:	4770      	bx	lr

000068e0 <nrf52_errata_57>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    68e0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    68e4:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    68e8:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    68ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    68f0:	2a06      	cmp	r2, #6
    68f2:	d001      	beq.n	68f8 <nrf52_errata_57+0x18>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    68f4:	2000      	movs	r0, #0
    68f6:	4770      	bx	lr
                switch(var2)
    68f8:	3b03      	subs	r3, #3
    68fa:	2b00      	cmp	r3, #0
    68fc:	d804      	bhi.n	6908 <nrf52_errata_57+0x28>
    68fe:	e8df f003 	tbb	[pc, r3]
    6902:	01          	.byte	0x01
    6903:	00          	.byte	0x00
    6904:	2001      	movs	r0, #1
    6906:	4770      	bx	lr
                        return false;
    6908:	2000      	movs	r0, #0
    #endif
}
    690a:	4770      	bx	lr

0000690c <nrf52_errata_66>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    690c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6910:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6914:	f1b3 3fff 	cmp.w	r3, #4294967295
    6918:	d007      	beq.n	692a <nrf52_errata_66+0x1e>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    691e:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6922:	2b06      	cmp	r3, #6
    6924:	d00a      	beq.n	693c <nrf52_errata_66+0x30>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6926:	2000      	movs	r0, #0
    6928:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    692a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
    692e:	f892 3fe0 	ldrb.w	r3, [r2, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6932:	f8d2 2fe8 	ldr.w	r2, [r2, #4072]	; 0xfe8
    6936:	f3c2 1203 	ubfx	r2, r2, #4, #4
    693a:	e7f2      	b.n	6922 <nrf52_errata_66+0x16>
                switch(var2)
    693c:	3a03      	subs	r2, #3
    693e:	2a01      	cmp	r2, #1
    6940:	d804      	bhi.n	694c <nrf52_errata_66+0x40>
    6942:	e8df f002 	tbb	[pc, r2]
    6946:	0101      	.short	0x0101
    6948:	2000      	movs	r0, #0
    694a:	4770      	bx	lr
                        return true;
    694c:	2001      	movs	r0, #1
    #endif
}
    694e:	4770      	bx	lr

00006950 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6950:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6954:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6958:	f1b3 3fff 	cmp.w	r3, #4294967295
    695c:	d003      	beq.n	6966 <nrf52_errata_108+0x16>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    695e:	2b06      	cmp	r3, #6
    6960:	d006      	beq.n	6970 <nrf52_errata_108+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6962:	2000      	movs	r0, #0
    6964:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6966:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    696a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    696e:	e7f6      	b.n	695e <nrf52_errata_108+0xe>
                        return true;
    6970:	2001      	movs	r0, #1
    #endif
}
    6972:	4770      	bx	lr

00006974 <nrf52_errata_136>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6978:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    697c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6980:	d003      	beq.n	698a <nrf52_errata_136+0x16>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6982:	2b06      	cmp	r3, #6
    6984:	d006      	beq.n	6994 <nrf52_errata_136+0x20>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6986:	2000      	movs	r0, #0
    6988:	4770      	bx	lr
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    698a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    698e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6992:	e7f6      	b.n	6982 <nrf52_errata_136+0xe>
                        return true;
    6994:	2001      	movs	r0, #1
    #endif
}
    6996:	4770      	bx	lr

00006998 <nrf52_errata_182>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    699c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    69a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    69a4:	2a06      	cmp	r2, #6
    69a6:	d001      	beq.n	69ac <nrf52_errata_182+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    69a8:	2000      	movs	r0, #0
    69aa:	4770      	bx	lr
                switch(var2)
    69ac:	2b05      	cmp	r3, #5
    69ae:	d803      	bhi.n	69b8 <nrf52_errata_182+0x20>
    69b0:	2b03      	cmp	r3, #3
    69b2:	d303      	bcc.n	69bc <nrf52_errata_182+0x24>
    69b4:	2000      	movs	r0, #0
    69b6:	4770      	bx	lr
                        return true;
    69b8:	2001      	movs	r0, #1
    69ba:	4770      	bx	lr
                        return true;
    69bc:	2001      	movs	r0, #1
    #endif
}
    69be:	4770      	bx	lr

000069c0 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    69c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    69c4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    69c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    69cc:	2a06      	cmp	r2, #6
    69ce:	d001      	beq.n	69d4 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    69d0:	2000      	movs	r0, #0
    69d2:	4770      	bx	lr
                switch(var2)
    69d4:	2b06      	cmp	r3, #6
    69d6:	d803      	bhi.n	69e0 <nrf52_configuration_249+0x20>
    69d8:	2b03      	cmp	r3, #3
    69da:	d303      	bcc.n	69e4 <nrf52_configuration_249+0x24>
    69dc:	2000      	movs	r0, #0
    69de:	4770      	bx	lr
                        return true;
    69e0:	2001      	movs	r0, #1
    69e2:	4770      	bx	lr
                        return true;
    69e4:	2001      	movs	r0, #1
    #endif
}
    69e6:	4770      	bx	lr

000069e8 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    69e8:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    69ea:	4780      	blx	r0
}
    69ec:	bd08      	pop	{r3, pc}

000069ee <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    69ee:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    69f0:	f000 fc50 	bl	7294 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    69f4:	bd08      	pop	{r3, pc}

000069f6 <clock_initial_lfclksrc_get>:
}
    69f6:	2000      	movs	r0, #0
    69f8:	4770      	bx	lr

000069fa <clock_lfclksrc_tweak>:
{
    69fa:	b538      	push	{r3, r4, r5, lr}
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    69fc:	6803      	ldr	r3, [r0, #0]
    69fe:	2b00      	cmp	r3, #0
    6a00:	bf0c      	ite	eq
    6a02:	2501      	moveq	r5, #1
    6a04:	2500      	movne	r5, #0
    if (!is_correct_clk)
    6a06:	d101      	bne.n	6a0c <clock_lfclksrc_tweak+0x12>
}
    6a08:	4628      	mov	r0, r5
    6a0a:	bd38      	pop	{r3, r4, r5, pc}
    6a0c:	4604      	mov	r4, r0
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6a0e:	2000      	movs	r0, #0
    6a10:	f7fc fc58 	bl	32c4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6a14:	f7ff ffef 	bl	69f6 <clock_initial_lfclksrc_get>
    6a18:	6020      	str	r0, [r4, #0]
    6a1a:	e7f5      	b.n	6a08 <clock_lfclksrc_tweak+0xe>

00006a1c <nrfx_clock_enable>:
{
    6a1c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6a1e:	2000      	movs	r0, #0
    6a20:	f7fa fbfa 	bl	1218 <arch_irq_is_enabled>
    6a24:	b130      	cbz	r0, 6a34 <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    6a26:	f7ff ffe6 	bl	69f6 <clock_initial_lfclksrc_get>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    6a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a2e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    6a32:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6a34:	f7fa fbce 	bl	11d4 <arch_irq_enable>
    6a38:	e7f5      	b.n	6a26 <nrfx_clock_enable+0xa>

00006a3a <nrfx_clock_start>:
    switch (domain)
    6a3a:	b110      	cbz	r0, 6a42 <nrfx_clock_start+0x8>
    6a3c:	2801      	cmp	r0, #1
    6a3e:	d041      	beq.n	6ac4 <nrfx_clock_start+0x8a>
    6a40:	4770      	bx	lr
{
    6a42:	b510      	push	{r4, lr}
    6a44:	b082      	sub	sp, #8
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6a4a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6a4e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6a52:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6a54:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6a58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6a5c:	d11c      	bne.n	6a98 <nrfx_clock_start+0x5e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a62:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6a66:	f013 0f01 	tst.w	r3, #1
    6a6a:	d119      	bne.n	6aa0 <nrfx_clock_start+0x66>
                    lfclksrc = clock_initial_lfclksrc_get();
    6a6c:	f7ff ffc3 	bl	69f6 <clock_initial_lfclksrc_get>
    6a70:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6a72:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6a76:	9b01      	ldr	r3, [sp, #4]
    6a78:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a7c:	2300      	movs	r3, #0
    6a7e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    6a82:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->INTENSET = mask;
    6a86:	2302      	movs	r3, #2
    6a88:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrfx_clock_anomaly_132();
    6a8c:	f7fc fbfa 	bl	3284 <nrfx_clock_anomaly_132>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a90:	2301      	movs	r3, #1
    6a92:	60a3      	str	r3, [r4, #8]
}
    6a94:	b002      	add	sp, #8
    6a96:	bd10      	pop	{r4, pc}
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    6a98:	a801      	add	r0, sp, #4
    6a9a:	f7ff ffae 	bl	69fa <clock_lfclksrc_tweak>
    6a9e:	e7e8      	b.n	6a72 <nrfx_clock_start+0x38>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6aa4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6aa8:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6aac:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6aae:	a801      	add	r0, sp, #4
    6ab0:	f7ff ffa3 	bl	69fa <clock_lfclksrc_tweak>
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d0dc      	beq.n	6a72 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    6ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6abc:	2202      	movs	r2, #2
    6abe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6ac2:	e7e7      	b.n	6a94 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ac8:	2200      	movs	r2, #0
    6aca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6ace:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6ad2:	2201      	movs	r2, #1
    6ad4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ad8:	601a      	str	r2, [r3, #0]
    6ada:	4770      	bx	lr

00006adc <nrfx_clock_stop>:
{
    6adc:	b508      	push	{r3, lr}
    clock_stop(domain);
    6ade:	f7fc fbf1 	bl	32c4 <clock_stop>
}
    6ae2:	bd08      	pop	{r3, pc}

00006ae4 <pin_is_task_output>:
{
    6ae4:	b510      	push	{r4, lr}
    6ae6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6ae8:	f7fc fd16 	bl	3518 <pin_is_output>
    6aec:	b128      	cbz	r0, 6afa <pin_is_task_output+0x16>
    6aee:	4620      	mov	r0, r4
    6af0:	f7fc fcfc 	bl	34ec <pin_in_use_by_te>
    6af4:	b118      	cbz	r0, 6afe <pin_is_task_output+0x1a>
    6af6:	2001      	movs	r0, #1
    6af8:	e000      	b.n	6afc <pin_is_task_output+0x18>
    6afa:	2000      	movs	r0, #0
}
    6afc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6afe:	2000      	movs	r0, #0
    6b00:	e7fc      	b.n	6afc <pin_is_task_output+0x18>

00006b02 <pin_is_input>:
{
    6b02:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6b04:	f7fc fd08 	bl	3518 <pin_is_output>
    6b08:	f080 0001 	eor.w	r0, r0, #1
}
    6b0c:	b2c0      	uxtb	r0, r0
    6b0e:	bd08      	pop	{r3, pc}

00006b10 <gpiote_polarity_to_trigger>:
}
    6b10:	4770      	bx	lr

00006b12 <gpiote_trigger_to_polarity>:
}
    6b12:	4770      	bx	lr

00006b14 <is_level>:
}
    6b14:	2803      	cmp	r0, #3
    6b16:	bf94      	ite	ls
    6b18:	2000      	movls	r0, #0
    6b1a:	2001      	movhi	r0, #1
    6b1c:	4770      	bx	lr

00006b1e <next_sense_cond_call_handler>:
{
    6b1e:	b570      	push	{r4, r5, r6, lr}
    6b20:	4604      	mov	r4, r0
    6b22:	460d      	mov	r5, r1
    6b24:	4616      	mov	r6, r2
    if (is_level(trigger))
    6b26:	4608      	mov	r0, r1
    6b28:	f7ff fff4 	bl	6b14 <is_level>
    6b2c:	b9b8      	cbnz	r0, 6b5e <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b2e:	2e02      	cmp	r6, #2
    6b30:	d037      	beq.n	6ba2 <next_sense_cond_call_handler+0x84>
    6b32:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    6b34:	f004 031f 	and.w	r3, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b38:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6b3c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6b40:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6b44:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6b48:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6b50:	2d03      	cmp	r5, #3
    6b52:	d02a      	beq.n	6baa <next_sense_cond_call_handler+0x8c>
    6b54:	2e02      	cmp	r6, #2
    6b56:	d026      	beq.n	6ba6 <next_sense_cond_call_handler+0x88>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6b58:	2e03      	cmp	r6, #3
    6b5a:	d02b      	beq.n	6bb4 <next_sense_cond_call_handler+0x96>
}
    6b5c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    6b5e:	4629      	mov	r1, r5
    6b60:	4620      	mov	r0, r4
    6b62:	f7fc fd2b 	bl	35bc <call_handler>
    *p_pin = pin_number & 0x1F;
    6b66:	f004 041f 	and.w	r4, r4, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6b6a:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
    6b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b76:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6b7a:	429e      	cmp	r6, r3
    6b7c:	d1ee      	bne.n	6b5c <next_sense_cond_call_handler+0x3e>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6b82:	4614      	mov	r4, r2
    6b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cnf &= ~to_update;
    6b88:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6b8c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6b90:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    cnf &= ~to_update;
    6b94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6b98:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6b9c:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
}
    6ba0:	e7dc      	b.n	6b5c <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6ba2:	2003      	movs	r0, #3
    6ba4:	e7c6      	b.n	6b34 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6ba6:	2d01      	cmp	r5, #1
    6ba8:	d1d6      	bne.n	6b58 <next_sense_cond_call_handler+0x3a>
            call_handler(pin, trigger);
    6baa:	4629      	mov	r1, r5
    6bac:	4620      	mov	r0, r4
    6bae:	f7fc fd05 	bl	35bc <call_handler>
}
    6bb2:	e7d3      	b.n	6b5c <next_sense_cond_call_handler+0x3e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6bb4:	2d02      	cmp	r5, #2
    6bb6:	d1d1      	bne.n	6b5c <next_sense_cond_call_handler+0x3e>
    6bb8:	e7f7      	b.n	6baa <next_sense_cond_call_handler+0x8c>

00006bba <latch_pending_read_and_check>:
    for (i = start_port; i < (start_port + length); i++)
    6bba:	4684      	mov	ip, r0
    6bbc:	2300      	movs	r3, #0
    6bbe:	e008      	b.n	6bd2 <latch_pending_read_and_check+0x18>
        *p_masks = gpio_regs[i]->LATCH;
    6bc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6bc4:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6bc8:	f84c 1b04 	str.w	r1, [ip], #4
        gpio_regs[i]->LATCH = *p_masks;
    6bcc:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6bd0:	3301      	adds	r3, #1
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d0f4      	beq.n	6bc0 <latch_pending_read_and_check+0x6>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6bd6:	2300      	movs	r3, #0
    6bd8:	b10b      	cbz	r3, 6bde <latch_pending_read_and_check+0x24>
    return false;
    6bda:	2000      	movs	r0, #0
    6bdc:	4770      	bx	lr
        if (latch[port_idx])
    6bde:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    6be2:	b90a      	cbnz	r2, 6be8 <latch_pending_read_and_check+0x2e>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6be4:	3301      	adds	r3, #1
    6be6:	e7f7      	b.n	6bd8 <latch_pending_read_and_check+0x1e>
            return true;
    6be8:	2001      	movs	r0, #1
}
    6bea:	4770      	bx	lr

00006bec <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    6bec:	7b0b      	ldrb	r3, [r1, #12]
    6bee:	2b03      	cmp	r3, #3
    6bf0:	d839      	bhi.n	6c66 <xfer_completeness_check+0x7a>
    6bf2:	e8df f003 	tbb	[pc, r3]
    6bf6:	312a      	.short	0x312a
    6bf8:	0216      	.short	0x0216
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    6bfa:	688b      	ldr	r3, [r1, #8]
    6bfc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    6c00:	d004      	beq.n	6c0c <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    6c02:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    6c06:	690a      	ldr	r2, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    6c08:	429a      	cmp	r2, r3
    6c0a:	d10f      	bne.n	6c2c <xfer_completeness_check+0x40>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    6c0c:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    6c0e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    6c12:	d12a      	bne.n	6c6a <xfer_completeness_check+0x7e>
    6c14:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
    6c18:	694a      	ldr	r2, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    6c1a:	429a      	cmp	r2, r3
    6c1c:	d106      	bne.n	6c2c <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6c1e:	2001      	movs	r0, #1
    6c20:	4770      	bx	lr
    6c22:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6c26:	690a      	ldr	r2, [r1, #16]
    6c28:	429a      	cmp	r2, r3
    6c2a:	d007      	beq.n	6c3c <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    6c2c:	2300      	movs	r3, #0
    6c2e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6c32:	2206      	movs	r2, #6
    6c34:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
    6c38:	4618      	mov	r0, r3
    6c3a:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    6c3c:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
    6c40:	694a      	ldr	r2, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    6c42:	429a      	cmp	r2, r3
    6c44:	d1f2      	bne.n	6c2c <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6c46:	2001      	movs	r0, #1
    6c48:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    6c4a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    6c4e:	690a      	ldr	r2, [r1, #16]
    6c50:	429a      	cmp	r2, r3
    6c52:	d1eb      	bne.n	6c2c <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6c54:	2001      	movs	r0, #1
    6c56:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
    6c58:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    6c5c:	690a      	ldr	r2, [r1, #16]
    6c5e:	429a      	cmp	r2, r3
    6c60:	d1e4      	bne.n	6c2c <xfer_completeness_check+0x40>
    bool transfer_complete = true;
    6c62:	2001      	movs	r0, #1
}
    6c64:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
    6c66:	2001      	movs	r0, #1
    6c68:	4770      	bx	lr
    bool transfer_complete = true;
    6c6a:	2001      	movs	r0, #1
    6c6c:	4770      	bx	lr

00006c6e <twim_pins_configure>:
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    6c6e:	7b8b      	ldrb	r3, [r1, #14]
    6c70:	b10b      	cbz	r3, 6c76 <twim_pins_configure+0x8>
    6c72:	7bca      	ldrb	r2, [r1, #15]
    6c74:	bb32      	cbnz	r2, 6cc4 <twim_pins_configure+0x56>
    if (!p_config->skip_gpio_cfg)
    6c76:	b9eb      	cbnz	r3, 6cb4 <twim_pins_configure+0x46>
{
    6c78:	b410      	push	{r4}
        TWIM_PIN_INIT(p_config->scl, drive);
    6c7a:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    6c7c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    6c80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6c84:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6c88:	f240 640c 	movw	r4, #1548	; 0x60c
    6c8c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    6c90:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
    6c92:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    6c96:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6c9a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    6c9e:	7bcb      	ldrb	r3, [r1, #15]
    6ca0:	b92b      	cbnz	r3, 6cae <twim_pins_configure+0x40>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    6ca2:	680a      	ldr	r2, [r1, #0]
    6ca4:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    6ca6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    6caa:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    6cae:	2001      	movs	r0, #1
    6cb0:	bc10      	pop	{r4}
    6cb2:	4770      	bx	lr
    if (!p_config->skip_psel_cfg)
    6cb4:	7bcb      	ldrb	r3, [r1, #15]
    6cb6:	b92b      	cbnz	r3, 6cc4 <twim_pins_configure+0x56>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    6cb8:	680a      	ldr	r2, [r1, #0]
    6cba:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    6cbc:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    6cc0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    6cc4:	2001      	movs	r0, #1
    6cc6:	4770      	bx	lr

00006cc8 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    6cc8:	f011 0f01 	tst.w	r1, #1
    6ccc:	d009      	beq.n	6ce2 <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    6cce:	2301      	movs	r3, #1
    6cd0:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    6cd4:	f011 0f02 	tst.w	r1, #2
    6cd8:	d007      	beq.n	6cea <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    6cda:	2301      	movs	r3, #1
    6cdc:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    6ce0:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    6ce2:	2300      	movs	r3, #0
    6ce4:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
    6ce8:	e7f4      	b.n	6cd4 <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    6cea:	2300      	movs	r3, #0
    6cec:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
    6cf0:	4770      	bx	lr

00006cf2 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    6cf2:	b508      	push	{r3, lr}
  _DoInit();
    6cf4:	f7fd fb80 	bl	43f8 <_DoInit>
}
    6cf8:	bd08      	pop	{r3, pc}

00006cfa <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6cfa:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6cfc:	f7ff fff9 	bl	6cf2 <SEGGER_RTT_Init>

	return 0;
}
    6d00:	2000      	movs	r0, #0
    6d02:	bd08      	pop	{r3, pc}

00006d04 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6d04:	b148      	cbz	r0, 6d1a <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6d06:	68c3      	ldr	r3, [r0, #12]
    6d08:	8818      	ldrh	r0, [r3, #0]
    6d0a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6d0e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    6d12:	bf14      	ite	ne
    6d14:	2000      	movne	r0, #0
    6d16:	2001      	moveq	r0, #1
    6d18:	4770      	bx	lr
		return false;
    6d1a:	2000      	movs	r0, #0
}
    6d1c:	4770      	bx	lr

00006d1e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d20:	4605      	mov	r5, r0
    6d22:	460e      	mov	r6, r1
	__asm__ volatile(
    6d24:	f04f 0320 	mov.w	r3, #32
    6d28:	f3ef 8711 	mrs	r7, BASEPRI
    6d2c:	f383 8812 	msr	BASEPRI_MAX, r3
    6d30:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6d34:	f7fe fc28 	bl	5588 <z_impl_z_current_get>
    6d38:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6d3a:	4631      	mov	r1, r6
    6d3c:	4628      	mov	r0, r5
    6d3e:	f7ff fd53 	bl	67e8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6d42:	f387 8811 	msr	BASEPRI, r7
    6d46:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6d4a:	4620      	mov	r0, r4
    6d4c:	f7fa fd36 	bl	17bc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006d52 <z_early_memset>:
{
    6d52:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    6d54:	f7ff fa42 	bl	61dc <memset>
}
    6d58:	bd08      	pop	{r3, pc}

00006d5a <z_early_memcpy>:
{
    6d5a:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    6d5c:	f7ff fa0f 	bl	617e <memcpy>
}
    6d60:	bd08      	pop	{r3, pc}

00006d62 <setup_thread_stack>:
{
    6d62:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6d64:	3207      	adds	r2, #7
    6d66:	f022 0207 	bic.w	r2, r2, #7
    6d6a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6d6e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6d72:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    6d76:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6d7a:	2200      	movs	r2, #0
    6d7c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    6d80:	18c8      	adds	r0, r1, r3
    6d82:	bc10      	pop	{r4}
    6d84:	4770      	bx	lr

00006d86 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6d86:	f3ef 8005 	mrs	r0, IPSR
}
    6d8a:	3800      	subs	r0, #0
    6d8c:	bf18      	it	ne
    6d8e:	2001      	movne	r0, #1
    6d90:	4770      	bx	lr

00006d92 <z_impl_k_thread_start>:
{
    6d92:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6d94:	f7fe f9ca 	bl	512c <z_sched_start>
}
    6d98:	bd08      	pop	{r3, pc}

00006d9a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    6d9a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6d9c:	2400      	movs	r4, #0
    6d9e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6da0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6da2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6da4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    6da6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    6da8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    6daa:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6dac:	bc10      	pop	{r4}
    6dae:	4770      	bx	lr

00006db0 <z_impl_k_thread_create>:
{
    6db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6db2:	b087      	sub	sp, #28
    6db4:	4604      	mov	r4, r0
    6db6:	9e12      	ldr	r6, [sp, #72]	; 0x48
    6db8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6dba:	2700      	movs	r7, #0
    6dbc:	9705      	str	r7, [sp, #20]
    6dbe:	9f10      	ldr	r7, [sp, #64]	; 0x40
    6dc0:	9704      	str	r7, [sp, #16]
    6dc2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6dc4:	9703      	str	r7, [sp, #12]
    6dc6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    6dc8:	9702      	str	r7, [sp, #8]
    6dca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6dcc:	9701      	str	r7, [sp, #4]
    6dce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6dd0:	9700      	str	r7, [sp, #0]
    6dd2:	f7fd fcb1 	bl	4738 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6dd6:	f1b5 3fff 	cmp.w	r5, #4294967295
    6dda:	bf08      	it	eq
    6ddc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6de0:	d102      	bne.n	6de8 <z_impl_k_thread_create+0x38>
}
    6de2:	4620      	mov	r0, r4
    6de4:	b007      	add	sp, #28
    6de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    6de8:	4632      	mov	r2, r6
    6dea:	462b      	mov	r3, r5
    6dec:	4620      	mov	r0, r4
    6dee:	f7fd fc95 	bl	471c <schedule_new_thread>
    6df2:	e7f6      	b.n	6de2 <z_impl_k_thread_create+0x32>

00006df4 <z_pm_save_idle_exit>:
{
    6df4:	b508      	push	{r3, lr}
	pm_system_resume();
    6df6:	f7fa f84d 	bl	e94 <pm_system_resume>
	sys_clock_idle_exit();
    6dfa:	f7ff fc4e 	bl	669a <sys_clock_idle_exit>
}
    6dfe:	bd08      	pop	{r3, pc}

00006e00 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6e00:	4288      	cmp	r0, r1
    6e02:	da00      	bge.n	6e06 <new_prio_for_inheritance+0x6>
    6e04:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6e06:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    6e0a:	db01      	blt.n	6e10 <new_prio_for_inheritance+0x10>
    6e0c:	4608      	mov	r0, r1
    6e0e:	4770      	bx	lr
    6e10:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    6e14:	4770      	bx	lr

00006e16 <adjust_owner_prio>:
{
    6e16:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    6e18:	6880      	ldr	r0, [r0, #8]
    6e1a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6e1e:	428b      	cmp	r3, r1
    6e20:	d101      	bne.n	6e26 <adjust_owner_prio+0x10>
	return false;
    6e22:	2000      	movs	r0, #0
}
    6e24:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    6e26:	f7fe f9cf 	bl	51c8 <z_set_prio>
    6e2a:	e7fb      	b.n	6e24 <adjust_owner_prio+0xe>

00006e2c <z_impl_k_mutex_init>:
{
    6e2c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6e2e:	2000      	movs	r0, #0
    6e30:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6e32:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6e34:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6e36:	605b      	str	r3, [r3, #4]
}
    6e38:	4770      	bx	lr

00006e3a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6e3a:	b13a      	cbz	r2, 6e4c <z_impl_k_sem_init+0x12>
    6e3c:	428a      	cmp	r2, r1
    6e3e:	d308      	bcc.n	6e52 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    6e40:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    6e42:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    6e44:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    6e46:	6040      	str	r0, [r0, #4]
	return 0;
    6e48:	2000      	movs	r0, #0
    6e4a:	4770      	bx	lr
		return -EINVAL;
    6e4c:	f06f 0015 	mvn.w	r0, #21
    6e50:	4770      	bx	lr
    6e52:	f06f 0015 	mvn.w	r0, #21
}
    6e56:	4770      	bx	lr

00006e58 <k_work_submit_to_queue>:
{
    6e58:	b530      	push	{r4, r5, lr}
    6e5a:	b083      	sub	sp, #12
    6e5c:	9001      	str	r0, [sp, #4]
    6e5e:	4608      	mov	r0, r1
	__asm__ volatile(
    6e60:	f04f 0320 	mov.w	r3, #32
    6e64:	f3ef 8511 	mrs	r5, BASEPRI
    6e68:	f383 8812 	msr	BASEPRI_MAX, r3
    6e6c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    6e70:	a901      	add	r1, sp, #4
    6e72:	f7fd fe47 	bl	4b04 <submit_to_queue_locked>
    6e76:	4604      	mov	r4, r0
	__asm__ volatile(
    6e78:	f385 8811 	msr	BASEPRI, r5
    6e7c:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    6e80:	2800      	cmp	r0, #0
    6e82:	dc02      	bgt.n	6e8a <k_work_submit_to_queue+0x32>
}
    6e84:	4620      	mov	r0, r4
    6e86:	b003      	add	sp, #12
    6e88:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
    6e8a:	f04f 0320 	mov.w	r3, #32
    6e8e:	f3ef 8011 	mrs	r0, BASEPRI
    6e92:	f383 8812 	msr	BASEPRI_MAX, r3
    6e96:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6e9a:	f000 f82f 	bl	6efc <z_reschedule_irqlock>
	return ret;
    6e9e:	e7f1      	b.n	6e84 <k_work_submit_to_queue+0x2c>

00006ea0 <thread_active_elsewhere>:
}
    6ea0:	2000      	movs	r0, #0
    6ea2:	4770      	bx	lr

00006ea4 <pended_on_thread>:
}
    6ea4:	6880      	ldr	r0, [r0, #8]
    6ea6:	4770      	bx	lr

00006ea8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    6ea8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    6eac:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    6eb0:	4283      	cmp	r3, r0
    6eb2:	d001      	beq.n	6eb8 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6eb4:	1ac0      	subs	r0, r0, r3
    6eb6:	4770      	bx	lr
	return 0;
    6eb8:	2000      	movs	r0, #0
}
    6eba:	4770      	bx	lr

00006ebc <z_unpend_thread_no_timeout>:
{
    6ebc:	b538      	push	{r3, r4, r5, lr}
    6ebe:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6ec0:	2300      	movs	r3, #0
    6ec2:	f04f 0220 	mov.w	r2, #32
    6ec6:	f3ef 8511 	mrs	r5, BASEPRI
    6eca:	f382 8812 	msr	BASEPRI_MAX, r2
    6ece:	f3bf 8f6f 	isb	sy
    6ed2:	e010      	b.n	6ef6 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6ed4:	4620      	mov	r0, r4
    6ed6:	f7ff ffe5 	bl	6ea4 <pended_on_thread>
    6eda:	4621      	mov	r1, r4
    6edc:	f000 f823 	bl	6f26 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6ee0:	7b63      	ldrb	r3, [r4, #13]
    6ee2:	f023 0302 	bic.w	r3, r3, #2
    6ee6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6ee8:	2300      	movs	r3, #0
    6eea:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    6eec:	f385 8811 	msr	BASEPRI, r5
    6ef0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6ef4:	2301      	movs	r3, #1
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d0ec      	beq.n	6ed4 <z_unpend_thread_no_timeout+0x18>
}
    6efa:	bd38      	pop	{r3, r4, r5, pc}

00006efc <z_reschedule_irqlock>:
{
    6efc:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6efe:	4603      	mov	r3, r0
    6f00:	b920      	cbnz	r0, 6f0c <z_reschedule_irqlock+0x10>
    6f02:	f3ef 8205 	mrs	r2, IPSR
    6f06:	b942      	cbnz	r2, 6f1a <z_reschedule_irqlock+0x1e>
    6f08:	2201      	movs	r2, #1
    6f0a:	e000      	b.n	6f0e <z_reschedule_irqlock+0x12>
    6f0c:	2200      	movs	r2, #0
	if (resched(key)) {
    6f0e:	b932      	cbnz	r2, 6f1e <z_reschedule_irqlock+0x22>
    6f10:	f383 8811 	msr	BASEPRI, r3
    6f14:	f3bf 8f6f 	isb	sy
}
    6f18:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6f1a:	2200      	movs	r2, #0
    6f1c:	e7f7      	b.n	6f0e <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6f1e:	4618      	mov	r0, r3
    6f20:	f7fa f9be 	bl	12a0 <arch_swap>
	return ret;
    6f24:	e7f8      	b.n	6f18 <z_reschedule_irqlock+0x1c>

00006f26 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6f26:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6f28:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6f2a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6f2c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6f2e:	2300      	movs	r3, #0
    6f30:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    6f32:	604b      	str	r3, [r1, #4]
}
    6f34:	4770      	bx	lr

00006f36 <z_priq_dumb_best>:
{
    6f36:	4603      	mov	r3, r0
	return list->head == list;
    6f38:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f3a:	4283      	cmp	r3, r0
    6f3c:	d000      	beq.n	6f40 <z_priq_dumb_best+0xa>
}
    6f3e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6f40:	2000      	movs	r0, #0
	return thread;
    6f42:	e7fc      	b.n	6f3e <z_priq_dumb_best+0x8>

00006f44 <z_ready_thread>:
{
    6f44:	b538      	push	{r3, r4, r5, lr}
    6f46:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6f48:	2300      	movs	r3, #0
	__asm__ volatile(
    6f4a:	f04f 0220 	mov.w	r2, #32
    6f4e:	f3ef 8511 	mrs	r5, BASEPRI
    6f52:	f382 8812 	msr	BASEPRI_MAX, r2
    6f56:	f3bf 8f6f 	isb	sy
    6f5a:	e004      	b.n	6f66 <z_ready_thread+0x22>
	__asm__ volatile(
    6f5c:	f385 8811 	msr	BASEPRI, r5
    6f60:	f3bf 8f6f 	isb	sy
    6f64:	2301      	movs	r3, #1
    6f66:	b943      	cbnz	r3, 6f7a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6f68:	4620      	mov	r0, r4
    6f6a:	f7ff ff99 	bl	6ea0 <thread_active_elsewhere>
    6f6e:	2800      	cmp	r0, #0
    6f70:	d1f4      	bne.n	6f5c <z_ready_thread+0x18>
			ready_thread(thread);
    6f72:	4620      	mov	r0, r4
    6f74:	f7fe f89a 	bl	50ac <ready_thread>
    6f78:	e7f0      	b.n	6f5c <z_ready_thread+0x18>
}
    6f7a:	bd38      	pop	{r3, r4, r5, pc}

00006f7c <z_thread_timeout>:
{
    6f7c:	b570      	push	{r4, r5, r6, lr}
    6f7e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6f80:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    6f84:	2300      	movs	r3, #0
	__asm__ volatile(
    6f86:	f04f 0220 	mov.w	r2, #32
    6f8a:	f3ef 8611 	mrs	r6, BASEPRI
    6f8e:	f382 8812 	msr	BASEPRI_MAX, r2
    6f92:	f3bf 8f6f 	isb	sy
    6f96:	e011      	b.n	6fbc <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6f98:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6f9c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    6fa0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6fa4:	f023 0310 	bic.w	r3, r3, #16
    6fa8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6fac:	4628      	mov	r0, r5
    6fae:	f7fe f87d 	bl	50ac <ready_thread>
	__asm__ volatile(
    6fb2:	f386 8811 	msr	BASEPRI, r6
    6fb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6fba:	2301      	movs	r3, #1
    6fbc:	b9ab      	cbnz	r3, 6fea <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6fbe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6fc2:	f013 0f28 	tst.w	r3, #40	; 0x28
    6fc6:	d1f4      	bne.n	6fb2 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    6fc8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d0e3      	beq.n	6f98 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6fd0:	4628      	mov	r0, r5
    6fd2:	f7ff ff67 	bl	6ea4 <pended_on_thread>
    6fd6:	4629      	mov	r1, r5
    6fd8:	f7ff ffa5 	bl	6f26 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6fdc:	7b6b      	ldrb	r3, [r5, #13]
    6fde:	f023 0302 	bic.w	r3, r3, #2
    6fe2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    6fe4:	2300      	movs	r3, #0
    6fe6:	60ab      	str	r3, [r5, #8]
}
    6fe8:	e7d6      	b.n	6f98 <z_thread_timeout+0x1c>
}
    6fea:	bd70      	pop	{r4, r5, r6, pc}

00006fec <add_to_waitq_locked>:
{
    6fec:	b570      	push	{r4, r5, r6, lr}
    6fee:	4605      	mov	r5, r0
    6ff0:	460e      	mov	r6, r1
	unready_thread(thread);
    6ff2:	f7fe f8b9 	bl	5168 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6ff6:	7b6b      	ldrb	r3, [r5, #13]
    6ff8:	f043 0302 	orr.w	r3, r3, #2
    6ffc:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6ffe:	b1b6      	cbz	r6, 702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
		thread->base.pended_on = wait_q;
    7000:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    7002:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7004:	42a6      	cmp	r6, r4
    7006:	d019      	beq.n	703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7008:	b164      	cbz	r4, 7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
		if (z_sched_prio_cmp(thread, t) > 0) {
    700a:	4621      	mov	r1, r4
    700c:	4628      	mov	r0, r5
    700e:	f7ff ff4b 	bl	6ea8 <z_sched_prio_cmp>
    7012:	2800      	cmp	r0, #0
    7014:	dc0c      	bgt.n	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7016:	b12c      	cbz	r4, 7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
	return (node == list->tail) ? NULL : node->next;
    7018:	6873      	ldr	r3, [r6, #4]
    701a:	429c      	cmp	r4, r3
    701c:	d002      	beq.n	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    701e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7020:	2c00      	cmp	r4, #0
    7022:	d1f1      	bne.n	7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
	sys_dnode_t *const tail = list->tail;
    7024:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    7026:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    7028:	606b      	str	r3, [r5, #4]
	tail->next = node;
    702a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    702c:	6075      	str	r5, [r6, #4]
}
    702e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    7030:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7032:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7034:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7036:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7038:	6065      	str	r5, [r4, #4]
}
    703a:	e7f8      	b.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    703c:	2400      	movs	r4, #0
    703e:	e7e3      	b.n	7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>

00007040 <pend>:
{
    7040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7044:	4605      	mov	r5, r0
    7046:	460e      	mov	r6, r1
    7048:	4691      	mov	r9, r2
    704a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    704c:	2400      	movs	r4, #0
	__asm__ volatile(
    704e:	f04f 0320 	mov.w	r3, #32
    7052:	f3ef 8711 	mrs	r7, BASEPRI
    7056:	f383 8812 	msr	BASEPRI_MAX, r3
    705a:	f3bf 8f6f 	isb	sy
    705e:	e008      	b.n	7072 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
    7060:	4631      	mov	r1, r6
    7062:	4628      	mov	r0, r5
    7064:	f7ff ffc2 	bl	6fec <add_to_waitq_locked>
	__asm__ volatile(
    7068:	f387 8811 	msr	BASEPRI, r7
    706c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7070:	2401      	movs	r4, #1
    7072:	2c00      	cmp	r4, #0
    7074:	d0f4      	beq.n	7060 <pend+0x20>
	add_thread_timeout(thread, timeout);
    7076:	464a      	mov	r2, r9
    7078:	4643      	mov	r3, r8
    707a:	4628      	mov	r0, r5
    707c:	f7fd feaa 	bl	4dd4 <add_thread_timeout>
}
    7080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007084 <z_unpend1_no_timeout>:
{
    7084:	b570      	push	{r4, r5, r6, lr}
    7086:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    7088:	2300      	movs	r3, #0
	__asm__ volatile(
    708a:	f04f 0220 	mov.w	r2, #32
    708e:	f3ef 8611 	mrs	r6, BASEPRI
    7092:	f382 8812 	msr	BASEPRI_MAX, r2
    7096:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    709a:	461c      	mov	r4, r3
    709c:	e004      	b.n	70a8 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    709e:	f386 8811 	msr	BASEPRI, r6
    70a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    70a6:	2301      	movs	r3, #1
    70a8:	b98b      	cbnz	r3, 70ce <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    70aa:	4628      	mov	r0, r5
    70ac:	f7ff ff43 	bl	6f36 <z_priq_dumb_best>
		if (thread != NULL) {
    70b0:	4604      	mov	r4, r0
    70b2:	2800      	cmp	r0, #0
    70b4:	d0f3      	beq.n	709e <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    70b6:	f7ff fef5 	bl	6ea4 <pended_on_thread>
    70ba:	4621      	mov	r1, r4
    70bc:	f7ff ff33 	bl	6f26 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    70c0:	7b63      	ldrb	r3, [r4, #13]
    70c2:	f023 0302 	bic.w	r3, r3, #2
    70c6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    70c8:	2300      	movs	r3, #0
    70ca:	60a3      	str	r3, [r4, #8]
}
    70cc:	e7e7      	b.n	709e <z_unpend1_no_timeout+0x1a>
}
    70ce:	4620      	mov	r0, r4
    70d0:	bd70      	pop	{r4, r5, r6, pc}

000070d2 <z_unpend_first_thread>:
{
    70d2:	b570      	push	{r4, r5, r6, lr}
    70d4:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    70d6:	2300      	movs	r3, #0
	__asm__ volatile(
    70d8:	f04f 0220 	mov.w	r2, #32
    70dc:	f3ef 8611 	mrs	r6, BASEPRI
    70e0:	f382 8812 	msr	BASEPRI_MAX, r2
    70e4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    70e8:	461c      	mov	r4, r3
    70ea:	e004      	b.n	70f6 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    70ec:	f386 8811 	msr	BASEPRI, r6
    70f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    70f4:	2301      	movs	r3, #1
    70f6:	b9ab      	cbnz	r3, 7124 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    70f8:	4628      	mov	r0, r5
    70fa:	f7ff ff1c 	bl	6f36 <z_priq_dumb_best>
		if (thread != NULL) {
    70fe:	4604      	mov	r4, r0
    7100:	2800      	cmp	r0, #0
    7102:	d0f3      	beq.n	70ec <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7104:	f7ff fece 	bl	6ea4 <pended_on_thread>
    7108:	4621      	mov	r1, r4
    710a:	f7ff ff0c 	bl	6f26 <z_priq_dumb_remove>
    710e:	7b63      	ldrb	r3, [r4, #13]
    7110:	f023 0302 	bic.w	r3, r3, #2
    7114:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7116:	2300      	movs	r3, #0
    7118:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    711a:	f104 0018 	add.w	r0, r4, #24
    711e:	f000 f855 	bl	71cc <z_abort_timeout>
    7122:	e7e3      	b.n	70ec <z_unpend_first_thread+0x1a>
}
    7124:	4620      	mov	r0, r4
    7126:	bd70      	pop	{r4, r5, r6, pc}

00007128 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    7128:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    712a:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    712c:	6083      	str	r3, [r0, #8]
}
    712e:	4770      	bx	lr

00007130 <z_sched_wake>:
{
    7130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7134:	4605      	mov	r5, r0
    7136:	4688      	mov	r8, r1
    7138:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    713a:	2300      	movs	r3, #0
	__asm__ volatile(
    713c:	f04f 0220 	mov.w	r2, #32
    7140:	f3ef 8611 	mrs	r6, BASEPRI
    7144:	f382 8812 	msr	BASEPRI_MAX, r2
    7148:	f3bf 8f6f 	isb	sy
	bool ret = false;
    714c:	4699      	mov	r9, r3
    714e:	e004      	b.n	715a <z_sched_wake+0x2a>
	__asm__ volatile(
    7150:	f386 8811 	msr	BASEPRI, r6
    7154:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7158:	2301      	movs	r3, #1
    715a:	b9eb      	cbnz	r3, 7198 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    715c:	4628      	mov	r0, r5
    715e:	f7ff feea 	bl	6f36 <z_priq_dumb_best>
		if (thread != NULL) {
    7162:	4604      	mov	r4, r0
    7164:	2800      	cmp	r0, #0
    7166:	d0f3      	beq.n	7150 <z_sched_wake+0x20>
    7168:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    716c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    716e:	f7ff fe99 	bl	6ea4 <pended_on_thread>
    7172:	4621      	mov	r1, r4
    7174:	f7ff fed7 	bl	6f26 <z_priq_dumb_remove>
    7178:	7b63      	ldrb	r3, [r4, #13]
    717a:	f023 0302 	bic.w	r3, r3, #2
    717e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7180:	2300      	movs	r3, #0
    7182:	60a3      	str	r3, [r4, #8]
    7184:	f104 0018 	add.w	r0, r4, #24
    7188:	f000 f820 	bl	71cc <z_abort_timeout>
			ready_thread(thread);
    718c:	4620      	mov	r0, r4
    718e:	f7fd ff8d 	bl	50ac <ready_thread>
			ret = true;
    7192:	f04f 0901 	mov.w	r9, #1
    7196:	e7db      	b.n	7150 <z_sched_wake+0x20>
}
    7198:	4648      	mov	r0, r9
    719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000719e <remove_timeout>:
{
    719e:	b510      	push	{r4, lr}
    71a0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    71a2:	f7fe fa57 	bl	5654 <next>
    71a6:	b148      	cbz	r0, 71bc <remove_timeout+0x1e>
    71a8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    71aa:	6920      	ldr	r0, [r4, #16]
    71ac:	6961      	ldr	r1, [r4, #20]
    71ae:	6913      	ldr	r3, [r2, #16]
    71b0:	181b      	adds	r3, r3, r0
    71b2:	6950      	ldr	r0, [r2, #20]
    71b4:	eb41 0100 	adc.w	r1, r1, r0
    71b8:	6113      	str	r3, [r2, #16]
    71ba:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    71bc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    71be:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    71c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    71c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    71c4:	2300      	movs	r3, #0
    71c6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    71c8:	6063      	str	r3, [r4, #4]
}
    71ca:	bd10      	pop	{r4, pc}

000071cc <z_abort_timeout>:
{
    71cc:	b570      	push	{r4, r5, r6, lr}
    71ce:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    71d0:	2300      	movs	r3, #0
	__asm__ volatile(
    71d2:	f04f 0220 	mov.w	r2, #32
    71d6:	f3ef 8611 	mrs	r6, BASEPRI
    71da:	f382 8812 	msr	BASEPRI_MAX, r2
    71de:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    71e2:	f06f 0015 	mvn.w	r0, #21
    71e6:	e004      	b.n	71f2 <z_abort_timeout+0x26>
	__asm__ volatile(
    71e8:	f386 8811 	msr	BASEPRI, r6
    71ec:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    71f0:	2301      	movs	r3, #1
    71f2:	461d      	mov	r5, r3
    71f4:	b93b      	cbnz	r3, 7206 <z_abort_timeout+0x3a>
	return node->next != NULL;
    71f6:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    71f8:	2b00      	cmp	r3, #0
    71fa:	d0f5      	beq.n	71e8 <z_abort_timeout+0x1c>
			remove_timeout(to);
    71fc:	4620      	mov	r0, r4
    71fe:	f7ff ffce 	bl	719e <remove_timeout>
			ret = 0;
    7202:	4628      	mov	r0, r5
    7204:	e7f0      	b.n	71e8 <z_abort_timeout+0x1c>
}
    7206:	bd70      	pop	{r4, r5, r6, pc}

00007208 <z_get_next_timeout_expiry>:
{
    7208:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    720a:	2300      	movs	r3, #0
	__asm__ volatile(
    720c:	f04f 0220 	mov.w	r2, #32
    7210:	f3ef 8411 	mrs	r4, BASEPRI
    7214:	f382 8812 	msr	BASEPRI_MAX, r2
    7218:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    721c:	f04f 30ff 	mov.w	r0, #4294967295
    7220:	e006      	b.n	7230 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    7222:	f7fe fa2f 	bl	5684 <next_timeout>
	__asm__ volatile(
    7226:	f384 8811 	msr	BASEPRI, r4
    722a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    722e:	2301      	movs	r3, #1
    7230:	2b00      	cmp	r3, #0
    7232:	d0f6      	beq.n	7222 <z_get_next_timeout_expiry+0x1a>
}
    7234:	bd10      	pop	{r4, pc}

00007236 <z_set_timeout_expiry>:
{
    7236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7238:	4605      	mov	r5, r0
    723a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    723c:	2300      	movs	r3, #0
	__asm__ volatile(
    723e:	f04f 0220 	mov.w	r2, #32
    7242:	f3ef 8611 	mrs	r6, BASEPRI
    7246:	f382 8812 	msr	BASEPRI_MAX, r2
    724a:	f3bf 8f6f 	isb	sy
    724e:	e00a      	b.n	7266 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    7250:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    7252:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7256:	2801      	cmp	r0, #1
    7258:	dd00      	ble.n	725c <z_set_timeout_expiry+0x26>
    725a:	b97c      	cbnz	r4, 727c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    725c:	f386 8811 	msr	BASEPRI, r6
    7260:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7264:	2301      	movs	r3, #1
    7266:	461c      	mov	r4, r3
    7268:	b97b      	cbnz	r3, 728a <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    726a:	f7fe fa0b 	bl	5684 <next_timeout>
			      || (ticks <= next_to);
    726e:	f1b0 3fff 	cmp.w	r0, #4294967295
    7272:	d0ed      	beq.n	7250 <z_set_timeout_expiry+0x1a>
    7274:	42a8      	cmp	r0, r5
    7276:	dbec      	blt.n	7252 <z_set_timeout_expiry+0x1c>
    7278:	2401      	movs	r4, #1
    727a:	e7ea      	b.n	7252 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    727c:	4639      	mov	r1, r7
    727e:	42a8      	cmp	r0, r5
    7280:	bfa8      	it	ge
    7282:	4628      	movge	r0, r5
    7284:	f7fb fcd2 	bl	2c2c <sys_clock_set_timeout>
    7288:	e7e8      	b.n	725c <z_set_timeout_expiry+0x26>
}
    728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000728c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    728c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    728e:	f7fe fb0d 	bl	58ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7292:	bd08      	pop	{r3, pc}

00007294 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7294:	b900      	cbnz	r0, 7298 <z_impl_k_busy_wait+0x4>
    7296:	4770      	bx	lr
{
    7298:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    729a:	f7fa fb6d 	bl	1978 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    729e:	bd08      	pop	{r3, pc}

000072a0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    72a0:	b510      	push	{r4, lr}
    72a2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    72a4:	f7ff ff92 	bl	71cc <z_abort_timeout>

	if (inactive) {
    72a8:	b9a0      	cbnz	r0, 72d4 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    72aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    72ac:	b10b      	cbz	r3, 72b2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    72ae:	4620      	mov	r0, r4
    72b0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    72b2:	f104 0018 	add.w	r0, r4, #24
    72b6:	f7ff fee5 	bl	7084 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    72ba:	b158      	cbz	r0, 72d4 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    72bc:	f7ff fe42 	bl	6f44 <z_ready_thread>
	__asm__ volatile(
    72c0:	f04f 0320 	mov.w	r3, #32
    72c4:	f3ef 8011 	mrs	r0, BASEPRI
    72c8:	f383 8812 	msr	BASEPRI_MAX, r3
    72cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    72d0:	f7ff fe14 	bl	6efc <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    72d4:	bd10      	pop	{r4, pc}

000072d6 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
    72d6:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
    72d8:	4770      	bx	lr

000072da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    72da:	4770      	bx	lr

000072dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    72dc:	f7fb be74 	b.w	2fc8 <SystemInit>
